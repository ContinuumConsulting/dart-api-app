
[
  {
    "kind": "library",
    "name": "args",
    "id": "file:///Users/jacobr/src/dart3/dart/pkg/args/lib/args.dart",
    "children": [
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ArgResults",
        "id": "ArgResults",
        "children": [
          {
            "ref": {
              "name": "Collection",
              "refId": "Collection"
            },
            "kind": "property",
            "name": "options",
            "id": "options",
            "comment": "Get the names of the options as a [Collection].\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "method",
            "name": "[]",
            "id": "[]1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "comment": "Gets the parsed command-line option named [name].\n"
          },
          {
            "returnType": {
              "name": "Collection",
              "refId": "Collection"
            },
            "kind": "method",
            "name": "options",
            "id": "options0()",
            "comment": "Get the names of the options as a [Collection].\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "ArgResults",
            "id": "ArgResults2()",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "_options",
                "id": "_options"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "rest",
                "id": "rest"
              }
            ],
            "comment": "Creates a new [ArgResults].\n"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map"
            },
            "kind": "property",
            "name": "_options",
            "id": "_options"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List"
            },
            "kind": "property",
            "name": "rest",
            "id": "rest"
          }
        ],
        "comment": "\nThe results of parsing a series of command line arguments using\n[ArgParser.parse()]. Includes the parsed options and any remaining unparsed\ncommand line arguments.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ArgParser",
        "id": "ArgParser",
        "children": [
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "addFlag",
            "id": "addFlag6()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "abbr",
                "id": "abbr"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "help",
                "id": "help"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "defaultsTo",
                "id": "defaultsTo"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "negatable",
                "id": "negatable"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "callback",
                "id": "callback"
              }
            ],
            "comment": "\nDefines a flag. Throws an [ArgumentError] if:\n\n* There is already an option named [name].\n* There is already an option using abbreviation [abbr].\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "addOption",
            "id": "addOption8()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "abbr",
                "id": "abbr"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "help",
                "id": "help"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "allowed",
                "id": "allowed"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "allowedHelp",
                "id": "allowedHelp"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "defaultsTo",
                "id": "defaultsTo"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "callback",
                "id": "callback"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "allowMultiple",
                "id": "allowMultiple"
              }
            ],
            "comment": "\nDefines a value-taking option. Throws an [ArgumentError] if:\n\n* There is already an option with name [name].\n* There is already an option using abbreviation [abbr].\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_addOption",
            "id": "_addOption10()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "abbr",
                "id": "abbr"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "help",
                "id": "help"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "allowed",
                "id": "allowed"
              },
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "allowedHelp",
                "id": "allowedHelp"
              },
              {
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "defaultsTo",
                "id": "defaultsTo"
              },
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "callback",
                "id": "callback"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "isFlag",
                "id": "isFlag"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "negatable",
                "id": "negatable"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "allowMultiple",
                "id": "allowMultiple"
              }
            ]
          },
          {
            "returnType": {
              "name": "ArgResults",
              "refId": "ArgResults"
            },
            "kind": "method",
            "name": "parse",
            "id": "parse1()",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              }
            ],
            "comment": "\nParses [args], a list of command-line arguments, matches them against the\nflags and options defined by this parser, and returns the result.\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "getUsage",
            "id": "getUsage0()",
            "comment": "\nGenerates a string displaying usage information for the defined options.\nThis is basically the help text shown on the command line.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "method",
            "name": "_validate",
            "id": "_validate2()",
            "children": [
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "condition",
                "id": "condition"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "comment": "\nCalled during parsing to validate the arguments. Throws a\n[FormatException] if [condition] is `false`.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "method",
            "name": "_setOption",
            "id": "_setOption3()",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "results",
                "id": "results"
              },
              {
                "ref": {
                  "name": "_Option",
                  "refId": "_Option"
                },
                "kind": "param",
                "name": "option",
                "id": "option"
              },
              {
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "comment": "Validates and stores [value] as the value for [option].\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_readNextArgAsValue",
            "id": "_readNextArgAsValue2()",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "results",
                "id": "results"
              },
              {
                "ref": {
                  "name": "_Option",
                  "refId": "_Option"
                },
                "kind": "param",
                "name": "option",
                "id": "option"
              }
            ],
            "comment": "\nPulls the value for [option] from the next argument in [_args] (where the\ncurrent option is at index [_current]. Validates that there is a valid\nvalue there.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "_parseSoloOption",
            "id": "_parseSoloOption1()",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "results",
                "id": "results"
              }
            ],
            "comment": "\nTries to parse the current argument as a \"solo\" option, which is a single\nhyphen followed by a single letter. We treat this differently than\ncollapsed abbreviations (like \"-abc\") to handle the possible value that\nmay follow it.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "_parseAbbreviation",
            "id": "_parseAbbreviation1()",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "results",
                "id": "results"
              }
            ],
            "comment": "\nTries to parse the current argument as a series of collapsed abbreviations\n(like \"-abc\") or a single abbreviation with the value directly attached\nto it (like \"-mrelease\").\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "_parseLongOption",
            "id": "_parseLongOption1()",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "results",
                "id": "results"
              }
            ],
            "comment": "\nTries to parse the current argument as a long-form named option, which\nmay include a value like \"--mode=release\" or \"--mode release\".\n\n"
          },
          {
            "returnType": {
              "name": "_Option",
              "refId": "_Option"
            },
            "kind": "method",
            "name": "_findByAbbr",
            "id": "_findByAbbr1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "abbr",
                "id": "abbr"
              }
            ],
            "comment": "\nFinds the option whose abbreviation is [abbr], or `null` if no option has\nthat abbreviation.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "method",
            "name": "getDefault",
            "id": "getDefault1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "option",
                "id": "option"
              }
            ],
            "comment": "\nGet the default value for an option. Useful after parsing to test\nif the user specified something other than the default.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "ArgParser",
            "id": "ArgParser0()",
            "comment": "Creates a new ArgParser.\n"
          },
          {
            "ref": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_SOLO_OPT",
            "id": "_SOLO_OPT"
          },
          {
            "ref": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_ABBR_OPT",
            "id": "_ABBR_OPT"
          },
          {
            "ref": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_LONG_OPT",
            "id": "_LONG_OPT"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map"
            },
            "kind": "property",
            "name": "_options",
            "id": "_options"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List"
            },
            "kind": "property",
            "name": "_optionNames",
            "id": "_optionNames"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List"
            },
            "kind": "property",
            "name": "_args",
            "id": "_args"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_current",
            "id": "_current"
          }
        ],
        "comment": "\nA class for taking a list of raw command line arguments and parsing out\noptions and flags from them.\n\n"
      }
    ],
    "comment": "\nThis library lets you define parsers for parsing raw command-line arguments\ninto a set of options and values using [GNU][] and [POSIX][] style options.\n\n## Defining options ##\n\nTo use this library, you create an [ArgParser] object which will contain\nthe set of options you support:\n\n    var parser = new ArgParser();\n\nThen you define a set of options on that parser using [addOption()] and\n[addFlag()]. The minimal way to create an option is:\n\n    parser.addOption('name');\n\nThis creates an option named \"name\". Options must be given a value on the\ncommand line. If you have a simple on/off flag, you can instead use:\n\n    parser.addFlag('name');\n\nFlag options will, by default, accept a 'no-' prefix to negate the option.\nThis can be disabled like so:\n\n    parser.addFlag('name', negatable: false);\n\n(From here on out \"option\" will refer to both \"regular\" options and flags.\nIn cases where the distinction matters, we'll use \"non-flag option\".)\n\nOptions may have an optional single-character abbreviation:\n\n    parser.addOption('mode', abbr: 'm');\n    parser.addFlag('verbose', abbr: 'v');\n\nThey may also specify a default value. The default value will be used if the\noption isn't provided:\n\n    parser.addOption('mode', defaultsTo: 'debug');\n    parser.addFlag('verbose', defaultsTo: false);\n\nThe default value for non-flag options can be any [String]. For flags, it\nmust be a [bool].\n\nTo validate non-flag options, you may provide an allowed set of values. When\nyou do, it will throw a [FormatException] when you parse the arguments if\nthe value for an option is not in the allowed set:\n\n    parser.addOption('mode', allowed: ['debug', 'release']);\n\nYou can provide a callback when you define an option. When you later parse\na set of arguments, the callback for that option will be invoked with the\nvalue provided for it:\n\n    parser.addOption('mode', callback: (mode) => print('Got mode $mode));\n    parser.addFlag('verbose', callback: (verbose) {\n      if (verbose) print('Verbose');\n    });\n\nThe callback for each option will *always* be called when you parse a set of\narguments. If the option isn't provided in the args, the callback will be\npassed the default value, or `null` if there is none set.\n\n## Parsing arguments ##\n\nOnce you have an [ArgParser] set up with some options and flags, you use it\nby calling [ArgParser.parse()] with a set of arguments:\n\n    var results = parser.parse(['some', 'command', 'line', 'args']);\n\nThese will usually come from `new Options().arguments`, but you can pass in\nany list of strings. It returns an instance of [ArgResults]. This is a\nmap-like object that will return the value of any parsed option.\n\n    var parser = new ArgParser();\n    parser.addOption('mode');\n    parser.addFlag('verbose', defaultsTo: true);\n    var results = parser.parse('['--mode', 'debug', 'something', 'else']);\n\n    print(results['mode']); // debug\n    print(results['verbose']); // true\n\nThe [parse()] method will stop as soon as it reaches `--` or anything that\nit doesn't recognize as an option, flag, or option value. If there are still\narguments left, they will be provided to you in\n[ArgResults.rest].\n\n    print(results.rest); // ['something', 'else']\n\n## Specifying options ##\n\nTo actually pass in options and flags on the command line, use GNU or POSIX\nstyle. If you define an option like:\n\n    parser.addOption('name', abbr: 'n');\n\nThen a value for it can be specified on the command line using any of:\n\n    --name=somevalue\n    --name somevalue\n    -nsomevalue\n    -n somevalue\n\nGiven this flag:\n\n    parser.addFlag('name', abbr: 'n');\n\nYou can set it on using one of:\n\n    --name\n    -n\n\nOr set it off using:\n\n    --no-name\n\nMultiple flag abbreviation can also be collapsed into a single argument. If\nyou define:\n\n    parser.addFlag('verbose', abbr: 'v');\n    parser.addFlag('french', abbr: 'f');\n    parser.addFlag('iambic-pentameter', abbr: 'i');\n\nThen all three flags could be set using:\n\n    -vfi\n\nBy default, an option has only a single value, with later option values\noverriding earlier ones; for example:\n\n    var parser = new ArgParser();\n    parser.addOption('mode');\n    var results = parser.parse(['--mode', 'on', '--mode', 'off']);\n    print(results['mode']); // prints 'off'\n\nIf you need multiple values, set the [allowMultiple] flag. In that\ncase the option can occur multiple times and when parsing arguments a\nList of values will be returned:\n\n    var parser = new ArgParser();\n    parser.addOption('mode', allowMultiple: true);\n    var results = parser.parse(['--mode', 'on', '--mode', 'off']);\n    print(results['mode']); // prints '[on, off]'\n\n## Usage ##\n\nThis library can also be used to automatically generate nice usage help\ntext like you get when you run a program with `--help`. To use this, you\nwill also want to provide some help text when you create your options. To\ndefine help text for the entire option, do:\n\n    parser.addOption('mode', help: 'The compiler configuration',\n        allowed: ['debug', 'release']);\n    parser.addFlag('verbose', help: 'Show additional diagnostic info');\n\nFor non-flag options, you can also provide detailed help for each expected\nvalue using a map:\n\n    parser.addOption('arch', help: 'The architecture to compile for',\n        allowedHelp: {\n          'ia32': 'Intel x86',\n          'arm': 'ARM Holding 32-bit chip'\n        });\n\nIf you define a set of options like the above, then calling this:\n\n    print(parser.getUsage());\n\nWill display something like:\n\n    --mode            The compiler configuration\n                      [debug, release]\n\n    --[no-]verbose    Show additional diagnostic info\n    --arch            The architecture to compile for\n\n          [arm]       ARM Holding 32-bit chip\n          [ia32]      Intel x86\n\nTo assist the formatting of the usage help, single line help text will\nbe followed by a single new line. Options with multi-line help text\nwill be followed by two new lines. This provides spatial diversity between\noptions.\n\n[posix]: http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap12.html#tag_12_02\n[gnu]: http://www.gnu.org/prep/standards/standards.html#Command_002dLine-Interfaces\n\n"
  },
  {
    "kind": "library",
    "name": "dart:core",
    "id": "dart:core",
    "children": [
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Type",
        "id": "Type",
        "comment": "\nRuntime representation of a type.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Strings",
        "id": "Strings",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "join",
            "id": "join2()",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "strings",
                "id": "strings"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "separator",
                "id": "separator"
              }
            ],
            "comment": "\nJoins all the given strings to create a new string.\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "concatAll",
            "id": "concatAll1()",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "strings",
                "id": "strings"
              }
            ],
            "comment": "\nConcatenates all the given strings to create a new string.\n\n"
          }
        ]
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "StringBuffer",
        "id": "StringBuffer",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "length",
            "id": "length",
            "comment": "\nReturns the length of the buffer.\n\n"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isEmpty",
            "id": "isEmpty",
            "comment": "\nReturns whether the buffer is empty.\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "length",
            "id": "length0()",
            "comment": "\nReturns the length of the buffer.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isEmpty",
            "id": "isEmpty0()",
            "comment": "\nReturns whether the buffer is empty.\n\n"
          },
          {
            "returnType": {
              "name": "StringBuffer",
              "refId": "StringBuffer"
            },
            "kind": "method",
            "name": "add",
            "id": "add1()",
            "children": [
              {
                "ref": {
                  "name": "Object",
                  "refId": "Object"
                },
                "kind": "param",
                "name": "obj",
                "id": "obj"
              }
            ],
            "comment": "\nConverts [obj] to a string and adds it to the buffer. Returns [:this:].\n\n"
          },
          {
            "returnType": {
              "name": "StringBuffer",
              "refId": "StringBuffer"
            },
            "kind": "method",
            "name": "addCharCode",
            "id": "addCharCode1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "charCode",
                "id": "charCode"
              }
            ],
            "comment": "\nAdds the string representation of [charCode] to the buffer.\nReturns [this].\n\n"
          },
          {
            "returnType": {
              "name": "StringBuffer",
              "refId": "StringBuffer"
            },
            "kind": "method",
            "name": "addAll",
            "id": "addAll1()",
            "children": [
              {
                "ref": {
                  "name": "Collection",
                  "refId": "Collection"
                },
                "kind": "param",
                "name": "objects",
                "id": "objects"
              }
            ],
            "comment": "\nAdds all items in [objects] to the buffer. Returns [:this:].\n\n"
          },
          {
            "returnType": {
              "name": "StringBuffer",
              "refId": "StringBuffer"
            },
            "kind": "method",
            "name": "clear",
            "id": "clear0()",
            "comment": "\nClears the string buffer. Returns [:this:].\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()",
            "comment": "\nReturns the contents of buffer as a concatenated string.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "StringBuffer",
            "id": "StringBuffer1()",
            "children": [
              {
                "isOptional": true,
                "ref": {
                  "name": "Object",
                  "refId": "Object"
                },
                "kind": "param",
                "name": "content",
                "id": "content"
              }
            ],
            "comment": "\nCreates the string buffer with an initial content.\n\n"
          }
        ],
        "comment": "\nThe StringBuffer class is useful for concatenating strings\nefficiently. Only on a call to [toString] are the strings\nconcatenated to a single String.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Sequence",
            "refId": "Sequence"
          },
          {
            "name": "Pattern",
            "refId": "Pattern"
          },
          {
            "name": "Comparable",
            "refId": "Comparable"
          }
        ],
        "kind": "class",
        "name": "String",
        "id": "String",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "length",
            "id": "length",
            "comment": "\nThe length of the string.\n\n"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isEmpty",
            "id": "isEmpty",
            "comment": "\nReturns whether this string is empty.\n\n"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List"
            },
            "kind": "property",
            "name": "charCodes",
            "id": "charCodes",
            "comment": "\nReturns a list of the scalar character codes of this string.\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "[]",
            "id": "[]1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "comment": "\nGets the character (as [String]) at the given [index].\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "charCodeAt",
            "id": "charCodeAt1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "comment": "\nGets the scalar character code at the given [index].\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "length",
            "id": "length0()",
            "comment": "\nThe length of the string.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "==",
            "id": "==1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nReturns whether the two strings are equal. This method compares\neach individual scalar character codes of the strings.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "endsWith",
            "id": "endsWith1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nReturns whether this string ends with [other].\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "startsWith",
            "id": "startsWith1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nReturns whether this string starts with [other].\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "indexOf",
            "id": "indexOf2()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              }
            ],
            "comment": "\nReturns the first location of [other] in this string starting at\n[start] (inclusive).\nReturns -1 if [other] could not be found.\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "lastIndexOf",
            "id": "lastIndexOf2()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              }
            ],
            "comment": "\nReturns the last location of [other] in this string, searching\nbackward starting at [start] (inclusive).\nReturns -1 if [other] could not be found.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isEmpty",
            "id": "isEmpty0()",
            "comment": "\nReturns whether this string is empty.\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "concat",
            "id": "concat1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nCreates a new string by concatenating this string with [other].\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "substring",
            "id": "substring2()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "startIndex",
                "id": "startIndex"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "endIndex",
                "id": "endIndex"
              }
            ],
            "comment": "\nReturns a substring of this string in the given range.\n[startIndex] is inclusive and [endIndex] is exclusive.\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "trim",
            "id": "trim0()",
            "comment": "\nRemoves leading and trailing whitespace from a string. If the\nstring contains leading or trailing whitespace a new string with\nno leading and no trailing whitespace is returned. Otherwise, the\nstring itself is returned.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "contains",
            "id": "contains2()",
            "children": [
              {
                "ref": {
                  "name": "Pattern",
                  "refId": "Pattern"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "startIndex",
                "id": "startIndex"
              }
            ],
            "comment": "\nReturns whether this string contains [other] starting\nat [startIndex] (inclusive).\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "replaceFirst",
            "id": "replaceFirst2()",
            "children": [
              {
                "ref": {
                  "name": "Pattern",
                  "refId": "Pattern"
                },
                "kind": "param",
                "name": "from",
                "id": "from"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "to",
                "id": "to"
              }
            ],
            "comment": "\nReturns a new string where the first occurence of [from] in this string\nis replaced with [to].\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "replaceAll",
            "id": "replaceAll2()",
            "children": [
              {
                "ref": {
                  "name": "Pattern",
                  "refId": "Pattern"
                },
                "kind": "param",
                "name": "from",
                "id": "from"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "to",
                "id": "to"
              }
            ],
            "comment": "\nReturns a new string where all occurences of [from] in this string\nare replaced with [to].\n\n"
          },
          {
            "returnType": {
              "name": "List",
              "refId": "List"
            },
            "kind": "method",
            "name": "split",
            "id": "split1()",
            "children": [
              {
                "ref": {
                  "name": "Pattern",
                  "refId": "Pattern"
                },
                "kind": "param",
                "name": "pattern",
                "id": "pattern"
              }
            ],
            "comment": "\nSplits the string around matches of [pattern]. Returns\na list of substrings.\n\n"
          },
          {
            "returnType": {
              "name": "List",
              "refId": "List"
            },
            "kind": "method",
            "name": "splitChars",
            "id": "splitChars0()",
            "comment": "\nReturns a list of the characters of this string.\n\n"
          },
          {
            "returnType": {
              "name": "List",
              "refId": "List"
            },
            "kind": "method",
            "name": "charCodes",
            "id": "charCodes0()",
            "comment": "\nReturns a list of the scalar character codes of this string.\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toLowerCase",
            "id": "toLowerCase0()",
            "comment": "\nIf this string is not already all lower case, returns a new string\nwhere all characters  are made lower case. Returns [:this:] otherwise.\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toUpperCase",
            "id": "toUpperCase0()",
            "comment": "\nIf this string is not already all uper case, returns a new string\nwhere all characters are made upper case. Returns [:this:] otherwise.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "String.fromCharCodes",
            "id": "String.fromCharCodes1()",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "charCodes",
                "id": "charCodes"
              }
            ],
            "comment": "\nAllocates a new String for the specified [charCodes].\n\n"
          }
        ],
        "comment": "\nThe String class represents character strings. Strings are\nimmutable. A string is represented by a list of 32-bit Unicode\nscalar character codes accessible through the [charCodeAt] or the\n[charCodes] method.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Stopwatch",
        "id": "Stopwatch",
        "children": [
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "start",
            "id": "start0()",
            "comment": "\nStarts the [Stopwatch]. The [elapsed] count is increasing monotonically.\nIf the [Stopwatch] has been stopped, then calling start again restarts it\nwithout resetting the [elapsed] count.\nIf the [Stopwatch] is currently running, then calling start does nothing.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "stop",
            "id": "stop0()",
            "comment": "\nStops the [Stopwatch]. The [elapsed] count stops increasing.\nIf the [Stopwatch] is currently not running, then calling stop does\nnothing.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "reset",
            "id": "reset0()",
            "comment": "\nResets the [elapsed] count to zero. This method does not stop or start\nthe [Stopwatch].\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "elapsed",
            "id": "elapsed0()",
            "comment": "\nReturns the elapsed number of clock ticks since calling [start] while the\n[Stopwatch] is running.\nReturns the elapsed number of clock ticks between calling [start] and\ncalling [stop].\nReturns 0 if the [Stopwatch] has never been started.\nThe elapsed number of clock ticks increases by [frequency] every second.\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "elapsedInUs",
            "id": "elapsedInUs0()",
            "comment": "\nReturns the [elapsed] counter converted to microseconds.\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "elapsedInMs",
            "id": "elapsedInMs0()",
            "comment": "\nReturns the [elapsed] counter converted to milliseconds.\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "frequency",
            "id": "frequency0()",
            "comment": "\nReturns the frequency of the elapsed counter in Hz.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Stopwatch",
            "id": "Stopwatch0()",
            "comment": "\nCreates a [Stopwatch] in stopped state with a zero elapsed count.\n\nThe following example shows how to start a [Stopwatch]\nright after allocation.\n\n    Stopwatch stopwatch = new Stopwatch()..start();\n\n"
          }
        ],
        "comment": "\nA simple [Stopwatch] interface to measure elapsed time.\n\n"
      },
      {
        "baseclass": {
          "name": "Set",
          "refId": "Set"
        },
        "kind": "class",
        "name": "HashSet",
        "id": "HashSet",
        "children": [
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "HashSet",
            "id": "HashSet0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "HashSet.from",
            "id": "HashSet.from1()",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nCreates a [Set] that contains all elements of [other].\n\n"
          }
        ]
      },
      {
        "baseclass": {
          "name": "Collection",
          "refId": "Collection"
        },
        "kind": "class",
        "name": "Set",
        "id": "Set",
        "children": [
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "contains",
            "id": "contains1()",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "comment": "\nReturns true if [value] is in the set.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "add",
            "id": "add1()",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "comment": "\nAdds [value] into the set. The method has no effect if\n[value] was already in the set.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "remove",
            "id": "remove1()",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "comment": "\nRemoves [value] from the set. Returns true if [value] was\nin the set. Returns false otherwise. The method has no effect\nif [value] value was not in the set.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "addAll",
            "id": "addAll1()",
            "children": [
              {
                "ref": {
                  "name": "Collection",
                  "refId": "Collection"
                },
                "kind": "param",
                "name": "collection",
                "id": "collection"
              }
            ],
            "comment": "\nAdds all the elements of the given collection to the set.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "removeAll",
            "id": "removeAll1()",
            "children": [
              {
                "ref": {
                  "name": "Collection",
                  "refId": "Collection"
                },
                "kind": "param",
                "name": "collection",
                "id": "collection"
              }
            ],
            "comment": "\nRemoves all the elements of the given collection from the set.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isSubsetOf",
            "id": "isSubsetOf1()",
            "children": [
              {
                "ref": {
                  "name": "Collection",
                  "refId": "Collection"
                },
                "kind": "param",
                "name": "collection",
                "id": "collection"
              }
            ],
            "comment": "\nReturns true if [collection] contains all the elements of this\ncollection.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "containsAll",
            "id": "containsAll1()",
            "children": [
              {
                "ref": {
                  "name": "Collection",
                  "refId": "Collection"
                },
                "kind": "param",
                "name": "collection",
                "id": "collection"
              }
            ],
            "comment": "\nReturns true if this collection contains all the elements of\n[collection].\n\n"
          },
          {
            "returnType": {
              "name": "Set",
              "refId": "Set"
            },
            "kind": "method",
            "name": "intersection",
            "id": "intersection1()",
            "children": [
              {
                "ref": {
                  "name": "Collection",
                  "refId": "Collection"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nReturns a new set which is the intersection between this set and\nthe given collection.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "clear",
            "id": "clear0()",
            "comment": "\nRemoves all elements in the set.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Set",
            "id": "Set0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Set.from",
            "id": "Set.from1()",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nCreates a [Set] that contains all elements of [other].\n\n"
          }
        ],
        "comment": "\nThis class is the public interface of a set. A set is a collection\nwithout duplicates.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Iterator",
            "refId": "Iterator"
          }
        ],
        "kind": "class",
        "name": "SequenceIterator",
        "id": "SequenceIterator",
        "children": [
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "hasNext",
            "id": "hasNext"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "hasNext",
            "id": "hasNext0()"
          },
          {
            "returnType": {
              "name": "E",
              "refId": "E"
            },
            "kind": "method",
            "name": "next",
            "id": "next0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "SequenceIterator",
            "id": "SequenceIterator1()",
            "children": [
              {
                "ref": {
                  "name": "Sequence",
                  "refId": "Sequence"
                },
                "kind": "param",
                "name": "_sequence",
                "id": "_sequence"
              }
            ]
          },
          {
            "ref": {
              "name": "Sequence",
              "refId": "Sequence"
            },
            "kind": "property",
            "name": "_sequence",
            "id": "_sequence"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_position",
            "id": "_position"
          }
        ],
        "comment": "\nIterates over a [Sequence] in growing index order.\n\n"
      },
      {
        "baseclass": {
          "name": "SequenceCollection",
          "refId": "SequenceCollection"
        },
        "interfaces": [
          {
            "name": "List",
            "refId": "List"
          }
        ],
        "kind": "class",
        "name": "SequenceList",
        "id": "SequenceList",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "length",
            "id": "length"
          },
          {
            "ref": {
              "name": "E",
              "refId": "E"
            },
            "kind": "property",
            "name": "last",
            "id": "last"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "length",
            "id": "length0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "method",
            "name": "[]",
            "id": "[]1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ]
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "indexOf",
            "id": "indexOf2()",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              }
            ]
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "lastIndexOf",
            "id": "lastIndexOf2()",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              }
            ]
          },
          {
            "returnType": {
              "name": "E",
              "refId": "E"
            },
            "kind": "method",
            "name": "last",
            "id": "last0()"
          },
          {
            "returnType": {
              "name": "List",
              "refId": "List"
            },
            "kind": "method",
            "name": "getRange",
            "id": "getRange2()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "length",
                "id": "length"
              }
            ]
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "[]=",
            "id": "[]=2()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              },
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ]
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "length=",
            "id": "length=1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "newLength",
                "id": "newLength"
              }
            ]
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "add",
            "id": "add1()",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ]
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "addLast",
            "id": "addLast1()",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ]
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "addAll",
            "id": "addAll1()",
            "children": [
              {
                "ref": {
                  "name": "Collection",
                  "refId": "Collection"
                },
                "kind": "param",
                "name": "collection",
                "id": "collection"
              }
            ]
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "sort",
            "id": "sort1()",
            "children": [
              {
                "isOptional": true,
                "ref": {
                  "name": "Comparator",
                  "refId": "Comparator"
                },
                "kind": "param",
                "name": "compare",
                "id": "compare"
              }
            ]
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "clear",
            "id": "clear0()"
          },
          {
            "returnType": {
              "name": "E",
              "refId": "E"
            },
            "kind": "method",
            "name": "removeAt",
            "id": "removeAt1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ]
          },
          {
            "returnType": {
              "name": "E",
              "refId": "E"
            },
            "kind": "method",
            "name": "removeLast",
            "id": "removeLast0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setRange",
            "id": "setRange4()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "length",
                "id": "length"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "from",
                "id": "from"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "startFrom",
                "id": "startFrom"
              }
            ]
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "removeRange",
            "id": "removeRange2()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "length",
                "id": "length"
              }
            ]
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "insertRange",
            "id": "insertRange3()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "length",
                "id": "length"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "initialValue",
                "id": "initialValue"
              }
            ]
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "SequenceList",
            "id": "SequenceList1()",
            "children": [
              {
                "ref": {
                  "name": "Sequence",
                  "refId": "Sequence"
                },
                "kind": "param",
                "name": "sequence",
                "id": "sequence"
              }
            ]
          },
          {
            "ref": {
              "name": "Sequence",
              "refId": "Sequence"
            },
            "kind": "property",
            "name": "sequence",
            "id": "sequence"
          }
        ],
        "comment": "\nAn unmodifiable [List] backed by a [Sequence].\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Sequence",
            "refId": "Sequence"
          },
          {
            "name": "Collection",
            "refId": "Collection"
          }
        ],
        "kind": "class",
        "name": "SequenceCollection",
        "id": "SequenceCollection",
        "children": [
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isEmpty",
            "id": "isEmpty"
          },
          {
            "returnType": {
              "name": "Iterator",
              "refId": "Iterator"
            },
            "kind": "method",
            "name": "iterator",
            "id": "iterator0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "forEach",
            "id": "forEach1()",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ]
          },
          {
            "returnType": {
              "name": "Collection",
              "refId": "Collection"
            },
            "kind": "method",
            "name": "map",
            "id": "map1()",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ]
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "contains",
            "id": "contains1()",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ]
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "method",
            "name": "reduce",
            "id": "reduce2()",
            "children": [
              {
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "initialValue",
                "id": "initialValue"
              },
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "combine",
                "id": "combine"
              }
            ]
          },
          {
            "returnType": {
              "name": "Collection",
              "refId": "Collection"
            },
            "kind": "method",
            "name": "filter",
            "id": "filter1()",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ]
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "every",
            "id": "every1()",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ]
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "some",
            "id": "some1()",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ]
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isEmpty",
            "id": "isEmpty0()"
          }
        ],
        "comment": "\nA skeleton class for a [Collection] that is also a [Sequence].\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Sequence",
        "id": "Sequence",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "length",
            "id": "length",
            "comment": "\nThe limit of valid indices of the sequence.\n\nThe length getter should be efficient.\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "length",
            "id": "length0()",
            "comment": "\nThe limit of valid indices of the sequence.\n\nThe length getter should be efficient.\n\n"
          },
          {
            "returnType": {
              "name": "T",
              "refId": "T"
            },
            "kind": "method",
            "name": "[]",
            "id": "[]1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "comment": "\nReturns the value at the given [index].\n\nValid indices must be in the range [:0..length - 1:].\nThe lookup operator should be efficient.\n\n"
          }
        ],
        "comment": "\nAn indexed sequence of elements of the same type.\n\nThis is a primitive interface that any finite integer-indexable\nsequence can implement.\nIt is intended for data structures where access by index is\nthe most efficient way to access the data.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Pattern",
            "refId": "Pattern"
          }
        ],
        "kind": "class",
        "name": "RegExp",
        "id": "RegExp",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "pattern",
            "id": "pattern",
            "comment": "\nThe pattern of this regular expression.\n\n"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "multiLine",
            "id": "multiLine",
            "comment": "\nWhether this regular expression matches multiple lines.\n\n"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "ignoreCase",
            "id": "ignoreCase",
            "comment": "\nWhether this regular expression is case insensitive.\n\n"
          },
          {
            "returnType": {
              "name": "Match",
              "refId": "Match"
            },
            "kind": "method",
            "name": "firstMatch",
            "id": "firstMatch1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "str",
                "id": "str"
              }
            ],
            "comment": "\nSearches for the first match of the regular expression\nin the string [str]. Returns `null` if there is no match.\n\n"
          },
          {
            "returnType": {
              "name": "Iterable",
              "refId": "Iterable"
            },
            "kind": "method",
            "name": "allMatches",
            "id": "allMatches1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "str",
                "id": "str"
              }
            ],
            "comment": "\nReturns an iterable on the  matches of the regular\nexpression in [str].\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "hasMatch",
            "id": "hasMatch1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "str",
                "id": "str"
              }
            ],
            "comment": "\nReturns whether the regular expression has a match in the string [str].\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "stringMatch",
            "id": "stringMatch1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "str",
                "id": "str"
              }
            ],
            "comment": "\nSearches for the first match of the regular expression\nin the string [str] and returns the matched string.\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "pattern",
            "id": "pattern0()",
            "comment": "\nThe pattern of this regular expression.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "multiLine",
            "id": "multiLine0()",
            "comment": "\nWhether this regular expression matches multiple lines.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "ignoreCase",
            "id": "ignoreCase0()",
            "comment": "\nWhether this regular expression is case insensitive.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "RegExp",
            "id": "RegExp3()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "pattern",
                "id": "pattern"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "multiLine",
                "id": "multiLine"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "ignoreCase",
                "id": "ignoreCase"
              }
            ],
            "comment": "\nConstructs a regular expression. The default implementation of a\n[RegExp] sets [multiLine] and [ignoreCase] to false.\n\n"
          }
        ],
        "comment": "\n[RegExp] represents regular expressions.\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n[firstMatch] is the main implementation method that applies a regular\nexpression to a string and returns the first [Match]. All\nother methods in [RegExp] can build on it.\n\nUse [allMatches] to look for all matches of a regular expression in\na string.\n\nThe following example finds all matches of a regular expression in\na string.\n\n    RegExp exp = const RegExp(r\"(\\w+)\");\n    String str = \"Parse my string\";\n    Iterable<Match> matches = exp.allMatches(str);\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Match",
        "id": "Match",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "start",
            "id": "start",
            "comment": "\nReturns the index in the string where the match starts.\n\n"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "end",
            "id": "end",
            "comment": "\nReturns the index in the string after the last character of the\nmatch.\n\n"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "groupCount",
            "id": "groupCount",
            "comment": "\nReturns the number of groups in the regular expression.\n\n"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "str",
            "id": "str",
            "comment": "\nThe string on which this matcher was computed.\n\n"
          },
          {
            "ref": {
              "name": "Pattern",
              "refId": "Pattern"
            },
            "kind": "property",
            "name": "pattern",
            "id": "pattern",
            "comment": "\nThe pattern to search for in [str].\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "start",
            "id": "start0()",
            "comment": "\nReturns the index in the string where the match starts.\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "end",
            "id": "end0()",
            "comment": "\nReturns the index in the string after the last character of the\nmatch.\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "group",
            "id": "group1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "group",
                "id": "group"
              }
            ],
            "comment": "\nReturns the string matched by the given [group]. If [group] is 0,\nreturns the match of the regular expression.\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "[]",
            "id": "[]1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "group",
                "id": "group"
              }
            ]
          },
          {
            "returnType": {
              "name": "List",
              "refId": "List"
            },
            "kind": "method",
            "name": "groups",
            "id": "groups1()",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "groups",
                "id": "groups"
              }
            ],
            "comment": "\nReturns the strings matched by [groups]. The order in the\nreturned string follows the order in [groups].\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "groupCount",
            "id": "groupCount0()",
            "comment": "\nReturns the number of groups in the regular expression.\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "str",
            "id": "str0()",
            "comment": "\nThe string on which this matcher was computed.\n\n"
          },
          {
            "returnType": {
              "name": "Pattern",
              "refId": "Pattern"
            },
            "kind": "method",
            "name": "pattern",
            "id": "pattern0()",
            "comment": "\nThe pattern to search for in [str].\n\n"
          }
        ],
        "comment": "\n[Match] contains methods to manipulate a regular expression match.\n\nIterables of [Match] objects are returned from [RegExp] matching methods.\n\nThe following example finds all matches of a [RegExp] in a [String]\nand iterates through the returned iterable of [Match] objects.\n\n    RegExp exp = const RegExp(r\"(\\w+)\");\n    String str = \"Parse my string\";\n    Iterable<Match> matches = exp.allMatches(str);\n    for (Match m in matches) {\n      String match = m.group(0);\n      print(match);\n    };\n\nThe output of the example is:\n\n    Parse\n    my\n    string\n\n"
      },
      {
        "baseclass": {
          "name": "Collection",
          "refId": "Collection"
        },
        "kind": "class",
        "name": "Queue",
        "id": "Queue",
        "children": [
          {
            "ref": {
              "name": "E",
              "refId": "E"
            },
            "kind": "property",
            "name": "first",
            "id": "first",
            "comment": "\nReturns the first element of the queue. Throws an\n[EmptyQueueException] exception if this queue is empty.\n\n"
          },
          {
            "ref": {
              "name": "E",
              "refId": "E"
            },
            "kind": "property",
            "name": "last",
            "id": "last",
            "comment": "\nReturns the last element of the queue. Throws an\n[EmptyQueueException] exception if this queue is empty.\n\n"
          },
          {
            "returnType": {
              "name": "E",
              "refId": "E"
            },
            "kind": "method",
            "name": "removeFirst",
            "id": "removeFirst0()",
            "comment": "\nRemoves and returns the first element of this queue. Throws an\n[EmptyQueueException] exception if this queue is empty.\n\n"
          },
          {
            "returnType": {
              "name": "E",
              "refId": "E"
            },
            "kind": "method",
            "name": "removeLast",
            "id": "removeLast0()",
            "comment": "\nRemoves and returns the last element of the queue. Throws an\n[EmptyQueueException] exception if this queue is empty.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "addFirst",
            "id": "addFirst1()",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "comment": "\nAdds [value] at the beginning of the queue.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "addLast",
            "id": "addLast1()",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "comment": "\nAdds [value] at the end of the queue.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "add",
            "id": "add1()",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "comment": "\nAdds [value] at the end of the queue.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "addAll",
            "id": "addAll1()",
            "children": [
              {
                "ref": {
                  "name": "Collection",
                  "refId": "Collection"
                },
                "kind": "param",
                "name": "collection",
                "id": "collection"
              }
            ],
            "comment": "\nAdds all elements of [collection] at the end of the queue. The\nlength of the queue is extended by the length of [collection].\n\n"
          },
          {
            "returnType": {
              "name": "E",
              "refId": "E"
            },
            "kind": "method",
            "name": "first",
            "id": "first0()",
            "comment": "\nReturns the first element of the queue. Throws an\n[EmptyQueueException] exception if this queue is empty.\n\n"
          },
          {
            "returnType": {
              "name": "E",
              "refId": "E"
            },
            "kind": "method",
            "name": "last",
            "id": "last0()",
            "comment": "\nReturns the last element of the queue. Throws an\n[EmptyQueueException] exception if this queue is empty.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "clear",
            "id": "clear0()",
            "comment": "\nRemoves all elements in the queue. The size of the queue becomes zero.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Queue",
            "id": "Queue0()",
            "comment": "\nCreates a queue.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Queue.from",
            "id": "Queue.from1()",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nCreates a queue with the elements of [other]. The order in\nthe queue will be the order provided by the iterator of [other].\n\n"
          }
        ],
        "comment": "\nA [Queue] is a collection that can be manipulated at both ends. One\ncan iterate over the elements of a queue through [forEach] or with\nan [Iterator].\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Pattern",
        "id": "Pattern",
        "children": [
          {
            "returnType": {
              "name": "Iterable",
              "refId": "Iterable"
            },
            "kind": "method",
            "name": "allMatches",
            "id": "allMatches1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "str",
                "id": "str"
              }
            ]
          }
        ]
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Options",
        "id": "Options",
        "children": [
          {
            "ref": {
              "name": "List",
              "refId": "List"
            },
            "kind": "property",
            "name": "arguments",
            "id": "arguments",
            "comment": "\nReturns a list of arguments that have been passed to this isolate. Any\nmodifications to the list will be contained to the options object owning\nthis list.\n\nIf the execution environment does not support [arguments] an empty list\nis returned.\n\n"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "executable",
            "id": "executable",
            "comment": "\nReturns the path of the executable used to run the script in this\nisolate.\n\nIf the execution environment does not support [executable] an empty\nstring is returned.\n\n"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "script",
            "id": "script",
            "comment": "\nReturns the path of the script being run in this isolate.\n\nIf the executable environment does not support [script] an empty\nstring is returned.\n\n"
          },
          {
            "returnType": {
              "name": "List",
              "refId": "List"
            },
            "kind": "method",
            "name": "arguments",
            "id": "arguments0()",
            "comment": "\nReturns a list of arguments that have been passed to this isolate. Any\nmodifications to the list will be contained to the options object owning\nthis list.\n\nIf the execution environment does not support [arguments] an empty list\nis returned.\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "executable",
            "id": "executable0()",
            "comment": "\nReturns the path of the executable used to run the script in this\nisolate.\n\nIf the execution environment does not support [executable] an empty\nstring is returned.\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "script",
            "id": "script0()",
            "comment": "\nReturns the path of the script being run in this isolate.\n\nIf the executable environment does not support [script] an empty\nstring is returned.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Options",
            "id": "Options0()",
            "comment": "\nA newly constructed Options object contains the arguments exactly as they\nhave been passed to the isolate.\n\n"
          }
        ],
        "comment": "\nThe Options object allows accessing the arguments which have been passed to\nthe current isolate.\n\n"
      },
      {
        "kind": "class",
        "name": "Object",
        "id": "Object",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "hashCode",
            "id": "hashCode",
            "comment": "\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n\n"
          },
          {
            "ref": {
              "name": "Type",
              "refId": "Type"
            },
            "kind": "property",
            "name": "runtimeType",
            "id": "runtimeType",
            "comment": "\nA representation of the runtime type of the object.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "==",
            "id": "==1()",
            "children": [
              {
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "hashCode",
            "id": "hashCode0()",
            "comment": "\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()",
            "comment": "\nReturns a string representation of this object.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "method",
            "name": "noSuchMethod",
            "id": "noSuchMethod2()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              }
            ],
            "comment": "\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod]. If [noSuchMethod]\nreturns a value, that value becomes the result of the original\ninvocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n\n"
          },
          {
            "returnType": {
              "name": "Type",
              "refId": "Type"
            },
            "kind": "method",
            "name": "runtimeType",
            "id": "runtimeType0()",
            "comment": "\nA representation of the runtime type of the object.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Object",
            "id": "Object0()",
            "comment": "\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n\n"
          }
        ],
        "comment": "\nEverything in Dart is an [Object].\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Comparable",
            "refId": "Comparable"
          }
        ],
        "kind": "class",
        "name": "num",
        "id": "num",
        "children": [
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isNaN",
            "id": "isNaN"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isNegative",
            "id": "isNegative"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isInfinite",
            "id": "isInfinite"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "+",
            "id": "+1()",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "Addition operator.\n"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "-",
            "id": "-1()",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "Subtraction operator.\n"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "*",
            "id": "*1()",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "Multiplication operator.\n"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "%",
            "id": "%1()",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "Euclidean modulo operator.\n"
          },
          {
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "/",
            "id": "/1()",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "Division operator.\n"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "~/",
            "id": "~/1()",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nTruncating division operator.\n\nThe result of the truncating division [:a ~/ b:] is equivalent to\n[:(a / b).truncate():].\n\n"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "unary-",
            "id": "unary-0()",
            "comment": "Negate operator.\n"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "remainder",
            "id": "remainder1()",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "Return the remainder from dividing this [num] by [other].\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "<",
            "id": "<1()",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "Relational less than operator.\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "<=",
            "id": "<=1()",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "Relational less than or equal operator.\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": ">",
            "id": ">1()",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "Relational greater than operator.\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": ">=",
            "id": ">=1()",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "Relational greater than or equal operator.\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isNaN",
            "id": "isNaN0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isNegative",
            "id": "isNegative0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isInfinite",
            "id": "isInfinite0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "abs",
            "id": "abs0()",
            "comment": "Returns the absolute value of this [num].\n"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "floor",
            "id": "floor0()",
            "comment": "Returns the greatest integer value no greater than this [num].\n"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "ceil",
            "id": "ceil0()",
            "comment": "Returns the least integer value that is no smaller than this [num].\n"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "round",
            "id": "round0()",
            "comment": "\nReturns the integer value closest to this [num].\n\nRounds away from zero when there is no closest integer:\n [:(3.5).round() == 4:] and [:(-3.5).round() == -4:].\n\n"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "truncate",
            "id": "truncate0()",
            "comment": "\nReturns the integer value obtained by discarding any fractional\ndigits from this [num].\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "toInt",
            "id": "toInt0()",
            "comment": "Truncates this [num] to an integer and returns the result as an [int].\n"
          },
          {
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "toDouble",
            "id": "toDouble0()",
            "comment": "\nReturn this [num] as a [double].\n\nIf the number is not representable as a [double], an\napproximation is returned. For numerically large integers, the\napproximation may be infinite.\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toStringAsFixed",
            "id": "toStringAsFixed1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "fractionDigits",
                "id": "fractionDigits"
              }
            ],
            "comment": "\nConverts a [num] to a string representation with [fractionDigits]\ndigits after the decimal point.\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toStringAsExponential",
            "id": "toStringAsExponential1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "fractionDigits",
                "id": "fractionDigits"
              }
            ],
            "comment": "\nConverts a [num] to a string in decimal exponential notation with\n[fractionDigits] digits after the decimal point.\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toStringAsPrecision",
            "id": "toStringAsPrecision1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "precision",
                "id": "precision"
              }
            ],
            "comment": "\nConverts a [num] to a string representation with [precision]\nsignificant digits.\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toRadixString",
            "id": "toRadixString1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "radix",
                "id": "radix"
              }
            ],
            "comment": "\nConverts a [num] to a string representation in the given [radix].\n\nThe [num] in converted to an [int] using [toInt]. That [int] is\nthen converted to a string representation with the given\n[radix]. In the string representation, lower-case letters are\nused for digits above '9'.\n\nThe [radix] argument must be an integer between 2 and 36.\n\n"
          }
        ],
        "comment": "\nAll numbers in dart are instances of [num].\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "HashMap",
            "refId": "HashMap"
          }
        ],
        "kind": "class",
        "name": "LinkedHashMap",
        "id": "LinkedHashMap",
        "children": [
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "LinkedHashMap",
            "id": "LinkedHashMap0()",
            "comment": "\nCreates a map with the default implementation.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "LinkedHashMap.from",
            "id": "LinkedHashMap.from1()",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nCreates a [LinkedHashMap] that contains all key value pairs of [other].\n\n"
          }
        ],
        "comment": "\nHash map version of the [Map] interface that preserves insertion\norder.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Map",
            "refId": "Map"
          }
        ],
        "kind": "class",
        "name": "HashMap",
        "id": "HashMap",
        "children": [
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "HashMap",
            "id": "HashMap0()",
            "comment": "\nCreates a map with the default implementation.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "HashMap.from",
            "id": "HashMap.from1()",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nCreates a [HashMap] that contains all key value pairs of [other].\n\n"
          }
        ],
        "comment": "\nHash map version of the [Map] interface. A [HashMap] does not\nprovide any guarantees on the order of keys and values in [keys]\nand [values].\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Map",
        "id": "Map",
        "children": [
          {
            "ref": {
              "name": "Collection",
              "refId": "Collection"
            },
            "kind": "property",
            "name": "keys",
            "id": "keys",
            "comment": "\nReturns a collection containing all the keys in the map.\n\n"
          },
          {
            "ref": {
              "name": "Collection",
              "refId": "Collection"
            },
            "kind": "property",
            "name": "values",
            "id": "values",
            "comment": "\nReturns a collection containing all the values in the map.\n\n"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "length",
            "id": "length",
            "comment": "\nThe number of {key, value} pairs in the map.\n\n"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isEmpty",
            "id": "isEmpty",
            "comment": "\nReturns true if there is no {key, value} pair in the map.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "containsValue",
            "id": "containsValue1()",
            "children": [
              {
                "ref": {
                  "name": "V",
                  "refId": "V"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "comment": "\nReturns whether this map contains the given [value].\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "containsKey",
            "id": "containsKey1()",
            "children": [
              {
                "ref": {
                  "name": "K",
                  "refId": "K"
                },
                "kind": "param",
                "name": "key",
                "id": "key"
              }
            ],
            "comment": "\nReturns whether this map contains the given [key].\n\n"
          },
          {
            "returnType": {
              "name": "V",
              "refId": "V"
            },
            "kind": "method",
            "name": "[]",
            "id": "[]1()",
            "children": [
              {
                "ref": {
                  "name": "K",
                  "refId": "K"
                },
                "kind": "param",
                "name": "key",
                "id": "key"
              }
            ],
            "comment": "\nReturns the value for the given [key] or null if [key] is not\nin the map. Because null values are supported, one should either\nuse containsKey to distinguish between an absent key and a null\nvalue, or use the [putIfAbsent] method.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "[]=",
            "id": "[]=2()",
            "children": [
              {
                "ref": {
                  "name": "K",
                  "refId": "K"
                },
                "kind": "param",
                "name": "key",
                "id": "key"
              },
              {
                "ref": {
                  "name": "V",
                  "refId": "V"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "comment": "\nAssociates the [key] with the given [value].\n\n"
          },
          {
            "returnType": {
              "name": "V",
              "refId": "V"
            },
            "kind": "method",
            "name": "putIfAbsent",
            "id": "putIfAbsent2()",
            "children": [
              {
                "ref": {
                  "name": "K",
                  "refId": "K"
                },
                "kind": "param",
                "name": "key",
                "id": "key"
              },
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "ifAbsent",
                "id": "ifAbsent"
              }
            ],
            "comment": "\nIf [key] is not associated to a value, calls [ifAbsent] and\nupdates the map by mapping [key] to the value returned by\n[ifAbsent]. Returns the value in the map.\n\n"
          },
          {
            "returnType": {
              "name": "V",
              "refId": "V"
            },
            "kind": "method",
            "name": "remove",
            "id": "remove1()",
            "children": [
              {
                "ref": {
                  "name": "K",
                  "refId": "K"
                },
                "kind": "param",
                "name": "key",
                "id": "key"
              }
            ],
            "comment": "\nRemoves the association for the given [key]. Returns the value for\n[key] in the map or null if [key] is not in the map. Note that values\ncan be null and a returned null value does not always imply that the\nkey is absent.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "clear",
            "id": "clear0()",
            "comment": "\nRemoves all pairs from the map.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "forEach",
            "id": "forEach1()",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "comment": "\nApplies [f] to each {key, value} pair of the map.\n\n"
          },
          {
            "returnType": {
              "name": "Collection",
              "refId": "Collection"
            },
            "kind": "method",
            "name": "keys",
            "id": "keys0()",
            "comment": "\nReturns a collection containing all the keys in the map.\n\n"
          },
          {
            "returnType": {
              "name": "Collection",
              "refId": "Collection"
            },
            "kind": "method",
            "name": "values",
            "id": "values0()",
            "comment": "\nReturns a collection containing all the values in the map.\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "length",
            "id": "length0()",
            "comment": "\nThe number of {key, value} pairs in the map.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isEmpty",
            "id": "isEmpty0()",
            "comment": "\nReturns true if there is no {key, value} pair in the map.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Map",
            "id": "Map0()",
            "comment": "\nCreates a map with the default implementation.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Map.from",
            "id": "Map.from1()",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nCreates a [Map] that contains all key value pairs of [other].\n\n"
          }
        ],
        "comment": "\nA [Map] is an associative container, mapping a key to a value.\nNull values are supported, but null keys are not.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Sequence",
            "refId": "Sequence"
          },
          {
            "name": "Collection",
            "refId": "Collection"
          }
        ],
        "kind": "class",
        "name": "List",
        "id": "List",
        "children": [
          {
            "ref": {
              "name": "E",
              "refId": "E"
            },
            "kind": "property",
            "name": "last",
            "id": "last",
            "comment": "\nReturns the last element of the list, or throws an out of bounds\nexception if the list is empty.\n\n"
          },
          {
            "returnType": {
              "name": "E",
              "refId": "E"
            },
            "kind": "method",
            "name": "[]",
            "id": "[]1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "comment": "\nReturns the element at the given [index] in the list or throws\nan [IndexOutOfRangeException] if [index] is out of bounds.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "[]=",
            "id": "[]=2()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              },
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "comment": "\nSets the entry at the given [index] in the list to [value].\nThrows an [IndexOutOfRangeException] if [index] is out of bounds.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "length=",
            "id": "length=1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "newLength",
                "id": "newLength"
              }
            ],
            "comment": "\nChanges the length of the list. If [newLength] is greater than\nthe current [length], entries are initialized to [:null:]. Throws\nan [UnsupportedError] if the list is not extendable.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "add",
            "id": "add1()",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "comment": "\nAdds [value] at the end of the list, extending the length by\none. Throws an [UnsupportedError] if the list is not\nextendable.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "addLast",
            "id": "addLast1()",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "comment": "\nAdds [value] at the end of the list, extending the length by\none. Throws an [UnsupportedError] if the list is not\nextendable.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "addAll",
            "id": "addAll1()",
            "children": [
              {
                "ref": {
                  "name": "Collection",
                  "refId": "Collection"
                },
                "kind": "param",
                "name": "collection",
                "id": "collection"
              }
            ],
            "comment": "\nAppends all elements of the [collection] to the end of this list.\nExtends the length of the list by the number of elements in [collection].\nThrows an [UnsupportedError] if this list is not\nextendable.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "sort",
            "id": "sort1()",
            "children": [
              {
                "isOptional": true,
                "ref": {
                  "name": "Comparator",
                  "refId": "Comparator"
                },
                "kind": "param",
                "name": "compare",
                "id": "compare"
              }
            ],
            "comment": "\nSorts the list according to the order specified by the [Comparator].\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "indexOf",
            "id": "indexOf2()",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "element",
                "id": "element"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              }
            ],
            "comment": "\nReturns the first index of [element] in the list.\n\nSearches the list from index [start] to the length of the list.\nThe first time an element [:e:] is encountered so that [:e == element:],\nthe index of [:e:] is returned.\nReturns -1 if [element] is not found.\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "lastIndexOf",
            "id": "lastIndexOf2()",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "element",
                "id": "element"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              }
            ],
            "comment": "\nReturns the last index of [element] in the list.\n\nSearches the list backwards from index [start] (inclusive) to 0.\nThe first time an element [:e:] is encountered so that [:e == element:],\nthe index of [:e:] is returned.\nIf start is not provided, it defaults to [:this.length - 1:] .\nReturns -1 if [element] is not found.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "clear",
            "id": "clear0()",
            "comment": "\nRemoves all elements in the list.\n\nThe length of the list becomes zero.\nThrows an [UnsupportedError], and retains all elements, if the\nlength of the list cannot be changed.\n\n"
          },
          {
            "returnType": {
              "name": "E",
              "refId": "E"
            },
            "kind": "method",
            "name": "removeAt",
            "id": "removeAt1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "comment": "\nRemoves the element at position[index] from the list.\n\nThis reduces the length of the list by one and moves all later elements\ndown by one position.\nReturns the removed element.\nThrows an [ArgumentError] if [index] is not an [int].\nThrows an [IndexOutOfRangeException] if the [index] does not point inside\nthe list.\nThrows an [UnsupportedError], and doesn't remove the element,\nif the length of the list cannot be changed.\n\n"
          },
          {
            "returnType": {
              "name": "E",
              "refId": "E"
            },
            "kind": "method",
            "name": "removeLast",
            "id": "removeLast0()",
            "comment": "\nPops and returns the last element of the list.\nThrows a [UnsupportedError] if the length of the\nlist cannot be changed.\n\n"
          },
          {
            "returnType": {
              "name": "E",
              "refId": "E"
            },
            "kind": "method",
            "name": "last",
            "id": "last0()",
            "comment": "\nReturns the last element of the list, or throws an out of bounds\nexception if the list is empty.\n\n"
          },
          {
            "returnType": {
              "name": "List",
              "refId": "List"
            },
            "kind": "method",
            "name": "getRange",
            "id": "getRange2()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "length",
                "id": "length"
              }
            ],
            "comment": "\nReturns a new list containing [length] elements from the list,\nstarting at  [start].\nReturns an empty list if [length] is 0.\nThrows an [ArgumentError] if [length] is negative.\nThrows an [IndexOutOfRangeException] if [start] or\n[:start + length - 1:] are out of range.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setRange",
            "id": "setRange4()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "length",
                "id": "length"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "from",
                "id": "from"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "startFrom",
                "id": "startFrom"
              }
            ],
            "comment": "\nCopies [length] elements of [from], starting\nat [startFrom], into the list, starting at [start].\nIf [length] is 0, this method does not do anything.\nThrows an [ArgumentError] if [length] is negative.\nThrows an [IndexOutOfRangeException] if [start] or\n[:start + length - 1:] are out of range for [:this:], or if\n[startFrom] or [:startFrom + length - 1:] are out of range for [from].\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "removeRange",
            "id": "removeRange2()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "length",
                "id": "length"
              }
            ],
            "comment": "\nRemoves [length] elements from the list, beginning at [start].\nThrows an [UnsupportedError] if the list is\nnot extendable.\nIf [length] is 0, this method does not do anything.\nThrows an [ArgumentError] if [length] is negative.\nThrows an [IndexOutOfRangeException] if [start] or\n[:start + length: - 1] are out of range.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "insertRange",
            "id": "insertRange3()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "length",
                "id": "length"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "initialValue",
                "id": "initialValue"
              }
            ],
            "comment": "\nInserts a new range into the list, starting from [start] to\n[:start + length - 1:]. The entries are filled with [initialValue].\nThrows an [UnsupportedError] if the list is\nnot extendable.\nIf [length] is 0, this method does not do anything.\nIf [start] is the length of the list, this method inserts the\nrange at the end of the list.\nThrows an [ArgumentError] if [length] is negative.\nThrows an [IndexOutOfRangeException] if [start] is negative or if\n[start] is greater than the length of the list.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "List",
            "id": "List1()",
            "children": [
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "length",
                "id": "length"
              }
            ],
            "comment": "\nCreates a list of the given [length].\n\nIf no [length] argument is supplied an extendable list of\nlength 0 is created.\n\nIf a [length] argument is supplied, a fixed size list of that\nlength is created.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "List.from",
            "id": "List.from1()",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nCreates a list with the elements of [other]. The order in\nthe list will be the order provided by the iterator of [other].\n\n"
          }
        ],
        "comment": "\nA [List] is an indexable collection with a length. It can be of\nfixed size or extendable.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Iterator",
        "id": "Iterator",
        "children": [
          {
            "returnType": {
              "name": "E",
              "refId": "E"
            },
            "kind": "method",
            "name": "next",
            "id": "next0()",
            "comment": "\nGets the next element in the iteration. Throws a\n[NoMoreElementsException] if no element is left.\n\n"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "hasNext",
            "id": "hasNext"
          }
        ],
        "comment": "\nThe [Iterator] class provides methods to iterate over an object. It\nis transparently used by the for-in construct to test for the end\nof the iteration, and to get the elements.\n\nIf the object iterated over is changed during the iteration, the\nbehavior is unspecified.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Iterable",
        "id": "Iterable",
        "children": [
          {
            "returnType": {
              "name": "Iterator",
              "refId": "Iterator"
            },
            "kind": "method",
            "name": "iterator",
            "id": "iterator0()",
            "comment": "\nReturns an [Iterator] that iterates over this [Iterable] object.\n\n"
          }
        ],
        "comment": "\nThe [Iterable] interface allows to get an [Iterator] out of an\n[Iterable] object.\n\nThis interface is used by the for-in construct to iterate over an\n[Iterable] object.\nThe for-in construct takes an [Iterable] object at the right-hand\nside, and calls its [iterator] method to get an [Iterator] on it.\n\nA user-defined class that implements the [Iterable] interface can\nbe used as the right-hand side of a for-in construct.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "InvocationMirror",
        "id": "InvocationMirror",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "memberName",
            "id": "memberName",
            "comment": "The name of the invoked member.\n"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List"
            },
            "kind": "property",
            "name": "positionalArguments",
            "id": "positionalArguments",
            "comment": "An unmodifiable view of the positional arguments of the call.\n"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map"
            },
            "kind": "property",
            "name": "namedArguments",
            "id": "namedArguments",
            "comment": "An unmodifiable view of the named arguments of the call.\n"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isMethod",
            "id": "isMethod",
            "comment": "Whether the invocation was a method call.\n"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isGetter",
            "id": "isGetter",
            "comment": "\nWhether the invocation was a getter call.\nIf so, both types of arguments will be null.\n\n"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isSetter",
            "id": "isSetter",
            "comment": "\nWhether the invocation was a setter call.\n\nIf so, [arguments] will have exactly one positonal argument,\nand namedArguments will be null.\n\n"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isAccessor",
            "id": "isAccessor",
            "comment": "Whether the invocation was a getter or a setter call.\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "memberName",
            "id": "memberName0()",
            "comment": "The name of the invoked member.\n"
          },
          {
            "returnType": {
              "name": "List",
              "refId": "List"
            },
            "kind": "method",
            "name": "positionalArguments",
            "id": "positionalArguments0()",
            "comment": "An unmodifiable view of the positional arguments of the call.\n"
          },
          {
            "returnType": {
              "name": "Map",
              "refId": "Map"
            },
            "kind": "method",
            "name": "namedArguments",
            "id": "namedArguments0()",
            "comment": "An unmodifiable view of the named arguments of the call.\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isMethod",
            "id": "isMethod0()",
            "comment": "Whether the invocation was a method call.\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isGetter",
            "id": "isGetter0()",
            "comment": "\nWhether the invocation was a getter call.\nIf so, both types of arguments will be null.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isSetter",
            "id": "isSetter0()",
            "comment": "\nWhether the invocation was a setter call.\n\nIf so, [arguments] will have exactly one positonal argument,\nand namedArguments will be null.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isAccessor",
            "id": "isAccessor0()",
            "comment": "Whether the invocation was a getter or a setter call.\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "method",
            "name": "invokeOn",
            "id": "invokeOn1()",
            "children": [
              {
                "ref": {
                  "name": "Object",
                  "refId": "Object"
                },
                "kind": "param",
                "name": "receiver",
                "id": "receiver"
              }
            ],
            "comment": "\nPerform the invocation on the provided object.\n\nIf the object doesn't support the invocation, its [noSuchMethod]\nmethod will be called with either this [InvocationMirror] or another\nequivalent [InvocationMirror].\n\n"
          }
        ],
        "comment": "\nRepresentation of the invocation of a member on an object.\n\nThis is the type of objects passed to [Object.noSuchMethod] when\nan object doesn't support the member invocation that was attempted\non it.\n\n"
      },
      {
        "baseclass": {
          "name": "num",
          "refId": "num"
        },
        "kind": "class",
        "name": "int",
        "id": "int",
        "children": [
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isEven",
            "id": "isEven",
            "comment": "Returns true if and only if this integer is even.\n"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isOdd",
            "id": "isOdd",
            "comment": "Returns true if and only if this integer is odd.\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "&",
            "id": "&1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "The bit-wise and operator.\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "|",
            "id": "|1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "The bit-wise or operator.\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "^",
            "id": "^1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "The bit-wise xor operator.\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "~",
            "id": "~0()",
            "comment": "The bit-wise negate operator.\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "<<",
            "id": "<<1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "shiftAmount",
                "id": "shiftAmount"
              }
            ],
            "comment": "The left shift operator.\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": ">>",
            "id": ">>1()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "shiftAmount",
                "id": "shiftAmount"
              }
            ],
            "comment": "The right shift operator.\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isEven",
            "id": "isEven0()",
            "comment": "Returns true if and only if this integer is even.\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isOdd",
            "id": "isOdd0()",
            "comment": "Returns true if and only if this integer is odd.\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "unary-",
            "id": "unary-0()",
            "comment": "Negate operator. Negating an integer produces an integer.\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "abs",
            "id": "abs0()",
            "comment": "Returns the absolute value of this integer.\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "round",
            "id": "round0()",
            "comment": "Returns [this].\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "floor",
            "id": "floor0()",
            "comment": "Returns [this].\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "ceil",
            "id": "ceil0()",
            "comment": "Returns [this].\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "truncate",
            "id": "truncate0()",
            "comment": "Returns [this].\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()",
            "comment": "\nReturns a representation of this [int] value.\n\nIt should always be the case that if [:i:] is an [int] value,\nthen [:i == int.parse(i.toString()):].\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "parse",
            "id": "parse1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "comment": "\nParse [source] as an integer literal and return its value.\n\nAccepts \"0x\" prefix for hexadecimal numbers, otherwise defaults\nto base-10.\n\nThrows a [FormatException] if [source] is not a valid integer literal.\n\n"
          }
        ],
        "comment": "\nRepresentation of Dart integers containing integer specific\noperations and specialization of operations inherited from [num].\n\nIntegers can be arbitrarily large in Dart.\n\n*Note however, that when compiling to JavaScript, integers are\nimplemented as JavaScript numbers. When compiling to JavaScript,\nintegers are therefore restricted to 53 significant bits because\nall JavaScript numbers are double-precision floating point\nvalues. The behavior of the operators and methods in the [int]\nclass therefore sometimes differs between the Dart VM and Dart code\ncompiled to JavaScript.*\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Hashable",
        "id": "Hashable",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "hashCode",
            "id": "hashCode"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "hashCode",
            "id": "hashCode0()"
          }
        ],
        "comment": "\nTemporary interface for backwards compatibility.\n\nAll objects now have a [hashCode] method. This interface will be removed\nafter a grace period. Code that use the [:Hashable:] interface should\nremove it, or use [:Object:] instead if a type is necessary.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Futures",
        "id": "Futures",
        "children": [
          {
            "returnType": {
              "name": "Future",
              "refId": "Future"
            },
            "kind": "method",
            "name": "wait",
            "id": "wait1()",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "futures",
                "id": "futures"
              }
            ],
            "comment": "\nReturns a future which will complete once all the futures in a list are\ncomplete. If any of the futures in the list completes with an exception,\nthe resulting future also completes with an exception. (The value of the\nreturned future will be a list of all the values that were produced.)\n\n"
          }
        ],
        "comment": "\n[Futures] holds additional utility functions that operate on [Future]s (for\nexample, waiting for a collection of Futures to complete).\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Exception",
            "refId": "Exception"
          }
        ],
        "kind": "class",
        "name": "FutureUnhandledException",
        "id": "FutureUnhandledException",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "FutureUnhandledException",
            "id": "FutureUnhandledException2()",
            "children": [
              {
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              },
              {
                "ref": {
                  "name": "Object",
                  "refId": "Object"
                },
                "kind": "param",
                "name": "stackTrace",
                "id": "stackTrace"
              }
            ]
          },
          {
            "ref": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "property",
            "name": "source",
            "id": "source"
          },
          {
            "ref": {
              "name": "Object",
              "refId": "Object"
            },
            "kind": "property",
            "name": "stackTrace",
            "id": "stackTrace"
          }
        ],
        "comment": "\nWraps unhandled exceptions provided to [Completer.completeException]. It is\nused to show both the error message and the stack trace for unhandled\nexceptions.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Exception",
            "refId": "Exception"
          }
        ],
        "kind": "class",
        "name": "FutureAlreadyCompleteException",
        "id": "FutureAlreadyCompleteException",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "FutureAlreadyCompleteException",
            "id": "FutureAlreadyCompleteException0()"
          }
        ],
        "comment": "\nThrown if a completer tries to set the value on a future that is already\ncomplete.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Exception",
            "refId": "Exception"
          }
        ],
        "kind": "class",
        "name": "FutureNotCompleteException",
        "id": "FutureNotCompleteException",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "FutureNotCompleteException",
            "id": "FutureNotCompleteException0()"
          }
        ],
        "comment": "Thrown when reading a future's properties before it is complete.\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Completer",
        "id": "Completer",
        "children": [
          {
            "ref": {
              "name": "Future",
              "refId": "Future"
            },
            "kind": "property",
            "name": "future",
            "id": "future",
            "comment": "The future that will contain the value produced by this completer.\n"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future"
            },
            "kind": "method",
            "name": "future",
            "id": "future0()",
            "comment": "The future that will contain the value produced by this completer.\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "complete",
            "id": "complete1()",
            "children": [
              {
                "ref": {
                  "name": "T",
                  "refId": "T"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "comment": "Supply a value for [future].\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "completeException",
            "id": "completeException2()",
            "children": [
              {
                "ref": {
                  "name": "Object",
                  "refId": "Object"
                },
                "kind": "param",
                "name": "exception",
                "id": "exception"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "Object",
                  "refId": "Object"
                },
                "kind": "param",
                "name": "stackTrace",
                "id": "stackTrace"
              }
            ],
            "comment": "\nIndicate in [future] that an exception occured while trying to produce its\nvalue. The argument [exception] should not be [:null:]. A [stackTrace]\nobject can be provided as well to give the user information about where\nthe error occurred. If omitted, it will be [:null:].\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Completer",
            "id": "Completer0()"
          }
        ],
        "comment": "\nA [Completer] is used to produce [Future]s and supply their value when it\nbecomes available.\n\nA service that provides values to callers, and wants to return [Future]s can\nuse a [Completer] as follows:\n\n    Completer completer = new Completer();\n    // send future object back to client...\n    return completer.future;\n    ...\n\n    // later when value is available, call:\n    completer.complete(value);\n\n    // alternatively, if the service cannot produce the value, it\n    // can provide an exception:\n    completer.completeException(exception);\n\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Future",
        "id": "Future",
        "children": [
          {
            "ref": {
              "name": "T",
              "refId": "T"
            },
            "kind": "property",
            "name": "value",
            "id": "value",
            "comment": "The value provided. Throws an exception if [hasValue] is false.\n"
          },
          {
            "ref": {
              "name": "Object",
              "refId": "Object"
            },
            "kind": "property",
            "name": "exception",
            "id": "exception",
            "comment": "\nException that occurred ([:null:] if no exception occured). This property\nthrows a [FutureNotCompleteException] if it is used before this future is\ncompletes.\n\n"
          },
          {
            "ref": {
              "name": "Object",
              "refId": "Object"
            },
            "kind": "property",
            "name": "stackTrace",
            "id": "stackTrace",
            "comment": "\nThe stack trace object associated with the exception that occurred. This\nthrows a [FutureNotCompleteException] if it is used before the future\ncompletes. Returns [:null:] if the future completed successfully or a\nstack trace wasn't provided with the exception when it occurred.\n\n"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isComplete",
            "id": "isComplete",
            "comment": "\nWhether the future is complete (either the value is available or there was\nan exception).\n\n"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "hasValue",
            "id": "hasValue",
            "comment": "\nWhether the value is available (meaning [isComplete] is true, and there was\nno exception).\n\n"
          },
          {
            "returnType": {
              "name": "T",
              "refId": "T"
            },
            "kind": "method",
            "name": "value",
            "id": "value0()",
            "comment": "The value provided. Throws an exception if [hasValue] is false.\n"
          },
          {
            "returnType": {
              "name": "Object",
              "refId": "Object"
            },
            "kind": "method",
            "name": "exception",
            "id": "exception0()",
            "comment": "\nException that occurred ([:null:] if no exception occured). This property\nthrows a [FutureNotCompleteException] if it is used before this future is\ncompletes.\n\n"
          },
          {
            "returnType": {
              "name": "Object",
              "refId": "Object"
            },
            "kind": "method",
            "name": "stackTrace",
            "id": "stackTrace0()",
            "comment": "\nThe stack trace object associated with the exception that occurred. This\nthrows a [FutureNotCompleteException] if it is used before the future\ncompletes. Returns [:null:] if the future completed successfully or a\nstack trace wasn't provided with the exception when it occurred.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isComplete",
            "id": "isComplete0()",
            "comment": "\nWhether the future is complete (either the value is available or there was\nan exception).\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "hasValue",
            "id": "hasValue0()",
            "comment": "\nWhether the value is available (meaning [isComplete] is true, and there was\nno exception).\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "onComplete",
            "id": "onComplete1()",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "complete",
                "id": "complete"
              }
            ],
            "comment": "\nWhen this future is complete (either with a value or with an exception),\nthen [complete] is called with the future.\nIf [complete] throws an exception, it is ignored.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "then",
            "id": "then1()",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "onSuccess",
                "id": "onSuccess"
              }
            ],
            "comment": "\nIf this future is complete and has a value, then [onSuccess] is called\nwith the value.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "handleException",
            "id": "handleException1()",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "onException",
                "id": "onException"
              }
            ],
            "comment": "\nIf this future is complete and has an exception, then call [onException].\n\nIf [onException] returns true, then the exception is considered handled.\n\nIf [onException] does not return true (or [handleException] was never\ncalled), then the exception is not considered handled. In that case, if\nthere were any calls to [then], then the exception will be thrown when the\nvalue is set.\n\nIn most cases it should not be necessary to call [handleException],\nbecause the exception associated with this [Future] will propagate\nnaturally if the future's value is being consumed. Only call\n[handleException] if you need to do some special local exception handling\nrelated to this particular Future's value.\n\n"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future"
            },
            "kind": "method",
            "name": "transform",
            "id": "transform1()",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "transformation",
                "id": "transformation"
              }
            ],
            "comment": "\nA future representing [transformation] applied to this future's value.\n\nWhen this future gets a value, [transformation] will be called on the\nvalue, and the returned future will receive the result.\n\nIf an exception occurs (received by this future, or thrown by\n[transformation]) then the returned future will receive the exception.\n\nYou must not add exception handlers to [this] future prior to calling\ntransform, and any you add afterwards will not be invoked.\n\n"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future"
            },
            "kind": "method",
            "name": "chain",
            "id": "chain1()",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "transformation",
                "id": "transformation"
              }
            ],
            "comment": "\nA future representing an asynchronous transformation applied to this\nfuture's value. [transformation] must return a Future.\n\nWhen this future gets a value, [transformation] will be called on the\nvalue. When the resulting future gets a value, the returned future\nwill receive it.\n\nIf an exception occurs (received by this future, thrown by\n[transformation], or received by the future returned by [transformation])\nthen the returned future will receive the exception.\n\nYou must not add exception handlers to [this] future prior to calling\nchain, and any you add afterwards will not be invoked.\n\n"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future"
            },
            "kind": "method",
            "name": "transformException",
            "id": "transformException1()",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "transformation",
                "id": "transformation"
              }
            ],
            "comment": "\nA future representing [transformation] applied to this future's exception.\nThis can be used to \"catch\" an exception coming from `this` and translate\nit to a more appropriate result.\n\nIf this future gets a value, it simply completes to that same value. If an\nexception occurs, then [transformation] will be called with the exception\nvalue. If [transformation] itself throws an exception, then the returned\nfuture completes with that exception. Otherwise, the future will complete\nwith the value returned by [transformation]. If the returned value is\nitself a future, then the future returned by [transformException] will\ncomplete with the value that that future completes to.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Future.immediate",
            "id": "Future.immediate1()",
            "children": [
              {
                "ref": {
                  "name": "T",
                  "refId": "T"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "comment": "A future whose value is immediately available.\n"
          }
        ],
        "comment": "\nA [Future] is used to obtain a value sometime in the future.  Receivers of a\n[Future] can obtain the value by passing a callback to [then]. For example:\n\n    Future<int> future = getFutureFromSomewhere();\n    future.then((value) {\n      print(\"I received the number $value\");\n    });\n\nA future may complete by *succeeding* (producing a value) or *failing*\n(producing an exception, which may be handled with [handleException]).\nCallbacks passed to [onComplete] will be invoked in either case.\n\nWhen a future completes, the following actions happen in order:\n\n  1. if the future suceeded, handlers registered with [then] are called.\n  2. if the future failed, handlers registered with [handleException] are\n     called in sequence, until one returns true.\n  3. handlers registered with [onComplete] are called\n  4. if the future failed, and at least one handler was registered with\n     [then], and no handler registered with [handleException] returned\n     [:true:], then the exception is thrown.\n\nUse a [Completer] to create and change the state of a [Future].\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Function",
        "id": "Function",
        "children": [
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "method",
            "name": "apply",
            "id": "apply3()",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "function",
                "id": "function"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "positionalArguments",
                "id": "positionalArguments"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "namedArguments",
                "id": "namedArguments"
              }
            ],
            "comment": "\nDynamically call [function] with the specified arguments.\n\nActs the same as calling function with positional arguments\ncorresponding to the elements of [positionalArguments] and\nnamed arguments corresponding to the elements of [namedArguments].\n\nThis includes giving the same errors if [function] isn't callable or\nif it expects different parameters.\n\nExample: [: Function.apply(foo, [1,2,3], {\"f\": 4, \"g\": 5}) :] gives\nexactly the same result as [: foo(1, 2, 3, f: 4, g: 5) :].\n\nIf [positionalArguments] is null, it's considered an empty list.\nIf [namedArguments] is omitted or null, it is considered an empty map.\n\n"
          }
        ],
        "comment": "\nSuper-type of all function types.\n\nA function value, or an instance of a class with a \"call\" method, is a\nsubtype of a function type, and as such, a subtype of [Function].\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Exception",
            "refId": "Exception"
          }
        ],
        "kind": "class",
        "name": "ExpectException",
        "id": "ExpectException",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "ExpectException",
            "id": "ExpectException1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ]
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "message",
            "id": "message"
          }
        ]
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Expect",
        "id": "Expect",
        "children": [
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "equals",
            "id": "equals3()",
            "children": [
              {
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "expected",
                "id": "expected"
              },
              {
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "actual",
                "id": "actual"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reason",
                "id": "reason"
              }
            ],
            "comment": "\nChecks whether the expected and actual values are equal (using `==`).\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "isTrue",
            "id": "isTrue2()",
            "children": [
              {
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "actual",
                "id": "actual"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reason",
                "id": "reason"
              }
            ],
            "comment": "\nChecks whether the actual value is a bool and its value is true.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "isFalse",
            "id": "isFalse2()",
            "children": [
              {
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "actual",
                "id": "actual"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reason",
                "id": "reason"
              }
            ],
            "comment": "\nChecks whether the actual value is a bool and its value is false.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "isNull",
            "id": "isNull2()",
            "children": [
              {
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "actual",
                "id": "actual"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reason",
                "id": "reason"
              }
            ],
            "comment": "\nChecks whether [actual] is null.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "isNotNull",
            "id": "isNotNull2()",
            "children": [
              {
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "actual",
                "id": "actual"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reason",
                "id": "reason"
              }
            ],
            "comment": "\nChecks whether [actual] is not null.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "identical",
            "id": "identical3()",
            "children": [
              {
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "expected",
                "id": "expected"
              },
              {
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "actual",
                "id": "actual"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reason",
                "id": "reason"
              }
            ],
            "comment": "\nChecks whether the expected and actual values are identical\n(using `===`).\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "fail",
            "id": "fail1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "msg",
                "id": "msg"
              }
            ]
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "approxEquals",
            "id": "approxEquals4()",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "expected",
                "id": "expected"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "actual",
                "id": "actual"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "tolerance",
                "id": "tolerance"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reason",
                "id": "reason"
              }
            ],
            "comment": "\nFailure if the difference between expected and actual is greater than the\ngiven tolerance. If no tolerance is given, tolerance is assumed to be the\nvalue 4 significant digits smaller than the value given for expected.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "notEquals",
            "id": "notEquals3()",
            "children": [
              {
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "unexpected",
                "id": "unexpected"
              },
              {
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "actual",
                "id": "actual"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reason",
                "id": "reason"
              }
            ]
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "listEquals",
            "id": "listEquals3()",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "expected",
                "id": "expected"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "actual",
                "id": "actual"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reason",
                "id": "reason"
              }
            ],
            "comment": "\nChecks that all elements in [expected] and [actual] are equal `==`.\nThis is different than the typical check for identity equality `===`\nused by the standard list implementation.  It should also produce nicer\nerror messages than just calling `Expect.equals(expected, actual)`.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "mapEquals",
            "id": "mapEquals3()",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "expected",
                "id": "expected"
              },
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "actual",
                "id": "actual"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reason",
                "id": "reason"
              }
            ],
            "comment": "\nChecks that all [expected] and [actual] have the same set of keys (using\nthe semantics of [Map.containsKey] to determine what \"same\" means. For\neach key, checks that the values in both maps are equal using `==`.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "stringEquals",
            "id": "stringEquals3()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "expected",
                "id": "expected"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "actual",
                "id": "actual"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reason",
                "id": "reason"
              }
            ],
            "comment": "\nSpecialized equality test for strings. When the strings don't match,\nthis method shows where the mismatch starts and ends.\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setEquals",
            "id": "setEquals3()",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "expected",
                "id": "expected"
              },
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "actual",
                "id": "actual"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reason",
                "id": "reason"
              }
            ],
            "comment": "\nChecks that every element of [expected] is also in [actual], and that\nevery element of [actual] is also in [expected].\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "throws",
            "id": "throws3()",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "_CheckExceptionFn",
                  "refId": "_CheckExceptionFn"
                },
                "kind": "param",
                "name": "check",
                "id": "check"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reason",
                "id": "reason"
              }
            ],
            "comment": "\nCalls the function [f] and verifies that it throws an exception.\nThe optional [check] function can provide additional validation\nthat the correct exception is being thrown.  For example, to check\nthe type of the exception you could write this:\n\n    Expect.throws(myThrowingFunction, (e) => e is MyException);\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "_getMessage",
            "id": "_getMessage1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reason",
                "id": "reason"
              }
            ]
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_fail",
            "id": "_fail1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ]
          }
        ],
        "comment": "\nExpect is used for tests that do not want to make use of the\nDart unit test library - for example, the core language tests.\nThird parties are discouraged from using this, and should use\nthe expect() function in the unit test library instead for\ntest assertions.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Expando",
        "id": "Expando",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()",
            "comment": "\nExpando toString method override.\n\n"
          },
          {
            "returnType": {
              "name": "T",
              "refId": "T"
            },
            "kind": "method",
            "name": "[]",
            "id": "[]1()",
            "children": [
              {
                "ref": {
                  "name": "Object",
                  "refId": "Object"
                },
                "kind": "param",
                "name": "object",
                "id": "object"
              }
            ],
            "comment": "\nGets the value of this [Expando]'s property on the given\nobject. If the object hasn't been expanded, the method returns\n[null].\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "[]=",
            "id": "[]=2()",
            "children": [
              {
                "ref": {
                  "name": "Object",
                  "refId": "Object"
                },
                "kind": "param",
                "name": "object",
                "id": "object"
              },
              {
                "ref": {
                  "name": "T",
                  "refId": "T"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "comment": "\nSets the value of this [Expando]'s property on the given\nobject. Properties can effectively be removed again by setting\ntheir value to null.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Expando",
            "id": "Expando1()",
            "children": [
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "comment": "\nCreates a new [Expando]. The optional name is only used for\ndebugging purposes and creating two different [Expando]s with the\nsame name yields two [Expando]s that work on different properties\nof the objects they are used on.\n\n"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "name",
            "id": "name"
          }
        ],
        "comment": "\nAn [Expando] allows adding new properties to objects.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Exception",
            "refId": "Exception"
          }
        ],
        "kind": "class",
        "name": "RuntimeError",
        "id": "RuntimeError",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "RuntimeError",
            "id": "RuntimeError1()",
            "children": [
              {
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ]
          },
          {
            "ref": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "property",
            "name": "message",
            "id": "message"
          }
        ],
        "comment": "\nException thrown when a runtime error occurs.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Exception",
            "refId": "Exception"
          }
        ],
        "kind": "class",
        "name": "IntegerDivisionByZeroException",
        "id": "IntegerDivisionByZeroException",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "IntegerDivisionByZeroException",
            "id": "IntegerDivisionByZeroException0()"
          }
        ]
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Exception",
            "refId": "Exception"
          }
        ],
        "kind": "class",
        "name": "IllegalJSRegExpException",
        "id": "IllegalJSRegExpException",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "IllegalJSRegExpException",
            "id": "IllegalJSRegExpException2()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "_pattern",
                "id": "_pattern"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "_errmsg",
                "id": "_errmsg"
              }
            ]
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "_pattern",
            "id": "_pattern"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "_errmsg",
            "id": "_errmsg"
          }
        ]
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Exception",
            "refId": "Exception"
          }
        ],
        "kind": "class",
        "name": "NotImplementedException",
        "id": "NotImplementedException",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "NotImplementedException",
            "id": "NotImplementedException1()",
            "children": [
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ]
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "_message",
            "id": "_message"
          }
        ]
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Exception",
            "refId": "Exception"
          }
        ],
        "kind": "class",
        "name": "EmptyQueueException",
        "id": "EmptyQueueException",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "EmptyQueueException",
            "id": "EmptyQueueException0()"
          }
        ]
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Exception",
            "refId": "Exception"
          }
        ],
        "kind": "class",
        "name": "NoMoreElementsException",
        "id": "NoMoreElementsException",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "NoMoreElementsException",
            "id": "NoMoreElementsException0()"
          }
        ]
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Exception",
            "refId": "Exception"
          }
        ],
        "kind": "class",
        "name": "NullPointerException",
        "id": "NullPointerException",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "exceptionName",
            "id": "exceptionName"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "exceptionName",
            "id": "exceptionName0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "NullPointerException",
            "id": "NullPointerException2()",
            "children": [
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "functionName",
                "id": "functionName"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "arguments",
                "id": "arguments"
              }
            ]
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "functionName",
            "id": "functionName"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List"
            },
            "kind": "property",
            "name": "arguments",
            "id": "arguments"
          }
        ]
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Exception",
            "refId": "Exception"
          }
        ],
        "kind": "class",
        "name": "FormatException",
        "id": "FormatException",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "FormatException",
            "id": "FormatException1()",
            "children": [
              {
                "isOptional": true,
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "comment": "\nCreates a new FormatException with an optional error [message].\n\n"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "message",
            "id": "message"
          }
        ],
        "comment": "\nException thrown when a string or some other data does not have an expected\nformat and cannot be parsed or processed.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Exception",
            "refId": "Exception"
          }
        ],
        "kind": "class",
        "name": "IndexOutOfRangeException",
        "id": "IndexOutOfRangeException",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "IndexOutOfRangeException",
            "id": "IndexOutOfRangeException1()",
            "children": [
              {
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "_value",
                "id": "_value"
              }
            ]
          },
          {
            "ref": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "property",
            "name": "_value",
            "id": "_value"
          }
        ],
        "comment": "\nException thrown because of an index outside of the valid range.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Exception",
        "id": "Exception",
        "children": [
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Exception",
            "id": "Exception1()",
            "children": [
              {
                "isOptional": true,
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ]
          }
        ],
        "comment": "\nInterface implemented by all core library exceptions.\nDefaults to an implementation that only carries a simple message.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Error",
            "refId": "Error"
          }
        ],
        "kind": "class",
        "name": "StackOverflowError",
        "id": "StackOverflowError",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "StackOverflowError",
            "id": "StackOverflowError0()"
          }
        ]
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Error",
            "refId": "Error"
          }
        ],
        "kind": "class",
        "name": "OutOfMemoryError",
        "id": "OutOfMemoryError",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "OutOfMemoryError",
            "id": "OutOfMemoryError0()"
          }
        ]
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Error",
            "refId": "Error"
          }
        ],
        "kind": "class",
        "name": "StateError",
        "id": "StateError",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "StateError",
            "id": "StateError1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ]
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "message",
            "id": "message"
          }
        ],
        "comment": "\nThe operation was not allowed by the current state of the object.\n\nThis is a generic error used for a variety of different erroneous\nactions. The message should be descriptive.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Error",
            "refId": "Error"
          }
        ],
        "kind": "class",
        "name": "UnsupportedError",
        "id": "UnsupportedError",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "UnsupportedError",
            "id": "UnsupportedError1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ]
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "message",
            "id": "message"
          }
        ],
        "comment": "\nThe operation was not allowed by the object.\n\nThis [Error] is thrown when a class cannot implement\none of the methods in its signature.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Error",
            "refId": "Error"
          }
        ],
        "kind": "class",
        "name": "NoSuchMethodError",
        "id": "NoSuchMethodError",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "safeToString",
            "id": "safeToString1()",
            "children": [
              {
                "ref": {
                  "name": "Object",
                  "refId": "Object"
                },
                "kind": "param",
                "name": "object",
                "id": "object"
              }
            ]
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "_objectToString",
            "id": "_objectToString1()",
            "children": [
              {
                "ref": {
                  "name": "Object",
                  "refId": "Object"
                },
                "kind": "param",
                "name": "object",
                "id": "object"
              }
            ]
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "NoSuchMethodError",
            "id": "NoSuchMethodError4()",
            "children": [
              {
                "ref": {
                  "name": "Object",
                  "refId": "Object"
                },
                "kind": "param",
                "name": "_receiver",
                "id": "_receiver"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "_functionName",
                "id": "_functionName"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "_arguments",
                "id": "_arguments"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "existingArgumentNames",
                "id": "existingArgumentNames"
              }
            ],
            "comment": "\nCreate a [NoSuchMethodError] corresponding to a failed method call.\n\nThe first parameter is the receiver of the method call.\nThe second parameter is the name of the called method.\nThe third parameter is the positional arguments that the method was\ncalled with.\nThe optional [exisitingArgumentNames] is the expected parameters of a\nmethod with the same name on the receiver, if available. This is\nthe method that would have been called if the parameters had matched.\n\nTODO(lrn): This will be rewritten to use mirrors when they are available.\n\n"
          },
          {
            "ref": {
              "name": "Object",
              "refId": "Object"
            },
            "kind": "property",
            "name": "_receiver",
            "id": "_receiver"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "_functionName",
            "id": "_functionName"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List"
            },
            "kind": "property",
            "name": "_arguments",
            "id": "_arguments"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List"
            },
            "kind": "property",
            "name": "_existingArgumentNames",
            "id": "_existingArgumentNames"
          }
        ],
        "comment": "\nError thrown by the default implementation of [:noSuchMethod:] on [Object].\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Error",
            "refId": "Error"
          }
        ],
        "kind": "class",
        "name": "AbstractClassInstantiationError",
        "id": "AbstractClassInstantiationError",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "AbstractClassInstantiationError",
            "id": "AbstractClassInstantiationError1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "_className",
                "id": "_className"
              }
            ]
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "_className",
            "id": "_className"
          }
        ]
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Error",
            "refId": "Error"
          }
        ],
        "kind": "class",
        "name": "FallThroughError",
        "id": "FallThroughError",
        "children": [
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "FallThroughError",
            "id": "FallThroughError0()"
          }
        ],
        "comment": "\nError thrown when control reaches the end of a switch case.\n\nThe Dart specification requires this error to be thrown when\ncontrol reaches the end of a switch case (except the last case\nof a switch) without meeting a break or similar end of the control\nflow.\n\n"
      },
      {
        "baseclass": {
          "name": "ArgumentError",
          "refId": "ArgumentError"
        },
        "kind": "class",
        "name": "IllegalArgumentException",
        "id": "IllegalArgumentException",
        "children": [
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "IllegalArgumentException",
            "id": "IllegalArgumentException1()",
            "children": [
              {
                "isOptional": true,
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "argument",
                "id": "argument"
              }
            ]
          }
        ],
        "comment": "\nTemporary backwards compatibility class.\n\nRemoved when users have had time to change to using [ArgumentError].\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Error",
            "refId": "Error"
          }
        ],
        "kind": "class",
        "name": "ArgumentError",
        "id": "ArgumentError",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "ArgumentError",
            "id": "ArgumentError1()",
            "children": [
              {
                "isOptional": true,
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "comment": "The [message] describes the erroneous argument.\n"
          },
          {
            "ref": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "property",
            "name": "message",
            "id": "message"
          }
        ],
        "comment": "\nError thrown when a function is passed an unacceptable argument.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Error",
            "refId": "Error"
          }
        ],
        "kind": "class",
        "name": "CastError",
        "id": "CastError",
        "comment": "\nError thrown by the runtime system when a cast operation fails.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "AssertionError",
            "refId": "AssertionError"
          }
        ],
        "kind": "class",
        "name": "TypeError",
        "id": "TypeError",
        "comment": "\nError thrown by the runtime system when a type assertion fails.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Error",
            "refId": "Error"
          }
        ],
        "kind": "class",
        "name": "AssertionError",
        "id": "AssertionError",
        "comment": "\nError thrown by the runtime system when an assert statement fails.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Error",
        "id": "Error",
        "children": [
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Error",
            "id": "Error0()"
          }
        ]
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Comparable",
            "refId": "Comparable"
          }
        ],
        "kind": "class",
        "name": "Duration",
        "id": "Duration",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "inDays",
            "id": "inDays",
            "comment": "\nThis [Duration] in days. Incomplete days are discarded\n\n"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "inHours",
            "id": "inHours",
            "comment": "\nThis [Duration] in hours. Incomplete hours are discarded.\nThe returned value can be greater than 23.\n\n"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "inMinutes",
            "id": "inMinutes",
            "comment": "\nThis [Duration] in minutes. Incomplete minutes are discarded.\nThe returned value can be greater than 59.\n\n"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "inSeconds",
            "id": "inSeconds",
            "comment": "\nThis [Duration] in seconds. Incomplete seconds are discarded.\nThe returned value can be greater than 59.\n\n"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "hashCode",
            "id": "hashCode"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "inDays",
            "id": "inDays0()",
            "comment": "\nThis [Duration] in days. Incomplete days are discarded\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "inHours",
            "id": "inHours0()",
            "comment": "\nThis [Duration] in hours. Incomplete hours are discarded.\nThe returned value can be greater than 23.\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "inMinutes",
            "id": "inMinutes0()",
            "comment": "\nThis [Duration] in minutes. Incomplete minutes are discarded.\nThe returned value can be greater than 59.\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "inSeconds",
            "id": "inSeconds0()",
            "comment": "\nThis [Duration] in seconds. Incomplete seconds are discarded.\nThe returned value can be greater than 59.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "==",
            "id": "==1()",
            "children": [
              {
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ]
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "hashCode",
            "id": "hashCode0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "compareTo",
            "id": "compareTo1()",
            "children": [
              {
                "ref": {
                  "name": "Duration",
                  "refId": "Duration"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ]
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Duration",
            "id": "Duration5()",
            "children": [
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "days",
                "id": "days"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "hours",
                "id": "hours"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "minutes",
                "id": "minutes"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "seconds",
                "id": "seconds"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "milliseconds",
                "id": "milliseconds"
              }
            ],
            "comment": "\nThe duration is the sum of all individual parts. This means that individual\nparts don't need to be less than the next-bigger unit. For example [hours]\nis allowed to have a value greater than 23.\n\nAll individual parts are allowed to be negative.\nAll arguments are by default 0.\n\n"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MILLISECONDS_PER_SECOND",
            "id": "MILLISECONDS_PER_SECOND"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "SECONDS_PER_MINUTE",
            "id": "SECONDS_PER_MINUTE"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MINUTES_PER_HOUR",
            "id": "MINUTES_PER_HOUR"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "HOURS_PER_DAY",
            "id": "HOURS_PER_DAY"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MILLISECONDS_PER_MINUTE",
            "id": "MILLISECONDS_PER_MINUTE"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MILLISECONDS_PER_HOUR",
            "id": "MILLISECONDS_PER_HOUR"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MILLISECONDS_PER_DAY",
            "id": "MILLISECONDS_PER_DAY"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "SECONDS_PER_HOUR",
            "id": "SECONDS_PER_HOUR"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "SECONDS_PER_DAY",
            "id": "SECONDS_PER_DAY"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MINUTES_PER_DAY",
            "id": "MINUTES_PER_DAY"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "inMilliseconds",
            "id": "inMilliseconds"
          }
        ],
        "comment": "\nA [Duration] represents a time span. A duration can be negative.\n\n"
      },
      {
        "baseclass": {
          "name": "num",
          "refId": "num"
        },
        "kind": "class",
        "name": "double",
        "id": "double",
        "children": [
          {
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "remainder",
            "id": "remainder1()",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "Return the remainder from dividing this [double] by [other].\n"
          },
          {
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "+",
            "id": "+1()",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "Addition operator.\n"
          },
          {
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "-",
            "id": "-1()",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "Subtraction operator.\n"
          },
          {
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "*",
            "id": "*1()",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "Multiplication operator.\n"
          },
          {
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "%",
            "id": "%1()",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "Euclidean modulo operator.\n"
          },
          {
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "/",
            "id": "/1()",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "Division operator.\n"
          },
          {
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "~/",
            "id": "~/1()",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nTruncating division operator.\n\nThe result of the truncating division [:a ~/ b:] is equivalent to\n[:(a / b).truncate():].\n\n"
          },
          {
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "unary-",
            "id": "unary-0()",
            "comment": "Negate operator.\n"
          },
          {
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "abs",
            "id": "abs0()",
            "comment": "Returns the absolute value of this [double].\n"
          },
          {
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "round",
            "id": "round0()",
            "comment": "\nReturns the integer value closest to this [double].\n\nRounds away from zero when there is no closest integer:\n [:(3.5).round() == 4:] and [:(-3.5).round() == -4:].\n\n"
          },
          {
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "floor",
            "id": "floor0()",
            "comment": "Returns the greatest integer value no greater than this [double].\n"
          },
          {
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "ceil",
            "id": "ceil0()",
            "comment": "Returns the least integer value that is no smaller than this [double].\n"
          },
          {
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "truncate",
            "id": "truncate0()",
            "comment": "\nReturns the integer value obtained by discarding any fractional\ndigits from this [double].\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()",
            "comment": "\nProvide a representation of this [double] value.\n\nThe representation is a number literal such that the closest double value\nto the representation's mathematical value is this [double].\n\nReturns \"NaN\" for the Not-a-Number value.\nReturns \"Infinity\" and \"-Infinity\" for positive and negative Infinity.\nReturns \"-0.0\" for negative zero.\n\nIt should always be the case that if [:d:] is a [double], then\n[:d == double.parse(d.toString()):].\n\n"
          },
          {
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "parse",
            "id": "parse1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "comment": "\nParse [source] as an double literal and return its value.\n\nAccepts the same format as double literals:\n  [: ['+'|'-'] [digit* '.'] digit+ [('e'|'E') ['+'|'-'] digit+] :]\n\nAlso recognizes \"NaN\", \"Infinity\" and \"-Infinity\" as inputs and\nreturns the corresponding double value.\n\nThrows a [FormatException] if [source] is not a valid double literal.\n\n"
          },
          {
            "ref": {
              "name": "double",
              "refId": "double"
            },
            "isStatic": true,
            "kind": "property",
            "name": "NAN",
            "id": "NAN"
          },
          {
            "ref": {
              "name": "double",
              "refId": "double"
            },
            "isStatic": true,
            "kind": "property",
            "name": "INFINITY",
            "id": "INFINITY"
          },
          {
            "ref": {
              "name": "double",
              "refId": "double"
            },
            "isStatic": true,
            "kind": "property",
            "name": "NEGATIVE_INFINITY",
            "id": "NEGATIVE_INFINITY"
          },
          {
            "ref": {
              "name": "double",
              "refId": "double"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MIN_POSITIVE",
            "id": "MIN_POSITIVE"
          },
          {
            "ref": {
              "name": "double",
              "refId": "double"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MAX_FINITE",
            "id": "MAX_FINITE"
          }
        ],
        "comment": "\nRepresentation of Dart doubles containing double specific constants\nand operations and specializations of operations inherited from\n[num].\n\nThe [double] type is contagious. Operations on [double]s return\n[double] results.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "interfaces": [
          {
            "name": "Comparable",
            "refId": "Comparable"
          }
        ],
        "kind": "class",
        "name": "Date",
        "id": "Date",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "timeZoneName",
            "id": "timeZoneName",
            "comment": "\nReturns the abbreviated time-zone name.\n\nExamples: [:\"CET\":] or [:\"CEST\":].\n\n"
          },
          {
            "ref": {
              "name": "Duration",
              "refId": "Duration"
            },
            "kind": "property",
            "name": "timeZoneOffset",
            "id": "timeZoneOffset",
            "comment": "\nThe time-zone offset is the difference between local time and UTC. That is,\nthe offset is positive for time zones west of UTC.\n\nNote, that JavaScript, Python and C return the difference between UTC and\nlocal time. Java, C# and Ruby return the difference between local time and\nUTC.\n\n"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "year",
            "id": "year",
            "comment": "\nReturns the year.\n\n"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "month",
            "id": "month",
            "comment": "\nReturns the month into the year [1..12].\n\n"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "day",
            "id": "day",
            "comment": "\nReturns the day into the month [1..31].\n\n"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "hour",
            "id": "hour",
            "comment": "\nReturns the hour into the day [0..23].\n\n"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "minute",
            "id": "minute",
            "comment": "\nReturns the minute into the hour [0...59].\n\n"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "second",
            "id": "second",
            "comment": "\nReturns the second into the minute [0...59].\n\n"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "millisecond",
            "id": "millisecond",
            "comment": "\nReturns the millisecond into the second [0...999].\n\n"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "weekday",
            "id": "weekday",
            "comment": "\nReturns the week day [MON..SUN]. In accordance with ISO 8601\na week starts with Monday which has the value 1.\n\n"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "millisecondsSinceEpoch",
            "id": "millisecondsSinceEpoch",
            "comment": "\nThe milliseconds since 1970-01-01T00:00:00Z (UTC). This value is\nindependent of the time zone.\n\nSee [Stopwatch] for means to measure time-spans.\n\n"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isUtc",
            "id": "isUtc",
            "comment": "\nTrue if this [Date] is set to UTC time.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "==",
            "id": "==1()",
            "children": [
              {
                "ref": {
                  "name": "Date",
                  "refId": "Date"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nReturns true if [this] occurs at the same time as [other]. The\ncomparison is independent of whether the time is utc or in the local\ntime zone.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "<",
            "id": "<1()",
            "children": [
              {
                "ref": {
                  "name": "Date",
                  "refId": "Date"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nReturns true if [this] occurs before [other]. The comparison is independent\nof whether the time is utc or in the local time zone.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "<=",
            "id": "<=1()",
            "children": [
              {
                "ref": {
                  "name": "Date",
                  "refId": "Date"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nReturns true if [this] occurs at the same time or before [other]. The\ncomparison is independent of whether the time is utc or in the local\ntime zone.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": ">",
            "id": ">1()",
            "children": [
              {
                "ref": {
                  "name": "Date",
                  "refId": "Date"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nReturns true if [this] occurs after [other]. The comparison is independent\nof whether the time is utc or in the local time zone.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": ">=",
            "id": ">=1()",
            "children": [
              {
                "ref": {
                  "name": "Date",
                  "refId": "Date"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nReturns true if [this] occurs at the same time or after [other]. The\ncomparison is independent of whether the time is utc or in the local\ntime zone.\n\n"
          },
          {
            "returnType": {
              "name": "Date",
              "refId": "Date"
            },
            "kind": "method",
            "name": "toLocal",
            "id": "toLocal0()",
            "comment": "\nReturns [this] in the local time zone. Returns itself if it is already in\nthe local time zone. Otherwise, this method is equivalent to\n[:new Date.fromMillisecondsSinceEpoch(millisecondsSinceEpoch,\n                                      isUtc: false):].\n\n"
          },
          {
            "returnType": {
              "name": "Date",
              "refId": "Date"
            },
            "kind": "method",
            "name": "toUtc",
            "id": "toUtc0()",
            "comment": "\nReturns [this] in UTC. Returns itself if it is already in UTC. Otherwise,\nthis method is equivalent to\n[:new Date.fromMillisecondsSinceEpoch(millisecondsSinceEpoch,\n                                      isUtc: true):].\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "timeZoneName",
            "id": "timeZoneName0()",
            "comment": "\nReturns the abbreviated time-zone name.\n\nExamples: [:\"CET\":] or [:\"CEST\":].\n\n"
          },
          {
            "returnType": {
              "name": "Duration",
              "refId": "Duration"
            },
            "kind": "method",
            "name": "timeZoneOffset",
            "id": "timeZoneOffset0()",
            "comment": "\nThe time-zone offset is the difference between local time and UTC. That is,\nthe offset is positive for time zones west of UTC.\n\nNote, that JavaScript, Python and C return the difference between UTC and\nlocal time. Java, C# and Ruby return the difference between local time and\nUTC.\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "year",
            "id": "year0()",
            "comment": "\nReturns the year.\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "month",
            "id": "month0()",
            "comment": "\nReturns the month into the year [1..12].\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "day",
            "id": "day0()",
            "comment": "\nReturns the day into the month [1..31].\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "hour",
            "id": "hour0()",
            "comment": "\nReturns the hour into the day [0..23].\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "minute",
            "id": "minute0()",
            "comment": "\nReturns the minute into the hour [0...59].\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "second",
            "id": "second0()",
            "comment": "\nReturns the second into the minute [0...59].\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "millisecond",
            "id": "millisecond0()",
            "comment": "\nReturns the millisecond into the second [0...999].\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "weekday",
            "id": "weekday0()",
            "comment": "\nReturns the week day [MON..SUN]. In accordance with ISO 8601\na week starts with Monday which has the value 1.\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "millisecondsSinceEpoch",
            "id": "millisecondsSinceEpoch0()",
            "comment": "\nThe milliseconds since 1970-01-01T00:00:00Z (UTC). This value is\nindependent of the time zone.\n\nSee [Stopwatch] for means to measure time-spans.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isUtc",
            "id": "isUtc0()",
            "comment": "\nTrue if this [Date] is set to UTC time.\n\n"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()",
            "comment": "\nReturns a human readable string for this instance.\nThe returned string is constructed for the time zone of this instance.\n\n"
          },
          {
            "returnType": {
              "name": "Date",
              "refId": "Date"
            },
            "kind": "method",
            "name": "add",
            "id": "add1()",
            "children": [
              {
                "ref": {
                  "name": "Duration",
                  "refId": "Duration"
                },
                "kind": "param",
                "name": "duration",
                "id": "duration"
              }
            ],
            "comment": "\nReturns a new [Date] with the [duration] added to this instance.\n\n"
          },
          {
            "returnType": {
              "name": "Date",
              "refId": "Date"
            },
            "kind": "method",
            "name": "subtract",
            "id": "subtract1()",
            "children": [
              {
                "ref": {
                  "name": "Duration",
                  "refId": "Duration"
                },
                "kind": "param",
                "name": "duration",
                "id": "duration"
              }
            ],
            "comment": "\nReturns a new [Date] with the [duration] subtracted from this instance.\n\n"
          },
          {
            "returnType": {
              "name": "Duration",
              "refId": "Duration"
            },
            "kind": "method",
            "name": "difference",
            "id": "difference1()",
            "children": [
              {
                "ref": {
                  "name": "Date",
                  "refId": "Date"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nReturns a [Duration] with the difference of [:this:] and [other].\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Date",
            "id": "Date7()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "year",
                "id": "year"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "month",
                "id": "month"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "day",
                "id": "day"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "hour",
                "id": "hour"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "minute",
                "id": "minute"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "second",
                "id": "second"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "millisecond",
                "id": "millisecond"
              }
            ],
            "comment": "\nConstructs a [Date] instance based on the individual parts. The date is\nin the local time zone.\n\n[month] and [day] are one-based. For example\n[:new Date(1938, 1, 10):] represents the 10th of January 1938.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Date.utc",
            "id": "Date.utc7()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "year",
                "id": "year"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "month",
                "id": "month"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "day",
                "id": "day"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "hour",
                "id": "hour"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "minute",
                "id": "minute"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "second",
                "id": "second"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "millisecond",
                "id": "millisecond"
              }
            ],
            "comment": "\nConstructs a [Date] instance based on the individual parts. The date is\nin the UTC time zone.\n\n[month] and [day] are one-based. For example\n[:new Date.utc(1938, 1, 10):] represents the 10th of January 1938 in\nCoordinated Universal Time.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Date.now",
            "id": "Date.now0()",
            "comment": "\nConstructs a new [Date] instance with current date time value in the\nlocal time zone.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Date.fromString",
            "id": "Date.fromString1()",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "formattedString",
                "id": "formattedString"
              }
            ],
            "comment": "\nConstructs a new [Date] instance based on [formattedString].\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "Date.fromMillisecondsSinceEpoch",
            "id": "Date.fromMillisecondsSinceEpoch2()",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "millisecondsSinceEpoch",
                "id": "millisecondsSinceEpoch"
              },
              {
                "isOptional": true,
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "isUtc",
                "id": "isUtc"
              }
            ],
            "comment": "\nConstructs a new [Date] instance with the given [millisecondsSinceEpoch].\nIf [isUtc] is false then the date is in the local time zone.\n\nThe constructed [Date] represents\n1970-01-01T00:00:00Z + [millisecondsSinceEpoch]ms in the given\ntime zone (local or UTC).\n\n"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MON",
            "id": "MON"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "TUE",
            "id": "TUE"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "WED",
            "id": "WED"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "THU",
            "id": "THU"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "FRI",
            "id": "FRI"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "SAT",
            "id": "SAT"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "SUN",
            "id": "SUN"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "DAYS_IN_WEEK",
            "id": "DAYS_IN_WEEK"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "JAN",
            "id": "JAN"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "FEB",
            "id": "FEB"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MAR",
            "id": "MAR"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "APR",
            "id": "APR"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MAY",
            "id": "MAY"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "JUN",
            "id": "JUN"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "JUL",
            "id": "JUL"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "AUG",
            "id": "AUG"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "SEP",
            "id": "SEP"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "OCT",
            "id": "OCT"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "NOV",
            "id": "NOV"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "DEC",
            "id": "DEC"
          }
        ],
        "comment": "\nDate is the public interface to a point in time.\n\nIt can represent time values that are at a distance of at most\n8,640,000,000,000,000ms (100,000,000 days) from epoch (1970-01-01 UTC). In\nother words: [:millisecondsSinceEpoch.abs() <= 8640000000000000:].\n\nAlso see [Stopwatch] for means to measure time-spans.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Comparable",
        "id": "Comparable",
        "children": [
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "compareTo",
            "id": "compareTo1()",
            "children": [
              {
                "ref": {
                  "name": "Comparable",
                  "refId": "Comparable"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "comment": "\nCompares this object to another [Comparable]\n\nReturns a value like a [Comparator] when comparing [:this:] to [other].\n\nMay throw an [ArgumentError] if [other] is of a type that\nis not comparable to [:this:].\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "compare",
            "id": "compare2()",
            "children": [
              {
                "ref": {
                  "name": "Comparable",
                  "refId": "Comparable"
                },
                "kind": "param",
                "name": "a",
                "id": "a"
              },
              {
                "ref": {
                  "name": "Comparable",
                  "refId": "Comparable"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              }
            ],
            "comment": "\nCompare one comparable to another.\n\nThis utility function is used as the default comparator\nfor the [List] sort function.\n\n"
          }
        ],
        "comment": "\nInterface used by types that have an intrinsic ordering.\n\n"
      },
      {
        "kind": "typedef",
        "name": "Comparator",
        "id": "Comparator"
      },
      {
        "baseclass": {
          "name": "Iterable",
          "refId": "Iterable"
        },
        "kind": "class",
        "name": "Collection",
        "id": "Collection",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "length",
            "id": "length",
            "comment": "\nReturns the number of elements in this collection.\n\n"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isEmpty",
            "id": "isEmpty",
            "comment": "\nReturns true if there is no element in this collection.\n\n"
          },
          {
            "returnType": {
              "name": "Collection",
              "refId": "Collection"
            },
            "kind": "method",
            "name": "map",
            "id": "map1()",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "comment": "\nReturns a new collection with the elements [: f(e) :]\nfor each element [:e:] of this collection.\n\nSubclasses of [Collection] should implement the [map] method\nto return a collection of the same general type as themselves.\nE.g., [List.map] should return a [List].\n\n"
          },
          {
            "returnType": {
              "name": "Collection",
              "refId": "Collection"
            },
            "kind": "method",
            "name": "filter",
            "id": "filter1()",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "comment": "\nReturns a collection with the elements of this collection\nthat satisfy the predicate [f].\n\nThe returned collection should be of the same type as the collection\ncreating it.\n\nAn element satisfies the predicate [f] if [:f(element):]\nreturns true.\n\n"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "length",
            "id": "length0()",
            "comment": "\nReturns the number of elements in this collection.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "contains",
            "id": "contains1()",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "element",
                "id": "element"
              }
            ],
            "comment": "\nCheck whether the collection contains an element equal to [element].\n\n"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "forEach",
            "id": "forEach1()",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "comment": "\nApplies the function [f] to each element of this collection.\n\n"
          },
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "method",
            "name": "reduce",
            "id": "reduce2()",
            "children": [
              {
                "ref": {
                  "name": "Dynamic_",
                  "refId": "Dynamic_"
                },
                "kind": "param",
                "name": "initialValue",
                "id": "initialValue"
              },
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "combine",
                "id": "combine"
              }
            ],
            "comment": "\nReduce a collection to a single value by iteratively combining each element\nof the collection with an existing value using the provided function.\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of a collection:\n\n  collection.reduce(0, (prev, element) => prev + element);\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "every",
            "id": "every1()",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "comment": "\nReturns true if every elements of this collection satisify the\npredicate [f]. Returns false otherwise.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "some",
            "id": "some1()",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "comment": "\nReturns true if one element of this collection satisfies the\npredicate [f]. Returns false otherwise.\n\n"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isEmpty",
            "id": "isEmpty0()",
            "comment": "\nReturns true if there is no element in this collection.\n\n"
          }
        ],
        "comment": "\nThe common interface of all collections.\n\nThe [Collection] class contains a skeleton implementation of\nan iterator based collection.\n\n"
      },
      {
        "baseclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "bool",
        "id": "bool",
        "children": [
          {
            "returnType": {
              "name": "Dynamic_",
              "refId": "Dynamic_"
            },
            "kind": "constructor",
            "name": "bool._uninstantiable",
            "id": "bool._uninstantiable0()"
          }
        ]
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "name": "coreSort",
        "id": "coreSort2()",
        "children": [
          {
            "ref": {
              "name": "List",
              "refId": "List"
            },
            "kind": "param",
            "name": "l",
            "id": "l"
          },
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "compare",
            "id": "compare"
          }
        ],
        "comment": "\nWARNING: This method is temporary and will go away soon.\n\n"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "name": "print",
        "id": "print1()",
        "children": [
          {
            "ref": {
              "name": "Object",
              "refId": "Object"
            },
            "kind": "param",
            "name": "object",
            "id": "object"
          }
        ]
      },
      {
        "returnType": {
          "name": "bool",
          "refId": "bool"
        },
        "kind": "method",
        "name": "identical",
        "id": "identical2()",
        "children": [
          {
            "ref": {
              "name": "Object",
              "refId": "Object"
            },
            "kind": "param",
            "name": "a",
            "id": "a"
          },
          {
            "ref": {
              "name": "Object",
              "refId": "Object"
            },
            "kind": "param",
            "name": "b",
            "id": "b"
          }
        ],
        "comment": "\nCheck whether two references are to the same object.\n\n"
      }
    ]
  }
]
