{"name":"dart.crypto","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"name":"_rotl32","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"val","kind":"param","id":"val"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"shift","kind":"param","id":"shift"}],"uri":"sdk/lib/crypto/hash_utils.dart","kind":"method","isPrivate":true,"id":"_rotl322()","line":"16"},{"name":"_BYTES_PER_WORD","uri":"sdk/lib/crypto/hash_utils.dart","kind":"variable","isPrivate":true,"id":"_BYTES_PER_WORD","line":"11"},{"name":"_BITS_PER_BYTE","uri":"sdk/lib/crypto/hash_utils.dart","kind":"variable","isPrivate":true,"id":"_BITS_PER_BYTE","line":"10"},{"name":"_MASK_32","uri":"sdk/lib/crypto/hash_utils.dart","kind":"variable","isPrivate":true,"id":"_MASK_32","line":"9"},{"name":"_MASK_8","uri":"sdk/lib/crypto/hash_utils.dart","kind":"variable","isPrivate":true,"id":"_MASK_8","line":"8"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"HashException","children":[{"name":"toString","kind":"method","id":"toString0()","line":"150"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"variable","id":"message","line":"151"},{"name":"HashException","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"param","id":"message"}],"kind":"constructor","id":"HashException1()","line":"149"}],"kind":"class","comment":"\nHashExceptions are thrown on invalid use of a Hash\nobject.\n","id":"HashException","line":"148"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"CryptoUtils","children":[{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"bytesToHex","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"bytes","kind":"param","id":"bytes"}],"kind":"method","comment":"\nConvert a list of bytes (for example a message digest) into a hex\nstring.\n","id":"bytesToHex1()","line":"130"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"bytesToBase64","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"bytes","kind":"param","id":"bytes"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"lineLength","kind":"param","id":"lineLength"}],"kind":"method","comment":"\nConverts a list of bytes (for example a message digest) into a\nbase64 encoded string optionally broken up in to lines of\n[lineLength] chars separated by '\\r\\n'.\n","id":"bytesToBase642()","line":"139"}],"kind":"class","comment":"\nUtility methods for working with message digests.\n","id":"CryptoUtils","line":"125"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"HMAC","children":[{"name":"add","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"data","kind":"param","id":"data"}],"kind":"method","comment":"\nAdd a list of bytes to the message.\n","id":"add1()","line":"96"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"close","kind":"method","comment":"\nPerform the actual computation and extract the message digest\nas a list of bytes.\n","id":"close0()","line":"102"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"verify","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"digest","kind":"param","id":"digest"}],"kind":"method","comment":"\nVerify that the HMAC computed for the data so far matches the\ngiven message digest.\n\nThis method should be used instead of memcmp-style comparisons\nto avoid leaking information via timing.\n\nThrows an exception if the given digest does not have the same\nsize as the digest computed by this HMAC instance.\n","id":"verify1()","line":"119"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"digest","kind":"property","comment":"\nExtract the message digest as a list of bytes without closing [this].\n","id":"digest","line":"107"},{"name":"HMAC","children":[{"ref":{"name":"Hash","refId":"dart.crypto/Hash"},"name":"hash","kind":"param","id":"hash"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"key","kind":"param","id":"key"}],"kind":"constructor","comment":"\nCreate an [HMAC] object from a [Hash] and a key.\n","id":"HMAC2()","line":"91"}],"kind":"class","comment":"\nHash-based Message Authentication Code support.\n\nThe [add] method is used to add data to the message. The [digest] and\n[close] methods are used to extract the message authentication code.\n","id":"HMAC","line":"87"},{"interfaces":[{"name":"Hash","refId":"dart.crypto/Hash"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"MD5","children":[{"name":"MD5","kind":"constructor","id":"MD50()","line":"77"}],"kind":"class","comment":"\nMD5 hash function implementation.\n\nWARNING: MD5 has known collisions and should only be used when\nrequired for backwards compatibility.\n","id":"MD5","line":"76"},{"interfaces":[{"name":"Hash","refId":"dart.crypto/Hash"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"SHA256","children":[{"name":"SHA256","kind":"constructor","id":"SHA2560()","line":"67"}],"kind":"class","comment":"\nSHA256 hash function implementation.\n","id":"SHA256","line":"66"},{"interfaces":[{"name":"Hash","refId":"dart.crypto/Hash"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"SHA1","children":[{"name":"SHA1","kind":"constructor","id":"SHA10()","line":"60"}],"kind":"class","comment":"\nSHA1 hash function implementation.\n","id":"SHA1","line":"59"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Hash","children":[{"name":"add","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"data","kind":"param","id":"data"}],"kind":"method","comment":"\nAdd a list of bytes to the hash computation.\n","id":"add1()","line":"34"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"close","kind":"method","comment":"\nFinish the hash computation and extract the message digest as\na list of bytes.\n","id":"close0()","line":"40"},{"returnType":{"name":"Hash","refId":"dart.crypto/Hash"},"name":"newInstance","kind":"method","comment":"\nReturns a new instance of this hash function.\n","id":"newInstance0()","line":"45"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"blockSize","kind":"property","comment":"\nInternal block size of the hash in bytes.\n\nThis is exposed for use by the HMAC class which needs to know the\nblock size for the [Hash] it is using.\n","id":"blockSize","line":"53"}],"kind":"class","comment":"\nInterface for cryptographic hash functions.\n\nThe [add] method is used to add data to the hash. The [close] method\nis used to extract the message digest.\n\nOnce the [close] method has been called no more data can be added using the\n[add] method. If [add] is called after the first call to [close] a\nHashException is thrown.\n\nIf multiple instances of a given Hash is needed the [newInstance]\nmethod can provide a new instance.\n","id":"Hash","line":"30"}],"uri":"sdk/lib/crypto/crypto.dart","kind":"library","id":"dart.crypto","line":"5"}