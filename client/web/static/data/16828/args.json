{"name":"args","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"ArgResults","children":[{"isOperator":true,"name":"[]","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"name","kind":"param","id":"name"}],"kind":"method","comment":"Gets the parsed command-line option named [name]. ","id":"[]1()","line":"537"},{"ref":{"name":"Collection","refId":"dart.core/Collection","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"options","kind":"property","comment":"Get the names of the options as a [Collection]. ","id":"options","line":"547"},{"isFinal":true,"ref":{"name":"Map","refId":"dart.core/Map"},"name":"_options","kind":"variable","isPrivate":true,"id":"_options","line":"524"},{"isFinal":true,"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"rest","kind":"variable","id":"rest","line":"531"},{"name":"ArgResults","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"_options","kind":"param","isPrivate":true,"id":"_options"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"rest","kind":"param","id":"rest"}],"kind":"constructor","comment":"Creates a new [ArgResults]. ","id":"ArgResults2()","line":"534"}],"kind":"class","comment":"\nThe results of parsing a series of command line arguments using\n[ArgParser.parse()]. Includes the parsed options and any remaining unparsed\ncommand line arguments.\n","id":"ArgResults","line":"523"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"ArgParser","children":[{"returnType":{"name":"void","refId":"void"},"name":"addFlag","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"name","kind":"param","id":"name"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"abbr","kind":"param","id":"abbr"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"help","kind":"param","id":"help"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"defaultsTo","kind":"param","id":"defaultsTo"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"negatable","kind":"param","id":"negatable","line":"234"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"callback","kind":"param","id":"callback","line":"234"}],"kind":"method","comment":"\nDefines a flag. Throws an [ArgumentError] if:\n\n* There is already an option named [name].\n* There is already an option using abbreviation [abbr].\n","id":"addFlag6()","line":"233"},{"returnType":{"name":"void","refId":"void"},"name":"addOption","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"name","kind":"param","id":"name"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"abbr","kind":"param","id":"abbr"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"help","kind":"param","id":"help"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"name":"allowed","kind":"param","id":"allowed"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"name":"allowedHelp","kind":"param","id":"allowedHelp","line":"246"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"defaultsTo","kind":"param","id":"defaultsTo","line":"246"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"callback","kind":"param","id":"callback","line":"247"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"allowMultiple","kind":"param","id":"allowMultiple","line":"247"}],"kind":"method","comment":"\nDefines a value-taking option. Throws an [ArgumentError] if:\n\n* There is already an option with name [name].\n* There is already an option using abbreviation [abbr].\n","id":"addOption8()","line":"245"},{"returnType":{"name":"void","refId":"void"},"name":"_addOption","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"name","kind":"param","id":"name"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"abbr","kind":"param","id":"abbr"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"help","kind":"param","id":"help"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"allowed","kind":"param","id":"allowed"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"name":"allowedHelp","kind":"param","id":"allowedHelp","line":"253"},{"name":"defaultsTo","kind":"param","id":"defaultsTo","line":"253"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback","line":"254"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"isFlag","kind":"param","id":"isFlag","line":"254"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"negatable","kind":"param","id":"negatable","line":"254"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"allowMultiple","kind":"param","id":"allowMultiple","line":"255"}],"kind":"method","isPrivate":true,"id":"_addOption10()","line":"252"},{"returnType":{"name":"ArgResults","refId":"args/ArgResults"},"name":"parse","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"args","kind":"param","id":"args"}],"kind":"method","comment":"\nParses [args], a list of command-line arguments, matches them against the\nflags and options defined by this parser, and returns the result.\n","id":"parse1()","line":"285"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"getUsage","kind":"method","comment":"\nGenerates a string displaying usage information for the defined options.\nThis is basically the help text shown on the command line.\n","id":"getUsage0()","line":"340"},{"name":"_validate","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"condition","kind":"param","id":"condition"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"param","id":"message"}],"kind":"method","isPrivate":true,"comment":"\nCalled during parsing to validate the arguments. Throws a\n[FormatException] if [condition] is `false`.\n","id":"_validate2()","line":"348"},{"name":"_setOption","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"results","kind":"param","id":"results"},{"ref":{"name":"_Option","refId":"args/_Option"},"name":"option","kind":"param","id":"option"},{"name":"value","kind":"param","id":"value"}],"kind":"method","isPrivate":true,"comment":"Validates and stores [value] as the value for [option]. ","id":"_setOption3()","line":"353"},{"returnType":{"name":"void","refId":"void"},"name":"_readNextArgAsValue","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"results","kind":"param","id":"results"},{"ref":{"name":"_Option","refId":"args/_Option"},"name":"option","kind":"param","id":"option"}],"kind":"method","isPrivate":true,"comment":"\nPulls the value for [option] from the next argument in [_args] (where the\ncurrent option is at index [_current]. Validates that there is a valid\nvalue there.\n","id":"_readNextArgAsValue2()","line":"372"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"_parseSoloOption","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"results","kind":"param","id":"results"}],"kind":"method","isPrivate":true,"comment":"\nTries to parse the current argument as a \"solo\" option, which is a single\nhyphen followed by a single letter. We treat this differently than\ncollapsed abbreviations (like \"-abc\") to handle the possible value that\nmay follow it.\n","id":"_parseSoloOption1()","line":"392"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"_parseAbbreviation","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"results","kind":"param","id":"results"}],"kind":"method","isPrivate":true,"comment":"\nTries to parse the current argument as a series of collapsed abbreviations\n(like \"-abc\") or a single abbreviation with the value directly attached\nto it (like \"-mrelease\").\n","id":"_parseAbbreviation1()","line":"414"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"_parseLongOption","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"results","kind":"param","id":"results"}],"kind":"method","isPrivate":true,"comment":"\nTries to parse the current argument as a long-form named option, which\nmay include a value like \"--mode=release\" or \"--mode release\".\n","id":"_parseLongOption1()","line":"459"},{"returnType":{"name":"_Option","refId":"args/_Option"},"name":"_findByAbbr","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"abbr","kind":"param","id":"abbr"}],"kind":"method","isPrivate":true,"comment":"\nFinds the option whose abbreviation is [abbr], or `null` if no option has\nthat abbreviation.\n","id":"_findByAbbr1()","line":"498"},{"name":"getDefault","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"option","kind":"param","id":"option"}],"kind":"method","comment":"\nGet the default value for an option. Useful after parsing to test\nif the user specified something other than the default.\n","id":"getDefault1()","line":"510"},{"isFinal":true,"isStatic":true,"name":"_SOLO_OPT","kind":"variable","isPrivate":true,"id":"_SOLO_OPT","line":"203"},{"isFinal":true,"isStatic":true,"name":"_ABBR_OPT","kind":"variable","isPrivate":true,"id":"_ABBR_OPT","line":"204"},{"isFinal":true,"isStatic":true,"name":"_LONG_OPT","kind":"variable","isPrivate":true,"id":"_LONG_OPT","line":"205"},{"isFinal":true,"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"_Option","refId":"args/_Option"}]},"name":"_options","kind":"variable","isPrivate":true,"id":"_options","line":"207"},{"isFinal":true,"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"_optionNames","kind":"variable","isPrivate":true,"id":"_optionNames","line":"214"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"_args","kind":"variable","isPrivate":true,"id":"_args","line":"217"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_current","kind":"variable","isPrivate":true,"id":"_current","line":"220"},{"name":"ArgParser","kind":"constructor","comment":"Creates a new ArgParser. ","id":"ArgParser0()","line":"223"}],"kind":"class","comment":"\nA class for taking a list of raw command line arguments and parsing out\noptions and flags from them.\n","id":"ArgParser","line":"202"}],"uri":"pkg/args/lib/args.dart","kind":"library","comment":"\nThis library lets you define parsers for parsing raw command-line arguments\ninto a set of options and values using [GNU][] and [POSIX][] style options.\n\n## Defining options ##\n\nTo use this library, you create an [ArgParser] object which will contain\nthe set of options you support:\n\n    var parser = new ArgParser();\n\nThen you define a set of options on that parser using [addOption()] and\n[addFlag()]. The minimal way to create an option is:\n\n    parser.addOption('name');\n\nThis creates an option named \"name\". Options must be given a value on the\ncommand line. If you have a simple on/off flag, you can instead use:\n\n    parser.addFlag('name');\n\nFlag options will, by default, accept a 'no-' prefix to negate the option.\nThis can be disabled like so:\n\n    parser.addFlag('name', negatable: false);\n\n(From here on out \"option\" will refer to both \"regular\" options and flags.\nIn cases where the distinction matters, we'll use \"non-flag option\".)\n\nOptions may have an optional single-character abbreviation:\n\n    parser.addOption('mode', abbr: 'm');\n    parser.addFlag('verbose', abbr: 'v');\n\nThey may also specify a default value. The default value will be used if the\noption isn't provided:\n\n    parser.addOption('mode', defaultsTo: 'debug');\n    parser.addFlag('verbose', defaultsTo: false);\n\nThe default value for non-flag options can be any [String]. For flags, it\nmust be a [bool].\n\nTo validate non-flag options, you may provide an allowed set of values. When\nyou do, it will throw a [FormatException] when you parse the arguments if\nthe value for an option is not in the allowed set:\n\n    parser.addOption('mode', allowed: ['debug', 'release']);\n\nYou can provide a callback when you define an option. When you later parse\na set of arguments, the callback for that option will be invoked with the\nvalue provided for it:\n\n    parser.addOption('mode', callback: (mode) => print('Got mode $mode));\n    parser.addFlag('verbose', callback: (verbose) {\n      if (verbose) print('Verbose');\n    });\n\nThe callback for each option will *always* be called when you parse a set of\narguments. If the option isn't provided in the args, the callback will be\npassed the default value, or `null` if there is none set.\n\n## Parsing arguments ##\n\nOnce you have an [ArgParser] set up with some options and flags, you use it\nby calling [ArgParser.parse()] with a set of arguments:\n\n    var results = parser.parse(['some', 'command', 'line', 'args']);\n\nThese will usually come from `new Options().arguments`, but you can pass in\nany list of strings. It returns an instance of [ArgResults]. This is a\nmap-like object that will return the value of any parsed option.\n\n    var parser = new ArgParser();\n    parser.addOption('mode');\n    parser.addFlag('verbose', defaultsTo: true);\n    var results = parser.parse('['--mode', 'debug', 'something', 'else']);\n\n    print(results['mode']); // debug\n    print(results['verbose']); // true\n\nThe [parse()] method will stop as soon as it reaches `--` or anything that\nit doesn't recognize as an option, flag, or option value. If there are still\narguments left, they will be provided to you in\n[ArgResults.rest].\n\n    print(results.rest); // ['something', 'else']\n\n## Specifying options ##\n\nTo actually pass in options and flags on the command line, use GNU or POSIX\nstyle. If you define an option like:\n\n    parser.addOption('name', abbr: 'n');\n\nThen a value for it can be specified on the command line using any of:\n\n    --name=somevalue\n    --name somevalue\n    -nsomevalue\n    -n somevalue\n\nGiven this flag:\n\n    parser.addFlag('name', abbr: 'n');\n\nYou can set it on using one of:\n\n    --name\n    -n\n\nOr set it off using:\n\n    --no-name\n\nMultiple flag abbreviation can also be collapsed into a single argument. If\nyou define:\n\n    parser.addFlag('verbose', abbr: 'v');\n    parser.addFlag('french', abbr: 'f');\n    parser.addFlag('iambic-pentameter', abbr: 'i');\n\nThen all three flags could be set using:\n\n    -vfi\n\nBy default, an option has only a single value, with later option values\noverriding earlier ones; for example:\n\n    var parser = new ArgParser();\n    parser.addOption('mode');\n    var results = parser.parse(['--mode', 'on', '--mode', 'off']);\n    print(results['mode']); // prints 'off'\n\nIf you need multiple values, set the [allowMultiple] flag. In that\ncase the option can occur multiple times and when parsing arguments a\nList of values will be returned:\n\n    var parser = new ArgParser();\n    parser.addOption('mode', allowMultiple: true);\n    var results = parser.parse(['--mode', 'on', '--mode', 'off']);\n    print(results['mode']); // prints '[on, off]'\n\n## Usage ##\n\nThis library can also be used to automatically generate nice usage help\ntext like you get when you run a program with `--help`. To use this, you\nwill also want to provide some help text when you create your options. To\ndefine help text for the entire option, do:\n\n    parser.addOption('mode', help: 'The compiler configuration',\n        allowed: ['debug', 'release']);\n    parser.addFlag('verbose', help: 'Show additional diagnostic info');\n\nFor non-flag options, you can also provide detailed help for each expected\nvalue using a map:\n\n    parser.addOption('arch', help: 'The architecture to compile for',\n        allowedHelp: {\n          'ia32': 'Intel x86',\n          'arm': 'ARM Holding 32-bit chip'\n        });\n\nIf you define a set of options like the above, then calling this:\n\n    print(parser.getUsage());\n\nWill display something like:\n\n    --mode            The compiler configuration\n                      [debug, release]\n\n    --[no-]verbose    Show additional diagnostic info\n    --arch            The architecture to compile for\n\n          [arm]       ARM Holding 32-bit chip\n          [ia32]      Intel x86\n\nTo assist the formatting of the usage help, single line help text will\nbe followed by a single new line. Options with multi-line help text\nwill be followed by two new lines. This provides spatial diversity between\noptions.\n\n[posix]: http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap12.html#tag_12_02\n[gnu]: http://www.gnu.org/prep/standards/standards.html#Command_002dLine-Interfaces\n","id":"args","line":"191"}