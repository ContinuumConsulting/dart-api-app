{"dependencies":[{"id":"dart.core","name":"dart:core","children":[{"id":"Object","name":"Object","children":[{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"==1()","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"kind":"method","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","line":"29"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","comment":"\nReturns a string representation of this object.\n","line":"48"},{"id":"noSuchMethod1()","name":"noSuchMethod","children":[{"ref":{"name":"InvocationMirror","refId":"dart.core/InvocationMirror"},"id":"invocation","name":"invocation","kind":"param"}],"kind":"method","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [InvocationMirror].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","line":"60"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"hashCode","name":"hashCode","kind":"property","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"43"},{"ref":{"name":"Type","refId":"dart.core/Type"},"id":"runtimeType","name":"runtimeType","kind":"property","comment":"\nA representation of the runtime type of the object.\n","line":"65"},{"id":"Object0()","name":"Object","kind":"constructor","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"sdk/lib/core/object.dart","kind":"class","comment":"\nEverything in Dart is an [Object].\n","line":"10"},{"interfaces":[{"name":"Collection","refId":"dart.core/Collection","arguments":[{"name":"E","refId":"dart.core/List/E"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"List","name":"List","children":[{"isOperator":true,"returnType":{"name":"E","refId":"dart.core/List/E"},"id":"[]1()","name":"[]","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"index","name":"index","kind":"param"}],"kind":"method","comment":"\nReturns the element at the given [index] in the list or throws\nan [RangeError] if [index] is out of bounds.\n","line":"43"},{"isOperator":true,"returnType":{"name":"void","refId":"void"},"id":"[]=2()","name":"[]=","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"index","name":"index","kind":"param"},{"ref":{"name":"E","refId":"dart.core/List/E"},"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\nSets the entry at the given [index] in the list to [value].\nThrows an [RangeError] if [index] is out of bounds.\n","line":"49"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"id":"length=1()","name":"length=","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"newLength","name":"newLength","kind":"param"}],"kind":"method","comment":"\nChanges the length of the list. If [newLength] is greater than\nthe current [length], entries are initialized to [:null:]. Throws\nan [UnsupportedError] if the list is not extendable.\n","line":"56"},{"returnType":{"name":"void","refId":"void"},"id":"add1()","name":"add","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\nAdds [value] at the end of the list, extending the length by\none. Throws an [UnsupportedError] if the list is not\nextendable.\n","line":"63"},{"returnType":{"name":"void","refId":"void"},"id":"addLast1()","name":"addLast","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\nAdds [value] at the end of the list, extending the length by\none. Throws an [UnsupportedError] if the list is not\nextendable.\n","line":"70"},{"returnType":{"name":"void","refId":"void"},"id":"addAll1()","name":"addAll","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"id":"iterable","name":"iterable","kind":"param"}],"kind":"method","comment":"\nAppends all elements of the [iterable] to the end of this list.\nExtends the length of the list by the number of elements in [iterable].\nThrows an [UnsupportedError] if this list is not extensible.\n","line":"77"},{"returnType":{"name":"void","refId":"void"},"id":"sort1()","name":"sort","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"id":"compare","name":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"id":"a","name":"a","uri":"sdk/lib/core/list.dart","kind":"param","line":"91"},{"ref":{"name":"E","refId":"dart.core/List/E"},"id":"b","name":"b","uri":"sdk/lib/core/list.dart","kind":"param","line":"91"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nSorts the list according to the order specified by the [compare] function.\n\nThe [compare] function must act as a [Comparator].\nThe default [List] implementations use [Comparable.compare] if\n[compare] is omitted.\n","line":"91"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"indexOf2()","name":"indexOf","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"id":"element","name":"element","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"start","name":"start","kind":"param"}],"kind":"method","comment":"\nReturns the first index of [element] in the list.\n\nSearches the list from index [start] to the length of the list.\nThe first time an element [:e:] is encountered so that [:e == element:],\nthe index of [:e:] is returned.\nReturns -1 if [element] is not found.\n","line":"101"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"lastIndexOf2()","name":"lastIndexOf","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"id":"element","name":"element","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"start","name":"start","kind":"param"}],"kind":"method","comment":"\nReturns the last index of [element] in the list.\n\nSearches the list backwards from index [start] (inclusive) to 0.\nThe first time an element [:e:] is encountered so that [:e == element:],\nthe index of [:e:] is returned.\nIf start is not provided, it defaults to [:this.length - 1:] .\nReturns -1 if [element] is not found.\n","line":"112"},{"returnType":{"name":"void","refId":"void"},"id":"clear0()","name":"clear","kind":"method","comment":"\nRemoves all elements in the list.\n\nThe length of the list becomes zero.\nThrows an [UnsupportedError], and retains all elements, if the\nlength of the list cannot be changed.\n","line":"121"},{"returnType":{"name":"E","refId":"dart.core/List/E"},"id":"removeAt1()","name":"removeAt","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"index","name":"index","kind":"param"}],"kind":"method","comment":"\nRemoves the element at position[index] from the list.\n\nThis reduces the length of the list by one and moves all later elements\ndown by one position.\nReturns the removed element.\nThrows an [ArgumentError] if [index] is not an [int].\nThrows an [RangeError] if the [index] does not point inside\nthe list.\nThrows an [UnsupportedError], and doesn't remove the element,\nif the length of the list cannot be changed.\n","line":"135"},{"returnType":{"name":"E","refId":"dart.core/List/E"},"id":"removeLast0()","name":"removeLast","kind":"method","comment":"\nPops and returns the last element of the list.\nThrows a [UnsupportedError] if the length of the\nlist cannot be changed.\n","line":"142"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"id":"getRange2()","name":"getRange","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"start","name":"start","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"param"}],"kind":"method","comment":"\nReturns a new list containing [length] elements from the list,\nstarting at  [start].\nReturns an empty list if [length] is 0.\nThrows an [ArgumentError] if [length] is negative.\nThrows an [RangeError] if [start] or\n[:start + length - 1:] are out of range.\n","line":"152"},{"returnType":{"name":"void","refId":"void"},"id":"setRange4()","name":"setRange","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"start","name":"start","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"param"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"id":"from","name":"from","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"startFrom","name":"startFrom","kind":"param"}],"kind":"method","comment":"\nCopies [length] elements of [from], starting\nat [startFrom], into the list, starting at [start].\nIf [length] is 0, this method does not do anything.\nThrows an [ArgumentError] if [length] is negative.\nThrows an [RangeError] if [start] or\n[:start + length - 1:] are out of range for [:this:], or if\n[startFrom] or [:startFrom + length - 1:] are out of range for [from].\n","line":"163"},{"returnType":{"name":"void","refId":"void"},"id":"removeRange2()","name":"removeRange","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"start","name":"start","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"param"}],"kind":"method","comment":"\nRemoves [length] elements from the list, beginning at [start].\nThrows an [UnsupportedError] if the list is\nnot extendable.\nIf [length] is 0, this method does not do anything.\nThrows an [ArgumentError] if [length] is negative.\nThrows an [RangeError] if [start] or\n[:start + length: - 1] are out of range.\n","line":"174"},{"returnType":{"name":"void","refId":"void"},"id":"insertRange3()","name":"insertRange","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"start","name":"start","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"param"},{"ref":{"name":"E","refId":"dart.core/List/E"},"isOptional":true,"id":"fill","name":"fill","kind":"param"}],"kind":"method","comment":"\nInserts a new range into the list, starting from [start] to\n[:start + length - 1:]. The entries are filled with [fill].\nThrows an [UnsupportedError] if the list is\nnot extendable.\nIf [length] is 0, this method does not do anything.\nIf [start] is the length of the list, this method inserts the\nrange at the end of the list.\nThrows an [ArgumentError] if [length] is negative.\nThrows an [RangeError] if [start] is negative or if\n[start] is greater than the length of the list.\n","line":"188"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"id":"reversed","name":"reversed","kind":"property","comment":"\nReturns an [Iterable] of the elements of this [List] in reverse order.\n","line":"82"},{"id":"List1()","name":"List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"length","name":"length","kind":"param"}],"kind":"constructor","comment":"\nCreates a list of the given [length].\n\nThe length of the returned list is not fixed.\n","line":"17"},{"id":"List.fixedLength2()","name":"List.fixedLength","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"param"},{"ref":{"name":"E","refId":"dart.core/List/E"},"isNamed":true,"defaultValue":"null","isOptional":true,"id":"fill","name":"fill","kind":"param"}],"kind":"constructor","comment":"\nCreates a fixed-sized list of the given [length] where each entry is\nfilled with [fill].\n","line":"23"},{"id":"List.from1()","name":"List.from","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"id":"other","name":"other","kind":"param"}],"kind":"constructor","comment":"\nCreates an list with the elements of [other]. The order in\nthe list will be the order provided by the iterator of [other].\n\nThe length of the returned list is not fixed.\n","line":"31"},{"id":"E","name":"E","kind":"typeparam"}],"uri":"sdk/lib/core/list.dart","kind":"class","comment":"\nA [List] is an indexable collection with a length. It can be of\nfixed size or extendable.\n","line":"11"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Iterable","name":"Iterable","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"id":"map1()","name":"map","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"51"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns a lazy [Iterable] where each element [:e:] of [this] is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","line":"51"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"where1()","name":"where","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"63"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [f].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","line":"63"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"id":"expand1()","name":"expand","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"75"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nExpand each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable will run through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and will call [f] for each element\nof this every time it's iterated.\n","line":"75"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"contains1()","name":"contains","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","kind":"param"}],"kind":"method","comment":"\nCheck whether the collection contains an element equal to [element].\n","line":"81"},{"returnType":{"name":"void","refId":"void"},"id":"forEach1()","name":"forEach","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"returnType":{"name":"void","refId":"void"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"91"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nApplies the function [f] to each element of this collection.\n","line":"91"},{"id":"reduce2()","name":"reduce","children":[{"id":"initialValue","name":"initialValue","kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"combine","name":"combine","children":[{"id":"Function","name":"Function","children":[{"id":"previousValue","name":"previousValue","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"106"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"106"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param","line":"106"}],"kind":"method","comment":"\nReduce a collection to a single value by iteratively combining each element\nof the collection with an existing value using the provided function.\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of a collection:\n\n  collection.reduce(0, (prev, element) => prev + element);\n","line":"105"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"every1()","name":"every","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"116"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns true if every elements of this collection satisify the\npredicate [f]. Returns false otherwise.\n","line":"116"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"join1()","name":"join","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"separator","name":"separator","kind":"param"}],"kind":"method","comment":"\nConvert each element to a [String] and concatenate the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","line":"130"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"any1()","name":"any","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"152"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns true if one element of this collection satisfies the\npredicate [f]. Returns false otherwise.\n","line":"152"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"toList0()","name":"toList","kind":"method","line":"159"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"toSet0()","name":"toSet","kind":"method","line":"160"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"min1()","name":"min","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"id":"compare","name":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"a","name":"a","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"188"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"b","name":"b","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"188"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nFind the least element in the iterable.\n\nReturns null if the iterable is empty.\nOtherwise returns an element [:x:] of this [Iterable] so that\n[:x:] is not greater than [:y:] (that is, [:compare(x, y) <= 0:]) for all\nother elements [:y:] in the iterable.\n\nThe [compare] function must be a proper [Comparator<T>]. If a function is\nnot provided, [compare] defaults to [Comparable.compare].\n","line":"188"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"max1()","name":"max","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"id":"compare","name":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"a","name":"a","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"211"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"b","name":"b","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"211"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nFind the largest element in the iterable.\n\nReturns null if the iterable is empty.\nOtherwise returns an element [:x:] of this [Iterable] so that\n[:x:] is not smaller than [:y:] (that is, [:compare(x, y) >= 0:]) for all\nother elements [:y:] in the iterable.\n\nThe [compare] function must be a proper [Comparator<T>]. If a function is\nnot provided, [compare] defaults to [Comparable.compare].\n","line":"211"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"take1()","name":"take","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"n","name":"n","kind":"param"}],"kind":"method","comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if [this]\ncontains fewer than [n] elements.\n","line":"234"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"takeWhile1()","name":"takeWhile","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"test","name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"value","name":"value","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"247"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns an [Iterable] that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] will start iterating over the elements of [this].\nWhen the iterator encounters an element [:e:] that does not satisfy [test],\nit discards [:e:] and moves into the finished state. That is, it will not\nask or provide any more elements.\n","line":"247"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"skip1()","name":"skip","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"n","name":"n","kind":"param"}],"kind":"method","comment":"\nReturns an [Iterable] that skips the first [n] elements.\n\nIf [this] has fewer than [n] elements, then the resulting [Iterable] will\nbe empty.\n","line":"257"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"skipWhile1()","name":"skipWhile","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"test","name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"value","name":"value","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"270"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns an [Iterable] that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] will iterate over all elements of [this].\nAs long as the iterator's elements do not satisfy [test] they are\ndiscarded. Once an element satisfies the [test] the iterator stops testing\nand uses every element unconditionally.\n","line":"270"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"firstMatching2()","name":"firstMatching","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"test","name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"value","name":"value","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"325"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isNamed":true,"isOptional":true,"id":"orElse","name":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"Function","name":"Function","uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns the first element that satisfies the given predicate [f].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","line":"325"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"lastMatching2()","name":"lastMatching","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"test","name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"value","name":"value","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"341"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isNamed":true,"isOptional":true,"id":"orElse","name":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"Function","name":"Function","uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns the last element that satisfies the given predicate [f].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is [:null:], a [StateError] is\nthrown.\n","line":"341"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"singleMatching1()","name":"singleMatching","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"test","name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"value","name":"value","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"360"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns the single element that satisfies [f]. If no or more than one\nelement match then a [StateError] is thrown.\n","line":"360"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"elementAt1()","name":"elementAt","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"index","name":"index","kind":"param"}],"kind":"method","comment":"\nReturns the [index]th element.\n\nIf [this] [Iterable] has fewer than [index] elements throws a\n[RangeError].\n\nNote: if [this] does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in [this].\n","line":"387"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"iterator","name":"iterator","kind":"property","comment":"\nReturns an [Iterator] that iterates over this [Iterable] object.\n","line":"39"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"property","comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","line":"168"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isEmpty","name":"isEmpty","kind":"property","comment":"\nReturns true if there is no element in this collection.\n","line":"226"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"first","name":"first","kind":"property","comment":"\nReturns the first element.\n\nIf [this] is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","line":"280"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"last","name":"last","kind":"property","comment":"\nReturns the last element.\n\nIf [this] is empty throws a [StateError].\n","line":"293"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"single","name":"single","kind":"property","comment":"\nReturns the single element in [this].\n\nIf [this] is empty or has more than one element throws a [StateError].\n","line":"310"},{"id":"Iterable0()","name":"Iterable","kind":"constructor","line":"20"},{"id":"Iterable.generate2()","name":"Iterable.generate","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"count","name":"count","kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"generator","name":"generator","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"Function","name":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"index","name":"index","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"32"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"constructor","comment":"\nCreate an [Iterable] that generates its elements dynamically.\n\nThe [Iterators] created by the [Iterable] will count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an [Iterable], [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","line":"32"},{"id":"E","name":"E","kind":"typeparam"}],"uri":"sdk/lib/core/iterable.dart","kind":"class","comment":"\nThe [Iterable] interface allows to get an [Iterator] out of an\n[Iterable] object.\n\nThis interface is used by the for-in construct to iterate over an\n[Iterable] object.\nThe for-in construct takes an [Iterable] object at the right-hand\nside, and calls its [iterator] method to get an [Iterator] on it.\n\nA user-defined class that implements the [Iterable] interface can\nbe used as the right-hand side of a for-in construct.\n","line":"19"},{"superclass":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Collection/E"}]},"isAbstract":true,"id":"Collection","name":"Collection","children":[{"returnType":{"name":"void","refId":"void"},"id":"add1()","name":"add","children":[{"ref":{"name":"E","refId":"dart.core/Collection/E"},"id":"element","name":"element","kind":"param"}],"kind":"method","comment":"\nAdds an element to this collection.\n","line":"25"},{"returnType":{"name":"void","refId":"void"},"id":"addAll1()","name":"addAll","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Collection/E"}]},"id":"elements","name":"elements","kind":"param"}],"kind":"method","comment":"\nAdds all of [elements] to this collection.\n\nEquivalent to adding each element in [elements] using [add],\nbut some collections may be able to optimize it.\n","line":"33"},{"returnType":{"name":"void","refId":"void"},"id":"remove1()","name":"remove","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"id":"element","name":"element","kind":"param"}],"kind":"method","comment":"\nRemoves an instance of [element] from this collection.\n\nThis removes only one instance of the element for collections that can\ncontain the same element more than once (e.g., [List]). Which instance\nis removed is decided by the collection.\n\nHas no effect if the elements is not in this collection.\n","line":"48"},{"returnType":{"name":"void","refId":"void"},"id":"removeAll1()","name":"removeAll","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"id":"elements","name":"elements","kind":"param"}],"kind":"method","comment":"\nRemoves all of [elements] from this collection.\n\nEquivalent to calling [remove] once for each element in\n[elements], but may be faster for some collections.\n","line":"56"},{"returnType":{"name":"void","refId":"void"},"id":"retainAll1()","name":"retainAll","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"id":"elements","name":"elements","kind":"param"}],"kind":"method","comment":"\nRemoves all elements of this collection that are not\nin [elements].\n\nFor [Set]s, this is the intersection of the two original sets.\n","line":"66"},{"returnType":{"name":"void","refId":"void"},"id":"removeMatching1()","name":"removeMatching","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"test","name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Collection/E"},"id":"element","name":"element","uri":"sdk/lib/core/collection.dart","kind":"param","line":"75"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nRemoves all elements of this collection that satisfy [test].\n\nAn elements [:e:] satisfies [test] if [:test(e):] is true.\n","line":"75"},{"returnType":{"name":"void","refId":"void"},"id":"retainMatching1()","name":"retainMatching","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"test","name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Collection/E"},"id":"element","name":"element","uri":"sdk/lib/core/collection.dart","kind":"param","line":"84"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nRemoves all elements of this collection that fail to satisfy [test].\n\nAn elements [:e:] satisfies [test] if [:test(e):] is true.\n","line":"84"},{"returnType":{"name":"void","refId":"void"},"id":"clear0()","name":"clear","kind":"method","comment":"\nRemoves all elements of this collection.\n","line":"91"},{"id":"Collection0()","name":"Collection","kind":"constructor","line":"20"},{"id":"E","name":"E","kind":"typeparam"}],"uri":"sdk/lib/core/collection.dart","kind":"class","comment":"\nA collection of individual elements.\n\nA [Collection] contains some elements in a structure optimized\nfor certain operations. Different collections are optimized for different\nuses.\n\nA collection can be updated by adding or removing elements.\n\nCollections are [Iterable]. The order of iteration is defined by\neach type of collection.\n","line":"19"}],"uri":"sdk/lib/core/core.dart","kind":"library","line":"5"}],"id":"dart.scalarlist","name":"dart:scalarlist","children":[{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"double","refId":"dart.core/double"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Float64List","name":"Float64List","children":[{"id":"Float64List1()","name":"Float64List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"param"}],"kind":"constructor","comment":"\nCreates a [Float64List] of the specified length (in elements), all of\nwhose elements are initially zero.\n","line":"682"},{"id":"Float64List.view3()","name":"Float64List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"id":"array","name":"array","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"start","name":"start","kind":"param","line":"703"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"703"}],"kind":"constructor","comment":"\nCreates a [Float64List] _view_ of the specified region in the specified\nbyte [array]. Changes in the [Float64List] will be visible in the byte\narray and vice versa. If the [start] index of the region is not specified,\nit defaults to zero (the first byte in the byte array). If the length is\nnot specified, it defaults to null, which indicates that the view extends\nto the end of the byte array.\n\nThrows [ArgumentError] if the length of the specified region\nis not divisible by 8 (the size of a \"float64\" in bytes), or if the\n[start] of the region is not divisible by 8. If, however, [array]\nis a view of another byte array, this constructor will throw\n[ArgumentError] if the implicit starting position in the\n\"ultimately backing\" byte array is not divisible by 8. In plain terms,\nthis constructor throws [ArgumentError] if the specified\nregion does not contain an integral number of \"float64s,\" or if it\nis not \"float64-aligned.\"\n","line":"702"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of IEEE 754 double-precision binary floating-point\nnumbers  that is viewable as a [ByteArray]. For long lists, this\nimplementation will be considerably more space- and time-efficient than\nthe default [List] implementation.\n","line":"677"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"double","refId":"dart.core/double"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Float32List","name":"Float32List","children":[{"id":"Float32List1()","name":"Float32List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"param"}],"kind":"constructor","comment":"\nCreates a [Float32List] of the specified length (in elements), all of\nwhose elements are initially zero.\n","line":"646"},{"id":"Float32List.view3()","name":"Float32List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"id":"array","name":"array","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"start","name":"start","kind":"param","line":"667"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"667"}],"kind":"constructor","comment":"\nCreates a [Float32List] _view_ of the specified region in the specified\nbyte [array]. Changes in the [Float32List] will be visible in the byte\narray and vice versa. If the [start] index of the region is not specified,\nit defaults to zero (the first byte in the byte array). If the length is\nnot specified, it defaults to null, which indicates that the view extends\nto the end of the byte array.\n\nThrows [ArgumentError] if the length of the specified region\nis not divisible by 4 (the size of a \"float32\" in bytes), or if the\n[start] of the region is not divisible by 4. If, however, [array]\nis a view of another byte array, this constructor will throw\n[ArgumentError] if the implicit starting position in the\n\"ultimately backing\" byte array is not divisible by 4. In plain terms,\nthis constructor throws [ArgumentError] if the specified\nregion does not contain an integral number of \"float32s,\" or if it\nis not \"float32-aligned.\"\n","line":"666"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of IEEE 754 single-precision binary floating-point\nnumbers  that is viewable as a [ByteArray]. For long lists, this\nimplementation will be considerably more space- and time-efficient than\nthe default [List] implementation.\n","line":"641"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Uint64List","name":"Uint64List","children":[{"id":"Uint64List1()","name":"Uint64List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"param"}],"kind":"constructor","comment":"\nCreates a [Uint64List] of the specified length (in elements), all\nof whose elements are initially zero.\n","line":"610"},{"id":"Uint64List.view3()","name":"Uint64List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"id":"array","name":"array","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"start","name":"start","kind":"param","line":"631"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"631"}],"kind":"constructor","comment":"\nCreates an [Uint64List] _view_ of the specified region in\nthe specified byte [array]. Changes in the [Uint64List] will be\nvisible in the byte array and vice versa. If the [start] index of the\nregion is not specified, it defaults to zero (the first byte in the byte\narray). If the length is not specified, it defaults to null, which\nindicates that the view extends to the end of the byte array.\n\nThrows [ArgumentError] if the length of the specified region\nis not divisible by 8 (the size of a \"uint64\" in bytes), or if the\n[start] of the region is not divisible by 8. If, however, [array]\nis a view of another byte array, this constructor will throw\n[ArgumentError] if the implicit starting position in the\n\"ultimately backing\" byte array is not divisible by 8. In plain terms,\nthis constructor throws [ArgumentError] if the specified\nregion does not contain an integral number of \"uint64s,\" or if it\nis not \"uint64-aligned.\"\n","line":"630"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of 64-bit unsigned integers that is viewable as a\n[ByteArray]. For long lists, this implementation will be considerably\nmore space- and time-efficient than the default [List] implementation.\n","line":"605"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Int64List","name":"Int64List","children":[{"id":"Int64List1()","name":"Int64List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"param"}],"kind":"constructor","comment":"\nCreates an [Int64List] of the specified length (in elements), all of\nwhose elements are initially zero.\n","line":"576"},{"id":"Int64List.view3()","name":"Int64List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"id":"array","name":"array","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"start","name":"start","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param"}],"kind":"constructor","comment":"\nCreates an [Int64List] _view_ of the specified region in the specified\nbyte [array]. Changes in the [Int64List] will be visible in the byte\narray and vice versa. If the [start] index of the region is not specified,\nit defaults to zero (the first byte in the byte array). If the length is\nnot specified, it defaults to null, which indicates that the view extends\nto the end of the byte array.\n\nThrows [ArgumentError] if the length of the specified region\nis not divisible by 8 (the size of an \"int64\" in bytes), or if the\n[start] of the region is not divisible by 8. If, however, [array]\nis a view of another byte array, this constructor will throw\n[ArgumentError] if the implicit starting position in the\n\"ultimately backing\" byte array is not divisible by 8. In plain terms,\nthis constructor throws [ArgumentError] if the specified\nregion does not contain an integral number of \"int64s,\" or if it\nis not \"int64-aligned.\"\n","line":"596"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of 64-bit signed integers that is viewable as a\n[ByteArray]. For long lists, this implementation will be considerably\nmore space- and time-efficient than the default [List] implementation.\n","line":"571"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Uint32List","name":"Uint32List","children":[{"id":"Uint32List1()","name":"Uint32List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"param"}],"kind":"constructor","comment":"\nCreates a [Uint32List] of the specified length (in elements), all\nof whose elements are initially zero.\n","line":"541"},{"id":"Uint32List.view3()","name":"Uint32List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"id":"array","name":"array","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"start","name":"start","kind":"param","line":"562"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"562"}],"kind":"constructor","comment":"\nCreates a [Uint32List] _view_ of the specified region in\nthe specified byte [array]. Changes in the [Uint32] will be\nvisible in the byte array and vice versa. If the [start] index of the\nregion is not specified, it defaults to zero (the first byte in the byte\narray). If the length is not specified, it defaults to null, which\nindicates that the view extends to the end of the byte array.\n\nThrows [ArgumentError] if the length of the specified region\nis not divisible by 4 (the size of a \"uint32\" in bytes), or if the\n[start] of the region is not divisible by 4. If, however, [array]\nis a view of another byte array, this constructor will throw\n[ArgumentError] if the implicit starting position in the\n\"ultimately backing\" byte array is not divisible by 4. In plain terms,\nthis constructor throws [ArgumentError] if the specified\nregion does not contain an integral number of \"uint32s,\" or if it\nis not \"uint32-aligned.\"\n","line":"561"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of 32-bit unsigned integers that is viewable as a\n[ByteArray]. For long lists, this implementation will be considerably\nmore space- and time-efficient than the default [List] implementation.\n","line":"536"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Int32List","name":"Int32List","children":[{"id":"Int32List1()","name":"Int32List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"param"}],"kind":"constructor","comment":"\nCreates an [Int32List] of the specified length (in elements), all of\nwhose elements are initially zero.\n","line":"507"},{"id":"Int32List.view3()","name":"Int32List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"id":"array","name":"array","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"start","name":"start","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param"}],"kind":"constructor","comment":"\nCreates an [Int32List] _view_ of the specified region in the specified\nbyte [array]. Changes in the [Int32List] will be visible in the byte\narray and vice versa. If the [start] index of the region is not specified,\nit defaults to zero (the first byte in the byte array). If the length is\nnot specified, it defaults to null, which indicates that the view extends\nto the end of the byte array.\n\nThrows [ArgumentError] if the length of the specified region\nis not divisible by 4 (the size of an \"int32\" in bytes), or if the\n[start] of the region is not divisible by 4. If, however, [array]\nis a view of another byte array, this constructor will throw\n[ArgumentError] if the implicit starting position in the\n\"ultimately backing\" byte array is not divisible by 4. In plain terms,\nthis constructor throws [ArgumentError] if the specified\nregion does not contain an integral number of \"int32s,\" or if it\nis not \"int32-aligned.\"\n","line":"527"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of 32-bit signed integers that is viewable as a\n[ByteArray]. For long lists, this implementation will be considerably\nmore space- and time-efficient than the default [List] implementation.\n","line":"502"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Uint16List","name":"Uint16List","children":[{"id":"Uint16List1()","name":"Uint16List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"param"}],"kind":"constructor","comment":"\nCreates a [Uint16List] of the specified length (in elements), all\nof whose elements are initially zero.\n","line":"472"},{"id":"Uint16List.view3()","name":"Uint16List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"id":"array","name":"array","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"start","name":"start","kind":"param","line":"493"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"493"}],"kind":"constructor","comment":"\nCreates a [Uint16List] _view_ of the specified region in\nthe specified byte [array]. Changes in the [Uint16List] will be\nvisible in the byte array and vice versa. If the [start] index of the\nregion is not specified, it defaults to zero (the first byte in the byte\narray). If the length is not specified, it defaults to null, which\nindicates that the view extends to the end of the byte array.\n\nThrows [ArgumentError] if the length of the specified region\nis not divisible by 2 (the size of a \"uint16\" in bytes), or if the\n[start] of the region is not divisible by 2. If, however, [array]\nis a view of another byte array, this constructor will throw\n[ArgumentError] if the implicit starting position in the\n\"ultimately backing\" byte array is not divisible by 2. In plain terms,\nthis constructor throws [ArgumentError] if the specified\nregion does not contain an integral number of \"uint16s,\" or if it\nis not \"uint16-aligned.\"\n","line":"492"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of 16-bit unsigned integers that is viewable as a\n[ByteArray]. For long lists, this implementation will be considerably\nmore space- and time-efficient than the default [List] implementation.\n","line":"467"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Int16List","name":"Int16List","children":[{"id":"Int16List1()","name":"Int16List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"param"}],"kind":"constructor","comment":"\nCreates an [Int16List] of the specified length (in elements), all of\nwhose elements are initially zero.\n","line":"438"},{"id":"Int16List.view3()","name":"Int16List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"id":"array","name":"array","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"start","name":"start","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param"}],"kind":"constructor","comment":"\nCreates an [Int16List] _view_ of the specified region in the specified\nbyte [array]. Changes in the [Int16List] will be visible in the byte\narray and vice versa. If the [start] index of the region is not specified,\nit defaults to zero (the first byte in the byte array). If the length is\nnot specified, it defaults to null, which indicates that the view extends\nto the end of the byte array.\n\nThrows [ArgumentError] if the length of the specified region\nis not divisible by 2 (the size of an \"int16\" in bytes), or if the\n[start] of the region is not divisible by 2. If, however, [array]\nis a view of another byte array, this constructor will throw\n[ArgumentError] if the implicit starting position in the\n\"ultimately backing\" byte array is not divisible by 2. In plain terms,\nthis constructor throws [ArgumentError] if the specified\nregion does not contain an integral number of \"int16s,\" or if it\nis not \"int16-aligned.\"\n","line":"458"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of 16-bit signed integers that is viewable as a\n[ByteArray]. For long lists, this implementation will be considerably\nmore space- and time-efficient than the default [List] implementation.\n","line":"433"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Uint8ClampedList","name":"Uint8ClampedList","children":[{"id":"Uint8ClampedList1()","name":"Uint8ClampedList","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"param"}],"kind":"constructor","comment":"\nCreates a [Uint8ClampedList] of the specified length (in elements), all of\nwhose elements are initially zero.\n","line":"413"},{"id":"Uint8ClampedList.view3()","name":"Uint8ClampedList.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"id":"array","name":"array","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"start","name":"start","kind":"param","line":"424"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"424"}],"kind":"constructor","comment":"\nCreates a [Uint8ClampedList] _view_ of the specified region in the\nspecified byte [array]. Changes in the [Uint8List] will be visible in the\nbyte array and vice versa. If the [start] index of the region is not\nspecified, it defaults to zero (the first byte in the byte array). If the\nlength is not specified, it defaults to null, which indicates that the view\nextends to the end of the byte array.\n","line":"423"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of 8-bit unsigned integers that is viewable as a\n[ByteArray]. For long lists, this implementation will be considerably\nmore space- and time-efficient than the default [List] implementation.\nIndexed store clamps the value to range 0..0xFF.\n","line":"408"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Uint8List","name":"Uint8List","children":[{"id":"Uint8List1()","name":"Uint8List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"param"}],"kind":"constructor","comment":"\nCreates a [Uint8List] of the specified length (in elements), all of\nwhose elements are initially zero.\n","line":"388"},{"id":"Uint8List.view3()","name":"Uint8List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"id":"array","name":"array","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"start","name":"start","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param"}],"kind":"constructor","comment":"\nCreates a [Uint8List] _view_ of the specified region in the specified\nbyte [array]. Changes in the [Uint8List] will be visible in the byte\narray and vice versa. If the [start] index of the region is not specified,\nit defaults to zero (the first byte in the byte array). If the length is\nnot specified, it defaults to null, which indicates that the view extends\nto the end of the byte array.\n","line":"398"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of 8-bit unsigned integers that is viewable as a\n[ByteArray]. For long lists, this implementation will be considerably\nmore space- and time-efficient than the default [List] implementation.\n","line":"383"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Int8List","name":"Int8List","children":[{"id":"Int8List1()","name":"Int8List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"param"}],"kind":"constructor","comment":"\nCreates an [Int8List] of the specified length (in elements), all of\nwhose elements are initially zero.\n","line":"364"},{"id":"Int8List.view3()","name":"Int8List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"id":"array","name":"array","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"start","name":"start","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param"}],"kind":"constructor","comment":"\nCreates an [Int8List] _view_ of the specified region in the specified\nbyte [array]. Changes in the [Int8List] will be visible in the byte\narray and vice versa. If the [start] index of the region is not specified,\nit defaults to zero (the first byte in the byte array). If the length is\nnot specified, it defaults to null, which indicates that the view extends\nto the end of the byte array.\n","line":"374"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of 8-bit signed integers that is viewable as a\n[ByteArray]. For long lists, this implementation will be considerably\nmore space- and time-efficient than the default [List] implementation.\n","line":"359"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"ByteArrayViewable","name":"ByteArrayViewable","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"id":"bytesPerElement0()","name":"bytesPerElement","kind":"method","comment":"\nReturns the number of bytes in the representation of each element in\nthis list, or the number bytes in the representation of the entire\nobject if it is not a list.\n","line":"339"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"lengthInBytes0()","name":"lengthInBytes","kind":"method","comment":"\nReturns the length of this view, in bytes.\n","line":"344"},{"returnType":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"id":"asByteArray2()","name":"asByteArray","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"start","name":"start","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param"}],"kind":"method","comment":"\nReturns the byte array view of this object. This view allows the\nbyte representation of the object to be read and written directly.\n","line":"350"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA \"mixin interface\" that allows a type, typically but not necessarily\na [List], to be viewed as a [ByteArray].\n","line":"333"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"ByteArray","name":"ByteArray","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"id":"lengthInBytes0()","name":"lengthInBytes","kind":"method","comment":"\nReturns the length of this byte array, in bytes.\n","line":"28"},{"returnType":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"id":"subByteArray2()","name":"subByteArray","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"start","name":"start","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param"}],"kind":"method","comment":"\nReturns a [ByteArray] _view_ of a portion of this byte array.\nThe returned byte array consists of [length] bytes starting\nat position [start] in this byte array. The returned byte array\nis backed by the same data as this byte array. In other words,\nchanges to the returned byte array are visible in this byte array\nand vice-versa.\n\nThrows [RangeError] if [start] or [length] are negative, or\nif `start + length` is greater than the length of this byte array.\n\nThrows [ArgumentError] if [length] is negative.\n","line":"44"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"getInt81()","name":"getInt8","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"}],"kind":"method","comment":"\nReturns the (possibly negative) integer represented by the byte at the\nspecified [byteOffset] in this byte array, in two's complement binary\nrepresentation. The return value will be between -128 and 127, inclusive.\n\nThrows [RangeError] if [byteOffset] is negative, or\ngreater than or equal to the length of this byte array.\n","line":"54"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"setInt82()","name":"setInt8","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\nSets the byte at the specified [byteOffset] in this byte array to the\ntwo's complement binary representation of the specified [value], which\nmust fit in a single byte. In other words, [value] must be between\n-128 and 127, inclusive.\n\nReturns `byteOffset + 1`, which is the offset of the first byte in the\narray after the byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative, or\ngreater than or equal to the length of this byte array.\n\nThrows [ArgumentError] if [value] is less than -128 or\ngreater than 127.\n","line":"72"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"getUint81()","name":"getUint8","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"}],"kind":"method","comment":"\nReturns the positive integer represented by the byte at the specified\n[byteOffset] in this byte array, in unsigned binary form. The\nreturn value will be between 0 and 255, inclusive.\n\nThrows [RangeError] if [byteOffset] is negative, or\ngreater than or equal to the length of this byte array.\n","line":"82"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"setUint82()","name":"setUint8","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\nSets the byte at the specified [byteOffset] in this byte array to the\nunsigned binary representation of the specified [value], which must fit\nin a single byte. in other words, [value] must be between 0 and 255,\ninclusive.\n\nReturns `byteOffset + 1`, which is the offset of the first byte in the\narray after the byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative,\nor greater than or equal to the length of this byte array.\n\nThrows [ArgumentError] if [value] is negative or\ngreater than 255.\n","line":"100"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"getInt161()","name":"getInt16","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"}],"kind":"method","comment":"\nReturns the (possibly negative) integer represented by the two bytes at\nthe specified [byteOffset] in this byte array, in two's complement binary\nform. The return value will be between 2<sup>15</sup> and 2<sup>15 - 1,\ninclusive.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 2` is greater than the length of this byte array.\n","line":"111"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"setInt162()","name":"setInt16","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\nSets the two bytes starting at the specified [byteOffset] in this\nbyte array to the two's complement binary representation of the specified\n[value], which must fit in two bytes. In other words, [value] must lie\nbetween 2<sup>15</sup> and 2<sup>15 - 1, inclusive.\n\nReturns `byteOffset + 2`, which is the offset of the first byte in the\narray after the last byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 2` is greater than the length of this byte array.\n\nThrows [ArgumentError] if [value] is less than 2<sup>15</sup>\nor greater than 2<sup>15 - 1.\n","line":"129"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"getUint161()","name":"getUint16","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"}],"kind":"method","comment":"\nReturns the positive integer represented by the two bytes starting\nat the specified [byteOffset] in this byte array, in unsigned binary\nform. The return value will be between 0 and  2<sup>16 - 1, inclusive.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 2` is greater than the length of this byte array.\n","line":"139"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"setUint162()","name":"setUint16","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\nSets the two bytes starting at the specified [byteOffset] in this byte\narray to the unsigned binary representation of the specified [value],\nwhich must fit in two bytes. in other words, [value] must be between\n0 and 2<sup>16 - 1, inclusive.\n\nReturns `byteOffset + 2`, which is the offset of the first byte in the\narray after the last byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 2` is greater than the length of this byte array.\n\nThrows [ArgumentError] if [value] is negative or\ngreater than 2<sup>16 - 1.\n","line":"157"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"getInt321()","name":"getInt32","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"}],"kind":"method","comment":"\nReturns the (possibly negative) integer represented by the four bytes at\nthe specified [byteOffset] in this byte array, in two's complement binary\nform. The return value will be between 2<sup>31</sup> and 2<sup>31 - 1,\ninclusive.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 4` is greater than the length of this byte array.\n","line":"168"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"setInt322()","name":"setInt32","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\nSets the four bytes starting at the specified [byteOffset] in this\nbyte array to the two's complement binary representation of the specified\n[value], which must fit in four bytes. In other words, [value] must lie\nbetween 2<sup>31</sup> and 2<sup>31 - 1, inclusive.\n\nReturns `byteOffset + 4`, which is the offset of the first byte in the\narray after the last byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 4` is greater than the length of this byte array.\n\nThrows [ArgumentError] if [value] is less than 2<sup>31</sup>\nor greater than 2<sup>31 - 1.\n","line":"186"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"getUint321()","name":"getUint32","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"}],"kind":"method","comment":"\nReturns the positive integer represented by the four bytes starting\nat the specified [byteOffset] in this byte array, in unsigned binary\nform. The return value will be between 0 and  2<sup>32 - 1, inclusive.\n\n","line":"194"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"setUint322()","name":"setUint32","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\nSets the four bytes starting at the specified [byteOffset] in this byte\narray to the unsigned binary representation of the specified [value],\nwhich must fit in four bytes. in other words, [value] must be between\n0 and 2<sup>32 - 1, inclusive.\n\nReturns `byteOffset + 4`, which is the offset of the first byte in the\narray after the last byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 4` is greater than the length of this byte array.\n\nThrows [ArgumentError] if [value] is negative or\ngreater than 2<sup>32 - 1.\n","line":"212"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"getInt641()","name":"getInt64","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"}],"kind":"method","comment":"\nReturns the (possibly negative) integer represented by the eight bytes at\nthe specified [byteOffset] in this byte array, in two's complement binary\nform. The return value will be between 2<sup>63</sup> and 2<sup>63 - 1,\ninclusive.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 8` is greater than the length of this byte array.\n","line":"223"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"setInt642()","name":"setInt64","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\nSets the eight bytes starting at the specified [byteOffset] in this\nbyte array to the two's complement binary representation of the specified\n[value], which must fit in eight bytes. In other words, [value] must lie\nbetween 2<sup>63</sup> and 2<sup>63 - 1, inclusive.\n\nReturns `byteOffset + 8`, which is the offset of the first byte in the\narray after the last byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 8` is greater than the length of this byte array.\n\nThrows [ArgumentError] if [value] is less than 2<sup>63</sup>\nor greater than 2<sup>63 - 1.\n","line":"241"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"getUint641()","name":"getUint64","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"}],"kind":"method","comment":"\nReturns the positive integer represented by the eight bytes starting\nat the specified [byteOffset] in this byte array, in unsigned binary\nform. The return value will be between 0 and  2<sup>64 - 1, inclusive.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 8` is greater than the length of this byte array.\n","line":"251"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"setUint642()","name":"setUint64","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\nSets the eight bytes starting at the specified [byteOffset] in this byte\narray to the unsigned binary representation of the specified [value],\nwhich must fit in eight bytes. in other words, [value] must be between\n0 and 2<sup>64 - 1, inclusive.\n\nReturns `byteOffset + 8`, which is the offset of the first byte in the\narray after the last byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 8` is greater than the length of this byte array.\n\nThrows [ArgumentError] if [value] is negative or\ngreater than 2<sup>64 - 1.\n","line":"269"},{"returnType":{"name":"double","refId":"dart.core/double"},"id":"getFloat321()","name":"getFloat32","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"}],"kind":"method","comment":"\nReturns the floating point number represented by the four bytes at\nthe specified [byteOffset] in this byte array, in IEEE 754\nsingle-precision binary floating-point format (binary32).\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 4` is greater than the length of this byte array.\n","line":"279"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"setFloat322()","name":"setFloat32","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"},{"ref":{"name":"double","refId":"dart.core/double"},"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\nSets the four bytes starting at the specified [byteOffset] in this\nbyte array to the IEEE 754 single-precision binary floating-point\n(binary32) representation of the specified [value].\n\n**Note that this method can lose precision.** The input [value] is\na 64-bit floating point value, which will be converted to 32-bit\nfloating point value by IEEE 754 rounding rules before it is stored.\nIf [value] cannot be represented exactly as a binary32, it will be\nconverted to the nearest binary32 value.  If two binary32 values are\nequally close, the one whose least significant bit is zero will be used.\nNote that finite (but large) values can be converted to infinity, and\nsmall non-zero values can be converted to zero.\n\nReturns `byteOffset + 4`, which is the offset of the first byte in the\narray after the last byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 4` is greater than the length of this byte array.\n","line":"302"},{"returnType":{"name":"double","refId":"dart.core/double"},"id":"getFloat641()","name":"getFloat64","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"}],"kind":"method","comment":"\nReturns the floating point number represented by the eight bytes at\nthe specified [byteOffset] in this byte array, in IEEE 754\ndouble-precision binary floating-point format (binary64).\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 8` is greater than the length of this byte array.\n","line":"312"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"setFloat642()","name":"setFloat64","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"byteOffset","name":"byteOffset","kind":"param"},{"ref":{"name":"double","refId":"dart.core/double"},"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"\nSets the eight bytes starting at the specified [byteOffset] in this\nbyte array to the IEEE 754 double-precision binary floating-point\n(binary64) representation of the specified [value].\n\nReturns `byteOffset + 8`, which is the offset of the first byte in the\narray after the last byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 8` is greater than the length of this byte array.\n","line":"326"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA random-access sequence of bytes that also provides random access to\nthe fixed-width integers and floating point numbers represented by\nthose bytes. Byte arrays may be used to pack and unpack data from\nexternal sources (such as networks or files systems), and to process\nlarge quantities of numerical data more efficiently than would be possible\nwith ordinary [List] implementations. Byte arrays can save space, by\neliminating the need for object headers, and time, by eliminating the\nneed for data copies. Finally, Byte arrays may be used to intentionally\nreinterpret the bytes representing one arithmetic type as another.\nFor example this code fragment determine what 64-bit signed integer\nis represented by the bytes of a 64-bit floating point number:\n\n    var ba = new Uint8List(8).asByteArray();\n    ba.setFloat64(0, 3.14159265358979323846);\n    int huh = ba.getInt64(0);\n","line":"24"}],"uri":"sdk/lib/scalarlist/scalarlist.dart","kind":"library","comment":"\nThe scalarlist library is used for Dart server applications,\nwhich run on a stand-alone Dart VM from the command line.\n*This library does not work in browser based applications.*\n\nThis library allows you to work with arrays of scalar values\nof various sizes.\n","line":"13"}