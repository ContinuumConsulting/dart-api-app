{"dependencies":[{"id":"dart.core","name":"dart:core","children":[{"id":"Object","name":"Object","children":[{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"==1()","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"kind":"method","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","line":"29"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","comment":"\nReturns a string representation of this object.\n","line":"48"},{"id":"noSuchMethod1()","name":"noSuchMethod","children":[{"ref":{"name":"InvocationMirror","refId":"dart.core/InvocationMirror"},"id":"invocation","name":"invocation","kind":"param"}],"kind":"method","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [InvocationMirror].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","line":"60"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"hashCode","name":"hashCode","kind":"property","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"43"},{"ref":{"name":"Type","refId":"dart.core/Type"},"id":"runtimeType","name":"runtimeType","kind":"property","comment":"\nA representation of the runtime type of the object.\n","line":"65"},{"id":"Object0()","name":"Object","kind":"constructor","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"sdk/lib/core/object.dart","kind":"class","comment":"\nEverything in Dart is an [Object].\n","line":"10"}],"uri":"sdk/lib/core/core.dart","kind":"library","line":"5"}],"id":"dart.crypto","name":"dart:crypto","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"id":"_rotl322()","name":"_rotl32","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"val","name":"val","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"shift","name":"shift","kind":"param"}],"uri":"sdk/lib/crypto/hash_utils.dart","kind":"method","isPrivate":true,"line":"16"},{"id":"_BYTES_PER_WORD","name":"_BYTES_PER_WORD","uri":"sdk/lib/crypto/hash_utils.dart","kind":"variable","isPrivate":true,"line":"11"},{"id":"_BITS_PER_BYTE","name":"_BITS_PER_BYTE","uri":"sdk/lib/crypto/hash_utils.dart","kind":"variable","isPrivate":true,"line":"10"},{"id":"_MASK_32","name":"_MASK_32","uri":"sdk/lib/crypto/hash_utils.dart","kind":"variable","isPrivate":true,"line":"9"},{"id":"_MASK_8","name":"_MASK_8","uri":"sdk/lib/crypto/hash_utils.dart","kind":"variable","isPrivate":true,"line":"8"},{"interfaces":[{"name":"SHA256","refId":"dart.crypto/SHA256"}],"superclass":{"name":"_HashBase","refId":"dart.crypto/_HashBase"},"id":"_SHA256","name":"_SHA256","children":[{"returnType":{"name":"SHA256","refId":"dart.crypto/SHA256"},"id":"newInstance0()","name":"newInstance","kind":"method","line":"24"},{"id":"_rotr322()","name":"_rotr32","children":[{"id":"n","name":"n","kind":"param"},{"id":"x","name":"x","kind":"param"}],"kind":"method","isPrivate":true,"line":"46"},{"id":"_ch3()","name":"_ch","children":[{"id":"x","name":"x","kind":"param"},{"id":"y","name":"y","kind":"param"},{"id":"z","name":"z","kind":"param"}],"kind":"method","isPrivate":true,"line":"47"},{"id":"_maj3()","name":"_maj","children":[{"id":"x","name":"x","kind":"param"},{"id":"y","name":"y","kind":"param"},{"id":"z","name":"z","kind":"param"}],"kind":"method","isPrivate":true,"line":"48"},{"id":"_bsig01()","name":"_bsig0","children":[{"id":"x","name":"x","kind":"param"}],"kind":"method","isPrivate":true,"line":"49"},{"id":"_bsig11()","name":"_bsig1","children":[{"id":"x","name":"x","kind":"param"}],"kind":"method","isPrivate":true,"line":"50"},{"id":"_ssig01()","name":"_ssig0","children":[{"id":"x","name":"x","kind":"param"}],"kind":"method","isPrivate":true,"line":"51"},{"id":"_ssig11()","name":"_ssig1","children":[{"id":"x","name":"x","kind":"param"}],"kind":"method","isPrivate":true,"line":"52"},{"returnType":{"name":"void","refId":"void"},"id":"_updateHash1()","name":"_updateHash","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"M","name":"M","kind":"param"}],"kind":"method","isPrivate":true,"line":"56"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"isStatic":true,"id":"_K","name":"_K","kind":"variable","isPrivate":true,"line":"30"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"_w","name":"_w","kind":"variable","isPrivate":true,"line":"104"},{"id":"_SHA2560()","name":"_SHA256","kind":"constructor","line":"10"}],"uri":"sdk/lib/crypto/sha256.dart","kind":"class","isPrivate":true,"line":"8"},{"interfaces":[{"name":"SHA1","refId":"dart.crypto/SHA1"}],"superclass":{"name":"_HashBase","refId":"dart.crypto/_HashBase"},"id":"_SHA1","name":"_SHA1","children":[{"returnType":{"name":"SHA1","refId":"dart.crypto/SHA1"},"id":"newInstance0()","name":"newInstance","kind":"method","line":"19"},{"returnType":{"name":"void","refId":"void"},"id":"_updateHash1()","name":"_updateHash","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"m","name":"m","kind":"param"}],"kind":"method","isPrivate":true,"line":"25"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"_w","name":"_w","kind":"variable","isPrivate":true,"line":"66"},{"id":"_SHA10()","name":"_SHA1","kind":"constructor","line":"10"}],"uri":"sdk/lib/crypto/sha1.dart","kind":"class","isPrivate":true,"line":"8"},{"interfaces":[{"name":"MD5","refId":"dart.crypto/MD5"}],"superclass":{"name":"_HashBase","refId":"dart.crypto/_HashBase"},"id":"_MD5","name":"_MD5","children":[{"returnType":{"name":"MD5","refId":"dart.crypto/MD5"},"id":"newInstance0()","name":"newInstance","kind":"method","line":"17"},{"returnType":{"name":"void","refId":"void"},"id":"_updateHash1()","name":"_updateHash","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"m","name":"m","kind":"param"}],"kind":"method","isPrivate":true,"line":"42"},{"isStatic":true,"id":"_k","name":"_k","kind":"variable","isPrivate":true,"line":"21"},{"isStatic":true,"id":"_r","name":"_r","kind":"variable","isPrivate":true,"line":"34"},{"id":"_MD50()","name":"_MD5","kind":"constructor","line":"9"}],"uri":"sdk/lib/crypto/md5.dart","kind":"class","isPrivate":true,"line":"8"},{"interfaces":[{"name":"HMAC","refId":"dart.crypto/HMAC"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"_HMAC","name":"_HMAC","children":[{"id":"add1()","name":"add","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"data","name":"data","kind":"param"}],"kind":"method","line":"12"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"close0()","name":"close","kind":"method","line":"61"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"verify1()","name":"verify","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"digest","name":"digest","kind":"param"}],"kind":"method","line":"66"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"digest","name":"digest","kind":"property","line":"17"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"_isClosed","name":"_isClosed","kind":"variable","isPrivate":true,"line":"8"},{"ref":{"name":"Hash","refId":"dart.crypto/Hash"},"id":"_hash","name":"_hash","kind":"variable","isPrivate":true,"line":"81"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"_key","name":"_key","kind":"variable","isPrivate":true,"line":"82"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"_message","name":"_message","kind":"variable","isPrivate":true,"line":"83"},{"id":"_HMAC2()","name":"_HMAC","children":[{"initializedField":{"name":"_hash","refId":"dart.crypto/_HMAC/_hash"},"ref":{"name":"Hash","refId":"dart.crypto/Hash"},"id":"_hash","name":"_hash","kind":"param","isPrivate":true},{"initializedField":{"name":"_key","refId":"dart.crypto/_HMAC/_key"},"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"_key","name":"_key","kind":"param","isPrivate":true}],"kind":"constructor","line":"10"}],"uri":"sdk/lib/crypto/hmac.dart","kind":"class","isPrivate":true,"line":"7"},{"interfaces":[{"name":"Hash","refId":"dart.crypto/Hash"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"_HashBase","name":"_HashBase","children":[{"id":"add1()","name":"add","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"data","name":"data","kind":"param"}],"kind":"method","line":"34"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"close0()","name":"close","kind":"method","line":"45"},{"id":"newInstance0()","name":"newInstance","kind":"method","line":"62"},{"id":"_updateHash1()","name":"_updateHash","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"m","name":"m","kind":"param"}],"kind":"method","isPrivate":true,"line":"65"},{"id":"_add322()","name":"_add32","children":[{"id":"x","name":"x","kind":"param"},{"id":"y","name":"y","kind":"param"}],"kind":"method","isPrivate":true,"line":"68"},{"id":"_roundUp2()","name":"_roundUp","children":[{"id":"val","name":"val","kind":"param"},{"id":"n","name":"n","kind":"param"}],"kind":"method","isPrivate":true,"line":"69"},{"id":"_resultAsBytes0()","name":"_resultAsBytes","kind":"method","isPrivate":true,"line":"72"},{"id":"_bytesToChunk2()","name":"_bytesToChunk","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"data","name":"data","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"dataIndex","name":"dataIndex","kind":"param"}],"kind":"method","isPrivate":true,"line":"81"},{"id":"_wordToBytes1()","name":"_wordToBytes","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"word","name":"word","kind":"param"}],"kind":"method","isPrivate":true,"line":"99"},{"id":"_iterate0()","name":"_iterate","kind":"method","isPrivate":true,"line":"110"},{"id":"_finalizeData0()","name":"_finalizeData","kind":"method","isPrivate":true,"line":"126"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"blockSize","name":"blockSize","kind":"property","line":"57"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"_chunkSizeInWords","name":"_chunkSizeInWords","kind":"variable","isPrivate":true,"line":"147"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"_digestSizeInWords","name":"_digestSizeInWords","kind":"variable","isPrivate":true,"line":"148"},{"isFinal":true,"ref":{"name":"bool","refId":"dart.core/bool"},"id":"_bigEndianWords","name":"_bigEndianWords","kind":"variable","isPrivate":true,"line":"149"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_lengthInBytes","name":"_lengthInBytes","kind":"variable","isPrivate":true,"line":"150"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"_pendingData","name":"_pendingData","kind":"variable","isPrivate":true,"line":"151"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"_currentChunk","name":"_currentChunk","kind":"variable","isPrivate":true,"line":"152"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"_h","name":"_h","kind":"variable","isPrivate":true,"line":"153"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"_digestCalled","name":"_digestCalled","kind":"variable","isPrivate":true,"line":"154"},{"id":"_HashBase3()","name":"_HashBase","children":[{"initializedField":{"name":"_chunkSizeInWords","refId":"dart.crypto/_HashBase/_chunkSizeInWords"},"ref":{"name":"int","refId":"dart.core/int"},"id":"_chunkSizeInWords","name":"_chunkSizeInWords","kind":"param","isPrivate":true},{"initializedField":{"name":"_digestSizeInWords","refId":"dart.crypto/_HashBase/_digestSizeInWords"},"ref":{"name":"int","refId":"dart.core/int"},"id":"_digestSizeInWords","name":"_digestSizeInWords","kind":"param","isPrivate":true,"line":"26"},{"initializedField":{"name":"_bigEndianWords","refId":"dart.crypto/_HashBase/_bigEndianWords"},"ref":{"name":"bool","refId":"dart.core/bool"},"id":"_bigEndianWords","name":"_bigEndianWords","kind":"param","isPrivate":true,"line":"27"}],"kind":"constructor","line":"25"}],"uri":"sdk/lib/crypto/hash_utils.dart","kind":"class","isPrivate":true,"line":"24"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"_CryptoUtils","name":"_CryptoUtils","children":[{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"id":"bytesToHex1()","name":"bytesToHex","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"param"}],"kind":"method","line":"27"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"id":"bytesToBase642()","name":"bytesToBase64","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"lineLength","name":"lineLength","kind":"param"}],"kind":"method","line":"35"}],"uri":"sdk/lib/crypto/crypto_utils.dart","kind":"class","isPrivate":true,"line":"26"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"_LineWrappingStringBuffer","name":"_LineWrappingStringBuffer","children":[{"returnType":{"name":"void","refId":"void"},"id":"add1()","name":"add","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"s","name":"s","kind":"param"}],"kind":"method","line":"10"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","line":"19"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_lineLength","name":"_lineLength","kind":"variable","isPrivate":true,"line":"21"},{"ref":{"name":"StringBuffer","refId":"dart.core/StringBuffer"},"id":"_sb","name":"_sb","kind":"variable","isPrivate":true,"line":"22"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_currentLineLength","name":"_currentLineLength","kind":"variable","isPrivate":true,"line":"23"},{"id":"_LineWrappingStringBuffer1()","name":"_LineWrappingStringBuffer","children":[{"initializedField":{"name":"_lineLength","refId":"dart.crypto/_LineWrappingStringBuffer/_lineLength"},"ref":{"name":"int","refId":"dart.core/int"},"id":"_lineLength","name":"_lineLength","kind":"param","isPrivate":true}],"kind":"constructor","line":"8"}],"uri":"sdk/lib/crypto/crypto_utils.dart","kind":"class","isPrivate":true,"line":"7"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"HashException","name":"HashException","children":[{"id":"toString0()","name":"toString","kind":"method","line":"150"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"variable","line":"151"},{"id":"HashException1()","name":"HashException","children":[{"initializedField":{"name":"message","refId":"dart.crypto/HashException/message"},"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"}],"kind":"constructor","line":"149"}],"kind":"class","comment":"\nHashExceptions are thrown on invalid use of a Hash\nobject.\n","line":"148"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"CryptoUtils","name":"CryptoUtils","children":[{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"id":"bytesToHex1()","name":"bytesToHex","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"param"}],"kind":"method","comment":"\nConvert a list of bytes (for example a message digest) into a hex\nstring.\n","line":"130"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"id":"bytesToBase642()","name":"bytesToBase64","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"lineLength","name":"lineLength","kind":"param"}],"kind":"method","comment":"\nConverts a list of bytes (for example a message digest) into a\nbase64 encoded string optionally broken up in to lines of\n[lineLength] chars separated by '\\r\\n'.\n","line":"139"}],"kind":"class","comment":"\nUtility methods for working with message digests.\n","line":"125"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"HMAC","name":"HMAC","children":[{"id":"add1()","name":"add","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"data","name":"data","kind":"param"}],"kind":"method","comment":"\nAdd a list of bytes to the message.\n","line":"96"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"close0()","name":"close","kind":"method","comment":"\nPerform the actual computation and extract the message digest\nas a list of bytes.\n","line":"102"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"verify1()","name":"verify","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"digest","name":"digest","kind":"param"}],"kind":"method","comment":"\nVerify that the HMAC computed for the data so far matches the\ngiven message digest.\n\nThis method should be used instead of memcmp-style comparisons\nto avoid leaking information via timing.\n\nThrows an exception if the given digest does not have the same\nsize as the digest computed by this HMAC instance.\n","line":"119"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"digest","name":"digest","kind":"property","comment":"\nExtract the message digest as a list of bytes without closing [this].\n","line":"107"},{"id":"HMAC2()","name":"HMAC","children":[{"ref":{"name":"Hash","refId":"dart.crypto/Hash"},"id":"hash","name":"hash","kind":"param"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"key","name":"key","kind":"param"}],"kind":"constructor","comment":"\nCreate an [HMAC] object from a [Hash] and a key.\n","line":"91"}],"kind":"class","comment":"\nHash-based Message Authentication Code support.\n\nThe [add] method is used to add data to the message. The [digest] and\n[close] methods are used to extract the message authentication code.\n","line":"87"},{"interfaces":[{"name":"Hash","refId":"dart.crypto/Hash"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"MD5","name":"MD5","children":[{"id":"MD50()","name":"MD5","kind":"constructor","line":"77"}],"kind":"class","comment":"\nMD5 hash function implementation.\n\nWARNING: MD5 has known collisions and should only be used when\nrequired for backwards compatibility.\n","line":"76"},{"interfaces":[{"name":"Hash","refId":"dart.crypto/Hash"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"SHA256","name":"SHA256","children":[{"id":"SHA2560()","name":"SHA256","kind":"constructor","line":"67"}],"kind":"class","comment":"\nSHA256 hash function implementation.\n","line":"66"},{"interfaces":[{"name":"Hash","refId":"dart.crypto/Hash"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"SHA1","name":"SHA1","children":[{"id":"SHA10()","name":"SHA1","kind":"constructor","line":"60"}],"kind":"class","comment":"\nSHA1 hash function implementation.\n","line":"59"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Hash","name":"Hash","children":[{"id":"add1()","name":"add","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"data","name":"data","kind":"param"}],"kind":"method","comment":"\nAdd a list of bytes to the hash computation.\n","line":"34"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"close0()","name":"close","kind":"method","comment":"\nFinish the hash computation and extract the message digest as\na list of bytes.\n","line":"40"},{"returnType":{"name":"Hash","refId":"dart.crypto/Hash"},"id":"newInstance0()","name":"newInstance","kind":"method","comment":"\nReturns a new instance of this hash function.\n","line":"45"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"blockSize","name":"blockSize","kind":"property","comment":"\nInternal block size of the hash in bytes.\n\nThis is exposed for use by the HMAC class which needs to know the\nblock size for the [Hash] it is using.\n","line":"53"}],"kind":"class","comment":"\nInterface for cryptographic hash functions.\n\nThe [add] method is used to add data to the hash. The [close] method\nis used to extract the message digest.\n\nOnce the [close] method has been called no more data can be added using the\n[add] method. If [add] is called after the first call to [close] a\nHashException is thrown.\n\nIf multiple instances of a given Hash is needed the [newInstance]\nmethod can provide a new instance.\n","line":"30"}],"uri":"sdk/lib/crypto/crypto.dart","kind":"library","line":"5"}