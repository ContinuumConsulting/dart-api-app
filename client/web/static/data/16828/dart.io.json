{"name":"dart.io","children":[{"name":"_getTimerFactoryClosure","uri":"sdk/lib/io/timer_impl.dart","kind":"method","isPrivate":true,"id":"_getTimerFactoryClosure0()","line":"193"},{"returnType":{"name":"void","refId":"void"},"name":"_pipe","children":[{"ref":{"name":"InputStream","refId":"dart.io/InputStream"},"name":"input","kind":"param","id":"input"},{"ref":{"name":"OutputStream","refId":"dart.io/OutputStream"},"name":"output","kind":"param","id":"output"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"close","kind":"param","id":"close"}],"uri":"sdk/lib/io/stream_util.dart","kind":"method","isPrivate":true,"id":"_pipe3()","line":"150"},{"returnType":{"name":"OutputStream","refId":"dart.io/OutputStream"},"name":"stderr","uri":"sdk/lib/io/stdio.dart","kind":"method","id":"stderr0()","line":"35"},{"returnType":{"name":"OutputStream","refId":"dart.io/OutputStream"},"name":"stdout","uri":"sdk/lib/io/stdio.dart","kind":"method","id":"stdout0()","line":"27"},{"returnType":{"name":"InputStream","refId":"dart.io/InputStream"},"name":"stdin","uri":"sdk/lib/io/stdio.dart","kind":"method","id":"stdin0()","line":"19"},{"isSetter":true,"name":"exitCode=","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"status","kind":"param","id":"status"}],"uri":"sdk/lib/io/process.dart","kind":"method","comment":"\nGlobal exit code for the Dart VM.\n\nThe exit code is global for the Dart VM and the last assignment to\nexitCode from any isolate determines the exit code of the Dart VM\non normal termination.\n","id":"exitCode=1()","line":"34"},{"returnType":{"name":"void","refId":"void"},"name":"exit","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"status","kind":"param","id":"status"}],"uri":"sdk/lib/io/process.dart","kind":"method","comment":"\nExit the Dart VM process immediately with the given [status] code.\n\nThis does not wait for any asynchronous operations to terminate. Using\n[exit] is therefore very likely to lose data.\n","id":"exit1()","line":"20"},{"returnType":{"name":"_BufferAndOffset","refId":"dart.io/_BufferAndOffset"},"name":"_ensureFastAndSerializableBuffer","children":[{"ref":{"name":"List","refId":"dart.core/List"},"name":"buffer","kind":"param","id":"buffer","line":"72"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"offset","kind":"param","id":"offset","line":"72"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"bytes","kind":"param","id":"bytes","line":"72"}],"uri":"sdk/lib/io/common.dart","kind":"method","isPrivate":true,"id":"_ensureFastAndSerializableBuffer3()","line":"71"},{"ref":{"name":"OutputStream","refId":"dart.io/OutputStream"},"name":"stderr","uri":"sdk/lib/io/stdio.dart","kind":"property","id":"stderr","line":"35"},{"ref":{"name":"OutputStream","refId":"dart.io/OutputStream"},"name":"stdout","uri":"sdk/lib/io/stdio.dart","kind":"property","id":"stdout","line":"27"},{"ref":{"name":"InputStream","refId":"dart.io/InputStream"},"name":"stdin","uri":"sdk/lib/io/stdio.dart","kind":"property","id":"stdin","line":"19"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"_webSocketGUID","uri":"sdk/lib/io/websocket_impl.dart","kind":"variable","isPrivate":true,"id":"_webSocketGUID","line":"7"},{"ref":{"name":"OutputStream","refId":"dart.io/OutputStream"},"name":"_stderr","uri":"sdk/lib/io/stdio.dart","kind":"variable","isPrivate":true,"id":"_stderr","line":"16"},{"ref":{"name":"OutputStream","refId":"dart.io/OutputStream"},"name":"_stdout","uri":"sdk/lib/io/stdio.dart","kind":"variable","isPrivate":true,"id":"_stdout","line":"15"},{"ref":{"name":"InputStream","refId":"dart.io/InputStream"},"name":"_stdin","uri":"sdk/lib/io/stdio.dart","kind":"variable","isPrivate":true,"id":"_stdin","line":"14"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_STDIO_HANDLE_TYPE_OTHER","uri":"sdk/lib/io/stdio.dart","kind":"variable","isPrivate":true,"id":"_STDIO_HANDLE_TYPE_OTHER","line":"11"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_STDIO_HANDLE_TYPE_SOCKET","uri":"sdk/lib/io/stdio.dart","kind":"variable","isPrivate":true,"id":"_STDIO_HANDLE_TYPE_SOCKET","line":"10"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_STDIO_HANDLE_TYPE_FILE","uri":"sdk/lib/io/stdio.dart","kind":"variable","isPrivate":true,"id":"_STDIO_HANDLE_TYPE_FILE","line":"9"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_STDIO_HANDLE_TYPE_PIPE","uri":"sdk/lib/io/stdio.dart","kind":"variable","isPrivate":true,"id":"_STDIO_HANDLE_TYPE_PIPE","line":"8"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_STDIO_HANDLE_TYPE_TERMINAL","uri":"sdk/lib/io/stdio.dart","kind":"variable","isPrivate":true,"id":"_STDIO_HANDLE_TYPE_TERMINAL","line":"7"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"_DART_SESSION_ID","uri":"sdk/lib/io/http_session.dart","kind":"variable","isPrivate":true,"id":"_DART_SESSION_ID","line":"7"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_WRITE_LIST_REQUEST","uri":"sdk/lib/io/file_impl.dart","kind":"variable","isPrivate":true,"id":"_WRITE_LIST_REQUEST","line":"312"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_READ_LIST_REQUEST","uri":"sdk/lib/io/file_impl.dart","kind":"variable","isPrivate":true,"id":"_READ_LIST_REQUEST","line":"311"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_READ_REQUEST","uri":"sdk/lib/io/file_impl.dart","kind":"variable","isPrivate":true,"id":"_READ_REQUEST","line":"310"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_WRITE_BYTE_REQUEST","uri":"sdk/lib/io/file_impl.dart","kind":"variable","isPrivate":true,"id":"_WRITE_BYTE_REQUEST","line":"309"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_READ_BYTE_REQUEST","uri":"sdk/lib/io/file_impl.dart","kind":"variable","isPrivate":true,"id":"_READ_BYTE_REQUEST","line":"308"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_FLUSH_REQUEST","uri":"sdk/lib/io/file_impl.dart","kind":"variable","isPrivate":true,"id":"_FLUSH_REQUEST","line":"307"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_LAST_MODIFIED_REQUEST","uri":"sdk/lib/io/file_impl.dart","kind":"variable","isPrivate":true,"id":"_LAST_MODIFIED_REQUEST","line":"306"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_LENGTH_FROM_NAME_REQUEST","uri":"sdk/lib/io/file_impl.dart","kind":"variable","isPrivate":true,"id":"_LENGTH_FROM_NAME_REQUEST","line":"305"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_LENGTH_REQUEST","uri":"sdk/lib/io/file_impl.dart","kind":"variable","isPrivate":true,"id":"_LENGTH_REQUEST","line":"304"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_TRUNCATE_REQUEST","uri":"sdk/lib/io/file_impl.dart","kind":"variable","isPrivate":true,"id":"_TRUNCATE_REQUEST","line":"303"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_SET_POSITION_REQUEST","uri":"sdk/lib/io/file_impl.dart","kind":"variable","isPrivate":true,"id":"_SET_POSITION_REQUEST","line":"302"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_POSITION_REQUEST","uri":"sdk/lib/io/file_impl.dart","kind":"variable","isPrivate":true,"id":"_POSITION_REQUEST","line":"301"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_CLOSE_REQUEST","uri":"sdk/lib/io/file_impl.dart","kind":"variable","isPrivate":true,"id":"_CLOSE_REQUEST","line":"300"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_DIRECTORY_REQUEST","uri":"sdk/lib/io/file_impl.dart","kind":"variable","isPrivate":true,"id":"_DIRECTORY_REQUEST","line":"299"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_FULL_PATH_REQUEST","uri":"sdk/lib/io/file_impl.dart","kind":"variable","isPrivate":true,"id":"_FULL_PATH_REQUEST","line":"298"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_OPEN_REQUEST","uri":"sdk/lib/io/file_impl.dart","kind":"variable","isPrivate":true,"id":"_OPEN_REQUEST","line":"297"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_DELETE_REQUEST","uri":"sdk/lib/io/file_impl.dart","kind":"variable","isPrivate":true,"id":"_DELETE_REQUEST","line":"296"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_CREATE_REQUEST","uri":"sdk/lib/io/file_impl.dart","kind":"variable","isPrivate":true,"id":"_CREATE_REQUEST","line":"295"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_EXISTS_REQUEST","uri":"sdk/lib/io/file_impl.dart","kind":"variable","isPrivate":true,"id":"_EXISTS_REQUEST","line":"294"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_OSERROR_RESPONSE_MESSAGE","uri":"sdk/lib/io/common.dart","kind":"variable","isPrivate":true,"id":"_OSERROR_RESPONSE_MESSAGE","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_OSERROR_RESPONSE_ERROR_CODE","uri":"sdk/lib/io/common.dart","kind":"variable","isPrivate":true,"id":"_OSERROR_RESPONSE_ERROR_CODE","line":"14"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_ERROR_RESPONSE_ERROR_TYPE","uri":"sdk/lib/io/common.dart","kind":"variable","isPrivate":true,"id":"_ERROR_RESPONSE_ERROR_TYPE"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_FILE_CLOSED_RESPONSE","uri":"sdk/lib/io/common.dart","kind":"variable","isPrivate":true,"id":"_FILE_CLOSED_RESPONSE","line":"11"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_OSERROR_RESPONSE","uri":"sdk/lib/io/common.dart","kind":"variable","isPrivate":true,"id":"_OSERROR_RESPONSE","line":"10"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_ILLEGAL_ARGUMENT_RESPONSE","uri":"sdk/lib/io/common.dart","kind":"variable","isPrivate":true,"id":"_ILLEGAL_ARGUMENT_RESPONSE","line":"9"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_SUCCESS_RESPONSE","uri":"sdk/lib/io/common.dart","kind":"variable","isPrivate":true,"id":"_SUCCESS_RESPONSE","line":"8"},{"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"WebSocketException","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"303"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"variable","id":"message","line":"304"},{"name":"WebSocketException","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"message","kind":"param","id":"message"}],"kind":"constructor","id":"WebSocketException1()","line":"302"}],"uri":"sdk/lib/io/websocket.dart","kind":"class","id":"WebSocketException","line":"301"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"WebSocket","children":[{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onopen=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the callback to be called when a web socket connection has\nbeen established.\n","id":"onopen=1()","line":"253"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onerror=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the callback to be called when the web socket connection\nencountered an error.\n","id":"onerror=1()","line":"259"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onclose=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the callback to be called when the web socket connection is\nclosed.\n","id":"onclose=1()","line":"265"},{"returnType":{"name":"void","refId":"void"},"name":"close","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"code","kind":"param","id":"code"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"reason","kind":"param","id":"reason"}],"kind":"method","comment":"\nCloses the web socket connection.\n","id":"close2()","line":"285"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onmessage=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the callback to be called when a message have been\nreceived.\n","id":"onmessage=1()","line":"291"},{"returnType":{"name":"void","refId":"void"},"name":"send","children":[{"name":"data","kind":"param","id":"data"}],"kind":"method","comment":"\nSends data on the web socket connection. The data in [data] must\nbe either a [:String:] or [:List<int>:] holding bytes.\n","id":"send1()","line":"297"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"readyState","kind":"property","comment":"\nReturns the current state of the connection.\n","id":"readyState","line":"242"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"bufferedAmount","kind":"property","comment":"\nReturns the number of bytes currently buffered for transmission.\n","id":"bufferedAmount","line":"247"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"extensions","kind":"property","comment":"\nThe extensions property is initially the empty string. After the\nweb socket connection is established this string reflects the\nextensions used by the server.\n","id":"extensions","line":"272"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"protocol","kind":"property","comment":"\nThe protocol property is initially the empty string. After the\nweb socket connection is established the value is the subprotocol\nselected by the server. If no subprotocol is negotiated the\nvalue will remain [:null:].\n","id":"protocol","line":"280"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"CONNECTING","kind":"variable","id":"CONNECTING","line":"226"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"OPEN","kind":"variable","id":"OPEN","line":"227"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"CLOSING","kind":"variable","id":"CLOSING","line":"228"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"CLOSED","kind":"variable","id":"CLOSED","line":"229"},{"name":"WebSocket","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"url","kind":"param","id":"url"},{"isOptional":true,"name":"protocols","kind":"param","id":"protocols"}],"kind":"constructor","comment":"\nCreate a new web socket connection. The URL supplied in [url]\nmust use the scheme [:ws:]. The [protocols] argument is either a\n[:String:] or [:List<String>:] specifying the subprotocols the\nclient is willing to speak.\n","id":"WebSocket2()","line":"237"}],"uri":"sdk/lib/io/websocket.dart","kind":"class","comment":"\nAlternative web socket client interface. This interface is compliant\nwith the W3C browser API for web sockets specified in\nhttp://dev.w3.org/html5/websockets/.\n","id":"WebSocket","line":"222"},{"superclass":{"name":"Event","refId":"dart.io/Event"},"isAbstract":true,"name":"CloseEvent","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"wasClean","kind":"property","comment":"\nReturns whether the connection was closed cleanly or not.\n","id":"wasClean","line":"201"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"code","kind":"property","comment":"\nReturns the web socket connection close code provided by the\nserver.\n","id":"code","line":"207"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"reason","kind":"property","comment":"\nReturns the web socket connection close reason provided by the\nserver.\n","id":"reason","line":"213"}],"uri":"sdk/lib/io/websocket.dart","kind":"class","comment":"\nEvent delivered when a web socket connection is closed.\n","id":"CloseEvent","line":"197"},{"superclass":{"name":"Event","refId":"dart.io/Event"},"isAbstract":true,"name":"MessageEvent","children":[{"name":"data","kind":"property","comment":"\nThe type of [message] is either [:String:] or [:List<int>:]\ndepending on whether it is a text or binary message. If the\nmessage is empty [message] will be [:null:]\n","id":"data","line":"190"}],"uri":"sdk/lib/io/websocket.dart","kind":"class","comment":"\nEvent delivered when there is data on a web socket connection.\n","id":"MessageEvent","line":"184"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Event","uri":"sdk/lib/io/websocket.dart","kind":"class","comment":"\nBase class for the events generated by the W3C complient browser\nAPI for web sockets.\n","id":"Event","line":"179"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"WebSocketClientConnection","children":[{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onRequest=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the callback to be called when the request object for the\nopening handshake request is ready. This callback can be used if\none need to add additional headers to the opening handshake\nrequest.\n","id":"onRequest=1()","line":"121"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onOpen=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the callback to be called when a web socket connection has\nbeen established.\n","id":"onOpen=1()","line":"127"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onMessage=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the callback to be called when a message have been\nreceived. The type of [message] is either [:String:] or\n[:List<int>:] depending on whether it is a text or binary\nmessage. If the message is empty [message] will be [:null:].\n","id":"onMessage=1()","line":"135"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onClosed=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the callback to be called when the web socket connection is\nclosed. [status] indicate the reason for closing. For network\nerrors the value of [status] will be\nWebSocketStatus.ABNORMAL_CLOSURE].\n","id":"onClosed=1()","line":"143"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onNoUpgrade=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the callback to be called when the response object for the\nopening handshake did not cause a web socket connection\nupgrade. This will be called in case the response status code is\nnot 101 (Switching Protocols). If this callback is not set the\n[:onError:] callback will be called if the server did not upgrade\nthe connection.\n","id":"onNoUpgrade=1()","line":"153"},{"name":"send","children":[{"name":"message","kind":"param","id":"message"}],"kind":"method","comment":"\nSends a message. The [message] must be a [:String:] or a\n[:List<int>:]. To send an empty message use either an empty\n[:String:] or an empty [:List<int>:]. [:null:] cannot be used.\n","id":"send1()","line":"160"},{"name":"close","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"status","kind":"param","id":"status"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"reason","kind":"param","id":"reason"}],"kind":"method","comment":"\nClose the web socket connection. The default value for [status]\nand [reason] are [:null:].\n","id":"close2()","line":"166"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"hashCode","kind":"property","comment":"\nWebSocketClientConnection is hashable.\n","id":"hashCode","line":"171"},{"name":"WebSocketClientConnection","children":[{"ref":{"name":"HttpClientConnection","refId":"dart.io/HttpClientConnection"},"name":"conn","kind":"param","id":"conn"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"name":"protocols","kind":"param","id":"protocols","line":"111"}],"kind":"constructor","comment":"\nCreates a new web socket client connection based on a HTTP client\nconnection. The HTTP client connection must be freshly opened.\n","id":"WebSocketClientConnection2()","line":"110"}],"uri":"sdk/lib/io/websocket.dart","kind":"class","comment":"\nClient web socket connection.\n","id":"WebSocketClientConnection","line":"105"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"WebSocketConnection","children":[{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onMessage=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the callback to be called when a message have been\nreceived. The type on [message] is either [:String:] or\n[:List<int>:] depending on whether it is a text or binary\nmessage. If the message is empty [message] will be [:null:].\n","id":"onMessage=1()","line":"69"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onClosed=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the callback to be called when the web socket connection is\nclosed. [status] indicate the reason for closing. For network\nerrors the value of [status] will be\nWebSocketStatus.ABNORMAL_CLOSURE]. In this callbach it is\npossible to call [close] if [close] has not already been called.\nIf [close] has still not been called after the close callback\nreturns the received close status will automatically be echoed\nback to the other end to finish the close handshake.\n","id":"onClosed=1()","line":"81"},{"name":"send","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"message","kind":"param","id":"message"}],"kind":"method","comment":"\nSends a message. The [message] must be a [:String:] a\n[:List<int>:] or [:null:].\n","id":"send1()","line":"87"},{"name":"close","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"status","kind":"param","id":"status"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"reason","kind":"param","id":"reason"}],"kind":"method","comment":"\nClose the web socket connection. The default value for [status]\nand [reason] are [:null:].\n","id":"close2()","line":"93"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"hashCode","kind":"property","comment":"\nWebSocketConnection is hashable.\n","id":"hashCode","line":"98"}],"uri":"sdk/lib/io/websocket.dart","kind":"class","comment":"\nServer web socket connection.\n","id":"WebSocketConnection","line":"62"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"WebSocketHandler","children":[{"returnType":{"name":"void","refId":"void"},"name":"onRequest","children":[{"ref":{"name":"HttpRequest","refId":"dart.io/HttpRequest"},"name":"request","kind":"param","id":"request"},{"ref":{"name":"HttpResponse","refId":"dart.io/HttpResponse"},"name":"response","kind":"param","id":"response"}],"kind":"method","comment":"\nRequest handler to be registered with the HTTP server.\n","id":"onRequest2()","line":"49"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onOpen=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the callback to be called when a new web socket connection\nhas been established.\n","id":"onOpen=1()","line":"55"},{"name":"WebSocketHandler","kind":"constructor","id":"WebSocketHandler0()","line":"44"}],"uri":"sdk/lib/io/websocket.dart","kind":"class","comment":"\nThe web socket protocol is implemented by a HTTP server handler\nwhich can be instantiated like this:\n\n    WebSocketHandler wsHandler = new WebSocketHandler();\n\nand then its onRequest method can be assigned to the HTTP server, e.g.\n\n    server.defaultHandler = wsHandler.onRequest;\n\nor\n\n    server.addRequestHandler((req) => req.path == \"/ws\",\n                             wsHandler.onRequest);\n\nThis handler strives to implement web sockets as specified by RFC6455.\n","id":"WebSocketHandler","line":"43"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"WebSocketStatus","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"NORMAL_CLOSURE","kind":"variable","id":"NORMAL_CLOSURE","line":"11"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"GOING_AWAY","kind":"variable","id":"GOING_AWAY","line":"12"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"PROTOCOL_ERROR","kind":"variable","id":"PROTOCOL_ERROR","line":"13"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"UNSUPPORTED_DATA","kind":"variable","id":"UNSUPPORTED_DATA","line":"14"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"RESERVED_1004","kind":"variable","id":"RESERVED_1004","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"NO_STATUS_RECEIVED","kind":"variable","id":"NO_STATUS_RECEIVED","line":"16"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"ABNORMAL_CLOSURE","kind":"variable","id":"ABNORMAL_CLOSURE","line":"17"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"INVALID_FRAME_PAYLOAD_DATA","kind":"variable","id":"INVALID_FRAME_PAYLOAD_DATA","line":"18"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"POLICY_VIOLATION","kind":"variable","id":"POLICY_VIOLATION","line":"19"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"MESSAGE_TOO_BIG","kind":"variable","id":"MESSAGE_TOO_BIG","line":"20"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"MISSING_MANDATORY_EXTENSION","kind":"variable","id":"MISSING_MANDATORY_EXTENSION","line":"21"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"INTERNAL_SERVER_ERROR","kind":"variable","id":"INTERNAL_SERVER_ERROR","line":"22"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"RESERVED_1015","kind":"variable","id":"RESERVED_1015","line":"23"}],"uri":"sdk/lib/io/websocket.dart","kind":"class","comment":"\nWeb socket status codes used when closing a web socket connection.\n","id":"WebSocketStatus","line":"10"},{"interfaces":[{"name":"ServerSocket","refId":"dart.io/ServerSocket"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"SecureServerSocket","children":[{"name":"SecureServerSocket","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"bindAddress","kind":"param","id":"bindAddress"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"port","kind":"param","id":"port","line":"26"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"backlog","kind":"param","id":"backlog","line":"27"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"certificate_name","kind":"param","id":"certificate_name","line":"28"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"requestClientCertificate","kind":"param","id":"requestClientCertificate","line":"29"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"requireClientCertificate","kind":"param","id":"requireClientCertificate","line":"30"}],"kind":"constructor","comment":"\nConstructs a new secure server socket, binds it to a given address\nand port, and listens on it.  Incoming client connections are\npromoted to secure connections, using the server certificate given by\ncertificate_name.  The bindAddress must be given as a numeric address,\nnot a host name.  The certificate name is the distinguished name (DN) of\nthe certificate, such as \"CN=localhost\" or \"CN=myserver.mydomain.com\".\nThe certificate is looked up in the NSS certificate database set by\nSecureSocket.setCertificateDatabase.\n\nTo request or require that clients authenticate by providing an SSL (TLS)\nclient certificate, set the optional parameters requestClientCertificate or\nrequireClientCertificate to true.  Require implies request, so one doesn't\nneed to specify both.  To check whether a client certificate was received,\ncheck SecureSocket.peerCertificate after connecting.  If no certificate\nwas received, the result will be null.\n","id":"SecureServerSocket6()","line":"25"}],"uri":"sdk/lib/io/secure_server_socket.dart","kind":"class","id":"SecureServerSocket","line":"7"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"X509Certificate","children":[{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"subject","kind":"variable","id":"subject","line":"99"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"issuer","kind":"variable","id":"issuer","line":"100"},{"isFinal":true,"ref":{"name":"Date","refId":"dart.core/Date"},"name":"startValidity","kind":"variable","id":"startValidity","line":"101"},{"isFinal":true,"ref":{"name":"Date","refId":"dart.core/Date"},"name":"endValidity","kind":"variable","id":"endValidity","line":"102"},{"name":"X509Certificate","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"subject","kind":"param","id":"subject"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"issuer","kind":"param","id":"issuer","line":"96"},{"ref":{"name":"Date","refId":"dart.core/Date"},"name":"startValidity","kind":"param","id":"startValidity","line":"97"},{"ref":{"name":"Date","refId":"dart.core/Date"},"name":"endValidity","kind":"param","id":"endValidity","line":"98"}],"kind":"constructor","id":"X509Certificate4()","line":"95"}],"uri":"sdk/lib/io/secure_socket.dart","kind":"class","comment":"\nX509Certificate represents an SSL certificate, with accessors to\nget the fields of the certificate.\n","id":"X509Certificate","line":"94"},{"interfaces":[{"name":"Socket","refId":"dart.io/Socket"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"SecureSocket","children":[{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onBadCertificate=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nInstall a handler for unverifiable certificates.  The handler can inspect\nthe certificate, and decide (or let the user decide) whether to accept\nthe connection or not.  The callback should return true\nto continue the SecureSocket connection.\n","id":"onBadCertificate=1()","line":"41"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"initialize","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"database","kind":"param","id":"database"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"password","kind":"param","id":"password","line":"85"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"useBuiltinRoots","kind":"param","id":"useBuiltinRoots","line":"86"}],"kind":"method","comment":"\nInitializes the NSS library.  If [initialize] is not called, the library\nis automatically initialized as if [initialize] were called with no\narguments.\n\nThe optional argument [database] is the path to a certificate database\ncontaining root certificates for verifying certificate paths on\nclient connections, and server certificates to provide on server\nconnections.  The argument [password] should be used when creating\nsecure server sockets, to allow the private key of the server\ncertificate to be fetched.  If [useBuiltinRoots] is true (the default),\nthen a built-in set of root certificates for trusted certificate\nauthorities is merged with the certificates in the database.\n\nExamples:\n  1) Use only the builtin root certificates:\n    SecureSocket.initialize(); or\n\n  2) Use a specified database and the builtin roots:\n    SecureSocket.initialize(database: 'path/to/my/database',\n                            password: 'my_password');\n\n  3) Use a specified database, without builtin roots:\n    SecureSocket.initialize(database: 'path/to/my/database',\n                            password: 'my_password'.\n                            useBuiltinRoots: false);\n\nThe database should be an NSS certificate database directory\ncontaining a cert9.db file, not a cert8.db file.  This version of\nthe database can be created using the NSS certutil tool with \"sql:\" in\nfront of the absolute path of the database directory, or setting the\nenvironment variable [[NSS_DEFAULT_DB_TYPE]] to \"sql\".\n","id":"initialize3()","line":"84"},{"ref":{"name":"X509Certificate","refId":"dart.io/X509Certificate"},"name":"peerCertificate","kind":"property","comment":"\nGet the peerCertificate for a connected secure socket.  For a server\nsocket, this will return the client certificate, or null, if no\nclient certificate was received.  For a client socket, this\nwill return the server's certificate.\n","id":"peerCertificate","line":"49"},{"name":"SecureSocket","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"host","kind":"param","id":"host"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"port","kind":"param","id":"port","line":"25"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"sendClientCertificate","kind":"param","id":"sendClientCertificate","line":"26"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"certificateName","kind":"param","id":"certificateName","line":"27"}],"kind":"constructor","comment":"\nConstructs a new secure client socket and connect it to the given\nhost on the given port. The returned socket is not yet connected\nbut ready for registration of callbacks.  If sendClientCertificate is\nset to true, the socket will send a client certificate if one is\nrequested by the server.  If clientCertificate is the nickname of\na certificate in the certificate database, that certificate will be sent.\nIf clientCertificate is null, which is the usual use case, an\nappropriate certificate will be searched for in the database and\nsent automatically, based on what the server says it will accept.\n","id":"SecureSocket4()","line":"24"}],"uri":"sdk/lib/io/secure_socket.dart","kind":"class","comment":"\nSecureSocket provides a secure (SSL or TLS) client connection to a server.\nThe certificate provided by the server is checked\nusing the certificate database (optionally) provided in initialize().\n","id":"SecureSocket","line":"12"},{"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"EncoderException","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"409"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"variable","id":"message","line":"410"},{"name":"EncoderException","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"message","kind":"param","id":"message"}],"kind":"constructor","id":"EncoderException1()","line":"408"}],"uri":"sdk/lib/io/string_stream.dart","kind":"class","id":"EncoderException","line":"407"},{"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"DecoderException","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"69"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"variable","id":"message","line":"70"},{"name":"DecoderException","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"message","kind":"param","id":"message"}],"kind":"constructor","id":"DecoderException1()","line":"68"}],"uri":"sdk/lib/io/string_stream.dart","kind":"class","id":"DecoderException","line":"67"},{"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"SocketIOException","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"146"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"variable","id":"message","line":"159"},{"isFinal":true,"ref":{"name":"OSError","refId":"dart.io/OSError"},"name":"osError","kind":"variable","id":"osError","line":"160"},{"name":"SocketIOException","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"message","kind":"param","id":"message"},{"ref":{"name":"OSError","refId":"dart.io/OSError"},"isOptional":true,"name":"osError","kind":"param","id":"osError","line":"145"}],"kind":"constructor","id":"SocketIOException2()","line":"144"}],"uri":"sdk/lib/io/socket.dart","kind":"class","id":"SocketIOException","line":"143"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Socket","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"name":"available","kind":"method","comment":"\nReturns the number of received and non-read bytes in the socket that\ncan be read.\n","id":"available0()","line":"49"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"read","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"len","kind":"param","id":"len"}],"kind":"method","comment":"\nRead up to [len] bytes from the socket. This function is\nnon-blocking and will only return data if data is available. The\nnumber of bytes read can be less then [len] if fewer bytes are\navailable for immediate reading. If no data is available [null]\nis returned.\n","id":"read1()","line":"58"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"readList","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"buffer","kind":"param","id":"buffer"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"offset","kind":"param","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"count","kind":"param","id":"count"}],"kind":"method","comment":"\nReads up to [count] bytes of data from the socket and stores them into\nbuffer after buffer offset [offset]. The number of successfully read\nbytes is returned. This function is non-blocking and will only read data\nif data is available.\n","id":"readList3()","line":"66"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"writeList","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"buffer","kind":"param","id":"buffer"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"offset","kind":"param","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"count","kind":"param","id":"count"}],"kind":"method","comment":"\nWrites up to [count] bytes of the buffer from [offset] buffer offset to\nthe socket. The number of successfully written bytes is returned. This\nfunction is non-blocking and will only write data if buffer space is\navailable in the socket.\n","id":"writeList3()","line":"74"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onConnect=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nThe connect handler gets called when connection to a given host\nsucceeded.\n","id":"onConnect=1()","line":"80"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onData=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nThe data handler gets called when data becomes available at the socket.\n","id":"onData=1()","line":"85"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onWrite=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nThe write handler gets called once when the socket becomes\navailable for writing. Then the handler is automatically reset to null.\nThis handler is mainly used when writeList has reported an incomplete\nwrite, to schedule writing the remaining data to the socket.\n","id":"onWrite=1()","line":"93"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onClosed=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nThe close handler gets called when a the last byte have been read\nfrom a socket. At this point the socket might still be open for\nwriting for sending more data.\n","id":"onClosed=1()","line":"100"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onError=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nThe error handler gets called when a socket error occurs.\n","id":"onError=1()","line":"105"},{"returnType":{"name":"void","refId":"void"},"name":"close","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"halfClose","kind":"param","id":"halfClose"}],"kind":"method","comment":"\nCloses the socket. Calling [close] will never throw an exception\nand calling it several times is supported. If [halfClose] is true\nthe socket will only be closed for writing and it might still be\npossible to read data. Calling [close] will not trigger a call to\n[onClosed].\n","id":"close1()","line":"139"},{"ref":{"name":"InputStream","refId":"dart.io/InputStream"},"name":"inputStream","kind":"property","comment":"\nReturns input stream to the socket.\n","id":"inputStream","line":"110"},{"ref":{"name":"OutputStream","refId":"dart.io/OutputStream"},"name":"outputStream","kind":"property","comment":"\nReturns output stream of the socket.\n","id":"outputStream","line":"115"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"port","kind":"property","comment":"\nReturns the port used by this socket.\n","id":"port","line":"120"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"remotePort","kind":"property","comment":"\nReturns the remote port connected to by this socket.\n","id":"remotePort","line":"125"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"remoteHost","kind":"property","comment":"\nReturns the remote host connected to by this socket.\n","id":"remoteHost","line":"130"},{"name":"Socket","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"host","kind":"param","id":"host"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"port","kind":"param","id":"port"}],"kind":"constructor","comment":"\nConstructs a new socket and initiate connecting it to the given\nhost on the given port. The returned socket is not yet connected\nbut ready for registration of callbacks.\n","id":"Socket2()","line":"43"}],"uri":"sdk/lib/io/socket.dart","kind":"class","id":"Socket","line":"37"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"ServerSocket","children":[{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onConnection=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nThe connection handler gets called when there is a new incoming\nconnection on the socket.\n","id":"onConnection=1()","line":"18"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onError=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nThe error handler gets called when a socket error occurs.\n","id":"onError=1()","line":"23"},{"returnType":{"name":"void","refId":"void"},"name":"close","kind":"method","comment":"\nCloses the socket.\n","id":"close0()","line":"33"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"port","kind":"property","comment":"\nReturns the port used by this socket.\n","id":"port","line":"28"},{"name":"ServerSocket","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"bindAddress","kind":"param","id":"bindAddress"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"port","kind":"param","id":"port"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"backlog","kind":"param","id":"backlog"}],"kind":"constructor","comment":"\nConstructs a new server socket, binds it to a given address and port,\nand listens on it.\n","id":"ServerSocket3()","line":"12"}],"uri":"sdk/lib/io/socket.dart","kind":"class","id":"ServerSocket","line":"7"},{"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"ProcessException","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"247"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"executable","kind":"variable","id":"executable","line":"256"},{"isFinal":true,"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"arguments","kind":"variable","id":"arguments","line":"261"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"variable","id":"message","line":"266"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"name":"errorCode","kind":"variable","id":"errorCode","line":"271"},{"name":"ProcessException","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"executable","kind":"param","id":"executable"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"arguments","kind":"param","id":"arguments","line":"244"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"message","kind":"param","id":"message","line":"245"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"errorCode","kind":"param","id":"errorCode","line":"246"}],"kind":"constructor","id":"ProcessException4()","line":"243"}],"uri":"sdk/lib/io/process.dart","kind":"class","id":"ProcessException","line":"242"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"ProcessSignal","children":[{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGHUP","kind":"variable","id":"SIGHUP","line":"208"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGINT","kind":"variable","id":"SIGINT","line":"209"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGQUIT","kind":"variable","id":"SIGQUIT","line":"210"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGILL","kind":"variable","id":"SIGILL","line":"211"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGTRAP","kind":"variable","id":"SIGTRAP","line":"212"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGABRT","kind":"variable","id":"SIGABRT","line":"213"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGBUS","kind":"variable","id":"SIGBUS","line":"214"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGFPE","kind":"variable","id":"SIGFPE","line":"215"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGKILL","kind":"variable","id":"SIGKILL","line":"216"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGUSR1","kind":"variable","id":"SIGUSR1","line":"217"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGSEGV","kind":"variable","id":"SIGSEGV","line":"218"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGUSR2","kind":"variable","id":"SIGUSR2","line":"219"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGPIPE","kind":"variable","id":"SIGPIPE","line":"220"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGALRM","kind":"variable","id":"SIGALRM","line":"221"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGTERM","kind":"variable","id":"SIGTERM","line":"222"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGCHLD","kind":"variable","id":"SIGCHLD","line":"223"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGCONT","kind":"variable","id":"SIGCONT","line":"224"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGSTOP","kind":"variable","id":"SIGSTOP","line":"225"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGTSTP","kind":"variable","id":"SIGTSTP","line":"226"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGTTIN","kind":"variable","id":"SIGTTIN","line":"227"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGTTOU","kind":"variable","id":"SIGTTOU","line":"228"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGURG","kind":"variable","id":"SIGURG","line":"229"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGXCPU","kind":"variable","id":"SIGXCPU","line":"230"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGXFSZ","kind":"variable","id":"SIGXFSZ","line":"231"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGVTALRM","kind":"variable","id":"SIGVTALRM","line":"232"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGPROF","kind":"variable","id":"SIGPROF","line":"233"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGPOLL","kind":"variable","id":"SIGPOLL","line":"234"},{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isStatic":true,"name":"SIGSYS","kind":"variable","id":"SIGSYS","line":"235"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"name":"_signalNumber","kind":"variable","isPrivate":true,"id":"_signalNumber","line":"238"},{"name":"ProcessSignal._signal","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"_signalNumber","kind":"param","isPrivate":true,"id":"_signalNumber"}],"kind":"constructor","isPrivate":true,"id":"ProcessSignal._signal1()","line":"237"}],"uri":"sdk/lib/io/process.dart","kind":"class","comment":"\nOn Posix systems, [ProcessSignal] is used to send a specific signal\nto a child process, see [:Process.kill:].\n","id":"ProcessSignal","line":"207"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"ProcessOptions","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"workingDirectory","kind":"variable","id":"workingDirectory","line":"168"},{"ref":{"name":"Encoding","refId":"dart.io/Encoding"},"name":"stdoutEncoding","kind":"variable","id":"stdoutEncoding","line":"179"},{"ref":{"name":"Encoding","refId":"dart.io/Encoding"},"name":"stderrEncoding","kind":"variable","id":"stderrEncoding","line":"190"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"name":"environment","kind":"variable","id":"environment","line":"200"}],"uri":"sdk/lib/io/process.dart","kind":"class","comment":"\n[ProcessOptions] represents the options that can be supplied when\nstarting a process.\n","id":"ProcessOptions","line":"161"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"ProcessResult","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"exitCode","kind":"property","comment":"\nExit code for the process.\n","id":"exitCode","line":"143"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"stdout","kind":"property","comment":"\nStandard output from the process as a string.\n","id":"stdout","line":"148"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"stderr","kind":"property","comment":"\nStandard error from the process as a string.\n","id":"stderr","line":"153"}],"uri":"sdk/lib/io/process.dart","kind":"class","comment":"\n[ProcessResult] represents the result of running a non-interactive\nprocess started with [:Process.run:].\n","id":"ProcessResult","line":"139"},{"superclass":{"name":"StreamSink","refId":"dart.async/StreamSink"},"isAbstract":true,"name":"Process","children":[{"isStatic":true,"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Process","refId":"dart.io/Process"}]},"name":"start","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"executable","kind":"param","id":"executable"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"arguments","kind":"param","id":"arguments","line":"63"},{"ref":{"name":"ProcessOptions","refId":"dart.io/ProcessOptions"},"isOptional":true,"name":"options","kind":"param","id":"options","line":"64"}],"kind":"method","comment":"\nStarts a process running the [executable] with the specified\n[arguments]. Returns a [:Future<Process>:] that completes with a\nProcess instance when the process has been successfully\nstarted. That [Process] object can be used to interact with the\nprocess. If the process cannot be started the returned [Future]\ncompletes with an exception.\n\nAn optional [ProcessOptions] object can be passed to specify\noptions other than the executable and the arguments.\n\nUsers must read all data coming on the [stdout] and [stderr]\nstreams of processes started with [:Process.start:]. If the user\ndoes not read all data on the streams the underlying system\nresources will not be freed since there is still pending data.\n","id":"start3()","line":"62"},{"isStatic":true,"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"ProcessResult","refId":"dart.io/ProcessResult"}]},"name":"run","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"executable","kind":"param","id":"executable"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"arguments","kind":"param","id":"arguments","line":"78"},{"ref":{"name":"ProcessOptions","refId":"dart.io/ProcessOptions"},"isOptional":true,"name":"options","kind":"param","id":"options","line":"79"}],"kind":"method","comment":"\nStarts a process and runs it non-interactively to completion. The\nprocess run is [executable] with the specified [arguments].\n\nAn optional [ProcessOptions] object can be passed to specify\noptions other than the executable and the arguments.\n\nReturns a [:Future<ProcessResult>:] that completes with the\nresult of running the process, i.e., exit code, standard out and\nstandard in.\n","id":"run3()","line":"77"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onExit=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets an exit handler which gets invoked when the process\nterminates.\n\nThrows an [UnsupportedError] if the process is\nnon-interactive.\n","id":"onExit=1()","line":"116"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"kill","children":[{"ref":{"name":"ProcessSignal","refId":"dart.io/ProcessSignal"},"isOptional":true,"name":"signal","kind":"param","id":"signal"}],"kind":"method","comment":"\nOn Windows, [kill] kills the process, ignoring the [signal]\nflag. On Posix systems, [kill] sends [signal] to the\nprocess. Depending on the signal giving, it'll have different\nmeanings. When the process terminates as a result of calling\n[kill] [onExit] is called.\n\nReturns [:true:] if the process is successfully killed (the\nsignal is successfully sent). Returns [:false:] if the process\ncould not be killed (the signal could not be sent). Usually,\na [:false:] return value from kill means that the process is\nalready dead.\n","id":"kill1()","line":"131"},{"ref":{"name":"InputStream","refId":"dart.io/InputStream"},"name":"stdout","kind":"property","comment":"\nReturns an input stream of the process stdout.\n\nThrows an [UnsupportedError] if the process is\nnon-interactive.\n","id":"stdout","line":"87"},{"ref":{"name":"InputStream","refId":"dart.io/InputStream"},"name":"stderr","kind":"property","comment":"\nReturns an input stream of the process stderr.\n\nThrows an [UnsupportedError] if the process is\nnon-interactive.\n","id":"stderr","line":"95"},{"ref":{"name":"OutputStream","refId":"dart.io/OutputStream"},"name":"stdin","kind":"property","comment":"\nReturns an output stream to the process stdin.\n\nThrows an [UnsupportedError] if the process is\nnon-interactive.\n","id":"stdin","line":"103"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"name":"stdoutStream","kind":"property","id":"stdoutStream","line":"106"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"name":"stderrStream","kind":"property","id":"stderrStream","line":"107"}],"uri":"sdk/lib/io/process.dart","kind":"class","comment":"\n[Process] is used to start new processes using the static\n[start] and [run] methods.\n","id":"Process","line":"45"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"Platform","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"numberOfProcessors","kind":"property","comment":"\nGet the number of processors of the machine.\n","id":"numberOfProcessors","line":"15"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"pathSeparator","kind":"property","comment":"\nGet the path separator used by the operating system to separate\ncomponents in file paths.\n","id":"pathSeparator","line":"21"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"operatingSystem","kind":"property","comment":"\nGet a string ('macos', 'windows', 'linux') representing the\noperating system.\n","id":"operatingSystem","line":"27"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"localHostname","kind":"property","comment":"\nGet the local hostname for the system.\n","id":"localHostname","line":"32"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"isStatic":true,"name":"environment","kind":"property","comment":"\nGet the environment for this process.\n\nEnvironment variables on Windows are case-insensitive. The map\nreturned on Windows is therefore case-insensitive and will convert\nall keys to upper case. On other platforms the returned map is\na standard case-sensitive map.\n","id":"environment","line":"42"}],"uri":"sdk/lib/io/platform.dart","kind":"class","comment":"\nThe [Platform] class exposes details of the machine and operating\nsystem.\n","id":"Platform","line":"11"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Path","children":[{"returnType":{"name":"Path","refId":"dart.io/Path"},"name":"canonicalize","kind":"method","comment":"\nMake a path canonical by dropping segments that are '.', cancelling\nsegments that are '..' with preceding segments, if possible,\nand combining consecutive path separators.  Leading '..' segments\nare kept on relative paths, and dropped from absolute paths.\n","id":"canonicalize0()","line":"79"},{"returnType":{"name":"Path","refId":"dart.io/Path"},"name":"join","children":[{"ref":{"name":"Path","refId":"dart.io/Path"},"name":"further","kind":"param","id":"further"}],"kind":"method","comment":"\nJoins the relative path [further] to this path.  Canonicalizes the\nresulting joined path using [canonicalize],\ninterpreting '.' and '..' as directory traversal commands, and removing\nconsecutive path separators.\n\nIf [further] is an absolute path, an IllegalArgument exception is thrown.\n\nExamples:\n  `new Path('/a/b/c').join(new Path('d/e'))` returns the Path object\n  containing `'a/b/c/d/e'`.\n\n  `new Path('a/b/../c/').join(new Path('d/./e//')` returns the Path\n  containing `'a/c/d/e/'`.\n\n  `new Path('a/b/c').join(new Path('d/../../e')` returns the Path\n  containing `'a/b/e'`.\n\nNote that the join operation does not drop the last segment of the\nbase path, the way URL joining does.  That would be accomplished with\nbasepath.directoryPath.join(further).\n\nIf you want to avoid joins that traverse\nparent directories in the base, you can check whether\n`further.canonicalize()` starts with '../' or equals '..'.\n","id":"join1()","line":"107"},{"returnType":{"name":"Path","refId":"dart.io/Path"},"name":"relativeTo","children":[{"ref":{"name":"Path","refId":"dart.io/Path"},"name":"base","kind":"param","id":"base"}],"kind":"method","comment":"\nReturns a path [:relative:] such that\n   [:base.join(relative) == this.canonicalize():].\nThrows an exception if such a path is impossible.\nFor example, if [base] is '../../a/b' and [this] is '.'.\nThe computation is independent of the file system and current directory.\n","id":"relativeTo1()","line":"117"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toNativePath","kind":"method","comment":"\nConverts a path to a string using the native filesystem's conventions.\n\nOn Windows, converts path separators to backwards slashes, and removes\nthe leading path separator if the path starts with a drive specification.\nFor most valid Windows paths, this should be the inverse of the\nconstructor Path.fromNative.\n","id":"toNativePath0()","line":"127"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","comment":"\nReturns the path as a string.  If this path is constructed using\nnew Path() or new Path.fromNative() on a non-Windows system, the\nreturned value is the original string argument to the constructor.\n","id":"toString0()","line":"134"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"segments","kind":"method","comment":"\nGets the segments of a Path.  Paths beginning or ending with the\npath separator do not have leading or terminating empty segments.\nOther than that, the segments are just the result of splitting the\npath on the path separator.\n\n    new Path('/a/b/c/d').segments() == ['a', 'b', 'c', d'];\n    new Path(' foo bar //../') == [' foo bar ', '', '..'];\n","id":"segments0()","line":"145"},{"returnType":{"name":"Path","refId":"dart.io/Path"},"name":"append","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"finalSegment","kind":"param","id":"finalSegment"}],"kind":"method","comment":"\nAppends [finalSegment] to a path as a new segment.  Adds a path separator\nbetween the path and [finalSegment] if the path does not already end in\na path separator.  The path is not canonicalized, and [finalSegment] may\ncontain path separators.\n","id":"append1()","line":"153"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isEmpty","kind":"property","comment":"\nIs this path the empty string?\n","id":"isEmpty","line":"49"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isAbsolute","kind":"property","comment":"\nIs this path an absolute path, beginning with a path separator?\n","id":"isAbsolute","line":"54"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isWindowsShare","kind":"property","comment":"\nIs this path a Windows share path?\n","id":"isWindowsShare","line":"59"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"hasTrailingSeparator","kind":"property","comment":"\nDoes this path end with a path separator?\n","id":"hasTrailingSeparator","line":"64"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isCanonical","kind":"property","comment":"\nDoes this path contain no consecutive path separators, no segments that\nare '.' unless the path is exactly '.', and segments that are '..' only\nas the leading segments on a relative path?\n","id":"isCanonical","line":"71"},{"ref":{"name":"Path","refId":"dart.io/Path"},"name":"directoryPath","kind":"property","comment":"\nDrops the final path separator and whatever follows it from this Path,\nand returns the resulting Path object.  If the only path separator in\nthis Path is the first character, returns '/' instead of the empty string.\nIf there is no path separator in the Path, returns the empty string.\n\n    new Path('../images/dot.gif').directoryPath == '../images'\n    new Path('/usr/geoffrey/www/').directoryPath == '/usr/geoffrey/www'\n    new Path('lost_file_old').directoryPath == ''\n    new Path('/src').directoryPath == '/'\n    Note: new Path('/D:/src').directoryPath == '/D:'\n","id":"directoryPath","line":"167"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"filename","kind":"property","comment":"\nThe part of the path after the last path separator, or the entire path if\nit contains no path separator.\n\n    new Path('images/DSC_0027.jpg).filename == 'DSC_0027.jpg'\n    new Path('users/fred/').filename == ''\n","id":"filename","line":"176"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"filenameWithoutExtension","kind":"property","comment":"\nThe part of [filename] before the last '.', or the entire filename if it\ncontains no '.'.  If [filename] is '.' or '..' it is unchanged.\n\n    new Path('/c:/My Documents/Heidi.txt').filenameWithoutExtension\n    would return 'Heidi'.\n    new Path('not what I would call a path').filenameWithoutExtension\n    would return 'not what I would call a path'.\n","id":"filenameWithoutExtension","line":"187"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"extension","kind":"property","comment":"\nThe part of [filename] after the last '.', or '' if [filename]\ncontains no '.'.  If [filename] is '.' or '..', returns ''.\n\n    new Path('tiger.svg').extension == 'svg'\n    new Path('/src/dart/dart_secrets').extension == ''\n","id":"extension","line":"196"},{"name":"Path","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"source","kind":"param","id":"source"}],"kind":"constructor","comment":"\nCreates a Path from the String [source].  [source] is used as-is, so if\nthe string does not consist of segments separated by forward slashes, the\nbehavior may not be as expected.  Paths are immutable.\n","id":"Path1()","line":"20"},{"name":"Path.fromNative","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"source","kind":"param","id":"source"}],"kind":"constructor","comment":"\nCreates a Path from a String that uses the native filesystem's conventions.\n\nOn Windows, this converts '\\' to '/' and has special handling for drive\nletters and shares.\n\nIf the path contains a drive letter a '/' is added before the drive letter.\n\n    new Path.fromNative(r'c:\\a\\b').toString() == '/c:/a/b'\n\nA path starting with '/c:/' (or any other character instead of 'c') is\ntreated specially.  Backwards links ('..') cannot cancel the drive letter.\n\nIf the path is a share path this is recorded in the Path object and\nmaintained in operations on the Path object.\n\n    var share = new Path.fromNative(r'\\\\share\\a\\b\\c');\n    share.isWindowsShare == true\n    share.toString() == '/share/a/b/c'\n    share.toNativePath() == r'\\\\share\\a\\b\\c'\n    share.append('final').isWindowsShare == true\n","id":"Path.fromNative1()","line":"44"}],"uri":"sdk/lib/io/path.dart","kind":"class","comment":"\nA Path, which is a String interpreted as a sequence of path segments,\nwhich are strings, separated by forward slashes.\nPaths are immutable wrappers of a String, that offer member functions for\nuseful path manipulations and queries.  Joining of paths and normalization\ninterpret '.' and '..' in the usual way.\n","id":"Path","line":"14"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"OutputStream","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"write","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"buffer","kind":"param","id":"buffer"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"copyBuffer","kind":"param","id":"copyBuffer"}],"kind":"method","comment":"\nWrites the content of [buffer] to the stream. If [copyBuffer] is\nfalse ownership of the specified buffer is passed to the system\nand the caller should not change it afterwards. The default value\nfor [copyBuffer] is true.\n\nReturns true if the data could be written to the underlying\ncommunication channel immediately. Otherwise the data is buffered\nby the output stream and will be sent as soon as possible.\n","id":"write2()","line":"29"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"writeFrom","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"buffer","kind":"param","id":"buffer"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"offset","kind":"param","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"len","kind":"param","id":"len"}],"kind":"method","comment":"\nWrites [len] bytes from buffer [buffer] starting at offset\n[offset] to the output stream. If [offset] is not specified the\ndefault is 0. If [len] is not specified the default is the length\nof the buffer minus [offset] (i.e. writing from offset to the end\nof the buffer). The system will copy the data to be written so\nthe caller can safely change [buffer] afterwards.\n\nReturns true if the data could be written to the underlying\ncommunication channel immediately. Otherwise the data is buffered\nby the output stream and will be sent as soon as possible.\n","id":"writeFrom3()","line":"43"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"writeString","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"string","kind":"param","id":"string"},{"ref":{"name":"Encoding","refId":"dart.io/Encoding"},"isOptional":true,"name":"encoding","kind":"param","id":"encoding"}],"kind":"method","comment":"\nWrite a string to the stream using the given [encoding].The\ndefault encoding is UTF-8 - [:Encoding.UTF_8:].\n\nReturns true if the data could be written to the underlying\ncommunication channel immediately. Otherwise the data is buffered\nby the output stream and will be sent as soon as possible.\n","id":"writeString2()","line":"53"},{"returnType":{"name":"void","refId":"void"},"name":"flush","kind":"method","comment":"\nFlushes data from any internal buffers as soon as possible. Note\nthat the actual meaning of calling [flush] will depend on the\nactual type of the underlying communication channel.\n","id":"flush0()","line":"60"},{"returnType":{"name":"void","refId":"void"},"name":"close","kind":"method","comment":"\nSignal that no more data will be written to the output stream. When all\nbuffered data has been written out to the communication channel, the\nchannel will be closed and the [onClosed] callback will be called.\n","id":"close0()","line":"67"},{"returnType":{"name":"void","refId":"void"},"name":"destroy","kind":"method","comment":"\nClose the communication channel immediately ignoring any buffered\ndata.\n","id":"destroy0()","line":"73"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onNoPendingWrites=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the handler that gets called when the internal OS buffers\nhave been flushed. This callback can be used to keep the rate of\nwriting in sync with the rate the system can write data to the\nunderlying communication channel.\n","id":"onNoPendingWrites=1()","line":"89"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onClosed=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the handler that gets called when the underlying communication channel\nhas been closed and all the buffered data has been sent.\n","id":"onClosed=1()","line":"95"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onError=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the handler that gets called when the underlying\ncommunication channel gets into some kind of error situation.\n","id":"onError=1()","line":"101"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"closed","kind":"property","comment":"\nReturns whether the stream has been closed by calling close(). If true, no\nmore data may be written to the output stream, but there still may be\nbuffered data that has not been written to the communication channel. The\nonClosed handler will only be called once all data has been written out.\n","id":"closed","line":"81"}],"uri":"sdk/lib/io/output_stream.dart","kind":"class","comment":"\nOutput streams are used to write data sequentially to a data\ndestination e.g. a connected socket or an open file.\n\nAn output stream provides internal buffering of the data written\nthrough all calls to [write] and [writeFrom] if data cannot be\nwritten immediately to the communication channel. The callback set\nthrough [onNoPendingWrites] can be used to to keep the rate of\nwriting in sync with the rate the system can actually write data to\nthe underlying communication channel.\n","id":"OutputStream","line":"18"},{"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"MimeParserException","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"331"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"variable","id":"message","line":"332"},{"name":"MimeParserException","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"message","kind":"param","id":"message"}],"kind":"constructor","id":"MimeParserException1()","line":"330"}],"uri":"sdk/lib/io/mime_multipart_parser.dart","kind":"class","id":"MimeParserException","line":"329"},{"interfaces":[{"name":"OutputStream","refId":"dart.io/OutputStream"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"ListOutputStream","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"read","kind":"method","comment":"\nReads all available data from the stream. If no data is available `null`\nwill be returned.\n","id":"read0()","line":"51"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onData=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the handler that gets called when data is available.\n","id":"onData=1()","line":"56"},{"name":"ListOutputStream","kind":"constructor","comment":"\nCreate a [ListOutputStream].\n","id":"ListOutputStream0()","line":"45"}],"uri":"sdk/lib/io/list_stream.dart","kind":"class","comment":"\n[ListOutputStream] makes it possible to use the [OutputStream]\ninterface to write data to a [List] of integers.\n","id":"ListOutputStream","line":"41"},{"interfaces":[{"name":"InputStream","refId":"dart.io/InputStream"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"ListInputStream","children":[{"returnType":{"name":"void","refId":"void"},"name":"write","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"data","kind":"param","id":"data"}],"kind":"method","comment":"\nWrite more data to be streamed over to the [ListInputStream].\n","id":"write1()","line":"27"},{"returnType":{"name":"void","refId":"void"},"name":"markEndOfStream","kind":"method","comment":"\nNotify the [ListInputStream] that no more data will be written to\nit.\n","id":"markEndOfStream0()","line":"33"},{"name":"ListInputStream","kind":"constructor","comment":"\nCreate an empty [ListInputStream] to which data can be written\nusing the [write] method.\n","id":"ListInputStream0()","line":"22"}],"uri":"sdk/lib/io/list_stream.dart","kind":"class","comment":"\n[ListInputStream] makes it possible to use the [InputStream]\ninterface to stream over data that is received in chunks as lists\nof integers.\n\nWhen a new list of integers is received it can be written to the\n[ListInputStream] using the [write] method. The [markEndOfStream]\nmethod must be called when the last data has been written to the\n[ListInputStream].\n","id":"ListInputStream","line":"17"},{"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"StreamException","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"256"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"variable","id":"message","line":"257"},{"name":"StreamException","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"message","kind":"param","id":"message"}],"kind":"constructor","id":"StreamException1()","line":"254"},{"name":"StreamException.streamClosed","kind":"constructor","id":"StreamException.streamClosed0()","line":"255"}],"uri":"sdk/lib/io/input_stream.dart","kind":"class","id":"StreamException","line":"253"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"ChunkedInputStream","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"read","kind":"method","comment":"\nReads [chunkSize] bytes from the stream. If [chunkSize] bytes are\nnot currently available null is returned. When the stream is\nclosed the last call can return with less than [chunkSize] bytes.\n","id":"read0()","line":"214"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"chunkSize=","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"chunkSize","kind":"param","id":"chunkSize"}],"kind":"method","comment":"\nSets the chunk size used by this stream.\n","id":"chunkSize=1()","line":"230"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onData=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the handler that gets called when at least [chunkSize] bytes\nof data is available or the underlying stream has been closed and\nthere is still unread data.\n","id":"onData=1()","line":"237"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onClosed=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the handler that gets called when there will be no more data\navailable in the stream.\n","id":"onClosed=1()","line":"243"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onError=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the handler that gets called when the underlying\ncommunication channel gets into some kind of error situation.\n","id":"onError=1()","line":"249"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"closed","kind":"property","comment":"\nReturns whether the stream has been closed. There might still be\nmore data to read.\n","id":"closed","line":"220"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"chunkSize","kind":"property","comment":"\nReturns the chunk size used by this stream.\n","id":"chunkSize","line":"225"},{"name":"ChunkedInputStream","children":[{"ref":{"name":"InputStream","refId":"dart.io/InputStream"},"name":"input","kind":"param","id":"input"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"chunkSize","kind":"param","id":"chunkSize"}],"kind":"constructor","comment":"\nAdds buffering to an input stream and provide the ability to read\nthe data in known size chunks.\n","id":"ChunkedInputStream2()","line":"205"}],"uri":"sdk/lib/io/input_stream.dart","kind":"class","comment":"\nA chunked input stream wraps a basic input stream and supplies\nbinary data in configurable chunk sizes.\n","id":"ChunkedInputStream","line":"200"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"StringInputStream","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"read","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"len","kind":"param","id":"len"}],"kind":"method","comment":"\nReads up to [len] characters from the stream. if [len] is not\nspecified reads as many characters as is available from the\nstream. If no data is available null will be returned.\n","id":"read1()","line":"138"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"readLine","kind":"method","comment":"\nReads the next line from the stream. The line ending characters\nwill not be part of the returned string. If a full line is not\navailable null will be returned.\n","id":"readLine0()","line":"145"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"available","kind":"method","comment":"\nReturns the number of characters available for immediate\nreading. Note that this includes all characters that will be in\nthe String returned from [read] this includes line breaking\ncharacters. If [readLine] is used for reading one can observe\nless characters being returned as the line breaking characters\nare discarded.\n","id":"available0()","line":"155"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onData=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the handler that gets called when data is available. The two\nhandlers [onData] and [onLine] are mutually exclusive\nand setting one will remove the other.\n","id":"onData=1()","line":"173"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onLine=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the handler that gets called when a line is available. The\ntwo handlers [onData] and [onLine] are mutually\nexclusive and setting one will remove the other.\n","id":"onLine=1()","line":"180"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onClosed=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the handler that gets called when there will be no more data\navailable in the stream.\n","id":"onClosed=1()","line":"186"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onError=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the handler that gets called when the underlying\ncommunication channel gets into some kind of error situation.\n","id":"onError=1()","line":"192"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"closed","kind":"property","comment":"\nReturns whether the stream has been closed. There might still be\nmore data to read.\n","id":"closed","line":"161"},{"ref":{"name":"Encoding","refId":"dart.io/Encoding"},"name":"encoding","kind":"property","comment":"\nReturns the encoding used to decode the binary data into characters.\n","id":"encoding","line":"166"},{"name":"StringInputStream","children":[{"ref":{"name":"InputStream","refId":"dart.io/InputStream"},"name":"input","kind":"param","id":"input"},{"ref":{"name":"Encoding","refId":"dart.io/Encoding"},"isOptional":true,"name":"encoding","kind":"param","id":"encoding","line":"129"}],"kind":"constructor","comment":"\nDecodes a binary input stream into characters using the specified\nencoding.\n","id":"StringInputStream2()","line":"128"}],"uri":"sdk/lib/io/input_stream.dart","kind":"class","comment":"\nA string input stream wraps a basic input stream and supplies\nstring data. This data can be read either as string chunks or as\nlines separated by line termination character sequences.\n","id":"StringInputStream","line":"123"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"Encoding","children":[{"ref":{"name":"Encoding","refId":"dart.io/Encoding"},"isStatic":true,"name":"UTF_8","kind":"variable","id":"UTF_8","line":"105"},{"ref":{"name":"Encoding","refId":"dart.io/Encoding"},"isStatic":true,"name":"ISO_8859_1","kind":"variable","id":"ISO_8859_1","line":"106"},{"ref":{"name":"Encoding","refId":"dart.io/Encoding"},"isStatic":true,"name":"ASCII","kind":"variable","id":"ASCII","line":"107"},{"ref":{"name":"Encoding","refId":"dart.io/Encoding"},"isStatic":true,"name":"SYSTEM","kind":"variable","id":"SYSTEM","line":"112"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"name","kind":"variable","id":"name","line":"114"},{"name":"Encoding._internal","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"name","kind":"param","id":"name"}],"kind":"constructor","isPrivate":true,"id":"Encoding._internal1()","line":"113"}],"uri":"sdk/lib/io/input_stream.dart","kind":"class","comment":"\nString encodings.\n","id":"Encoding","line":"104"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"InputStream","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"read","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"len","kind":"param","id":"len"}],"kind":"method","comment":"\nReads data from the stream. Returns a system allocated buffer\nwith up to [len] bytes. If no value is passed for [len] all\navailable data will be returned. If no data is available null will\nbe returned.\n","id":"read1()","line":"43"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"readInto","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"buffer","kind":"param","id":"buffer"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"offset","kind":"param","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"len","kind":"param","id":"len"}],"kind":"method","comment":"\nReads up to [len] bytes into buffer [buffer] starting at offset\n[offset]. Returns the number of bytes actually read which might\nbe zero. If [offset] is not specified 0 is used. If [len] is not\nspecified the length of [buffer] is used.\n","id":"readInto3()","line":"51"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"available","kind":"method","comment":"\nReturns the number of bytes available for immediate reading.\n","id":"available0()","line":"56"},{"returnType":{"name":"void","refId":"void"},"name":"pipe","children":[{"ref":{"name":"OutputStream","refId":"dart.io/OutputStream"},"name":"output","kind":"param","id":"output"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"close","kind":"param","id":"close"}],"kind":"method","comment":"\nPipe the content of this input stream directly to the output\nstream [output]. The default behavior is to close the output when\nall the data from the input stream have been written. Specifying\n`false` for the optional argument [close] keeps the output\nstream open after writing all data from the input stream.\n","id":"pipe2()","line":"65"},{"returnType":{"name":"void","refId":"void"},"name":"close","kind":"method","comment":"\nClose the underlying communication channel to avoid getting any\nmore data. In normal situations, where all data is read from the\nstream until the close handler is called, calling [close] is not\nrequired. When [close] is used the close handler will still be\ncalled.\n","id":"close0()","line":"74"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onData=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the handler that gets called when data is available.\n","id":"onData=1()","line":"85"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onClosed=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the handler that gets called when there will be no more data\navailable in the stream.\n","id":"onClosed=1()","line":"91"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onError=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the handler that gets called when the underlying\ncommunication channel gets into some kind of error situation.\n","id":"onError=1()","line":"97"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"closed","kind":"property","comment":"\nReturns whether the stream is closed. There will be no more data\nto read.\n","id":"closed","line":"80"}],"uri":"sdk/lib/io/input_stream.dart","kind":"class","comment":"\nBasic input stream which supplies binary data.\n\nInput streams are used to read data sequentially from some data\nsource. All input streams are non-blocking. They each have a number\nof read calls which will always return without any IO related\nblocking. If the requested data is not available a read call will\nreturn `null`. All input streams have one or more handlers which\nwill trigger when data is available.\n\nThe following example shows a data handler in an ordinary input\nstream which will be called when some data is available and a call\nto read will not return `null`.\n\n    InputStream input = ...\n    input.onData = () {\n      var data = input.read();\n      ...\n    };\n\nIf for some reason the data from an input stream cannot be handled\nby the application immediately setting the data handler to `null`\nwill avoid further callbacks until it is set to a function\nagain. While the data handler is not active system flow control\nwill be used to avoid buffering more data than needed.\n\nAlways set up appropriate handlers when using input streams.\n\n","id":"InputStream","line":"36"},{"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"HttpParserException","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"792"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"variable","id":"message","line":"793"},{"name":"HttpParserException","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"message","kind":"param","id":"message"}],"kind":"constructor","id":"HttpParserException1()","line":"791"}],"uri":"sdk/lib/io/http_parser.dart","kind":"class","id":"HttpParserException","line":"790"},{"superclass":{"name":"RedirectException","refId":"dart.io/RedirectException"},"name":"RedirectLoopException","children":[{"name":"RedirectLoopException","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"RedirectInfo","refId":"dart.io/RedirectInfo"}]},"name":"redirects","kind":"param","id":"redirects"}],"kind":"constructor","id":"RedirectLoopException1()","line":"1166"}],"uri":"sdk/lib/io/http.dart","kind":"class","id":"RedirectLoopException","line":"1165"},{"superclass":{"name":"RedirectException","refId":"dart.io/RedirectException"},"name":"RedirectLimitExceededException","children":[{"name":"RedirectLimitExceededException","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"RedirectInfo","refId":"dart.io/RedirectInfo"}]},"name":"redirects","kind":"param","id":"redirects"}],"kind":"constructor","id":"RedirectLimitExceededException1()","line":"1160"}],"uri":"sdk/lib/io/http.dart","kind":"class","id":"RedirectLimitExceededException","line":"1159"},{"superclass":{"name":"HttpException","refId":"dart.io/HttpException"},"name":"RedirectException","children":[{"isFinal":true,"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"RedirectInfo","refId":"dart.io/RedirectInfo"}]},"name":"redirects","kind":"variable","id":"redirects","line":"1155"},{"name":"RedirectException","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"param","id":"message"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"RedirectInfo","refId":"dart.io/RedirectInfo"}]},"name":"redirects","kind":"param","id":"redirects","line":"1154"}],"kind":"constructor","id":"RedirectException2()","line":"1153"}],"uri":"sdk/lib/io/http.dart","kind":"class","id":"RedirectException","line":"1152"},{"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"HttpException","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"1147"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"variable","id":"message","line":"1148"},{"name":"HttpException","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"message","kind":"param","id":"message"}],"kind":"constructor","id":"HttpException1()","line":"1146"}],"uri":"sdk/lib/io/http.dart","kind":"class","id":"HttpException","line":"1145"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"DetachedSocket","children":[{"ref":{"name":"Socket","refId":"dart.io/Socket"},"name":"socket","kind":"property","id":"socket","line":"1140"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"unparsedData","kind":"property","id":"unparsedData","line":"1141"}],"uri":"sdk/lib/io/http.dart","kind":"class","comment":"\nWhen detaching a socket from either the [:HttpServer:] or the\n[:HttpClient:] due to a HTTP connection upgrade there might be\nunparsed data already read from the socket. This unparsed data\ntogether with the detached socket is returned in an instance of\nthis class.\n","id":"DetachedSocket","line":"1139"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"RedirectInfo","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"statusCode","kind":"property","comment":"\nReturns the status code used for the redirect.\n","id":"statusCode","line":"1118"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"method","kind":"property","comment":"\nReturns the method used for the redirect.\n","id":"method","line":"1123"},{"ref":{"name":"Uri","refId":"dart.uri/Uri"},"name":"location","kind":"property","comment":"\nReturns the location for the redirect.\n","id":"location","line":"1128"}],"uri":"sdk/lib/io/http.dart","kind":"class","comment":"\nRedirect information.\n","id":"RedirectInfo","line":"1114"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"HttpConnectionInfo","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"remoteHost","kind":"property","id":"remoteHost","line":"1105"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"remotePort","kind":"property","id":"remotePort","line":"1106"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"localPort","kind":"property","id":"localPort","line":"1107"}],"uri":"sdk/lib/io/http.dart","kind":"class","comment":"\nConnection information.\n","id":"HttpConnectionInfo","line":"1104"},{"superclass":{"name":"HttpClientCredentials","refId":"dart.io/HttpClientCredentials"},"isAbstract":true,"name":"HttpClientDigestCredentials","children":[{"name":"HttpClientDigestCredentials","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"username","kind":"param","id":"username"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"password","kind":"param","id":"password"}],"kind":"constructor","id":"HttpClientDigestCredentials2()","line":"1096"}],"uri":"sdk/lib/io/http.dart","kind":"class","comment":"\nRepresent credentials for digest authentication.\n","id":"HttpClientDigestCredentials","line":"1095"},{"superclass":{"name":"HttpClientCredentials","refId":"dart.io/HttpClientCredentials"},"isAbstract":true,"name":"HttpClientBasicCredentials","children":[{"name":"HttpClientBasicCredentials","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"username","kind":"param","id":"username"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"password","kind":"param","id":"password"}],"kind":"constructor","id":"HttpClientBasicCredentials2()","line":"1087"}],"uri":"sdk/lib/io/http.dart","kind":"class","comment":"\nRepresent credentials for basic authentication.\n","id":"HttpClientBasicCredentials","line":"1086"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"HttpClientCredentials","uri":"sdk/lib/io/http.dart","kind":"class","id":"HttpClientCredentials","line":"1080"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"HttpClientResponse","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"statusCode","kind":"property","comment":"\nReturns the status code.\n","id":"statusCode","line":"1030"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"reasonPhrase","kind":"property","comment":"\nReturns the reason phrase associated with the status code.\n","id":"reasonPhrase","line":"1035"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"contentLength","kind":"property","comment":"\nReturns the content length of the request body. If the size of\nthe request body is not known in advance this -1.\n","id":"contentLength","line":"1041"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"persistentConnection","kind":"property","comment":"\nGets the persistent connection state returned by the server.\n","id":"persistentConnection","line":"1046"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isRedirect","kind":"property","comment":"\nReturns whether the status code is one of the normal redirect\ncodes [:HttpStatus.MOVED_PERMANENTLY:], [:HttpStatus.FOUND:],\n[:HttpStatus.MOVED_TEMPORARILY:], [:HttpStatus.SEE_OTHER:] and\n[:HttpStatus.TEMPORARY_REDIRECT:].\n","id":"isRedirect","line":"1054"},{"ref":{"name":"HttpHeaders","refId":"dart.io/HttpHeaders"},"name":"headers","kind":"property","comment":"\nReturns the response headers.\n","id":"headers","line":"1059"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Cookie","refId":"dart.io/Cookie"}]},"name":"cookies","kind":"property","comment":"\nCookies set by the server (from the Set-Cookie header).\n","id":"cookies","line":"1064"},{"ref":{"name":"X509Certificate","refId":"dart.io/X509Certificate"},"name":"certificate","kind":"property","comment":"\nReturns the certificate of the HTTPS server providing the response.\nReturns null if the connection is not a secure TLS or SSL connection.\n","id":"certificate","line":"1070"},{"ref":{"name":"InputStream","refId":"dart.io/InputStream"},"name":"inputStream","kind":"property","comment":"\nReturns the input stream for the response. This is used to read\nthe response data.\n","id":"inputStream","line":"1076"}],"uri":"sdk/lib/io/http.dart","kind":"class","comment":"\nHTTP response for a client connection.\n","id":"HttpClientResponse","line":"1026"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"HttpClientRequest","children":[{"ref":{"name":"HttpHeaders","refId":"dart.io/HttpHeaders"},"name":"headers","kind":"property","comment":"\nReturns the request headers.\n","id":"headers","line":"997"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Cookie","refId":"dart.io/Cookie"}]},"name":"cookies","kind":"property","comment":"\nCookies to present to the server (in the Cookie header).\n","id":"cookies","line":"1002"},{"ref":{"name":"OutputStream","refId":"dart.io/OutputStream"},"name":"outputStream","kind":"property","comment":"\nReturns the output stream for the request. This is used to write\nthe request data. When all request data has been written close\nthe stream to indicate the end of the request.\n\nWhen this is accessed for the first time the request header is\nsend. Calling any methods that will change the header after\nhaving retrieved the output stream will throw an exception.\n","id":"outputStream","line":"1019"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"contentLength","kind":"variable","id":"contentLength","line":"992"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"persistentConnection","kind":"variable","id":"persistentConnection","line":"1008"}],"uri":"sdk/lib/io/http.dart","kind":"class","comment":"\nHTTP request for a client connection.\n","id":"HttpClientRequest","line":"986"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"HttpClientConnection","children":[{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onRequest=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the handler that is called when the connection is established.\n","id":"onRequest=1()","line":"902"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onResponse=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets callback to be called when the request has been send and\nthe response is ready for processing. The callback is called when\nall headers of the response are received and data is ready to be\nreceived.\n","id":"onResponse=1()","line":"910"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onError=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the handler that gets called if an error occurs while\nconnecting or processing the HTTP request.\n","id":"onError=1()","line":"916"},{"returnType":{"name":"void","refId":"void"},"name":"redirect","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"method","kind":"param","id":"method"},{"ref":{"name":"Uri","refId":"dart.uri/Uri"},"isOptional":true,"name":"url","kind":"param","id":"url"}],"kind":"method","comment":"\nRedirect this connection to a new URL. The default value for\n[method] is the method for the current request. The default value\nfor [url] is the value of the [:HttpHeaders.LOCATION:] header of\nthe current response. All body data must have been read from the\ncurrent response before calling [redirect].\n\nAll headers added to the request will be added to the redirection\nrequest(s). However, any body send with the request will not be\npart of the redirection request(s).\n","id":"redirect2()","line":"963"},{"returnType":{"name":"DetachedSocket","refId":"dart.io/DetachedSocket"},"name":"detachSocket","kind":"method","comment":"\nDetach the underlying socket from the HTTP client. When the\nsocket is detached the HTTP client will no longer perform any\noperations on it.\n\nThis is normally used when a HTTP upgrade is negotiated and the\ncommunication should continue with a different protocol.\n","id":"detachSocket0()","line":"973"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"RedirectInfo","refId":"dart.io/RedirectInfo"}]},"name":"redirects","kind":"property","comment":"\nReturns the series of redirects this connection has been through.\n","id":"redirects","line":"950"},{"ref":{"name":"HttpConnectionInfo","refId":"dart.io/HttpConnectionInfo"},"name":"connectionInfo","kind":"property","comment":"\nGet information about the client connection. Returns [null] if the socket\nisn't available.\n","id":"connectionInfo","line":"979"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"followRedirects","kind":"variable","id":"followRedirects","line":"937"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"maxRedirects","kind":"variable","id":"maxRedirects","line":"945"}],"uri":"sdk/lib/io/http.dart","kind":"class","comment":"\nA [HttpClientConnection] is returned by all [HttpClient] methods\nthat initiate a connection to an HTTP server. The handlers will be\ncalled as the connection state progresses.\n\nThe setting of all handlers is optional. If [onRequest] is not set\nthe request will be send without any additional headers and an\nempty body. If [onResponse] is not set the response will be read\nand discarded.\n","id":"HttpClientConnection","line":"898"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"HttpClient","children":[{"returnType":{"name":"HttpClientConnection","refId":"dart.io/HttpClientConnection"},"name":"open","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"method","kind":"param","id":"method"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"host","kind":"param","id":"host"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"port","kind":"param","id":"port"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"path","kind":"param","id":"path"}],"kind":"method","comment":"\nOpens a HTTP connection. The returned [HttpClientConnection] is\nused to register callbacks for asynchronous events on the HTTP\nconnection. The \"Host\" header for the request will be set to the\nvalue [host]:[port]. This can be overridden through the\nHttpClientRequest interface before the request is sent. NOTE if\n[host] is an IP address this will still be set in the \"Host\"\nheader.\n","id":"open4()","line":"774"},{"returnType":{"name":"HttpClientConnection","refId":"dart.io/HttpClientConnection"},"name":"openUrl","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"method","kind":"param","id":"method"},{"ref":{"name":"Uri","refId":"dart.uri/Uri"},"name":"url","kind":"param","id":"url"}],"kind":"method","comment":"\nOpens a HTTP connection. The returned [HttpClientConnection] is\nused to register callbacks for asynchronous events on the HTTP\nconnection. The \"Host\" header for the request will be set based\nthe host and port specified in [url]. This can be overridden\nthrough the HttpClientRequest interface before the request is\nsent. NOTE if the host is specified as an IP address this will\nstill be set in the \"Host\" header.\n","id":"openUrl2()","line":"785"},{"returnType":{"name":"HttpClientConnection","refId":"dart.io/HttpClientConnection"},"name":"get","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"host","kind":"param","id":"host"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"port","kind":"param","id":"port"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"path","kind":"param","id":"path"}],"kind":"method","comment":"\nOpens a HTTP connection using the GET method. See [open] for\ndetails. Using this method to open a HTTP connection will set the\ncontent length to 0.\n","id":"get3()","line":"792"},{"returnType":{"name":"HttpClientConnection","refId":"dart.io/HttpClientConnection"},"name":"getUrl","children":[{"ref":{"name":"Uri","refId":"dart.uri/Uri"},"name":"url","kind":"param","id":"url"}],"kind":"method","comment":"\nOpens a HTTP connection using the GET method. See [openUrl] for\ndetails. Using this method to open a HTTP connection will set the\ncontent length to 0.\n","id":"getUrl1()","line":"799"},{"returnType":{"name":"HttpClientConnection","refId":"dart.io/HttpClientConnection"},"name":"post","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"host","kind":"param","id":"host"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"port","kind":"param","id":"port"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"path","kind":"param","id":"path"}],"kind":"method","comment":"\nOpens a HTTP connection using the POST method. See [open] for details.\n","id":"post3()","line":"804"},{"returnType":{"name":"HttpClientConnection","refId":"dart.io/HttpClientConnection"},"name":"postUrl","children":[{"ref":{"name":"Uri","refId":"dart.uri/Uri"},"name":"url","kind":"param","id":"url"}],"kind":"method","comment":"\nOpens a HTTP connection using the POST method. See [openUrl] for details.\n","id":"postUrl1()","line":"809"},{"isSetter":true,"name":"authenticate=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","kind":"param","id":"f"}],"kind":"method","comment":"\nSets the function to be called when a site is requesting\nauthentication. The URL requested and the security realm from the\nserver are passed in the arguments [url] and [realm].\n\nThe function returns a [Future] which should complete when the\nauthentication has been resolved. If credentials cannot be\nprovided the [Future] should complete with [false]. If\ncredentials are available the function should add these using\n[addCredentials] before completing the [Future] with the value\n[true].\n\nIf the [Future] completes with true the request will be retried\nusing the updated credentials. Otherwise response processing will\ncontinue normally.\n","id":"authenticate=1()","line":"827"},{"returnType":{"name":"void","refId":"void"},"name":"addCredentials","children":[{"ref":{"name":"Uri","refId":"dart.uri/Uri"},"name":"url","kind":"param","id":"url"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"realm","kind":"param","id":"realm"},{"ref":{"name":"HttpClientCredentials","refId":"dart.io/HttpClientCredentials"},"name":"credentials","kind":"param","id":"credentials"}],"kind":"method","comment":"\nAdd credentials to be used for authorizing HTTP requests.\n","id":"addCredentials3()","line":"832"},{"isSetter":true,"name":"sendClientCertificate=","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"send","kind":"param","id":"send"}],"kind":"method","comment":"\nIf [sendClientCertificate] is set to true, authenticate with a client\ncertificate when connecting with an HTTPS server that requests one.\nSelect the certificate from the certificate database that matches\nthe authorities listed by the HTTPS server as valid.\nIf [clientCertificate] is set, send the certificate with that nickname\ninstead.\n","id":"sendClientCertificate=1()","line":"842"},{"isSetter":true,"name":"clientCertificate=","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"nickname","kind":"param","id":"nickname"}],"kind":"method","comment":"\nIf [clientCertificate] is non-null and [sendClientCertificate] is true,\nuse [clientCertificate] to select the certificate to send from the\ncertificate database, looking it up by its nickname.\n","id":"clientCertificate=1()","line":"849"},{"isSetter":true,"name":"findProxy=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","kind":"param","id":"f"}],"kind":"method","comment":"\nSets the function used to resolve the proxy server to be used for\nopening a HTTP connection to the specified [url]. If this\nfunction is not set, direct connections will always be used.\n\nThe string returned by [f] must be in the format used by browser\nPAC (proxy auto-config) scripts. That is either\n\n  \"DIRECT\"\n\nfor using a direct connection or\n\n  \"PROXY host:port\"\n\nfor using the proxy server [:host:] on port [:port:].\n\nA configuration can contain several configuration elements\nseparated by semicolons, e.g.\n\n  \"PROXY host:port; PROXY host2:port2; DIRECT\"\n","id":"findProxy=1()","line":"872"},{"returnType":{"name":"void","refId":"void"},"name":"shutdown","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"force","kind":"param","id":"force"}],"kind":"method","comment":"\nShutdown the HTTP client. If [force] is [:false:] (the default)\nthe [:HttpClient:] will be kept alive until all active\nconnections are done. If [force] is [:true:] any active\nconnections will be closed to immediately release all\nresources. These closed connections will receive an [:onError:]\ncallback to indicate that the client was shutdown. In both cases\ntrying to establish a new connection after calling [shutdown]\nwill throw an exception.\n","id":"shutdown1()","line":"884"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"DEFAULT_HTTP_PORT","kind":"variable","id":"DEFAULT_HTTP_PORT","line":"760"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"DEFAULT_HTTPS_PORT","kind":"variable","id":"DEFAULT_HTTPS_PORT","line":"761"},{"name":"HttpClient","kind":"constructor","id":"HttpClient0()","line":"763"}],"uri":"sdk/lib/io/http.dart","kind":"class","comment":"\nHTTP client factory. The [HttpClient] handles all the sockets associated\nwith the [HttpClientConnection]s and when the endpoint supports it, it will\ntry to reuse opened sockets for several requests to support HTTP 1.1\npersistent connections. This means that sockets will be kept open for some\ntime after a requests have completed, unless HTTP procedures indicate that it\nmust be closed as part of completing the request. Use [:HttpClient.shutdown:]\nto force close the idle sockets.\n","id":"HttpClient","line":"759"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"HttpResponse","children":[{"returnType":{"name":"DetachedSocket","refId":"dart.io/DetachedSocket"},"name":"detachSocket","kind":"method","comment":"\nDetach the underlying socket from the HTTP server. When the\nsocket is detached the HTTP server will no longer perform any\noperations on it.\n\nThis is normally used when a HTTP upgrade request is received\nand the communication should continue with a different protocol.\n","id":"detachSocket0()","line":"740"},{"ref":{"name":"HttpHeaders","refId":"dart.io/HttpHeaders"},"name":"headers","kind":"property","comment":"\nReturns the response headers.\n","id":"headers","line":"714"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Cookie","refId":"dart.io/Cookie"}]},"name":"cookies","kind":"property","comment":"\nCookies to set in the client (in the Set-Cookie header).\n","id":"cookies","line":"719"},{"ref":{"name":"OutputStream","refId":"dart.io/OutputStream"},"name":"outputStream","kind":"property","comment":"\nReturns the output stream for the response. This is used to write\nthe response data. When all response data has been written close\nthe stream to indicate the end of the response.\n\nWhen this is accessed for the first time the response header is\nsend. Calling any methods that will change the header after\nhaving retrieved the output stream will throw an exception.\n","id":"outputStream","line":"730"},{"ref":{"name":"HttpConnectionInfo","refId":"dart.io/HttpConnectionInfo"},"name":"connectionInfo","kind":"property","comment":"\nGet information about the client connection. Returns [null] if the socket\nisn't available.\n","id":"connectionInfo","line":"746"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"contentLength","kind":"variable","id":"contentLength","line":"688"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"statusCode","kind":"variable","id":"statusCode","line":"696"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"reasonPhrase","kind":"variable","id":"reasonPhrase","line":"702"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"persistentConnection","kind":"variable","id":"persistentConnection","line":"709"}],"uri":"sdk/lib/io/http.dart","kind":"class","comment":"\nHTTP response to be send back to the client.\n","id":"HttpResponse","line":"682"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"HttpRequest","children":[{"returnType":{"name":"HttpSession","refId":"dart.io/HttpSession"},"name":"session","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"init","kind":"param","id":"init"}],"kind":"method","comment":"\nReturns, or initialize, a session for the given request. If the session is\nbeing initialized by this call, [init] will be called with the\nnewly create session. Here the [:HttpSession.data:] field can be set, if\nneeded.\nSee [:HttpServer.sessionTimeout:] on how to change default timeout.\n","id":"session1()","line":"657"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"contentLength","kind":"property","comment":"\nReturns the content length of the request body. If the size of\nthe request body is not known in advance this -1.\n","id":"contentLength","line":"600"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"persistentConnection","kind":"property","comment":"\nReturns the persistent connection state signaled by the client.\n","id":"persistentConnection","line":"605"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"method","kind":"property","comment":"\nReturns the method for the request.\n","id":"method","line":"610"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"uri","kind":"property","comment":"\nReturns the URI for the request.\n","id":"uri","line":"615"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"path","kind":"property","comment":"\nReturns the path part of the URI.\n","id":"path","line":"620"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"queryString","kind":"property","comment":"\nReturns the query string.\n","id":"queryString","line":"625"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"name":"queryParameters","kind":"property","comment":"\nReturns the parsed query string.\n","id":"queryParameters","line":"630"},{"ref":{"name":"HttpHeaders","refId":"dart.io/HttpHeaders"},"name":"headers","kind":"property","comment":"\nReturns the request headers.\n","id":"headers","line":"635"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Cookie","refId":"dart.io/Cookie"}]},"name":"cookies","kind":"property","comment":"\nReturns the cookies in the request (from the Cookie headers).\n","id":"cookies","line":"640"},{"ref":{"name":"X509Certificate","refId":"dart.io/X509Certificate"},"name":"certificate","kind":"property","comment":"\nReturns the client certificate of the client making the request.\nReturns null if the connection is not a secure TLS or SSL connection,\nor if the server does not request a client certificate, or if the client\ndoes not provide one.\n","id":"certificate","line":"648"},{"ref":{"name":"InputStream","refId":"dart.io/InputStream"},"name":"inputStream","kind":"property","comment":"\nReturns the input stream for the request. This is used to read\nthe request data.\n","id":"inputStream","line":"663"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"protocolVersion","kind":"property","comment":"\nReturns the HTTP protocol version used in the request. This will\nbe \"1.0\" or \"1.1\".\n","id":"protocolVersion","line":"669"},{"ref":{"name":"HttpConnectionInfo","refId":"dart.io/HttpConnectionInfo"},"name":"connectionInfo","kind":"property","comment":"\nGet information about the client connection. Returns [null] if the socket\nisn't available.\n","id":"connectionInfo","line":"675"}],"uri":"sdk/lib/io/http.dart","kind":"class","comment":"\nHttp request delivered to the HTTP server callback.\n","id":"HttpRequest","line":"595"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Cookie","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","comment":"\nReturns the formatted string representation of the cookie. The\nstring representation can be used for for setting the Cookie or\nSet-Cookie headers\n","id":"toString0()","line":"588"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"name","kind":"variable","id":"name","line":"545"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"value","kind":"variable","id":"value","line":"550"},{"ref":{"name":"Date","refId":"dart.core/Date"},"name":"expires","kind":"variable","id":"expires","line":"555"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"maxAge","kind":"variable","id":"maxAge","line":"561"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"domain","kind":"variable","id":"domain","line":"566"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"path","kind":"variable","id":"path","line":"571"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"secure","kind":"variable","id":"secure","line":"576"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"httpOnly","kind":"variable","id":"httpOnly","line":"581"},{"name":"Cookie","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"name","kind":"param","id":"name"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"value","kind":"param","id":"value"}],"kind":"constructor","comment":"\nCreates a new cookie optionally setting the name and value.\n","id":"Cookie2()","line":"532"},{"name":"Cookie.fromSetCookieValue","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"value","kind":"param","id":"value"}],"kind":"constructor","comment":"\nCreates a new cookie by parsing a header value from a Set-Cookie\nheader.\n","id":"Cookie.fromSetCookieValue1()","line":"538"}],"uri":"sdk/lib/io/http.dart","kind":"class","comment":"\nRepresentation of a cookie. For cookies received by the server as\nCookie header values only [:name:] and [:value:] fields will be\nset. When building a cookie for the Set-Cookie header in the server\nand when receiving cookies in the client as Set-Cookie headers all\nfields can be used.\n","id":"Cookie","line":"528"},{"interfaces":[{"name":"HeaderValue","refId":"dart.io/HeaderValue"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"ContentType","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"value","kind":"variable","id":"value","line":"502"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"primaryType","kind":"variable","id":"primaryType","line":"507"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"subType","kind":"variable","id":"subType","line":"512"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"charset","kind":"variable","id":"charset","line":"517"},{"name":"ContentType","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"primaryType","kind":"param","id":"primaryType"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"subType","kind":"param","id":"subType"}],"kind":"constructor","comment":"\nCreates a new content type object setting the primary type and\nsub type.\n","id":"ContentType2()","line":"480"},{"name":"ContentType.fromString","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"value","kind":"param","id":"value"}],"kind":"constructor","comment":"\nCreates a new content type object from parsing a Content-Type\nheader value. As primary type, sub type and parameter names and\nvalues are not case sensitive all these values will be converted\nto lower case. Parsing this string\n\n    text/html; charset=utf-8\n\nwill create a content type object with primary type [:text:], sub\ntype [:html:] and parameter [:charset:] with value [:utf-8:].\n","id":"ContentType.fromString1()","line":"495"}],"uri":"sdk/lib/io/http.dart","kind":"class","comment":"\nRepresentation of a content type.\n","id":"ContentType","line":"475"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"HttpSession","children":[{"returnType":{"name":"void","refId":"void"},"name":"destroy","kind":"method","comment":"\nDestroy the session. This will terminate the session and any further\nconnections with this id will be given a new id and session.\n","id":"destroy0()","line":"463"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onTimeout=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSet a callback that will be called when the session is timed out.\n","id":"onTimeout=1()","line":"468"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"id","kind":"property","comment":"\nGet the id for the current session.\n","id":"id","line":"452"},{"name":"data","kind":"variable","id":"data","line":"457"}],"uri":"sdk/lib/io/http.dart","kind":"class","id":"HttpSession","line":"448"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"HeaderValue","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","comment":"\nReturns the formatted string representation in the form:\n\n    value; parameter1=value1; parameter2=value2\n","id":"toString0()","line":"445"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"name":"parameters","kind":"property","comment":"\nGets the map of parameters.\n","id":"parameters","line":"438"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"value","kind":"variable","id":"value","line":"433"},{"name":"HeaderValue","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"value","kind":"param","id":"value"}],"kind":"constructor","comment":"\nCreates a new header value object setting the value part.\n","id":"HeaderValue1()","line":"418"},{"name":"HeaderValue.fromString","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"value","kind":"param","id":"value"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"parameterSeparator","kind":"param","id":"parameterSeparator","line":"425"}],"kind":"constructor","comment":"\nCreates a new header value object from parsing a header value\nstring with both value and optional parameters.\n","id":"HeaderValue.fromString2()","line":"424"}],"uri":"sdk/lib/io/http.dart","kind":"class","comment":"\nRepresentation of a header value in the form:\n\n  [:value; parameter1=value1; parameter2=value2:]\n\n[HeaderValue] can be used to conveniently build and parse header\nvalues on this form.\n\nTo build an [:Accepts:] header with the value\n\n    text/plain; q=0.3, text/html\n\nuse code like this:\n\n    HttpClientRequest request = ...;\n    var v = new HeaderValue();\n    v.value = \"text/plain\";\n    v.parameters[\"q\"] = \"0.3\"\n    request.headers.add(HttpHeaders.ACCEPT, v);\n    request.headers.add(HttpHeaders.ACCEPT, \"text/html\");\n\nTo parse the header values use the [:fromString:] constructor.\n\n    HttpRequest request = ...;\n    List<String> values = request.headers[HttpHeaders.ACCEPT];\n    values.forEach((value) {\n      HeaderValue v = new HeaderValue.fromString(value);\n      // Use v.value and v.parameters\n    });\n","id":"HeaderValue","line":"414"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"HttpHeaders","children":[{"isOperator":true,"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"[]","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"name","kind":"param","id":"name"}],"kind":"method","comment":"\nReturns the list of values for the header named [name]. If there\nis no headers with the provided name [:null:] will be returned.\n","id":"[]1()","line":"287"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"value","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"name","kind":"param","id":"name"}],"kind":"method","comment":"\nConvenience method for the value for a single values header. If\nthere is no header with the provided name [:null:] will be\nreturned. If the header has more than one value an exception is\nthrown.\n","id":"value1()","line":"295"},{"returnType":{"name":"void","refId":"void"},"name":"add","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"name","kind":"param","id":"name"},{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nAdds a header value. The header named [name] will have the value\n[value] added to its list of values. Some headers are single\nvalues and for these adding a value will replace the previous\nvalue. If the value is of type Date a HTTP date format will be\napplied. If the value is a [:List:] each element of the list will\nbe added separately. For all other types the default [:toString:]\nmethod will be used.\n","id":"add2()","line":"306"},{"returnType":{"name":"void","refId":"void"},"name":"set","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"name","kind":"param","id":"name"},{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nSets a header. The header named [name] will have all its values\ncleared before the value [value] is added as its value.\n","id":"set2()","line":"312"},{"returnType":{"name":"void","refId":"void"},"name":"remove","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"name","kind":"param","id":"name"},{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nRemoves a specific value for a header name. Some headers have\nsystem supplied values and for these the system supplied values\nwill still be added to the collection of values for the header.\n","id":"remove2()","line":"319"},{"returnType":{"name":"void","refId":"void"},"name":"removeAll","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"name","kind":"param","id":"name"}],"kind":"method","comment":"\nRemove all values for the specified header name. Some headers\nhave system supplied values and for these the system supplied\nvalues will still be added to the collection of values for the\nheader.\n","id":"removeAll1()","line":"327"},{"returnType":{"name":"void","refId":"void"},"name":"forEach","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","kind":"param","id":"f"}],"kind":"method","comment":"\nEnumerate the headers applying the function [f] to each\nheader. The header name passed in [name] will be all lower\ncase.\n","id":"forEach1()","line":"334"},{"returnType":{"name":"void","refId":"void"},"name":"noFolding","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"name","kind":"param","id":"name"}],"kind":"method","comment":"\nDisable folding for the header named [name] when sending the HTTP\nheader. By default, multiple header values are folded into a\nsingle header line by separating the values with commas. The\nSet-Cookie header has folding disabled by default.\n","id":"noFolding1()","line":"342"},{"isStatic":true,"name":"ACCEPT","kind":"variable","id":"ACCEPT","line":"183"},{"isStatic":true,"name":"ACCEPT_CHARSET","kind":"variable","id":"ACCEPT_CHARSET","line":"184"},{"isStatic":true,"name":"ACCEPT_ENCODING","kind":"variable","id":"ACCEPT_ENCODING","line":"185"},{"isStatic":true,"name":"ACCEPT_LANGUAGE","kind":"variable","id":"ACCEPT_LANGUAGE","line":"186"},{"isStatic":true,"name":"ACCEPT_RANGES","kind":"variable","id":"ACCEPT_RANGES","line":"187"},{"isStatic":true,"name":"AGE","kind":"variable","id":"AGE","line":"188"},{"isStatic":true,"name":"ALLOW","kind":"variable","id":"ALLOW","line":"189"},{"isStatic":true,"name":"AUTHORIZATION","kind":"variable","id":"AUTHORIZATION","line":"190"},{"isStatic":true,"name":"CACHE_CONTROL","kind":"variable","id":"CACHE_CONTROL","line":"191"},{"isStatic":true,"name":"CONNECTION","kind":"variable","id":"CONNECTION","line":"192"},{"isStatic":true,"name":"CONTENT_ENCODING","kind":"variable","id":"CONTENT_ENCODING","line":"193"},{"isStatic":true,"name":"CONTENT_LANGUAGE","kind":"variable","id":"CONTENT_LANGUAGE","line":"194"},{"isStatic":true,"name":"CONTENT_LENGTH","kind":"variable","id":"CONTENT_LENGTH","line":"195"},{"isStatic":true,"name":"CONTENT_LOCATION","kind":"variable","id":"CONTENT_LOCATION","line":"196"},{"isStatic":true,"name":"CONTENT_MD5","kind":"variable","id":"CONTENT_MD5","line":"197"},{"isStatic":true,"name":"CONTENT_RANGE","kind":"variable","id":"CONTENT_RANGE","line":"198"},{"isStatic":true,"name":"CONTENT_TYPE","kind":"variable","id":"CONTENT_TYPE","line":"199"},{"isStatic":true,"name":"DATE","kind":"variable","id":"DATE","line":"200"},{"isStatic":true,"name":"ETAG","kind":"variable","id":"ETAG","line":"201"},{"isStatic":true,"name":"EXPECT","kind":"variable","id":"EXPECT","line":"202"},{"isStatic":true,"name":"EXPIRES","kind":"variable","id":"EXPIRES","line":"203"},{"isStatic":true,"name":"FROM","kind":"variable","id":"FROM","line":"204"},{"isStatic":true,"name":"HOST","kind":"variable","id":"HOST","line":"205"},{"isStatic":true,"name":"IF_MATCH","kind":"variable","id":"IF_MATCH","line":"206"},{"isStatic":true,"name":"IF_MODIFIED_SINCE","kind":"variable","id":"IF_MODIFIED_SINCE","line":"207"},{"isStatic":true,"name":"IF_NONE_MATCH","kind":"variable","id":"IF_NONE_MATCH","line":"208"},{"isStatic":true,"name":"IF_RANGE","kind":"variable","id":"IF_RANGE","line":"209"},{"isStatic":true,"name":"IF_UNMODIFIED_SINCE","kind":"variable","id":"IF_UNMODIFIED_SINCE","line":"210"},{"isStatic":true,"name":"LAST_MODIFIED","kind":"variable","id":"LAST_MODIFIED","line":"211"},{"isStatic":true,"name":"LOCATION","kind":"variable","id":"LOCATION","line":"212"},{"isStatic":true,"name":"MAX_FORWARDS","kind":"variable","id":"MAX_FORWARDS","line":"213"},{"isStatic":true,"name":"PRAGMA","kind":"variable","id":"PRAGMA","line":"214"},{"isStatic":true,"name":"PROXY_AUTHENTICATE","kind":"variable","id":"PROXY_AUTHENTICATE","line":"215"},{"isStatic":true,"name":"PROXY_AUTHORIZATION","kind":"variable","id":"PROXY_AUTHORIZATION","line":"216"},{"isStatic":true,"name":"RANGE","kind":"variable","id":"RANGE","line":"217"},{"isStatic":true,"name":"REFERER","kind":"variable","id":"REFERER","line":"218"},{"isStatic":true,"name":"RETRY_AFTER","kind":"variable","id":"RETRY_AFTER","line":"219"},{"isStatic":true,"name":"SERVER","kind":"variable","id":"SERVER","line":"220"},{"isStatic":true,"name":"TE","kind":"variable","id":"TE","line":"221"},{"isStatic":true,"name":"TRAILER","kind":"variable","id":"TRAILER","line":"222"},{"isStatic":true,"name":"TRANSFER_ENCODING","kind":"variable","id":"TRANSFER_ENCODING","line":"223"},{"isStatic":true,"name":"UPGRADE","kind":"variable","id":"UPGRADE","line":"224"},{"isStatic":true,"name":"USER_AGENT","kind":"variable","id":"USER_AGENT","line":"225"},{"isStatic":true,"name":"VARY","kind":"variable","id":"VARY","line":"226"},{"isStatic":true,"name":"VIA","kind":"variable","id":"VIA","line":"227"},{"isStatic":true,"name":"WARNING","kind":"variable","id":"WARNING","line":"228"},{"isStatic":true,"name":"WWW_AUTHENTICATE","kind":"variable","id":"WWW_AUTHENTICATE","line":"229"},{"isStatic":true,"name":"GENERAL_HEADERS","kind":"variable","id":"GENERAL_HEADERS","line":"231"},{"isStatic":true,"name":"ENTITY_HEADERS","kind":"variable","id":"ENTITY_HEADERS","line":"241"},{"isStatic":true,"name":"RESPONSE_HEADERS","kind":"variable","id":"RESPONSE_HEADERS","line":"253"},{"isStatic":true,"name":"REQUEST_HEADERS","kind":"variable","id":"REQUEST_HEADERS","line":"263"},{"ref":{"name":"Date","refId":"dart.core/Date"},"name":"date","kind":"variable","id":"date","line":"348"},{"ref":{"name":"Date","refId":"dart.core/Date"},"name":"expires","kind":"variable","id":"expires","line":"354"},{"ref":{"name":"Date","refId":"dart.core/Date"},"name":"ifModifiedSince","kind":"variable","id":"ifModifiedSince","line":"360"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"host","kind":"variable","id":"host","line":"366"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"port","kind":"variable","id":"port","line":"372"},{"ref":{"name":"ContentType","refId":"dart.io/ContentType"},"name":"contentType","kind":"variable","id":"contentType","line":"380"}],"uri":"sdk/lib/io/http.dart","kind":"class","comment":"\nAccess to the HTTP headers for requests and responses. In some\nsituations the headers will be imutable and the mutating methods\nwill then throw exceptions.\n\nFor all operation on HTTP headers the header name is\ncase-insensitive.\n","id":"HttpHeaders","line":"182"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"HttpConnectionsInfo","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"total","kind":"variable","id":"total","line":"152"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"active","kind":"variable","id":"active","line":"158"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"idle","kind":"variable","id":"idle","line":"163"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"closing","kind":"variable","id":"closing","line":"170"}],"uri":"sdk/lib/io/http.dart","kind":"class","comment":"\nOverview information of the [:HttpServer:] socket connections.\n","id":"HttpConnectionsInfo","line":"148"},{"interfaces":[{"name":"HttpServer","refId":"dart.io/HttpServer"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"HttpsServer","children":[{"name":"HttpsServer","kind":"constructor","id":"HttpsServer0()","line":"141"}],"uri":"sdk/lib/io/http.dart","kind":"class","comment":"\nHTTPS server.\n","id":"HttpsServer","line":"140"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"HttpServer","children":[{"returnType":{"name":"void","refId":"void"},"name":"listen","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"host","kind":"param","id":"host"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"port","kind":"param","id":"port","line":"74"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"backlog","kind":"param","id":"backlog","line":"75"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"certificate_name","kind":"param","id":"certificate_name","line":"76"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"requestClientCertificate","kind":"param","id":"requestClientCertificate","line":"77"}],"kind":"method","comment":"\nStart listening for HTTP requests on the specified [host] and\n[port]. If a [port] of 0 is specified the server will choose an\nephemeral port. The optional argument [backlog] can be used to\nspecify the listen backlog for the underlying OS listen.\nThe optional arguments [certificate_name] and [requestClientCertificate]\nare used by the HttpsServer class, which shares the same interface.\nSee [addRequestHandler] and [defaultRequestHandler] for\ninformation on how incoming HTTP requests are handled.\n","id":"listen5()","line":"73"},{"returnType":{"name":"void","refId":"void"},"name":"listenOn","children":[{"ref":{"name":"ServerSocket","refId":"dart.io/ServerSocket"},"name":"serverSocket","kind":"param","id":"serverSocket"}],"kind":"method","comment":"\nAttach the HTTP server to an existing [:ServerSocket:]. If the\n[HttpServer] is closed, the [HttpServer] will just detach itself,\nand not close [serverSocket].\n","id":"listenOn1()","line":"84"},{"name":"addRequestHandler","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"matcher","kind":"param","id":"matcher"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"handler","kind":"param","id":"handler","line":"94"}],"kind":"method","comment":"\nAdds a request handler to the list of request handlers. The\nfunction [matcher] is called with the request and must return\n[:true:] if the [handler] should handle the request. The first\nhandler for which [matcher] returns [:true:] will be handed the\nrequest.\n","id":"addRequestHandler2()","line":"93"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"defaultRequestHandler=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"handler","kind":"param","id":"handler","line":"104"}],"kind":"method","comment":"\nSets the default request handler. This request handler will be\ncalled if none of the request handlers registered by\n[addRequestHandler] matches the current request. If no default\nrequest handler is set the server will just respond with status\ncode [:NOT_FOUND:] (404).\n","id":"defaultRequestHandler=1()","line":"103"},{"returnType":{"name":"void","refId":"void"},"name":"close","kind":"method","comment":"\nStop server listening.\n","id":"close0()","line":"109"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onError=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"method","comment":"\nSets the error handler that is called when a connection error occurs.\n","id":"onError=1()","line":"121"},{"isSetter":true,"name":"sessionTimeout=","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"timeout","kind":"param","id":"timeout"}],"kind":"method","comment":"\nSet the timeout, in seconds, for sessions of this HTTP server. Default\nis 20 minutes.\n","id":"sessionTimeout=1()","line":"127"},{"returnType":{"name":"HttpConnectionsInfo","refId":"dart.io/HttpConnectionsInfo"},"name":"connectionsInfo","kind":"method","comment":"\nReturns a [:HttpConnectionsInfo:] object with an overview of the\ncurrent connection handled by the server.\n","id":"connectionsInfo0()","line":"133"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"port","kind":"property","comment":"\nReturns the port that the server is listening on. This can be\nused to get the actual port used when a value of 0 for [port] is\nspecified in the [listen] call.\n","id":"port","line":"116"},{"name":"HttpServer","kind":"constructor","id":"HttpServer0()","line":"61"}],"uri":"sdk/lib/io/http.dart","kind":"class","comment":"\nHTTP server.\n","id":"HttpServer","line":"60"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"HttpStatus","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"CONTINUE","kind":"variable","id":"CONTINUE","line":"11"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"SWITCHING_PROTOCOLS","kind":"variable","id":"SWITCHING_PROTOCOLS","line":"12"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"OK","kind":"variable","id":"OK","line":"13"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"CREATED","kind":"variable","id":"CREATED","line":"14"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"ACCEPTED","kind":"variable","id":"ACCEPTED","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"NON_AUTHORITATIVE_INFORMATION","kind":"variable","id":"NON_AUTHORITATIVE_INFORMATION","line":"16"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"NO_CONTENT","kind":"variable","id":"NO_CONTENT","line":"17"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"RESET_CONTENT","kind":"variable","id":"RESET_CONTENT","line":"18"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"PARTIAL_CONTENT","kind":"variable","id":"PARTIAL_CONTENT","line":"19"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"MULTIPLE_CHOICES","kind":"variable","id":"MULTIPLE_CHOICES","line":"20"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"MOVED_PERMANENTLY","kind":"variable","id":"MOVED_PERMANENTLY","line":"21"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"FOUND","kind":"variable","id":"FOUND","line":"22"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"MOVED_TEMPORARILY","kind":"variable","id":"MOVED_TEMPORARILY","line":"23"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"SEE_OTHER","kind":"variable","id":"SEE_OTHER","line":"24"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"NOT_MODIFIED","kind":"variable","id":"NOT_MODIFIED","line":"25"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"USE_PROXY","kind":"variable","id":"USE_PROXY","line":"26"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"TEMPORARY_REDIRECT","kind":"variable","id":"TEMPORARY_REDIRECT","line":"27"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"BAD_REQUEST","kind":"variable","id":"BAD_REQUEST","line":"28"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"UNAUTHORIZED","kind":"variable","id":"UNAUTHORIZED","line":"29"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"PAYMENT_REQUIRED","kind":"variable","id":"PAYMENT_REQUIRED","line":"30"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"FORBIDDEN","kind":"variable","id":"FORBIDDEN","line":"31"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"NOT_FOUND","kind":"variable","id":"NOT_FOUND","line":"32"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"METHOD_NOT_ALLOWED","kind":"variable","id":"METHOD_NOT_ALLOWED","line":"33"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"NOT_ACCEPTABLE","kind":"variable","id":"NOT_ACCEPTABLE","line":"34"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"PROXY_AUTHENTICATION_REQUIRED","kind":"variable","id":"PROXY_AUTHENTICATION_REQUIRED","line":"35"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"REQUEST_TIMEOUT","kind":"variable","id":"REQUEST_TIMEOUT","line":"36"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"CONFLICT","kind":"variable","id":"CONFLICT","line":"37"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"GONE","kind":"variable","id":"GONE","line":"38"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"LENGTH_REQUIRED","kind":"variable","id":"LENGTH_REQUIRED","line":"39"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"PRECONDITION_FAILED","kind":"variable","id":"PRECONDITION_FAILED","line":"40"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"REQUEST_ENTITY_TOO_LARGE","kind":"variable","id":"REQUEST_ENTITY_TOO_LARGE","line":"41"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"REQUEST_URI_TOO_LONG","kind":"variable","id":"REQUEST_URI_TOO_LONG","line":"42"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"UNSUPPORTED_MEDIA_TYPE","kind":"variable","id":"UNSUPPORTED_MEDIA_TYPE","line":"43"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"REQUESTED_RANGE_NOT_SATISFIABLE","kind":"variable","id":"REQUESTED_RANGE_NOT_SATISFIABLE","line":"44"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"EXPECTATION_FAILED","kind":"variable","id":"EXPECTATION_FAILED","line":"45"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"INTERNAL_SERVER_ERROR","kind":"variable","id":"INTERNAL_SERVER_ERROR","line":"46"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"NOT_IMPLEMENTED","kind":"variable","id":"NOT_IMPLEMENTED","line":"47"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"BAD_GATEWAY","kind":"variable","id":"BAD_GATEWAY","line":"48"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"SERVICE_UNAVAILABLE","kind":"variable","id":"SERVICE_UNAVAILABLE","line":"49"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"GATEWAY_TIMEOUT","kind":"variable","id":"GATEWAY_TIMEOUT","line":"50"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"HTTP_VERSION_NOT_SUPPORTED","kind":"variable","id":"HTTP_VERSION_NOT_SUPPORTED","line":"51"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"NETWORK_CONNECT_TIMEOUT_ERROR","kind":"variable","id":"NETWORK_CONNECT_TIMEOUT_ERROR","line":"53"}],"uri":"sdk/lib/io/http.dart","kind":"class","comment":"\nHTTP status codes.\n","id":"HttpStatus","line":"10"},{"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"FileIOException","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"445"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"variable","id":"message","line":"458"},{"isFinal":true,"ref":{"name":"OSError","refId":"dart.io/OSError"},"name":"osError","kind":"variable","id":"osError","line":"459"},{"name":"FileIOException","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"message","kind":"param","id":"message"},{"ref":{"name":"OSError","refId":"dart.io/OSError"},"isOptional":true,"name":"osError","kind":"param","id":"osError","line":"444"}],"kind":"constructor","id":"FileIOException2()","line":"443"}],"uri":"sdk/lib/io/file.dart","kind":"class","id":"FileIOException","line":"442"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"RandomAccessFile","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"RandomAccessFile","refId":"dart.io/RandomAccessFile"}]},"name":"close","kind":"method","comment":"\nClose the file. Returns a [:Future<RandomAccessFile>:] that\ncompletes with this RandomAccessFile when it has been closed.\n","id":"close0()","line":"288"},{"returnType":{"name":"void","refId":"void"},"name":"closeSync","kind":"method","comment":"\nSynchronously close the file.\n","id":"closeSync0()","line":"293"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"readByte","kind":"method","comment":"\nRead a byte from the file. Returns a [:Future<int>:] that\ncompletes with the byte or -1 if end of file has been reached.\n","id":"readByte0()","line":"299"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"readByteSync","kind":"method","comment":"\nSynchronously read a single byte from the file. If end of file\nhas been reached -1 is returned.\n","id":"readByteSync0()","line":"305"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"name":"read","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"bytes","kind":"param","id":"bytes"}],"kind":"method","comment":"\nReads from a file and returns the result as a list of bytes.\n","id":"read1()","line":"310"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"readSync","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"bytes","kind":"param","id":"bytes"}],"kind":"method","comment":"\nSynchronously reads from a file and returns the result in a\nlist of bytes.\n","id":"readSync1()","line":"316"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"readList","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"buffer","kind":"param","id":"buffer"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"offset","kind":"param","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"bytes","kind":"param","id":"bytes"}],"kind":"method","comment":"\nRead a List<int> from the file. Returns a [:Future<int>:] that\ncompletes with an indication of how much was read.\n","id":"readList3()","line":"322"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"readListSync","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"buffer","kind":"param","id":"buffer"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"offset","kind":"param","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"bytes","kind":"param","id":"bytes"}],"kind":"method","comment":"\nSynchronously read a List<int> from the file. Returns the number\nof bytes read.\n","id":"readListSync3()","line":"328"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"RandomAccessFile","refId":"dart.io/RandomAccessFile"}]},"name":"writeByte","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nWrite a single byte to the file. Returns a\n[:Future<RandomAccessFile>:] that completes with this\nRandomAccessFile when the write completes.\n","id":"writeByte1()","line":"335"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"writeByteSync","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nSynchronously write a single byte to the file. Returns the\nnumber of bytes successfully written.\n","id":"writeByteSync1()","line":"341"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"RandomAccessFile","refId":"dart.io/RandomAccessFile"}]},"name":"writeList","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"buffer","kind":"param","id":"buffer"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"offset","kind":"param","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"bytes","kind":"param","id":"bytes"}],"kind":"method","comment":"\nWrite a List<int> to the file. Returns a\n[:Future<RandomAccessFile>:] that completes with this\nRandomAccessFile when the write completes.\n","id":"writeList3()","line":"348"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"writeListSync","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"buffer","kind":"param","id":"buffer"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"offset","kind":"param","id":"offset"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"bytes","kind":"param","id":"bytes"}],"kind":"method","comment":"\nSynchronously write a List<int> to the file. Returns the number\nof bytes successfully written.\n","id":"writeListSync3()","line":"354"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"RandomAccessFile","refId":"dart.io/RandomAccessFile"}]},"name":"writeString","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"string","kind":"param","id":"string"},{"ref":{"name":"Encoding","refId":"dart.io/Encoding"},"isOptional":true,"name":"encoding","kind":"param","id":"encoding","line":"362"}],"kind":"method","comment":"\nWrite a string to the file using the given [encoding]. Returns a\n[:Future<RandomAccessFile>:] that completes with this\nRandomAccessFile when the write completes.\n","id":"writeString2()","line":"361"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"writeStringSync","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"string","kind":"param","id":"string"},{"ref":{"name":"Encoding","refId":"dart.io/Encoding"},"isOptional":true,"name":"encoding","kind":"param","id":"encoding","line":"370"}],"kind":"method","comment":"\nSynchronously write a single string to the file using the given\n[encoding]. Returns the number of characters successfully\nwritten.\n","id":"writeStringSync2()","line":"369"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"position","kind":"method","comment":"\nGet the current byte position in the file. Returns a\n[:Future<int>:] that completes with the position.\n","id":"position0()","line":"376"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"positionSync","kind":"method","comment":"\nSynchronously get the current byte position in the file.\n","id":"positionSync0()","line":"381"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"RandomAccessFile","refId":"dart.io/RandomAccessFile"}]},"name":"setPosition","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"position","kind":"param","id":"position"}],"kind":"method","comment":"\nSet the byte position in the file. Returns a\n[:Future<RandomAccessFile>:] that completes with this\nRandomAccessFile when the position has been set.\n","id":"setPosition1()","line":"388"},{"returnType":{"name":"void","refId":"void"},"name":"setPositionSync","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"position","kind":"param","id":"position"}],"kind":"method","comment":"\nSynchronously set the byte position in the file.\n","id":"setPositionSync1()","line":"393"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"RandomAccessFile","refId":"dart.io/RandomAccessFile"}]},"name":"truncate","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"param","id":"length"}],"kind":"method","comment":"\nTruncate (or extend) the file to [length] bytes. Returns a\n[:Future<RandomAccessFile>:] that completes with this\nRandomAccessFile when the truncation has been performed.\n","id":"truncate1()","line":"400"},{"returnType":{"name":"void","refId":"void"},"name":"truncateSync","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"param","id":"length"}],"kind":"method","comment":"\nSynchronously truncate (or extend) the file to [length] bytes.\n","id":"truncateSync1()","line":"405"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"length","kind":"method","comment":"\nGet the length of the file. Returns a [:Future<int>:] that\ncompletes with the length in bytes.\n","id":"length0()","line":"411"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"lengthSync","kind":"method","comment":"\nSynchronously get the length of the file.\n","id":"lengthSync0()","line":"416"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"RandomAccessFile","refId":"dart.io/RandomAccessFile"}]},"name":"flush","kind":"method","comment":"\nFlush the contents of the file to disk. Returns a\n[:Future<RandomAccessFile>:] that completes with this\nRandomAccessFile when the flush operation completes.\n","id":"flush0()","line":"423"},{"returnType":{"name":"void","refId":"void"},"name":"flushSync","kind":"method","comment":"\nSynchronously flush the contents of the file to disk.\n","id":"flushSync0()","line":"428"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","comment":"\nReturns a human readable string for this File instance.\n","id":"toString0()","line":"433"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"name","kind":"property","comment":"\nGet the name of the file.\n","id":"name","line":"438"}],"uri":"sdk/lib/io/file.dart","kind":"class","comment":"\n[RandomAccessFile] provides random access to the data in a\nfile. [RandomAccessFile] objects are obtained by calling the\n[:open:] method on a [File] object.\n","id":"RandomAccessFile","line":"283"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"File","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"name":"exists","kind":"method","comment":"\nCheck if the file exists. Does not block and returns a\n[:Future<bool>:].\n","id":"exists0()","line":"41"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"existsSync","kind":"method","comment":"\nSynchronously check if the file exists.\n","id":"existsSync0()","line":"46"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"File","refId":"dart.io/File"}]},"name":"create","kind":"method","comment":"\nCreate the file. Returns a [:Future<File>:] that completes with\nthe file when it has been created.\n\nExisting files are left untouched by create. Calling create on an\nexisting file might fail if there are restrictive permissions on\nthe file.\n","id":"create0()","line":"56"},{"returnType":{"name":"void","refId":"void"},"name":"createSync","kind":"method","comment":"\nSynchronously create the file. Existing files are left untouched\nby create. Calling create on an existing file might fail if there\nare restrictive permissions on the file.\n","id":"createSync0()","line":"63"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"File","refId":"dart.io/File"}]},"name":"delete","kind":"method","comment":"\nDelete the file. Returns a [:Future<File>:] that completes with\nthe file when it has been deleted.\n","id":"delete0()","line":"69"},{"returnType":{"name":"void","refId":"void"},"name":"deleteSync","kind":"method","comment":"\nSynchronously delete the file.\n","id":"deleteSync0()","line":"74"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Directory","refId":"dart.io/Directory"}]},"name":"directory","kind":"method","comment":"\nGet a Directory object for the directory containing this\nfile. Returns a [:Future<Directory>:] that completes with the\ndirectory.\n","id":"directory0()","line":"81"},{"returnType":{"name":"Directory","refId":"dart.io/Directory"},"name":"directorySync","kind":"method","comment":"\nSynchronously get a Directory object for the directory containing\nthis file.\n","id":"directorySync0()","line":"87"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"length","kind":"method","comment":"\nGet the length of the file. Returns a [:Future<int>:] that\ncompletes with the length in bytes.\n","id":"length0()","line":"93"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"lengthSync","kind":"method","comment":"\nSynchronously get the length of the file.\n","id":"lengthSync0()","line":"98"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Date","refId":"dart.core/Date"}]},"name":"lastModified","kind":"method","comment":"\nGet the last-modified time of the file. Returns a\n[:Future<Date>:] that completes with a [Date] object for the\nmodification date.\n","id":"lastModified0()","line":"105"},{"returnType":{"name":"Date","refId":"dart.core/Date"},"name":"lastModifiedSync","kind":"method","comment":"\nGet the last-modified time of the file. Throws an exception\nif the file does not exist.\n","id":"lastModifiedSync0()","line":"111"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"RandomAccessFile","refId":"dart.io/RandomAccessFile"}]},"name":"open","children":[{"ref":{"name":"FileMode","refId":"dart.io/FileMode"},"isOptional":true,"name":"mode","kind":"param","id":"mode"}],"kind":"method","comment":"\nOpen the file for random access operations. Returns a\n[:Future<RandomAccessFile>:] that completes with the opened\nrandom access file. RandomAccessFiles must be closed using the\n[close] method.\n\nFiles can be opened in three modes:\n\nFileMode.READ: open the file for reading.\n\nFileMode.WRITE: open the file for both reading and writing and\ntruncate the file to length zero. If the file does not exist the\nfile is created.\n\nFileMode.APPEND: same as FileMode.WRITE except that the file is\nnot truncated.\n","id":"open1()","line":"130"},{"returnType":{"name":"RandomAccessFile","refId":"dart.io/RandomAccessFile"},"name":"openSync","children":[{"ref":{"name":"FileMode","refId":"dart.io/FileMode"},"isOptional":true,"name":"mode","kind":"param","id":"mode"}],"kind":"method","comment":"\nSynchronously open the file for random access operations. The\nresult is a RandomAccessFile on which random access operations\ncan be performed. Opened RandomAccessFiles must be closed using\nthe [close] method.\n\nSee [open] for information on the [mode] argument.\n","id":"openSync1()","line":"140"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"fullPath","kind":"method","comment":"\nGet the canonical full path corresponding to the file name.\nReturns a [:Future<String>:] that completes with the path.\n","id":"fullPath0()","line":"146"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"fullPathSync","kind":"method","comment":"\nSynchronously get the canonical full path corresponding to the file name.\n","id":"fullPathSync0()","line":"151"},{"returnType":{"name":"InputStream","refId":"dart.io/InputStream"},"name":"openInputStream","kind":"method","comment":"\nCreate a new independent input stream for the file. The file\ninput stream must be closed when no longer used to free up system\nresources.\n","id":"openInputStream0()","line":"158"},{"returnType":{"name":"OutputStream","refId":"dart.io/OutputStream"},"name":"openOutputStream","children":[{"ref":{"name":"FileMode","refId":"dart.io/FileMode"},"isOptional":true,"name":"mode","kind":"param","id":"mode"}],"kind":"method","comment":"\nCreates a new independent output stream for the file. The file\noutput stream must be closed when no longer used to free up\nsystem resources.\n\nAn output stream can be opened in two modes:\n\nFileMode.WRITE: create the stream and truncate the underlying\nfile to length zero.\n\nFileMode.APPEND: create the stream and set the position to the end of\nthe underlying file.\n","id":"openOutputStream1()","line":"173"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"name":"readAsBytes","kind":"method","comment":"\nRead the entire file contents as a list of bytes. Returns a\n[:Future<List<int>>:] that completes with the list of bytes that\nis the contents of the file.\n","id":"readAsBytes0()","line":"180"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"readAsBytesSync","kind":"method","comment":"\nSynchronously read the entire file contents as a list of bytes.\n","id":"readAsBytesSync0()","line":"185"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"readAsString","children":[{"ref":{"name":"Encoding","refId":"dart.io/Encoding"},"isOptional":true,"name":"encoding","kind":"param","id":"encoding"}],"kind":"method","comment":"\nRead the entire file contents as a string using the given\n[encoding].\n\nReturns a [:Future<String>:] that completes with the string once\nthe file contents has been read.\n","id":"readAsString1()","line":"194"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"readAsStringSync","children":[{"ref":{"name":"Encoding","refId":"dart.io/Encoding"},"isOptional":true,"name":"encoding","kind":"param","id":"encoding"}],"kind":"method","comment":"\nSynchronously read the entire file contents as a string using the\ngiven [encoding].\n","id":"readAsStringSync1()","line":"200"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]}]},"name":"readAsLines","children":[{"ref":{"name":"Encoding","refId":"dart.io/Encoding"},"isOptional":true,"name":"encoding","kind":"param","id":"encoding"}],"kind":"method","comment":"\nRead the entire file contents as lines of text using the give\n[encoding].\n\nReturns a [:Future<List<String>>:] that completes with the lines\nonce the file contents has been read.\n","id":"readAsLines1()","line":"209"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"readAsLinesSync","children":[{"ref":{"name":"Encoding","refId":"dart.io/Encoding"},"isOptional":true,"name":"encoding","kind":"param","id":"encoding"}],"kind":"method","comment":"\nSynchronously read the entire file contents as lines of text\nusing the given [encoding].\n","id":"readAsLinesSync1()","line":"215"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"File","refId":"dart.io/File"}]},"name":"writeAsBytes","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"bytes","kind":"param","id":"bytes"},{"ref":{"name":"FileMode","refId":"dart.io/FileMode"},"isOptional":true,"name":"mode","kind":"param","id":"mode"}],"kind":"method","comment":"\nWrite a list of bytes to a file.\n\nOpens the file, writes the list of bytes to it, and closes the file.\nReturns a [:Future<File>:] that completes with this [File] object once\nthe entire operation has completed.\n\nBy default [writeAsBytes] creates the file for writing and truncates the\nfile if it already exists. In order to append the bytes to an existing\nfile pass [:FileMode.APPEND:] as the optional mode parameter.\n","id":"writeAsBytes2()","line":"228"},{"returnType":{"name":"void","refId":"void"},"name":"writeAsBytesSync","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"bytes","kind":"param","id":"bytes"},{"ref":{"name":"FileMode","refId":"dart.io/FileMode"},"isOptional":true,"name":"mode","kind":"param","id":"mode"}],"kind":"method","comment":"\nSynchronously write a list of bytes to a file.\n\nOpens the file, writes the list of bytes to it and closses the file.\n\nBy default [writeAsBytesSync] creates the file for writing and truncates\nthe file if it already exists. In order to append the bytes to an existing\nfile pass [:FileMode.APPEND:] as the optional mode parameter.\n","id":"writeAsBytesSync2()","line":"239"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"File","refId":"dart.io/File"}]},"name":"writeAsString","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"contents","kind":"param","id":"contents"},{"ref":{"name":"FileMode","refId":"dart.io/FileMode"},"isOptional":true,"name":"mode","kind":"param","id":"mode","line":"253"},{"ref":{"name":"Encoding","refId":"dart.io/Encoding"},"isOptional":true,"name":"encoding","kind":"param","id":"encoding","line":"254"}],"kind":"method","comment":"\nWrite a string to a file.\n\nOpens the file, writes the string in the given encoding, and closes the\nfile. Returns a [:Future<File>:] that completes with this [File] object\nonce the entire operation has completed.\n\nBy default [writeAsString] creates the file for writing and truncates the\nfile if it already exists. In order to append the bytes to an existing\nfile pass [:FileMode.APPEND:] as the optional mode parameter.\n","id":"writeAsString3()","line":"252"},{"returnType":{"name":"void","refId":"void"},"name":"writeAsStringSync","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"contents","kind":"param","id":"contents"},{"ref":{"name":"FileMode","refId":"dart.io/FileMode"},"isOptional":true,"name":"mode","kind":"param","id":"mode","line":"268"},{"ref":{"name":"Encoding","refId":"dart.io/Encoding"},"isOptional":true,"name":"encoding","kind":"param","id":"encoding","line":"269"}],"kind":"method","comment":"\nSynchronously write a string to a file.\n\nOpens the file, writes the string in the given encoding, and closes the\nfile.\n\nBy default [writeAsStringSync] creates the file for writing and\ntruncates the file if it already exists. In order to append the bytes\nto an existing file pass [:FileMode.APPEND:] as the optional mode\nparameter.\n","id":"writeAsStringSync3()","line":"267"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"name","kind":"property","comment":"\nGet the name of the file.\n","id":"name","line":"274"},{"name":"File","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"name","kind":"param","id":"name"}],"kind":"constructor","comment":"\nCreate a File object.\n","id":"File1()","line":"30"},{"name":"File.fromPath","children":[{"ref":{"name":"Path","refId":"dart.io/Path"},"name":"path","kind":"param","id":"path"}],"kind":"constructor","comment":"\nCreate a File object from a Path object.\n","id":"File.fromPath1()","line":"35"}],"uri":"sdk/lib/io/file.dart","kind":"class","comment":"\n[File] objects are references to files.\n\nTo operate on the underlying file data you need to either get\nstreams using [openInputStream] and [openOutputStream] or open the\nfile for random access operations using [open].\n","id":"File","line":"26"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"FileMode","children":[{"isStatic":true,"name":"READ","kind":"variable","id":"READ","line":"11"},{"isStatic":true,"name":"WRITE","kind":"variable","id":"WRITE","line":"12"},{"isStatic":true,"name":"APPEND","kind":"variable","id":"APPEND","line":"13"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"name":"_mode","kind":"variable","isPrivate":true,"id":"_mode","line":"15"},{"name":"FileMode._internal","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"_mode","kind":"param","isPrivate":true,"id":"_mode"}],"kind":"constructor","isPrivate":true,"id":"FileMode._internal1()","line":"14"}],"uri":"sdk/lib/io/file.dart","kind":"class","comment":"\nFileMode describes the modes in which a file can be opened.\n","id":"FileMode","line":"10"},{"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"DirectoryIOException","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"208"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"variable","id":"message","line":"227"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"path","kind":"variable","id":"path","line":"228"},{"isFinal":true,"ref":{"name":"OSError","refId":"dart.io/OSError"},"name":"osError","kind":"variable","id":"osError","line":"229"},{"name":"DirectoryIOException","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"message","kind":"param","id":"message"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"path","kind":"param","id":"path","line":"206"},{"ref":{"name":"OSError","refId":"dart.io/OSError"},"isOptional":true,"name":"osError","kind":"param","id":"osError","line":"207"}],"kind":"constructor","id":"DirectoryIOException3()","line":"205"}],"uri":"sdk/lib/io/directory.dart","kind":"class","id":"DirectoryIOException","line":"204"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"DirectoryLister","children":[{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onDir=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"onDir","kind":"param","id":"onDir"}],"kind":"method","comment":"\nSets the directory handler that is called for all directories\nduring listing. The directory handler is called with the full\npath of the directory.\n","id":"onDir=1()","line":"181"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onFile=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"onFile","kind":"param","id":"onFile"}],"kind":"method","comment":"\nSets the handler that is called for all files during listing. The\nfile handler is called with the full path of the file.\n","id":"onFile=1()","line":"187"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onDone=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"onDone","kind":"param","id":"onDone"}],"kind":"method","comment":"\nSet the handler that is called when a listing is done. The\nhandler is called with an indication of whether or not the\nlisting operation completed.\n","id":"onDone=1()","line":"194"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"onError=","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"onError","kind":"param","id":"onError"}],"kind":"method","comment":"\nSets the handler that is called if there is an error while\nlisting directories.\n","id":"onError=1()","line":"200"}],"uri":"sdk/lib/io/directory.dart","kind":"class","comment":"\nA [DirectoryLister] represents an actively running listing operation.\n\nA [DirectoryLister] is obtained from a [Directory] object by calling\nthe [:Directory.list:] method.\n\n    Directory dir = new Directory('path/to/my/dir');\n    DirectoryLister lister = dir.list();\n\nFor each file and directory, the file or directory handler is\ncalled. When all directories have been listed the done handler is\ncalled. If the listing operation is recursive, the error handler is\ncalled if a subdirectory cannot be opened for listing.\n","id":"DirectoryLister","line":"175"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Directory","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"name":"exists","kind":"method","comment":"\nCheck whether a directory with this name already exists. Returns\na [:Future<bool>:] that completes with the result.\n","id":"exists0()","line":"35"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"existsSync","kind":"method","comment":"\nSynchronously check whether a directory with this name already exists.\n","id":"existsSync0()","line":"40"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Directory","refId":"dart.io/Directory"}]},"name":"create","children":[{"isOptional":true,"name":"recursive","kind":"param","id":"recursive"}],"kind":"method","comment":"\nCreates the directory with this name.\n\nIf [recursive] is false, only the last directory in the path is\ncreated. If [recursive] is true, all non-existing path components\nare created. If the directory already exists nothing is done.\n\nReturns a [:Future<Directory>:] that completes with this\ndirectory once it has been created. If the directory cannot be\ncreated the future completes with an exception.\n","id":"create1()","line":"53"},{"returnType":{"name":"void","refId":"void"},"name":"createSync","children":[{"isOptional":true,"name":"recursive","kind":"param","id":"recursive"}],"kind":"method","comment":"\nSynchronously creates the directory with this name.\n\nIf [recursive] is false, only the last directory in the path is\ncreated. If [recursive] is true, all non-existing path components\nare created. If the directory already exists nothing is done.\n\nIf the directory cannot be created an exception is thrown.\n","id":"createSync1()","line":"64"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Directory","refId":"dart.io/Directory"}]},"name":"createTemp","kind":"method","comment":"\nCreates a temporary directory with a name based on the current\npath.  This name and path is used as a template, and additional\ncharacters are appended to it by the call to make a unique\ndirectory name.  If the path is the empty string, a default\nsystem temp directory and name are used for the template.\n\nReturns a [:Future<Directory>:] that completes with the newly\ncreated temporary directory.\n","id":"createTemp0()","line":"76"},{"returnType":{"name":"Directory","refId":"dart.io/Directory"},"name":"createTempSync","kind":"method","comment":"\nSynchronously creates a temporary directory with a name based on the\ncurrent path. This name and path is used as a template, and additional\ncharacters are appended to it by the call to make a unique directory name.\nIf the path is the empty string, a default system temp directory and name\nare used for the template. Returns the newly created temporary directory.\n","id":"createTempSync0()","line":"85"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Directory","refId":"dart.io/Directory"}]},"name":"delete","children":[{"isOptional":true,"name":"recursive","kind":"param","id":"recursive"}],"kind":"method","comment":"\nDeletes the directory with this name.\n\nIf [recursive] is false, the directory must be empty.\n\nIf [recursive] is true, this directory and all sub-directories\nand files in the directories are deleted.\n\nReturns a [:Future<Directory>:] that completes with this\ndirectory when the deletion is done. If the directory cannot be\ndeleted, the future completes with an exception.\n","id":"delete1()","line":"99"},{"returnType":{"name":"void","refId":"void"},"name":"deleteSync","children":[{"isOptional":true,"name":"recursive","kind":"param","id":"recursive"}],"kind":"method","comment":"\nSynchronously deletes the directory with this name.\n\nIf [recursive] is false, the directory must be empty.\n\nIf [recursive] is true, this directory and all sub-directories\nand files in the directories are deleted.\n\nThrows an exception if the directory cannot be deleted.\n","id":"deleteSync1()","line":"111"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Directory","refId":"dart.io/Directory"}]},"name":"rename","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"newPath","kind":"param","id":"newPath"}],"kind":"method","comment":"\nRename this directory. Returns a [:Future<Directory>:] that completes\nwith a [Directory] instance for the renamed directory.\n\nIf newPath identifies an existing directory, that directory is\nreplaced. If newPath identifies an existing file the operation\nfails and the future completes with an exception.\n","id":"rename1()","line":"121"},{"returnType":{"name":"Directory","refId":"dart.io/Directory"},"name":"renameSync","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"newPath","kind":"param","id":"newPath"}],"kind":"method","comment":"\nSynchronously rename this directory. Returns a [Directory]\ninstance for the renamed directory.\n\nIf newPath identifies an existing directory, that directory is\nreplaced. If newPath identifies an existing file the operation\nfails and an exception is thrown.\n","id":"renameSync1()","line":"131"},{"returnType":{"name":"DirectoryLister","refId":"dart.io/DirectoryLister"},"name":"list","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"recursive","kind":"param","id":"recursive"}],"kind":"method","comment":"\nList the sub-directories and files of this\n[Directory]. Optionally recurse into sub-directories. Returns a\n[DirectoryLister] object representing the active listing\noperation. Handlers for files and directories should be\nregistered on this DirectoryLister object.\n","id":"list1()","line":"140"},{"returnType":{"name":"List","refId":"dart.core/List"},"name":"listSync","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"recursive","kind":"param","id":"recursive"}],"kind":"method","comment":"\nList the sub-directories and files of this\n[Directory]. Optionally recurse into sub-directories. Returns a\nList containing Directory and File objects.\n","id":"listSync1()","line":"147"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","comment":"\nReturns a human readable string for this Directory instance.\n","id":"toString0()","line":"152"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"path","kind":"variable","id":"path","line":"157"},{"name":"Directory","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"path","kind":"param","id":"path"}],"kind":"constructor","comment":"\nCreates a directory object. The path is either an absolute path,\nor it is a relative path which is interpreted relative to the directory\nin which the Dart VM was started.\n","id":"Directory1()","line":"16"},{"name":"Directory.fromPath","children":[{"ref":{"name":"Path","refId":"dart.io/Path"},"name":"path","kind":"param","id":"path"}],"kind":"constructor","comment":"\nCreates a directory object from a Path object. The path is either\nan absolute path, or it is a relative path which is interpreted\nrelative to the directory in which the Dart VM was started.\n","id":"Directory.fromPath1()","line":"23"},{"name":"Directory.current","kind":"constructor","comment":"\nCreates a directory object pointing to the current working\ndirectory.\n","id":"Directory.current0()","line":"29"}],"uri":"sdk/lib/io/directory.dart","kind":"class","comment":"\n[Directory] objects are used for working with directories.\n","id":"Directory","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"OSError","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","comment":"Converts an OSError object to a string representation. ","id":"toString0()","line":"29"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"noErrorCode","kind":"variable","id":"noErrorCode","line":"23"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"variable","id":"message","line":"50"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"name":"errorCode","kind":"variable","id":"errorCode","line":"56"},{"name":"OSError","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"message","kind":"param","id":"message"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"errorCode","kind":"param","id":"errorCode"}],"kind":"constructor","comment":"Creates an OSError object from a message and an errorCode. ","id":"OSError2()","line":"26"}],"uri":"sdk/lib/io/common.dart","kind":"class","comment":"\nAn [OSError] object holds information about an error from the\noperating system.\n","id":"OSError","line":"21"}],"uri":"sdk/lib/io/io.dart","kind":"library","comment":"\nThe IO library is used for Dart server applications,\nwhich run on a stand-alone Dart VM from the command line.\n*This library does not work in browser based applications.*\n\nThis library allows you to work with files, directories,\nsockets, processes, HTTP servers and clients, and more.\n","id":"dart.io","line":"13"}