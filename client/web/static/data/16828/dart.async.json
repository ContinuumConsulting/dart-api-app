{"name":"dart.async","children":[{"returnType":{"name":"void","refId":"void"},"name":"_nullDoneHandler","uri":"sdk/lib/async/stream_impl.dart","kind":"method","isPrivate":true,"comment":"Default done handler, does nothing. ","id":"_nullDoneHandler0()","line":"727"},{"returnType":{"name":"void","refId":"void"},"name":"_nullErrorHandler","children":[{"ref":{"name":"AsyncError","refId":"dart.async/AsyncError"},"name":"error","kind":"param","id":"error"}],"uri":"sdk/lib/async/stream_impl.dart","kind":"method","isPrivate":true,"comment":"Default error handler, reports the error to the global handler. ","id":"_nullErrorHandler1()","line":"722"},{"returnType":{"name":"void","refId":"void"},"name":"_nullDataHandler","children":[{"name":"value","kind":"param","id":"value"}],"uri":"sdk/lib/async/stream_impl.dart","kind":"method","isPrivate":true,"comment":"Default data handler, does nothing. ","id":"_nullDataHandler1()","line":"719"},{"name":"deprecatedFutureValue","children":[{"ref":{"name":"_FutureImpl","refId":"dart.async/_FutureImpl"},"name":"future","kind":"param","id":"future"}],"uri":"sdk/lib/async/future_impl.dart","kind":"method","id":"deprecatedFutureValue1()","line":"7"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_LISTENER_PAUSE_COUNT_SHIFT","uri":"sdk/lib/async/stream_impl.dart","kind":"variable","isPrivate":true,"id":"_LISTENER_PAUSE_COUNT_SHIFT","line":"42"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_LISTENER_EVENT_ID_SHIFT","uri":"sdk/lib/async/stream_impl.dart","kind":"variable","isPrivate":true,"id":"_LISTENER_EVENT_ID_SHIFT","line":"39"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_LISTENER_EVENT_ID","uri":"sdk/lib/async/stream_impl.dart","kind":"variable","isPrivate":true,"id":"_LISTENER_EVENT_ID","line":"38"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_LISTENER_PENDING_UNSUBSCRIBE","uri":"sdk/lib/async/stream_impl.dart","kind":"variable","isPrivate":true,"id":"_LISTENER_PENDING_UNSUBSCRIBE","line":"36"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_LISTENER_SUBSCRIBED","uri":"sdk/lib/async/stream_impl.dart","kind":"variable","isPrivate":true,"id":"_LISTENER_SUBSCRIBED","line":"33"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_LISTENER_UNSUBSCRIBED","uri":"sdk/lib/async/stream_impl.dart","kind":"variable","isPrivate":true,"id":"_LISTENER_UNSUBSCRIBED","line":"31"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_STREAM_PAUSE_COUNT_SHIFT","uri":"sdk/lib/async/stream_impl.dart","kind":"variable","isPrivate":true,"id":"_STREAM_PAUSE_COUNT_SHIFT","line":"26"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_STREAM_FIRING","uri":"sdk/lib/async/stream_impl.dart","kind":"variable","isPrivate":true,"id":"_STREAM_FIRING","line":"23"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_STREAM_EVENT_ID_SHIFT","uri":"sdk/lib/async/stream_impl.dart","kind":"variable","isPrivate":true,"id":"_STREAM_EVENT_ID_SHIFT","line":"21"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_STREAM_EVENT_ID","uri":"sdk/lib/async/stream_impl.dart","kind":"variable","isPrivate":true,"id":"_STREAM_EVENT_ID","line":"20"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_STREAM_COMPLETE","uri":"sdk/lib/async/stream_impl.dart","kind":"variable","isPrivate":true,"id":"_STREAM_COMPLETE","line":"17"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_STREAM_CLOSED","uri":"sdk/lib/async/stream_impl.dart","kind":"variable","isPrivate":true,"id":"_STREAM_CLOSED","line":"13"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_STREAM_OPEN","uri":"sdk/lib/async/stream_impl.dart","kind":"variable","isPrivate":true,"id":"_STREAM_OPEN","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Timer","children":[{"returnType":{"name":"void","refId":"void"},"name":"cancel","kind":"method","comment":"\nCancels the timer.\n","id":"cancel0()","line":"24"},{"name":"Timer","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"milliseconds","kind":"param","id":"milliseconds"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback"}],"kind":"constructor","comment":"\nCreates a new timer. The [callback] callback is invoked after\n[milliseconds] milliseconds.\n","id":"Timer2()","line":"12"},{"name":"Timer.repeating","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"milliseconds","kind":"param","id":"milliseconds"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"callback","kind":"param","id":"callback","line":"19"}],"kind":"constructor","comment":"\nCreates a new repeating timer. The [callback] is invoked every\n[milliseconds] millisecond until cancelled.\n","id":"Timer.repeating2()","line":"18"}],"uri":"sdk/lib/async/timer.dart","kind":"class","id":"Timer","line":"7"},{"superclass":{"name":"_StringEncoder","refId":"dart.async/_StringEncoder"},"name":"Utf8EncoderTransformer","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"_processString","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"string","kind":"param","id":"string"}],"kind":"method","isPrivate":true,"id":"_processString1()","line":"94"}],"uri":"sdk/lib/async/string_transform.dart","kind":"class","comment":"\nStringTransformer class that utf8 encodes a string.\n","id":"Utf8EncoderTransformer","line":"93"},{"superclass":{"name":"_StringDecoder","refId":"dart.async/_StringDecoder"},"name":"Utf8DecoderTransformer","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"_processByte","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byte","kind":"param","id":"byte"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"getNext","kind":"param","id":"getNext"}],"kind":"method","isPrivate":true,"id":"_processByte2()","line":"56"}],"uri":"sdk/lib/async/string_transform.dart","kind":"class","comment":"\nStringTransformer class that decodes a utf8 encoded bytes.\n","id":"Utf8DecoderTransformer","line":"55"},{"superclass":{"name":"_ForwardingStream","refId":"dart.async/_ForwardingStream","arguments":[{"name":"T","refId":"dart.async/DistinctStream/T"},{"name":"T","refId":"dart.async/DistinctStream/T"}]},"name":"DistinctStream","children":[{"returnType":{"name":"void","refId":"void"},"name":"_handleData","children":[{"ref":{"name":"T","refId":"dart.async/DistinctStream/T"},"name":"inputEvent","kind":"param","id":"inputEvent"}],"kind":"method","isPrivate":true,"id":"_handleData1()","line":"438"},{"isStatic":true,"name":"_SENTINEL","kind":"variable","isPrivate":true,"id":"_SENTINEL","line":"430"},{"ref":{"name":"_Equality","refId":"dart.async/_Equality"},"name":"_equals","kind":"variable","isPrivate":true,"id":"_equals","line":"432"},{"name":"_previous","kind":"variable","isPrivate":true,"id":"_previous","line":"433"},{"name":"DistinctStream","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"equals","kind":"param","id":"equals"}],"kind":"constructor","id":"DistinctStream1()","line":"435"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/stream_pipe.dart","kind":"class","id":"DistinctStream","line":"429"},{"superclass":{"name":"_ForwardingStream","refId":"dart.async/_ForwardingStream","arguments":[{"name":"T","refId":"dart.async/SkipWhileStream/T"},{"name":"T","refId":"dart.async/SkipWhileStream/T"}]},"name":"SkipWhileStream","children":[{"returnType":{"name":"void","refId":"void"},"name":"_handleData","children":[{"ref":{"name":"T","refId":"dart.async/SkipWhileStream/T"},"name":"inputEvent","kind":"param","id":"inputEvent"}],"kind":"method","isPrivate":true,"id":"_handleData1()","line":"407"},{"isFinal":true,"ref":{"name":"_Predicate","refId":"dart.async/_Predicate"},"name":"_test","kind":"variable","isPrivate":true,"id":"_test","line":"401"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"_hasFailed","kind":"variable","isPrivate":true,"id":"_hasFailed","line":"402"},{"name":"SkipWhileStream","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","kind":"param","id":"test"}],"kind":"constructor","id":"SkipWhileStream1()","line":"404"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/stream_pipe.dart","kind":"class","id":"SkipWhileStream","line":"400"},{"superclass":{"name":"_ForwardingStream","refId":"dart.async/_ForwardingStream","arguments":[{"name":"T","refId":"dart.async/SkipStream/T"},{"name":"T","refId":"dart.async/SkipStream/T"}]},"name":"SkipStream","children":[{"returnType":{"name":"void","refId":"void"},"name":"_handleData","children":[{"ref":{"name":"T","refId":"dart.async/SkipStream/T"},"name":"inputEvent","kind":"param","id":"inputEvent"}],"kind":"method","isPrivate":true,"id":"_handleData1()","line":"391"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_remaining","kind":"variable","isPrivate":true,"id":"_remaining","line":"384"},{"name":"SkipStream","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"count","kind":"param","id":"count"}],"kind":"constructor","id":"SkipStream1()","line":"386"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/stream_pipe.dart","kind":"class","id":"SkipStream","line":"383"},{"superclass":{"name":"_ForwardingStream","refId":"dart.async/_ForwardingStream","arguments":[{"name":"T","refId":"dart.async/TakeWhileStream/T"},{"name":"T","refId":"dart.async/TakeWhileStream/T"}]},"name":"TakeWhileStream","children":[{"returnType":{"name":"void","refId":"void"},"name":"_handleData","children":[{"ref":{"name":"T","refId":"dart.async/TakeWhileStream/T"},"name":"inputEvent","kind":"param","id":"inputEvent"}],"kind":"method","isPrivate":true,"id":"_handleData1()","line":"365"},{"isFinal":true,"ref":{"name":"_Predicate","refId":"dart.async/_Predicate"},"name":"_test","kind":"variable","isPrivate":true,"id":"_test","line":"360"},{"name":"TakeWhileStream","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","kind":"param","id":"test"}],"kind":"constructor","id":"TakeWhileStream1()","line":"362"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/stream_pipe.dart","kind":"class","id":"TakeWhileStream","line":"359"},{"superclass":{"name":"_ForwardingStream","refId":"dart.async/_ForwardingStream","arguments":[{"name":"T","refId":"dart.async/TakeStream/T"},{"name":"T","refId":"dart.async/TakeStream/T"}]},"name":"TakeStream","children":[{"returnType":{"name":"void","refId":"void"},"name":"_handleData","children":[{"ref":{"name":"T","refId":"dart.async/TakeStream/T"},"name":"inputEvent","kind":"param","id":"inputEvent"}],"kind":"method","isPrivate":true,"id":"_handleData1()","line":"345"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_remaining","kind":"variable","isPrivate":true,"id":"_remaining","line":"338"},{"name":"TakeStream","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"count","kind":"param","id":"count"}],"kind":"constructor","id":"TakeStream1()","line":"340"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/stream_pipe.dart","kind":"class","id":"TakeStream","line":"337"},{"superclass":{"name":"_ForwardingStream","refId":"dart.async/_ForwardingStream","arguments":[{"name":"S","refId":"dart.async/TransformStream/S"},{"name":"T","refId":"dart.async/TransformStream/T"}]},"name":"TransformStream","children":[{"returnType":{"name":"void","refId":"void"},"name":"_handleData","children":[{"ref":{"name":"S","refId":"dart.async/TransformStream/S"},"name":"data","kind":"param","id":"data"}],"kind":"method","isPrivate":true,"id":"_handleData1()","line":"281"},{"returnType":{"name":"void","refId":"void"},"name":"_handleError","children":[{"ref":{"name":"AsyncError","refId":"dart.async/AsyncError"},"name":"error","kind":"param","id":"error"}],"kind":"method","isPrivate":true,"id":"_handleError1()","line":"289"},{"returnType":{"name":"void","refId":"void"},"name":"_handleDone","kind":"method","isPrivate":true,"id":"_handleDone0()","line":"297"},{"isFinal":true,"ref":{"name":"StreamTransformer","refId":"dart.async/StreamTransformer","arguments":[{"name":"S","refId":"dart.async/TransformStream/S"},{"name":"T","refId":"dart.async/TransformStream/T"}]},"name":"_transform","kind":"variable","isPrivate":true,"id":"_transform","line":"272"},{"ref":{"name":"StreamSink","refId":"dart.async/StreamSink","arguments":[{"name":"T","refId":"dart.async/TransformStream/T"}]},"name":"_sink","kind":"variable","isPrivate":true,"id":"_sink","line":"273"},{"name":"TransformStream","children":[{"ref":{"name":"StreamTransformer","refId":"dart.async/StreamTransformer","arguments":[{"name":"S","refId":"dart.async/TransformStream/S"},{"name":"T","refId":"dart.async/TransformStream/T"}]},"name":"transform","kind":"param","id":"transform"}],"kind":"constructor","id":"TransformStream1()","line":"275"},{"name":"S","kind":"typeparam","id":"S"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/stream_pipe.dart","kind":"class","comment":"\nA stream pipe that intercepts all events and can generate any event as\noutput.\n\nEach incoming event on this [StreamSink] is passed to the corresponding\nmethod on [transform], along with a [StreamSink] linked to the [output] of\nthis pipe.\nThe handler can then decide which events to send to the output\n","id":"TransformStream","line":"271"},{"superclass":{"name":"_ForwardingStream","refId":"dart.async/_ForwardingStream","arguments":[{"name":"S","refId":"dart.async/PipeStream/S"},{"name":"T","refId":"dart.async/PipeStream/T"}]},"name":"PipeStream","children":[{"returnType":{"name":"void","refId":"void"},"name":"_handleData","children":[{"ref":{"name":"S","refId":"dart.async/PipeStream/S"},"name":"data","kind":"param","id":"data"}],"kind":"method","isPrivate":true,"id":"_handleData1()","line":"215"},{"returnType":{"name":"void","refId":"void"},"name":"_handleError","children":[{"ref":{"name":"AsyncError","refId":"dart.async/AsyncError"},"name":"error","kind":"param","id":"error"}],"kind":"method","isPrivate":true,"id":"_handleError1()","line":"223"},{"returnType":{"name":"void","refId":"void"},"name":"_handleDone","kind":"method","isPrivate":true,"id":"_handleDone0()","line":"231"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"_defaultHandleData","children":[{"name":"data","kind":"param","id":"data"},{"ref":{"name":"StreamSink","refId":"dart.async/StreamSink"},"name":"sink","kind":"param","id":"sink"}],"kind":"method","isPrivate":true,"comment":"Default data handler forwards all data. ","id":"_defaultHandleData2()","line":"240"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"_defaultHandleError","children":[{"ref":{"name":"AsyncError","refId":"dart.async/AsyncError"},"name":"error","kind":"param","id":"error"},{"ref":{"name":"StreamSink","refId":"dart.async/StreamSink"},"name":"sink","kind":"param","id":"sink"}],"kind":"method","isPrivate":true,"comment":"Default error handler forwards all errors. ","id":"_defaultHandleError2()","line":"244"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"_defaultHandleDone","children":[{"ref":{"name":"StreamSink","refId":"dart.async/StreamSink"},"name":"sink","kind":"param","id":"sink"}],"kind":"method","isPrivate":true,"comment":"Default done handler forwards done. ","id":"_defaultHandleDone1()","line":"248"},{"isFinal":true,"ref":{"name":"_TransformDataHandler","refId":"dart.async/_TransformDataHandler"},"name":"_onData","kind":"variable","isPrivate":true,"id":"_onData","line":"200"},{"isFinal":true,"ref":{"name":"_TransformErrorHandler","refId":"dart.async/_TransformErrorHandler"},"name":"_onError","kind":"variable","isPrivate":true,"id":"_onError","line":"201"},{"isFinal":true,"ref":{"name":"_TransformDoneHandler","refId":"dart.async/_TransformDoneHandler"},"name":"_onDone","kind":"variable","isPrivate":true,"id":"_onDone","line":"202"},{"ref":{"name":"StreamSink","refId":"dart.async/StreamSink","arguments":[{"name":"T","refId":"dart.async/PipeStream/T"}]},"name":"_sink","kind":"variable","isPrivate":true,"id":"_sink","line":"203"},{"name":"PipeStream","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"onData","kind":"param","id":"onData"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"onError","kind":"param","id":"onError","line":"206"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"onDone","kind":"param","id":"onDone","line":"207"}],"kind":"constructor","id":"PipeStream3()","line":"205"},{"name":"S","kind":"typeparam","id":"S"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/stream_pipe.dart","kind":"class","comment":"\nA stream pipe that intercepts all events and can generate any event as\noutput.\n\nEach incoming event on this [StreamSink] is passed to the corresponding\nprovided event handler, along with a [StreamSink] linked to the [output] of\nthis pipe.\nThe handler can then decide which events to send to the output\n","id":"PipeStream","line":"199"},{"superclass":{"name":"_ForwardingStream","refId":"dart.async/_ForwardingStream","arguments":[{"name":"T","refId":"dart.async/HandleErrorStream/T"},{"name":"T","refId":"dart.async/HandleErrorStream/T"}]},"name":"HandleErrorStream","children":[{"returnType":{"name":"void","refId":"void"},"name":"_handleError","children":[{"ref":{"name":"AsyncError","refId":"dart.async/AsyncError"},"name":"error","kind":"param","id":"error"}],"kind":"method","isPrivate":true,"id":"_handleError1()","line":"174"},{"isFinal":true,"ref":{"name":"_ErrorTransformation","refId":"dart.async/_ErrorTransformation"},"name":"_transform","kind":"variable","isPrivate":true,"id":"_transform","line":"169"},{"name":"HandleErrorStream","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"transform","kind":"param","id":"transform"}],"kind":"constructor","id":"HandleErrorStream1()","line":"171"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/stream_pipe.dart","kind":"class","comment":"\nA stream pipe that converts or disposes error events\nbefore passing them on.\n","id":"HandleErrorStream","line":"168"},{"superclass":{"name":"_ForwardingStream","refId":"dart.async/_ForwardingStream","arguments":[{"name":"S","refId":"dart.async/ExpandStream/S"},{"name":"T","refId":"dart.async/ExpandStream/T"}]},"name":"ExpandStream","children":[{"returnType":{"name":"void","refId":"void"},"name":"_handleData","children":[{"ref":{"name":"S","refId":"dart.async/ExpandStream/S"},"name":"inputEvent","kind":"param","id":"inputEvent"}],"kind":"method","isPrivate":true,"id":"_handleData1()","line":"148"},{"isFinal":true,"ref":{"name":"_Transformation","refId":"dart.async/_Transformation"},"name":"_expand","kind":"variable","isPrivate":true,"id":"_expand","line":"143"},{"name":"ExpandStream","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"expand","kind":"param","id":"expand"}],"kind":"constructor","id":"ExpandStream1()","line":"145"},{"name":"S","kind":"typeparam","id":"S"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/stream_pipe.dart","kind":"class","comment":"\nA stream pipe that converts data events before passing them on.\n","id":"ExpandStream","line":"142"},{"superclass":{"name":"_ForwardingStream","refId":"dart.async/_ForwardingStream","arguments":[{"name":"S","refId":"dart.async/MapStream/S"},{"name":"T","refId":"dart.async/MapStream/T"}]},"name":"MapStream","children":[{"returnType":{"name":"void","refId":"void"},"name":"_handleData","children":[{"ref":{"name":"S","refId":"dart.async/MapStream/S"},"name":"inputEvent","kind":"param","id":"inputEvent"}],"kind":"method","isPrivate":true,"id":"_handleData1()","line":"127"},{"isFinal":true,"ref":{"name":"_Transformation","refId":"dart.async/_Transformation"},"name":"_transform","kind":"variable","isPrivate":true,"id":"_transform","line":"122"},{"name":"MapStream","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"transform","kind":"param","id":"transform"}],"kind":"constructor","id":"MapStream1()","line":"124"},{"name":"S","kind":"typeparam","id":"S"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/stream_pipe.dart","kind":"class","comment":"\nA stream pipe that converts data events before passing them on.\n","id":"MapStream","line":"121"},{"superclass":{"name":"_ForwardingStream","refId":"dart.async/_ForwardingStream","arguments":[{"name":"T","refId":"dart.async/WhereStream/T"},{"name":"T","refId":"dart.async/WhereStream/T"}]},"name":"WhereStream","children":[{"returnType":{"name":"void","refId":"void"},"name":"_handleData","children":[{"ref":{"name":"T","refId":"dart.async/WhereStream/T"},"name":"inputEvent","kind":"param","id":"inputEvent"}],"kind":"method","isPrivate":true,"id":"_handleData1()","line":"101"},{"isFinal":true,"ref":{"name":"_Predicate","refId":"dart.async/_Predicate"},"name":"_test","kind":"variable","isPrivate":true,"id":"_test","line":"96"},{"name":"WhereStream","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","kind":"param","id":"test"}],"kind":"constructor","id":"WhereStream1()","line":"98"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/stream_pipe.dart","kind":"class","id":"WhereStream","line":"95"},{"interfaces":[{"name":"StreamSink","refId":"dart.async/StreamSink","arguments":[{"name":"T","refId":"dart.async/StreamController/T"}]}],"superclass":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/StreamController/T"}]},"name":"StreamController","children":[{"returnType":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription"},"name":"listen","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"onData","kind":"param","id":"onData"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"onError","kind":"param","id":"onError","line":"60"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"onDone","kind":"param","id":"onDone","line":"61"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"unsubscribeOnError","kind":"param","id":"unsubscribeOnError","line":"62"}],"kind":"method","id":"listen4()","line":"59"},{"returnType":{"name":"void","refId":"void"},"name":"add","children":[{"ref":{"name":"T","refId":"dart.async/StreamController/T"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nSend or queue a data event.\n","id":"add1()","line":"83"},{"returnType":{"name":"void","refId":"void"},"name":"signalError","children":[{"ref":{"name":"AsyncError","refId":"dart.async/AsyncError"},"name":"error","kind":"param","id":"error"}],"kind":"method","comment":"\nSend or enqueue an error event.\n\nIf a subscription has requested to be unsubscribed on errors,\nit will be unsubscribed after receiving this event.\n","id":"signalError1()","line":"91"},{"returnType":{"name":"void","refId":"void"},"name":"close","kind":"method","comment":"\nSend or enqueue a \"done\" message.\n\nThe \"done\" message should be sent at most once by a stream, and it\nshould be the last message sent.\n","id":"close0()","line":"99"},{"returnType":{"name":"void","refId":"void"},"name":"onPauseStateChange","kind":"method","comment":"\nCalled when the first subscriber requests a pause or the last a resume.\n\nRead [isPaused] to see the new state.\n","id":"onPauseStateChange0()","line":"106"},{"returnType":{"name":"void","refId":"void"},"name":"onSubscriptionStateChange","kind":"method","comment":"\nCalled when the first listener subscribes or the last unsubscribes.\n\nRead [hasSubscribers] to see what the new state is.\n","id":"onSubscriptionStateChange0()","line":"113"},{"returnType":{"name":"void","refId":"void"},"name":"forEachSubscriber","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"action","kind":"param","id":"action"}],"kind":"method","id":"forEachSubscriber1()","line":"115"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/StreamController/T"}]},"name":"stream","kind":"property","id":"stream","line":"40"},{"ref":{"name":"StreamSink","refId":"dart.async/StreamSink","arguments":[{"name":"T","refId":"dart.async/StreamController/T"}]},"name":"sink","kind":"property","comment":"\nReturns a view of this object that only exposes the [StreamSink] interface.\n","id":"sink","line":"72"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isPaused","kind":"property","comment":"Whether one or more active subscribers have requested a pause. ","id":"isPaused","line":"75"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"hasSubscribers","kind":"property","comment":"Whether there are currently any subscribers on this [Stream]. ","id":"hasSubscribers","line":"78"},{"ref":{"name":"_StreamImpl","refId":"dart.async/_StreamImpl","arguments":[{"name":"T","refId":"dart.async/StreamController/T"}]},"name":"_stream","kind":"variable","isPrivate":true,"id":"_stream","line":"39"},{"name":"StreamController","kind":"constructor","comment":"\nA controller with a [stream] that supports multiple subscribers.\n","id":"StreamController0()","line":"45"},{"name":"StreamController.singleSubscription","kind":"constructor","comment":"\nA controller with a [stream] that supports only one single subscriber.\nThe controller will buffer all incoming events until the subscriber is\nregistered.\n","id":"StreamController.singleSubscription0()","line":"54"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/stream_controller.dart","kind":"class","comment":"\nA controller and the stream it controls.\n\nThis controller allows sending data, error and done events on\nits [stream].\nThis class can be used to create a simple stream that others\ncan listen on, and to push events to that stream.\nFor more specialized streams, the [createStream] method can be\noverridden to return a specialization of [ControllerStream], and\nother public methods can be overridden too (but it's recommended\nthat the overriding method calls its super method).\n\nA [StreamController] may have zero or more subscribers.\n\nIf it has subscribers, it may also be paused by any number of its\nsubscribers. When paused, all incoming events are queued. It is the\nresponsibility of the user of this stream to prevent incoming events when\nthe controller is paused. When there are no pausing subscriptions left,\neither due to them resuming, or due to the pausing subscriptions\nunsubscribing, events are resumed.\n\nWhen \"close\" is invoked (but not necessarily when the done event is fired,\ndepending on pause state) the stream controller is closed.\nWhen the done event is fired to a subscriber, the subscriber is automatically\nunsubscribed.\n","id":"StreamController","line":"38"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"StreamTransformer","children":[{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"name":"bind","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"S","refId":"dart.async/StreamTransformer/S"}]},"name":"stream","kind":"param","id":"stream"}],"kind":"method","id":"bind1()","line":"804"},{"name":"StreamTransformer.from","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"onData","kind":"param","id":"onData","line":"800"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"onError","kind":"param","id":"onError","line":"801"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"onDone","kind":"param","id":"onDone","line":"802"}],"kind":"constructor","comment":"\nCreate a [StreamTransformer] that delegates events to the given functions.\n\nIf a parameter is omitted, a default handler is used that forwards the\nevent directly to the sink.\n\nPauses on the are forwarded to the input stream as well.\n","id":"StreamTransformer.from3()","line":"799"},{"name":"S","kind":"typeparam","id":"S"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/stream.dart","kind":"class","comment":"\nThe target of a [Stream.transform] call.\n\nThe [Stream.transform] call will pass itself to this object and then return\nthe resulting stream.\n","id":"StreamTransformer","line":"790"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"StreamConsumer","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/StreamConsumer/T"}]},"name":"consume","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"S","refId":"dart.async/StreamConsumer/S"}]},"name":"stream","kind":"param","id":"stream"}],"kind":"method","id":"consume1()","line":"781"},{"name":"S","kind":"typeparam","id":"S"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/stream.dart","kind":"class","comment":"\nThe target of a [Stream.pipe] call.\n\nThe [Stream.pipe] call will pass itself to this object, and then return\nthe resulting [Future]. The pipe should complete the future when it's\ndone.\n","id":"StreamConsumer","line":"780"},{"interfaces":[{"name":"StreamSink","refId":"dart.async/StreamSink","arguments":[{"name":"T","refId":"dart.async/StreamSinkView/T"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"StreamSinkView","children":[{"returnType":{"name":"void","refId":"void"},"name":"add","children":[{"ref":{"name":"T","refId":"dart.async/StreamSinkView/T"},"name":"value","kind":"param","id":"value"}],"kind":"method","id":"add1()","line":"767"},{"returnType":{"name":"void","refId":"void"},"name":"signalError","children":[{"ref":{"name":"AsyncError","refId":"dart.async/AsyncError"},"name":"error","kind":"param","id":"error"}],"kind":"method","id":"signalError1()","line":"768"},{"returnType":{"name":"void","refId":"void"},"name":"close","kind":"method","id":"close0()","line":"769"},{"isFinal":true,"ref":{"name":"StreamSink","refId":"dart.async/StreamSink","arguments":[{"name":"T","refId":"dart.async/StreamSinkView/T"}]},"name":"_sink","kind":"variable","isPrivate":true,"id":"_sink","line":"763"},{"name":"StreamSinkView","children":[{"ref":{"name":"StreamSink","refId":"dart.async/StreamSink","arguments":[{"name":"T","refId":"dart.async/StreamSinkView/T"}]},"name":"_sink","kind":"param","isPrivate":true,"id":"_sink"}],"kind":"constructor","id":"StreamSinkView1()","line":"765"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/stream.dart","kind":"class","comment":"\n[StreamSink] wrapper that only exposes the [StreamSink] interface.\n","id":"StreamSinkView","line":"762"},{"superclass":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/StreamView/T"}]},"name":"StreamView","children":[{"returnType":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription","arguments":[{"name":"T","refId":"dart.async/StreamView/T"}]},"name":"listen","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"onData","kind":"param","id":"onData"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"onError","kind":"param","id":"onError","line":"751"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"onDone","kind":"param","id":"onDone","line":"752"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"unsubscribeOnError","kind":"param","id":"unsubscribeOnError","line":"753"}],"kind":"method","id":"listen4()","line":"750"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/StreamView/T"}]},"name":"_stream","kind":"variable","isPrivate":true,"id":"_stream","line":"746"},{"name":"StreamView","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/StreamView/T"}]},"name":"_stream","kind":"param","isPrivate":true,"id":"_stream"}],"kind":"constructor","id":"StreamView1()","line":"748"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/stream.dart","kind":"class","comment":"[Stream] wrapper that only exposes the [Stream] interface. ","id":"StreamView","line":"745"},{"interfaces":[{"name":"Sink","refId":"dart.core/Sink","arguments":[{"name":"T","refId":"dart.async/StreamSink/T"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"StreamSink","children":[{"returnType":{"name":"void","refId":"void"},"name":"add","children":[{"ref":{"name":"T","refId":"dart.async/StreamSink/T"},"name":"event","kind":"param","id":"event"}],"kind":"method","id":"add1()","line":"738"},{"returnType":{"name":"void","refId":"void"},"name":"signalError","children":[{"ref":{"name":"AsyncError","refId":"dart.async/AsyncError"},"name":"errorEvent","kind":"param","id":"errorEvent"}],"kind":"method","comment":"Signal an async error to the receivers of this sink's values. ","id":"signalError1()","line":"740"},{"returnType":{"name":"void","refId":"void"},"name":"close","kind":"method","id":"close0()","line":"741"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/stream.dart","kind":"class","comment":"\nAn interface that abstracts sending events into a [Stream].\n","id":"StreamSink","line":"737"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"StreamSubscription","children":[{"returnType":{"name":"void","refId":"void"},"name":"cancel","kind":"method","comment":"\nCancels this subscription. It will no longer receive events.\n\nIf an event is currently firing, this unsubscription will only\ntake effect after all subscribers have received the current event.\n","id":"cancel0()","line":"704"},{"returnType":{"name":"void","refId":"void"},"name":"onData","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"handleData","kind":"param","id":"handleData"}],"kind":"method","comment":"Set or override the data event handler of this subscription. ","id":"onData1()","line":"707"},{"returnType":{"name":"void","refId":"void"},"name":"onError","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"handleError","kind":"param","id":"handleError"}],"kind":"method","comment":"Set or override the error event handler of this subscription. ","id":"onError1()","line":"710"},{"returnType":{"name":"void","refId":"void"},"name":"onDone","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"handleDone","kind":"param","id":"handleDone"}],"kind":"method","comment":"Set or override the done event handler of this subscription. ","id":"onDone1()","line":"713"},{"returnType":{"name":"void","refId":"void"},"name":"pause","children":[{"ref":{"name":"Future","refId":"dart.async/Future"},"isOptional":true,"name":"resumeSignal","kind":"param","id":"resumeSignal"}],"kind":"method","comment":"\nRequest that the stream pauses events until further notice.\n\nIf [resumeSignal] is provided, the stream will undo the pause\nwhen the future completes in any way.\nA call to [resume] will also undo a pause.\n\nIf the subscription is paused more than once, an equal number\nof resumes must be performed to resume the stream.\n","id":"pause1()","line":"725"},{"returnType":{"name":"void","refId":"void"},"name":"resume","kind":"method","comment":"\nResume after a pause.\n","id":"resume0()","line":"730"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/stream.dart","kind":"class","comment":"\nA control object for the subscription on a [Stream].\n\nWhen you subscribe on a [Stream] using [Stream.subscribe],\na [StreamSubscription] object is returned. This object\nis used to later unsubscribe again, or to temporarily pause\nthe stream's events.\n","id":"StreamSubscription","line":"697"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Stream","children":[{"returnType":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"listen","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"onData","kind":"param","id":"onData"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"onError","kind":"param","id":"onError","line":"69"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"onDone","kind":"param","id":"onDone","line":"70"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"unsubscribeOnError","kind":"param","id":"unsubscribeOnError","line":"71"}],"kind":"method","comment":"\nAdd a subscription to this stream.\n\nOn each data event from this stream, the subscribers [onData] handler\nis called. If [onData] is null, nothing happens.\n\nOn errors from this stream, the [onError] handler is given a\n[AsyncError] object describing the error.\n\nIf this stream closes, the [onDone] handler is called.\n\nIf [unsubscribeOnError] is true, the subscription is ended when\nthe first error is reported. The default is false.\n","id":"listen4()","line":"68"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"where","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","kind":"param","id":"test"}],"kind":"method","comment":"\nCreates a new stream from this stream that discards some data events.\n\nThe new stream sends the same error and done events as this stream,\nbut it only sends the data events that satisfy the [test].\n","id":"where1()","line":"79"},{"returnType":{"name":"Stream","refId":"dart.async/Stream"},"name":"mappedBy","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"convert","kind":"param","id":"convert"}],"kind":"method","comment":"\nCreate a new stream that converts each element of this stream\nto a new value using the [convert] function.\n","id":"mappedBy1()","line":"87"},{"returnType":{"name":"Stream","refId":"dart.async/Stream"},"name":"handleError","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"handle","kind":"param","id":"handle"}],"kind":"method","comment":"\nCreate a wrapper Stream that intercepts some errors from this stream.\n\nIf the handler returns null, the error is considered handled.\nOtherwise the returned [AsyncError] is passed to the subscribers\nof the stream.\n","id":"handleError1()","line":"98"},{"returnType":{"name":"Stream","refId":"dart.async/Stream"},"name":"expand","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"convert","kind":"param","id":"convert"}],"kind":"method","comment":"\nCreate a new stream from this stream that converts each element\ninto zero or more events.\n\nEach incoming event is converted to an [Iterable] of new events,\nand each of these new events are then sent by the returned stream\nin order.\n","id":"expand1()","line":"110"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"name":"pipe","children":[{"ref":{"name":"StreamConsumer","refId":"dart.async/StreamConsumer","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"streamConsumer","kind":"param","id":"streamConsumer"}],"kind":"method","comment":"\nBind this stream as the input of the provided [StreamConsumer].\n","id":"pipe1()","line":"117"},{"returnType":{"name":"Stream","refId":"dart.async/Stream"},"name":"transform","children":[{"ref":{"name":"StreamTransformer","refId":"dart.async/StreamTransformer","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"streamTransformer","kind":"param","id":"streamTransformer"}],"kind":"method","comment":"\nChain this stream as the input of the provided [StreamTransformer].\n\nReturns the result of [:streamTransformer.bind:] itself.\n","id":"transform1()","line":"126"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"name":"reduce","children":[{"name":"initialValue","kind":"param","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"combine","kind":"param","id":"combine"}],"kind":"method","comment":"Reduces a sequence of values by repeatedly applying [combine]. ","id":"reduce2()","line":"132"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"name":"pipeInto","children":[{"ref":{"name":"Sink","refId":"dart.core/Sink","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"sink","kind":"param","id":"sink"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"onError","kind":"param","id":"onError","line":"157"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"unsubscribeOnError","kind":"param","id":"unsubscribeOnError","line":"158"}],"kind":"method","id":"pipeInto3()","line":"156"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"name":"contains","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"name":"match","kind":"param","id":"match"}],"kind":"method","comment":"\nCheck whether [match] occurs in the elements provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","id":"contains1()","line":"178"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"name":"every","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","kind":"param","id":"test"}],"kind":"method","comment":"\nCheck whether [test] accepts all elements provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","id":"every1()","line":"202"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"name":"any","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","kind":"param","id":"test"}],"kind":"method","comment":"\nCheck whether [test] accepts any element provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","id":"any1()","line":"226"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"min","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"compare","kind":"param","id":"compare"}],"kind":"method","comment":"\nFinds the least element in the stream.\n\nIf the stream is empty, the result is [:null:].\nOtherwise the result is a value from the stream that is not greater\nthan any other value from the stream (according to [compare], which must\nbe a [Comparator]).\n\nIf [compare] is omitted, it defaults to [Comparable.compare].\n","id":"min1()","line":"269"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"max","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"compare","kind":"param","id":"compare"}],"kind":"method","comment":"\nFinds the least element in the stream.\n\nIf the stream is empty, the result is [:null:].\nOtherwise the result is an value from the stream that is not greater\nthan any other value from the stream (according to [compare], which must\nbe a [Comparator]).\n\nIf [compare] is omitted, it defaults to [Comparable.compare].\n","id":"max1()","line":"300"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]}]},"name":"toList","kind":"method","comment":"Collect the data of this stream in a [List]. ","id":"toList0()","line":"339"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]}]},"name":"toSet","kind":"method","comment":"Collect the data of this stream in a [Set]. ","id":"toSet0()","line":"355"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"take","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"count","kind":"param","id":"count"}],"kind":"method","comment":"\nProvide at most the first [n] values of this stream.\n\nForwards the first [n] data events of this stream, and all error\nevents, to the returned stream, and ends with a done event.\n\nIf this stream produces fewer than [count] values before it's done,\nso will the returned stream.\n","id":"take1()","line":"379"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"takeWhile","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","kind":"param","id":"test"}],"kind":"method","comment":"\nForwards data events while [test] is successful.\n\nThe returned stream provides the same events as this stream as long\nas [test] returns [:true:] for the event data. The stream is done\nwhen either this stream is done, or when this stream first provides\na value that [test] doesn't accept.\n","id":"takeWhile1()","line":"391"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"skip","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"count","kind":"param","id":"count"}],"kind":"method","comment":"\nSkips the first [count] data events from this stream.\n","id":"skip1()","line":"398"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"skipWhile","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","kind":"param","id":"test"}],"kind":"method","comment":"\nSkip data events from this stream while they are matched by [test].\n\nError and done events are provided by the returned stream unmodified.\n\nStarting with the first data event where [test] returns true for the\nevent data, the returned stream will have the same events as this stream.\n","id":"skipWhile1()","line":"410"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"distinct","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"equals","kind":"param","id":"equals"}],"kind":"method","comment":"\nSkip data events if they are equal to the previous data event.\n\nThe returned stream provides the same events as this stream, except\nthat it never provides two consequtive data events that are equal.\n\nEquality is determined by the provided [equals] method. If that is\nomitted, the '==' operator on the last provided data element is used.\n","id":"distinct1()","line":"423"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"firstMatching","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","kind":"param","id":"test"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"defaultValue","kind":"param","id":"defaultValue"}],"kind":"method","comment":"\nFind the first element of this stream matching [test].\n\nReturns a future that is filled with the first element of this stream\nthat [test] returns true for.\n\nIf no such element is found before this stream is done, and a\n[defaultValue] function is provided, the result of calling [defaultValue]\nbecomes the value of the future.\n\nIf an error occurs, or if this stream ends without finding a match and\nwith no [defaultValue] function provided, the future will receive an\nerror.\n","id":"firstMatching2()","line":"525"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"lastMatching","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","kind":"param","id":"test"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"defaultValue","kind":"param","id":"defaultValue"}],"kind":"method","comment":"\nFinds the last element in this stream matching [test].\n\nAs [firstMatching], except that the last matching element is found.\nThat means that the result cannot be provided before this stream\nis done.\n","id":"lastMatching2()","line":"570"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"singleMatching","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","kind":"param","id":"test"}],"kind":"method","comment":"\nFinds the single element in this stream matching [test].\n\nLike [lastMatch], except that it is an error if more than one\nmatching element occurs in the stream.\n","id":"singleMatching1()","line":"620"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"elementAt","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"index","kind":"param","id":"index"}],"kind":"method","comment":"\nReturns the value of the [index]th data event of this stream.\n\nIf an error event occurs, the future will end with this error.\n\nIf this stream provides fewer than [index] elements before closing,\nan error is reported.\n","id":"elementAt1()","line":"667"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"length","kind":"property","comment":"Counts the elements in the stream. ","id":"length","line":"246"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"name":"isEmpty","kind":"property","comment":"Reports whether this stream contains any elements. ","id":"isEmpty","line":"322"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"first","kind":"property","comment":"\nReturns the first element.\n\nIf [this] is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","id":"first","line":"433"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"last","kind":"property","comment":"\nReturns the last element.\n\nIf [this] is empty throws a [StateError].\n","id":"last","line":"455"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"single","kind":"property","comment":"\nReturns the single element.\n\nIf [this] is empty or has more than one element throws a [StateError].\n","id":"single","line":"482"},{"name":"Stream","kind":"constructor","id":"Stream0()","line":"12"},{"name":"Stream.fromFuture","children":[{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"name":"future","kind":"param","id":"future"}],"kind":"constructor","id":"Stream.fromFuture1()","line":"14"},{"name":"Stream.cyclic","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Stream","refId":"dart.async/Stream"}]},"name":"sources","kind":"param","id":"sources"}],"kind":"constructor","comment":"\nStream that outputs events from the [sources] in cyclic order.\n\nThe merged streams are paused and resumed in order to ensure the proper\norder of output events.\n","id":"Stream.cyclic1()","line":"33"},{"name":"Stream.superceding","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]}]},"name":"sources","kind":"param","id":"sources"}],"kind":"constructor","comment":"\nCreate a stream that forwards data from the highest priority active source.\n\nSources are provided in order of increasing priority, and only data from\nthe highest priority source stream that has provided data are output\non the created stream.\n\nErrors from the most recent active stream, and any higher priority stream,\nare forwarded to the created stream.\n\nIf a higher priority source stream completes without providing data,\nit will have no effect on lower priority streams.\n","id":"Stream.superceding1()","line":"50"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/stream.dart","kind":"class","id":"Stream","line":"11"},{"superclass":{"name":"_MultiStreamImpl","refId":"dart.async/_MultiStreamImpl","arguments":[{"name":"T","refId":"dart.async/CyclicScheduleStream/T"}]},"name":"CyclicScheduleStream","children":[{"returnType":{"name":"void","refId":"void"},"name":"_onSubscriptionStateChange","kind":"method","isPrivate":true,"id":"_onSubscriptionStateChange0()","line":"234"},{"returnType":{"name":"void","refId":"void"},"name":"_onPauseStateChange","kind":"method","isPrivate":true,"id":"_onPauseStateChange0()","line":"249"},{"returnType":{"name":"void","refId":"void"},"name":"_onData","children":[{"ref":{"name":"T","refId":"dart.async/CyclicScheduleStream/T"},"name":"data","kind":"param","id":"data"}],"kind":"method","isPrivate":true,"id":"_onData1()","line":"257"},{"returnType":{"name":"void","refId":"void"},"name":"_onDone","kind":"method","isPrivate":true,"id":"_onDone0()","line":"272"},{"ref":{"name":"_CycleEntry","refId":"dart.async/_CycleEntry"},"name":"_currentEntry","kind":"variable","isPrivate":true,"id":"_currentEntry","line":"210"},{"ref":{"name":"_CycleEntry","refId":"dart.async/_CycleEntry"},"name":"_lastEntry","kind":"variable","isPrivate":true,"id":"_lastEntry","line":"211"},{"name":"CyclicScheduleStream","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/CyclicScheduleStream/T"}]}]},"name":"sources","kind":"param","id":"sources"}],"kind":"constructor","comment":"\nCreate a [Stream] that provides data from [sources] one event at a time.\n\nThe data are provided as one event from each stream in the order they are\ngiven by the [Iterable], and then cycling as long as there are data.\n","id":"CyclicScheduleStream1()","line":"219"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/merge_stream.dart","kind":"class","comment":"\n[Stream] that schedules events from multiple sources in cyclic order.\n\nThe source streams are activated and paused so that only one data event\nis generated at a time, and those data events are output on this stream.\n\nError events from the currently active stream are forwarded without\nchanging the schedule. When a source stream ends, it is removed from\nthe schedule.\n","id":"CyclicScheduleStream","line":"209"},{"superclass":{"name":"_MultiStreamImpl","refId":"dart.async/_MultiStreamImpl","arguments":[{"name":"T","refId":"dart.async/SupercedeStream/T"}]},"name":"SupercedeStream","children":[{"returnType":{"name":"void","refId":"void"},"name":"_onSubscriptionStateChange","kind":"method","isPrivate":true,"id":"_onSubscriptionStateChange0()","line":"84"},{"returnType":{"name":"void","refId":"void"},"name":"_onPauseStateChange","kind":"method","isPrivate":true,"id":"_onPauseStateChange0()","line":"100"},{"returnType":{"name":"void","refId":"void"},"name":"_setData","children":[{"ref":{"name":"_SupercedeEntry","refId":"dart.async/_SupercedeEntry"},"name":"entry","kind":"param","id":"entry"},{"ref":{"name":"T","refId":"dart.async/SupercedeStream/T"},"name":"data","kind":"param","id":"data"}],"kind":"method","isPrivate":true,"id":"_setData2()","line":"116"},{"returnType":{"name":"void","refId":"void"},"name":"_setDone","children":[{"ref":{"name":"_SupercedeEntry","refId":"dart.async/_SupercedeEntry"},"name":"entry","kind":"param","id":"entry"}],"kind":"method","isPrivate":true,"id":"_setDone1()","line":"126"},{"ref":{"name":"_SupercedeEntry","refId":"dart.async/_SupercedeEntry"},"name":"_entries","kind":"variable","isPrivate":true,"id":"_entries","line":"68"},{"name":"SupercedeStream","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/SupercedeStream/T"}]}]},"name":"sources","kind":"param","id":"sources"}],"kind":"constructor","comment":"\nCreate [SupercedeStream] from the given [sources].\n\nThe [sources] are iterated in order of increasing priority.\n","id":"SupercedeStream1()","line":"75"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/merge_stream.dart","kind":"class","comment":"\n[Stream] that forwards data from its active source with greatest priority.\n\nThe [SupercedeStream] gets data from some source [Stream]s which\nare ordered in order of increasing priority.\nWhen a higher priority stream provides data, all lower priority streams\nare dropped.\n\nErrors from all (undropped) streams are forwarded.\n","id":"SupercedeStream","line":"67"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"Futures","children":[{"isStatic":true,"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"List","refId":"dart.core/List"}]},"name":"wait","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Future","refId":"dart.async/Future"}]},"name":"futures","kind":"param","id":"futures"}],"kind":"method","comment":"\nReturns a future which will complete once all the futures in a list are\ncomplete. If any of the futures in the list completes with an exception,\nthe resulting future also completes with an exception. (The value of the\nreturned future will be a list of all the values that were produced.)\n","id":"wait1()","line":"174"},{"isStatic":true,"returnType":{"name":"Future","refId":"dart.async/Future"},"name":"forEach","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"input","kind":"param","id":"input"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","kind":"param","id":"f"}],"kind":"method","comment":"\nRuns [f] for each element in [input] in order, moving to the next element\nonly when the [Future] returned by [f] completes. Returns a [Future] that\ncompletes when all elements have been processed.\n\nThe return values of all [Future]s are discarded. Any errors will cause the\niteration to stop and will be piped through the returned [Future].\n","id":"forEach2()","line":"186"}],"uri":"sdk/lib/async/future.dart","kind":"class","id":"Futures","line":"167"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Completer","children":[{"returnType":{"name":"void","refId":"void"},"name":"complete","children":[{"ref":{"name":"T","refId":"dart.async/Completer/T"},"isOptional":true,"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nCompletes [future] with the supplied values.\n\nAll listeners on the future will be immediately informed about the value.\n","id":"complete1()","line":"152"},{"returnType":{"name":"void","refId":"void"},"name":"completeError","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"exception","kind":"param","id":"exception"},{"ref":{"name":"Object","refId":"dart.core/Object"},"isOptional":true,"name":"stackTrace","kind":"param","id":"stackTrace"}],"kind":"method","comment":"\nComplete [future] with an error.\n\nCompleting a future with an error indicates that an exception was thrown\nwhile trying to produce a value.\n\nThe argument [exception] should not be [:null:]. A [stackTrace]\nobject can be provided as well, to give the user information about where\nthe error occurred. If omitted, it will be [:null:].\n","id":"completeError2()","line":"164"},{"ref":{"name":"Future","refId":"dart.async/Future"},"name":"future","kind":"property","comment":"The future that will contain the result provided to this completer. ","id":"future","line":"145"},{"name":"Completer","kind":"constructor","id":"Completer0()","line":"142"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/future.dart","kind":"class","comment":"\nA [Completer] is used to produce [Future]s and supply their value when it\nbecomes available.\n\nA service that provides values to callers, and wants to return [Future]s can\nuse a [Completer] as follows:\n\n    Completer completer = new Completer();\n    // send future object back to client...\n    return completer.future;\n    ...\n\n    // later when value is available, call:\n    completer.complete(value);\n\n    // alternatively, if the service cannot produce the value, it\n    // can provide an exception:\n    completer.completeException(exception);\n\n","id":"Completer","line":"140"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Future","children":[{"returnType":{"name":"Future","refId":"dart.async/Future"},"name":"then","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"onValue","kind":"param","id":"onValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"onError","kind":"param","id":"onError"}],"kind":"method","comment":"\nWhen this future completes with a value, then [onValue] is called with this\nvalue. If [this] future is already completed then the invocation of\n[onValue] is delayed until the next event-loop iteration.\n\nReturns a new [Future] [:f:].\n\nIf [this] is completed with an error then [:f:] is completed with the same\nerror. If [this] is completed with a value, then [:f:]'s completion value\ndepends on the result of invoking [onValue] with [this]' completion value.\n\nIf [onValue] returns a [Future] [:f2:] then [:f:] and [:f2:] are chained.\nThat is, [:f:] is completed with the completion value of [:f2:].\n\nOtherwise [:f:] is completed with the return value of [onValue].\n\nIf [onValue] throws an exception, the returned future will receive the\nexception.\n\nIf [onError] is provided, it is called if this future completes with an\nerror, and its return value/throw behavior is handled the same way as\nfor [onValue].\n\nIn most cases, it is more readable to use [catchError] separately, possibly\nwith a [:test:] parameter, instead of handling both value and error in a\nsingle [then] call.\n","id":"then2()","line":"78"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"name":"catchError","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"onError","kind":"param","id":"onError"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"test","kind":"param","id":"test","line":"95"}],"kind":"method","comment":"\nIf this future is complete with an error, [test] is called with the error.\nIf [test] returns [true], [onError] is called with the error\nwrapped in an [AsyncError]. The result of [onError] is handled exactly as\n[then]'s [onValue]. If [test] returns false, the exception is not handled\nby [onError]. If [test] is omitted, it defaults to a function that always\nreturns true.\n\nExample:\nfoo\n  .catchError(..., test: (e) => e is ArgumentError)\n  .catchError(..., test: (e) => e is NoSuchMethodError)\n  .then((v) { ... });\n","id":"catchError2()","line":"94"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Future/T"}]},"name":"whenComplete","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"action","kind":"param","id":"action"}],"kind":"method","comment":"\nRegister a function to be called when this future completes.\n\nThe [action] function is called when this future completes, whether it\ndoes so with a value or with an error.\n\nThis is the asynchronous equivalent of a \"finally\" block.\n\nIf the call to [action] does not throw, the returned future is completed\nwith the same result as this future.\n\nIf the call to [action] throws, the returned future is completed with the\nthrown error.\n","id":"whenComplete1()","line":"111"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Future/T"}]},"name":"asStream","kind":"method","comment":"\nCreates a [Stream] that sends [this]' completion value, data or error, to\nits subscribers. The stream closes after the completion value.\n","id":"asStream0()","line":"117"},{"name":"Future.immediate","children":[{"ref":{"name":"T","refId":"dart.async/Future/T"},"name":"value","kind":"param","id":"value"}],"kind":"constructor","comment":"A future whose value is immediately available. ","id":"Future.immediate1()","line":"32"},{"name":"Future.immediateError","children":[{"name":"error","kind":"param","id":"error"},{"ref":{"name":"Object","refId":"dart.core/Object"},"isOptional":true,"name":"stackTrace","kind":"param","id":"stackTrace"}],"kind":"constructor","comment":"A future that completes with an error. ","id":"Future.immediateError2()","line":"35"},{"name":"Future.wait","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Future","refId":"dart.async/Future"}]},"name":"futures","kind":"param","id":"futures"}],"kind":"constructor","id":"Future.wait1()","line":"42"},{"name":"Future.delayed","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"milliseconds","kind":"param","id":"milliseconds"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"value","kind":"param","id":"value"}],"kind":"constructor","id":"Future.delayed2()","line":"45"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/async/future.dart","kind":"class","comment":"\nA [Future] is used to obtain a value sometime in the future.  Receivers of a\n[Future] can obtain the value by passing a callback to [then]. For example:\n\n    Future<int> future = getFutureFromSomewhere();\n    future.then((value) {\n      print(\"I received the number $value\");\n    });\n\nA future may complete by *succeeding* (producing a value) or *failing*\n(producing an error, which may be handled with [catchError]).\n\nWhen a future completes, the following actions happen in order:\n\n  1. if the future suceeded, handlers registered with [then] are called.\n  2. if the future failed, handlers registered with [catchError] are\n     tested in sequence. Each test returning true is, have its handler\n     called.\n  4. if the future failed, and no handler registered with [catchError] it\n     is accepting the error, an error is sent to the global error handler.\n\n[Future]s are usually not created directly, but with [Completer]s.\n","id":"Future","line":"30"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"AsyncError","children":[{"returnType":{"name":"void","refId":"void"},"name":"_writeOn","children":[{"ref":{"name":"StringBuffer","refId":"dart.core/StringBuffer"},"name":"buffer","kind":"param","id":"buffer"}],"kind":"method","isPrivate":true,"id":"_writeOn1()","line":"23"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"40"},{"name":"throwDelayed","kind":"method","id":"throwDelayed0()","line":"53"},{"isFinal":true,"ref":{"name":"Object","refId":"dart.core/Object"},"name":"error","kind":"variable","id":"error","line":"12"},{"isFinal":true,"ref":{"name":"Object","refId":"dart.core/Object"},"name":"stackTrace","kind":"variable","id":"stackTrace","line":"14"},{"isFinal":true,"ref":{"name":"AsyncError","refId":"dart.async/AsyncError"},"name":"cause","kind":"variable","id":"cause","line":"16"},{"name":"AsyncError","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"error","kind":"param","id":"error"},{"ref":{"name":"Object","refId":"dart.core/Object"},"isOptional":true,"name":"stackTrace","kind":"param","id":"stackTrace"}],"kind":"constructor","id":"AsyncError2()","line":"20"},{"name":"AsyncError.withCause","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"error","kind":"param","id":"error"},{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"stackTrace","kind":"param","id":"stackTrace"},{"ref":{"name":"AsyncError","refId":"dart.async/AsyncError"},"name":"cause","kind":"param","id":"cause"}],"kind":"constructor","id":"AsyncError.withCause3()","line":"21"}],"uri":"sdk/lib/async/async_error.dart","kind":"class","comment":"\nError result of an asynchronous computation.\n","id":"AsyncError","line":"10"}],"uri":"sdk/lib/async/async.dart","kind":"library","id":"dart.async","line":"5"}