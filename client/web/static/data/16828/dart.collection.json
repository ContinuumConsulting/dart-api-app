{"name":"dart.collection","children":[{"interfaces":[{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.collection/SplayTreeMap/K"},{"name":"V","refId":"dart.collection/SplayTreeMap/V"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"SplayTreeMap","children":[{"returnType":{"name":"void","refId":"void"},"name":"splay_","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"name":"key","kind":"param","id":"key"}],"kind":"method","comment":"\nPerform the splay operation for the given key. Moves the node with\nthe given key to the top of the tree.  If no node has the given\nkey, the last node on the search path is moved to the top of the\ntree. This is the simplified top-down splaying algorithm from:\n\"Self-adjusting Binary Search Trees\" by Sleator and Tarjan.\n","id":"splay_1()","line":"55"},{"isOperator":true,"returnType":{"name":"V","refId":"dart.collection/SplayTreeMap/V"},"name":"[]","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"name":"key","kind":"param","id":"key"}],"kind":"method","id":"[]1()","line":"110"},{"returnType":{"name":"V","refId":"dart.collection/SplayTreeMap/V"},"name":"remove","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"name":"key","kind":"param","id":"key"}],"kind":"method","id":"remove1()","line":"118"},{"isOperator":true,"returnType":{"name":"void","refId":"void"},"name":"[]=","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"name":"key","kind":"param","id":"key"},{"ref":{"name":"V","refId":"dart.collection/SplayTreeMap/V"},"name":"value","kind":"param","id":"value"}],"kind":"method","id":"[]=2()","line":"140"},{"returnType":{"name":"V","refId":"dart.collection/SplayTreeMap/V"},"name":"putIfAbsent","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"name":"key","kind":"param","id":"key"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"ifAbsent","kind":"param","id":"ifAbsent"}],"kind":"method","id":"putIfAbsent2()","line":"168"},{"returnType":{"name":"void","refId":"void"},"name":"forEach","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","kind":"param","id":"f"}],"kind":"method","id":"forEach1()","line":"181"},{"returnType":{"name":"void","refId":"void"},"name":"clear","kind":"method","id":"clear0()","line":"204"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"containsKey","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"name":"key","kind":"param","id":"key"}],"kind":"method","id":"containsKey1()","line":"209"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"containsValue","children":[{"ref":{"name":"V","refId":"dart.collection/SplayTreeMap/V"},"name":"value","kind":"param","id":"value"}],"kind":"method","id":"containsValue1()","line":"217"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"239"},{"returnType":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"name":"firstKey","kind":"method","comment":"\nGet the first key in the map. Returns [null] if the map is empty.\n","id":"firstKey0()","line":"246"},{"returnType":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"name":"lastKey","kind":"method","comment":"\nGet the last key in the map. Returns [null] if the map is empty.\n","id":"lastKey0()","line":"261"},{"returnType":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"name":"lastKeyBefore","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"name":"key","kind":"param","id":"key"}],"kind":"method","comment":"\nGet the last key in the map that is strictly smaller than [key]. Returns\n[null] if no key was not found.\n","id":"lastKeyBefore1()","line":"277"},{"returnType":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"name":"firstKeyAfter","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"name":"key","kind":"param","id":"key"}],"kind":"method","comment":"\nGet the first key in the map that is strictly larger than [key]. Returns\n[null] if no key was not found.\n","id":"firstKeyAfter1()","line":"295"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isEmpty","kind":"property","id":"isEmpty","line":"175"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"property","id":"length","line":"200"},{"ref":{"name":"Collection","refId":"dart.core/Collection","arguments":[{"name":"K","refId":"dart.collection/SplayTreeMap/K"}]},"name":"keys","kind":"property","id":"keys","line":"227"},{"ref":{"name":"Collection","refId":"dart.core/Collection","arguments":[{"name":"V","refId":"dart.collection/SplayTreeMap/V"}]},"name":"values","kind":"property","id":"values","line":"233"},{"ref":{"name":"SplayTreeNode","refId":"dart.collection/SplayTreeNode","arguments":[{"name":"K","refId":"dart.collection/SplayTreeMap/K"},{"name":"V","refId":"dart.collection/SplayTreeMap/V"}]},"name":"_root","kind":"variable","isPrivate":true,"id":"_root","line":"33"},{"ref":{"name":"SplayTreeNode","refId":"dart.collection/SplayTreeNode","arguments":[{"name":"K","refId":"dart.collection/SplayTreeMap/K"},{"name":"V","refId":"dart.collection/SplayTreeMap/V"}]},"name":"_dummy","kind":"variable","isPrivate":true,"id":"_dummy","line":"38"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_count","kind":"variable","isPrivate":true,"id":"_count","line":"41"},{"name":"SplayTreeMap","kind":"constructor","id":"SplayTreeMap0()","line":"43"},{"upperBound":{"name":"Comparable","refId":"dart.core/Comparable"},"name":"K","kind":"typeparam","id":"K"},{"name":"V","kind":"typeparam","id":"V"}],"uri":"sdk/lib/collection/splay_tree.dart","kind":"class","comment":"\nA splay tree is a self-balancing binary\nsearch tree with the additional property that recently accessed\nelements are quick to access again. It performs basic operations\nsuch as insertion, look-up and removal in O(log(n)) amortized time.\n\nThis implementation is a Dart version of the JavaScript\nimplementation in the V8 project.\n","id":"SplayTreeMap","line":"29"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"SplayTreeNode","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeNode/K"},"name":"key","kind":"variable","id":"key","line":"14"},{"ref":{"name":"V","refId":"dart.collection/SplayTreeNode/V"},"name":"value","kind":"variable","id":"value","line":"15"},{"ref":{"name":"SplayTreeNode","refId":"dart.collection/SplayTreeNode","arguments":[{"name":"K","refId":"dart.collection/SplayTreeNode/K"},{"name":"V","refId":"dart.collection/SplayTreeNode/V"}]},"name":"left","kind":"variable","id":"left","line":"16"},{"ref":{"name":"SplayTreeNode","refId":"dart.collection/SplayTreeNode","arguments":[{"name":"K","refId":"dart.collection/SplayTreeNode/K"},{"name":"V","refId":"dart.collection/SplayTreeNode/V"}]},"name":"right","kind":"variable","id":"right","line":"17"},{"name":"SplayTreeNode","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeNode/K"},"name":"key","kind":"param","id":"key"},{"ref":{"name":"V","refId":"dart.collection/SplayTreeNode/V"},"name":"value","kind":"param","id":"value"}],"kind":"constructor","id":"SplayTreeNode2()","line":"12"},{"name":"K","kind":"typeparam","id":"K"},{"name":"V","kind":"typeparam","id":"V"}],"uri":"sdk/lib/collection/splay_tree.dart","kind":"class","comment":"\nA node in a splay tree. It holds the key, the value and the left\nand right children in the tree.\n","id":"SplayTreeNode","line":"11"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"Maps","children":[{"isStatic":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"containsValue","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"map","kind":"param","id":"map"},{"name":"value","kind":"param","id":"value"}],"kind":"method","id":"containsValue2()","line":"14"},{"isStatic":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"containsKey","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"map","kind":"param","id":"map"},{"name":"key","kind":"param","id":"key"}],"kind":"method","id":"containsKey2()","line":"23"},{"isStatic":true,"name":"putIfAbsent","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"map","kind":"param","id":"map"},{"name":"key","kind":"param","id":"key"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"ifAbsent","kind":"param","id":"ifAbsent"}],"kind":"method","id":"putIfAbsent3()","line":"32"},{"isStatic":true,"name":"clear","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"map","kind":"param","id":"map"}],"kind":"method","id":"clear1()","line":"41"},{"isStatic":true,"name":"forEach","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"map","kind":"param","id":"map"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","kind":"param","id":"f"}],"kind":"method","id":"forEach2()","line":"47"},{"isStatic":true,"returnType":{"name":"Collection","refId":"dart.core/Collection"},"name":"getValues","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"map","kind":"param","id":"map"}],"kind":"method","id":"getValues1()","line":"53"},{"isStatic":true,"returnType":{"name":"int","refId":"dart.core/int"},"name":"length","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"map","kind":"param","id":"map"}],"kind":"method","id":"length1()","line":"61"},{"isStatic":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"isEmpty","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"map","kind":"param","id":"map"}],"kind":"method","id":"isEmpty1()","line":"63"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"mapToString","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"m","kind":"param","id":"m"}],"kind":"method","comment":"\nReturns a string representing the specified map. The returned string\nlooks like this: [:'{key0: value0, key1: value1, ... keyN: valueN}':].\nThe value returned by its [toString] method is used to represent each\nkey or value.\n\nIf the map collection contains a reference to itself, either\ndirectly as a key or value, or indirectly through other collections\nor maps, the contained reference is rendered as [:'{...}':]. This\nprevents the infinite regress that would otherwise occur. So, for example,\ncalling this method on a map whose sole entry maps the string key 'me'\nto a reference to the map would return [:'{me: {...}}':].\n\nA typical implementation of a map's [toString] method will\nsimply return the results of this method applied to the collection.\n","id":"mapToString1()","line":"81"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"_emitMap","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"m","kind":"param","id":"m"},{"ref":{"name":"StringBuffer","refId":"dart.core/StringBuffer"},"name":"result","kind":"param","id":"result"},{"ref":{"name":"List","refId":"dart.core/List"},"name":"visiting","kind":"param","id":"visiting"}],"kind":"method","isPrivate":true,"comment":"\nAppends a string representing the specified map to the specified\nstring buffer. The string is formatted as per [mapToString].\nThe [:visiting:] list contains references to all of the enclosing\ncollections and maps (which are currently in the process of being\nemitted into [:result:]). The [:visiting:] parameter allows this method\nto generate a [:'[...]':] or [:'{...}':] where required. In other words,\nit allows this method and [_emitCollection] to identify recursive maps\nand collections.\n","id":"_emitMap3()","line":"97"}],"uri":"sdk/lib/collection/maps.dart","kind":"class","id":"Maps","line":"13"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"Collections","children":[{"isStatic":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"contains","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"iterable","kind":"param","id":"iterable"},{"name":"element","kind":"param","id":"element"}],"kind":"method","id":"contains2()","line":"13"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"forEach","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"iterable","kind":"param","id":"iterable"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","kind":"param","id":"f"}],"kind":"method","id":"forEach2()","line":"20"},{"isStatic":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"any","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"iterable","kind":"param","id":"iterable"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","kind":"param","id":"f"}],"kind":"method","id":"any2()","line":"26"},{"isStatic":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"every","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"iterable","kind":"param","id":"iterable"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","kind":"param","id":"f"}],"kind":"method","id":"every2()","line":"33"},{"isStatic":true,"name":"reduce","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"iterable","kind":"param","id":"iterable"},{"name":"initialValue","kind":"param","id":"initialValue","line":"41"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"combine","kind":"param","id":"combine","line":"42"}],"kind":"method","id":"reduce3()","line":"40"},{"isStatic":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"isEmpty","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"iterable","kind":"param","id":"iterable"}],"kind":"method","id":"isEmpty1()","line":"49"},{"isStatic":true,"name":"first","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"iterable","kind":"param","id":"iterable"}],"kind":"method","id":"first1()","line":"53"},{"isStatic":true,"name":"last","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"iterable","kind":"param","id":"iterable"}],"kind":"method","id":"last1()","line":"61"},{"isStatic":true,"name":"min","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"iterable","kind":"param","id":"iterable"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"compare","kind":"param","id":"compare"}],"kind":"method","id":"min2()","line":"73"},{"isStatic":true,"name":"max","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"iterable","kind":"param","id":"iterable"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"compare","kind":"param","id":"compare"}],"kind":"method","id":"max2()","line":"86"},{"isStatic":true,"name":"single","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"iterable","kind":"param","id":"iterable"}],"kind":"method","id":"single1()","line":"99"},{"isStatic":true,"name":"firstMatching","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"iterable","kind":"param","id":"iterable"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","kind":"param","id":"test","line":"108"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"orElse","kind":"param","id":"orElse","line":"109"}],"kind":"method","id":"firstMatching3()","line":"107"},{"isStatic":true,"name":"lastMatching","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"iterable","kind":"param","id":"iterable"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","kind":"param","id":"test","line":"118"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"orElse","kind":"param","id":"orElse","line":"119"}],"kind":"method","id":"lastMatching3()","line":"117"},{"isStatic":true,"name":"lastMatchingInList","children":[{"ref":{"name":"List","refId":"dart.core/List"},"name":"list","kind":"param","id":"list"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","kind":"param","id":"test","line":"134"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"orElse","kind":"param","id":"orElse","line":"135"}],"kind":"method","id":"lastMatchingInList3()","line":"133"},{"isStatic":true,"name":"singleMatching","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"iterable","kind":"param","id":"iterable"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","kind":"param","id":"test"}],"kind":"method","id":"singleMatching2()","line":"145"},{"isStatic":true,"name":"elementAt","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"iterable","kind":"param","id":"iterable"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"index","kind":"param","id":"index"}],"kind":"method","id":"elementAt2()","line":"161"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"join","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"iterable","kind":"param","id":"iterable"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"separator","kind":"param","id":"separator"}],"kind":"method","id":"join2()","line":"171"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"joinList","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"name":"list","kind":"param","id":"list"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"separator","kind":"param","id":"separator"}],"kind":"method","id":"joinList2()","line":"189"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"collectionToString","children":[{"ref":{"name":"Collection","refId":"dart.core/Collection"},"name":"c","kind":"param","id":"c"}],"kind":"method","comment":"\nReturns a string representing the specified collection. If the\ncollection is a [List], the returned string looks like this:\n[:'[element0, element1, ... elementN]':]. The value returned by its\n[toString] method is used to represent each element. If the specified\ncollection is not a list, the returned string looks like this:\n[:{element0, element1, ... elementN}:]. In other words, the strings\nreturned for lists are surrounded by square brackets, while the strings\nreturned for other collections are surrounded by curly braces.\n\nIf the specified collection contains a reference to itself, either\ndirectly or indirectly through other collections or maps, the contained\nreference is rendered as [:'[...]':] if it is a list, or [:'{...}':] if\nit is not. This prevents the infinite regress that would otherwise occur.\nSo, for example, calling this method on a list whose sole element is a\nreference to itself would return [:'[[...]]':].\n\nA typical implementation of a collection's [toString] method will\nsimply return the results of this method applied to the collection.\n","id":"collectionToString1()","line":"229"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"_emitCollection","children":[{"ref":{"name":"Collection","refId":"dart.core/Collection"},"name":"c","kind":"param","id":"c"},{"ref":{"name":"StringBuffer","refId":"dart.core/StringBuffer"},"name":"result","kind":"param","id":"result","line":"246"},{"ref":{"name":"List","refId":"dart.core/List"},"name":"visiting","kind":"param","id":"visiting","line":"247"}],"kind":"method","isPrivate":true,"comment":"\nAppends a string representing the specified collection to the specified\nstring buffer. The string is formatted as per [collectionToString].\nThe [:visiting:] list contains references to all of the enclosing\ncollections and maps (which are currently in the process of being\nemitted into [:result:]). The [:visiting:] parameter allows this method to\ngenerate a [:'[...]':] or [:'{...}':] where required. In other words,\nit allows this method and [_emitMap] to identify recursive collections\nand maps.\n","id":"_emitCollection3()","line":"245"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"_emitObject","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"o","kind":"param","id":"o"},{"ref":{"name":"StringBuffer","refId":"dart.core/StringBuffer"},"name":"result","kind":"param","id":"result"},{"ref":{"name":"List","refId":"dart.core/List"},"name":"visiting","kind":"param","id":"visiting"}],"kind":"method","isPrivate":true,"comment":"\nAppends a string representing the specified object to the specified\nstring buffer. If the object is a [Collection] or [Map], it is formatted\nas per [collectionToString] or [mapToString]; otherwise, it is formatted\nby invoking its own [toString] method.\n\nThe [:visiting:] list contains references to all of the enclosing\ncollections and maps (which are currently in the process of being\nemitted into [:result:]). The [:visiting:] parameter allows this method\nto generate a [:'[...]':] or [:'{...}':] where required. In other words,\nit allows this method and [_emitCollection] to identify recursive maps\nand collections.\n","id":"_emitObject3()","line":"278"},{"isStatic":true,"name":"_containsRef","children":[{"ref":{"name":"Collection","refId":"dart.core/Collection"},"name":"c","kind":"param","id":"c"},{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"ref","kind":"param","id":"ref"}],"kind":"method","isPrivate":true,"comment":"\nReturns true if the specified collection contains the specified object\nreference.\n","id":"_containsRef2()","line":"300"}],"uri":"sdk/lib/collection/collections.dart","kind":"class","comment":"\nThe [Collections] class implements static methods useful when\nwriting a class that implements [Collection] and the [iterator]\nmethod.\n","id":"Collections","line":"12"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"Arrays","children":[{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"copy","children":[{"ref":{"name":"List","refId":"dart.core/List"},"name":"src","kind":"param","id":"src"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"srcStart","kind":"param","id":"srcStart"},{"ref":{"name":"List","refId":"dart.core/List"},"name":"dst","kind":"param","id":"dst","line":"10"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"dstStart","kind":"param","id":"dstStart","line":"10"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"count","kind":"param","id":"count","line":"10"}],"kind":"method","id":"copy5()","line":"9"},{"isStatic":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"areEqual","children":[{"ref":{"name":"List","refId":"dart.core/List"},"name":"a","kind":"param","id":"a"},{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"b","kind":"param","id":"b"}],"kind":"method","id":"areEqual2()","line":"26"},{"isStatic":true,"returnType":{"name":"int","refId":"dart.core/int"},"name":"indexOf","children":[{"ref":{"name":"List","refId":"dart.core/List"},"name":"a","kind":"param","id":"a"},{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"element","kind":"param","id":"element","line":"44"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"startIndex","kind":"param","id":"startIndex","line":"45"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"endIndex","kind":"param","id":"endIndex","line":"46"}],"kind":"method","comment":"\nReturns the index in the list [a] of the given [element], starting\nthe search at index [startIndex] to [endIndex] (exclusive).\nReturns -1 if [element] is not found.\n","id":"indexOf4()","line":"43"},{"isStatic":true,"returnType":{"name":"int","refId":"dart.core/int"},"name":"lastIndexOf","children":[{"ref":{"name":"List","refId":"dart.core/List"},"name":"a","kind":"param","id":"a"},{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"element","kind":"param","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"startIndex","kind":"param","id":"startIndex"}],"kind":"method","comment":"\nReturns the last index in the list [a] of the given [element], starting\nthe search at index [startIndex] to 0.\nReturns -1 if [element] is not found.\n","id":"lastIndexOf3()","line":"66"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"rangeCheck","children":[{"ref":{"name":"List","refId":"dart.core/List"},"name":"a","kind":"param","id":"a"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"start","kind":"param","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"param","id":"length"}],"kind":"method","id":"rangeCheck3()","line":"81"}],"uri":"sdk/lib/collection/arrays.dart","kind":"class","id":"Arrays","line":"8"}],"uri":"sdk/lib/collection/collection.dart","kind":"library","id":"dart.collection","line":"5"}