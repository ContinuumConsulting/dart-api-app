// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
var A = {};
delete A.x;
var B = {};
delete B.x;
var C = {};
delete C.x;
var D = {};
delete D.x;
var E = {};
delete E.x;
var F = {};
delete F.x;
var G = {};
delete G.x;
var H = {};
delete H.x;
var J = {};
delete J.x;
var K = {};
delete K.x;
var L = {};
delete L.x;
var M = {};
delete M.x;
var N = {};
delete N.x;
var O = {};
delete O.x;
var P = {};
delete P.x;
var Q = {};
delete Q.x;
var R = {};
delete R.x;
var S = {};
delete S.x;
var T = {};
delete T.x;
var U = {};
delete U.x;
var V = {};
delete V.x;
var W = {};
delete W.x;
var X = {};
delete X.x;
var Y = {};
delete Y.x;
var Z = {};
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Method closures
$$.BoundClosure$i1 = [W, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, this._receiver, p0);
  },
  $is_Object__Object: true,
  $is_args1: true
}];

$$.BoundClosure$i0 = [H, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.BoundClosure$1 = [H, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, p0);
  },
  $is_Object__Object: true,
  $is_args1: true
}];

$$.BoundClosure$0 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self);
  },
  $is_void_: true
}];

$$.BoundClosure$2 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, p0, p1);
  },
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  "+call:1:0": 0,
  $is_args2: true,
  $is_Object__Object: true,
  $is_args1: true
}];

$$.BoundClosure$20 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, p0, p1);
  },
  $is_args2: true
}];

$$.BoundClosure$i2 = [A, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, this._receiver, p0, p1);
  },
  $is_args2: true
}];

$$.BoundClosure$3 = [T, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$3: function(p0, p1, p2) {
    return this.__js_helper$_target.call(this._self, p0, p1, p2);
  }
}];

$$.Closure$2 = [H, {"": "Closure;call$2,$name", $is_args2: true}];

$$.Closure$1 = [H, {"": "Closure;call$1,$name", $is_Object__Object: true, $is_args1: true}];

$$.Closure$0 = [H, {"": "Closure;call$0,$name", $is_void_: true}];

$$.Closure$7 = [H, {"": "Closure;call$7,$name"}];

$$.Closure$21 = [P, {"": "Closure;call$2,$name",
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  "+call:1:0": 0,
  $is_args2: true,
  $is_Object__Object: true,
  $is_args1: true
}];

$$.Closure$5 = [P, {"": "Closure;call$5,$name"}];

$$.Closure$4 = [P, {"": "Closure;call$4,$name"}];

$$.Closure$6 = [P, {"": "Closure;call$6,$name"}];

$$.Closure$3 = [P, {"": "Closure;call$3$onError$radix,$name",
  call$1: function(p0) {
    return this.call$3$onError$radix(p0, null, null);
  },
  "+call:1:0": 0,
  call$2$onError: function(p0, p1) {
    return this.call$3$onError$radix(p0, p1, null);
  },
  "+call:2:0:onError": 0,
  call$catchAll: function() {
    return {onError: null, radix: null};
  },
  $is_Object__Object: true,
  $is_args1: true
}];

init.mangledNames = {get$$$: "$", get$$implements: "implements", get$_annotations: "_annotations", get$_buildIdentifier: "_buildIdentifier", get$_cachedConstructors: "_cachedConstructors", get$_cachedDeclarations: "_cachedDeclarations", get$_cachedFields: "_cachedFields", get$_cachedGetters: "_cachedGetters", get$_cachedMembers: "_cachedMembers", get$_cachedMetadata: "_cachedMetadata", get$_cachedMethods: "_cachedMethods", get$_cachedMethodsMap: "_cachedMethodsMap", get$_cachedMirror: "_cachedMirror", get$_cachedSetters: "_cachedSetters", get$_cachedSuperinterfaces: "_cachedSuperinterfaces", get$_cachedTypeVariables: "_cachedTypeVariables", get$_cachedVariables: "_cachedVariables", get$_category: "_category", get$_category_item$__$comment: "__$comment", get$_everythingElseCache: "_everythingElseCache", get$_fieldsDescriptor: "_fieldsDescriptor", get$_fieldsMetadata: "_fieldsMetadata", get$_instanceFunctions: "_instanceFunctions", get$_instanceVariables: "_instanceVariables", get$_item: "_item", get$_items: "_items", get$_jsConstructorCache: "_jsConstructorCache", get$_jsConstructorOrInterceptor: "_jsConstructorOrInterceptor", get$_mangledName: "_mangledName", get$_member$__$commentFrom: "__$commentFrom", get$_member$__$inheritedFrom: "__$inheritedFrom", get$_metadata: "_metadata", get$_methodsCache: "_methodsCache", get$_openedAt: "_openedAt", get$_owner: "_owner", get$_page$__$home: "__$home", get$_parameters$_parameters: "_parameters", get$_pathname: "_pathname", get$_results$_item: "_item", get$_search$__$isFocused: "__$isFocused", get$_searchQuery: "_searchQuery", get$_staticFunctions: "_staticFunctions", get$_staticVariables: "_staticVariables", get$_superclass: "_superclass", get$_variablesCache: "_variablesCache", get$annotations: "annotations", get$box_0: "box_0", get$category: "category", get$category_item$LazyItem$previewComment: "previewComment", get$className: "className", get$className_2: "className_2", get$className_3: "className_3", get$classes: "classes", get$comment: "comment", get$commentFrom: "commentFrom", get$constructs: "constructs", get$content: "content", get$currentIndex: "currentIndex", get$currentPage: "currentPage", get$defaultValue: "defaultValue", get$domName: "domName", get$element: "element", get$elements_0: "elements_0", get$elements_1: "elements_1", get$errors: "errors", get$functions: "functions", get$generics: "generics", get$getters_3: "getters_3", get$hasDefault: "hasDefault", get$hash: "hash", get$home: "home", get$homePage: "homePage", get$index: "index", get$inheritedCounter: "inheritedCounter", get$inheritedFrom: "inheritedFrom", get$inner: "inner", get$isAbstract: "isAbstract", get$isConstant: "isConstant", get$isConstructor: "isConstructor", get$isConstructor_2: "isConstructor_2", get$isDesktop: "isDesktop", get$isFinal: "isFinal", get$isFocused: "isFocused", get$isGetter: "isGetter", get$isGetter_2: "isGetter_2", get$isInherited: "isInherited", get$isLoaded: "isLoaded", get$isNamed: "isNamed", get$isOperator: "isOperator", get$isOperator_1: "isOperator_1", get$isOperator_4: "isOperator_4", get$isOptional: "isOptional", get$isSetter: "isSetter", get$isSetter_1: "isSetter_1", get$isStatic: "isStatic", get$item: "item", get$item_0: "item_0", get$items: "items", get$last_0: "last_0", get$length: "length", get$libraries: "libraries", get$libraries_3: "libraries_3", get$link: "link", get$loc: "loc", get$location_3: "location_3", get$lower_1: "lower_1", get$mainLib_1: "mainLib_1", get$memberCounter: "memberCounter", get$memberNames: "memberNames", get$name: "name", get$name_0: "name_0", get$newAnnotations_1: "newAnnotations_1", get$newCategory_1: "newCategory_1", get$newItem_1: "newItem_1", get$newItems_1: "newItems_1", get$newParameters_1: "newParameters_1", get$newValues_2: "newValues_2", get$oldValues_1: "oldValues_1", get$operators: "operators", get$outer: "outer", get$outerSpan_3: "outerSpan_3", get$outerSpan_4: "outerSpan_4", get$owner: "owner", get$owner_0: "owner_0", get$packageName_2: "packageName_2", get$packages_0: "packages_0", get$parameters: "parameters", get$path: "path", get$position: "position", get$previewComment: "previewComment", get$qualifiedName: "qualifiedName", get$qualifiedNameParts_4: "qualifiedNameParts_4", get$result_0: "result_0", get$result_1: "result_1", get$results: "results", get$root_2: "root_2", get$score: "score", get$searchQuery: "searchQuery", get$setterParameter: "setterParameter", get$setters_5: "setters_5", get$showPkgLibraries: "showPkgLibraries", get$span_1: "span_1", get$subclasses: "subclasses", get$superClass: "superClass", get$supportedBrowsers: "supportedBrowsers", get$this_0: "this_0", get$this_1: "this_1", get$this_2: "this_2", get$this_3: "this_3", get$this_4: "this_4", get$type: "type", get$type_0: "type_0", get$type_2: "type_2", get$typedefs: "typedefs", get$validator: "validator", get$value: "value", get$values_0: "values_0", get$variables: "variables", get$variables_1: "variables_1", get$yaml_1: "yaml_1"};
init.mangledGlobalNames = {SearchResult_typesThatLinkWithinAParentPage: "typesThatLinkWithinAParentPage", docsPath: "docsPath", index: "index", value: "value"};
(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
JS_CONST: {"": "Object;code"}}],
["_interceptors", "dart:_interceptors", , J, {
getInterceptor: function(object) {
  return void 0;
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto, interceptor;
  record = object[init.dispatchPropertyName];
  if (record == null)
    if ($.initNativeDispatchFlag == null) {
      H.initNativeDispatch();
      record = object[init.dispatchPropertyName];
    }
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
  }
  interceptor = H.lookupAndCacheInterceptor(object);
  if (interceptor == null)
    return C.UnknownJavaScriptObject_methods;
  return interceptor;
},

findIndexForNativeSubclassType: function(type) {
  var t1, map, t2, i;
  t1 = $.mapTypeToInterceptor;
  if (t1 == null)
    return;
  map = t1;
  for (t1 = map.length, t2 = J.getInterceptor(type), i = 0; i + 1 < t1; i += 3) {
    if (i >= t1)
      throw H.ioore(map, i);
    if (t2.$eq(type, map[i]) === true)
      return i;
  }
  return;
},

findInterceptorConstructorForType: function(type) {
  var index, t1;
  index = J.findIndexForNativeSubclassType(type);
  if (index == null)
    return;
  t1 = $.mapTypeToInterceptor;
  if (typeof index !== "number")
    throw index.$add();
  return J.$index$asx(t1, index + 1);
},

findConstructorForNativeSubclassType: function(type, $name) {
  var index, t1;
  index = J.findIndexForNativeSubclassType(type);
  if (index == null)
    return;
  t1 = $.mapTypeToInterceptor;
  if (typeof index !== "number")
    throw index.$add();
  return J.$index$asx(t1, index + 2)[$name];
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return H.Primitives_objectToString(receiver);
  },
  "+toString:0:0": 0,
  noSuchMethod$1: function(receiver, invocation) {
    throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
  },
  "+noSuchMethod:1:0": 0,
  get$runtimeType: function(receiver) {
    return new H.TypeImpl(H.getRuntimeTypeString(receiver), null);
  },
  $isInterceptor: true,
  "%": "DOMImplementation|MediaError|MediaKeyError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString"
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  "+toString:0:0": 0,
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  get$runtimeType: function(receiver) {
    return C.Type_EsU;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  "+toString:0:0": 0,
  get$hashCode: function(receiver) {
    return 0;
  },
  get$runtimeType: function(receiver) {
    return C.Type_eZO;
  }
},

JavaScriptObject: {"": "Interceptor;",
  get$hashCode: function(_) {
    return 0;
  },
  get$runtimeType: function(_) {
    return C.Type_XXD;
  }
},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray: {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("add"));
    receiver.push(value);
  },
  insert$2: function(receiver, index, value) {
    if (index < 0 || index > receiver.length)
      throw H.wrapException(new P.RangeError("value " + index));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("insert"));
    receiver.splice(index, 0, value);
  },
  removeLast$0: function(receiver) {
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("removeLast"));
    if (receiver.length === 0)
      throw H.wrapException(new P.RangeError("value -1"));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("remove"));
    for (i = 0; i < receiver.length; ++i)
      if (J.$eq(receiver[i], element) === true) {
        receiver.splice(i, 1);
        return true;
      }
    return false;
  },
  where$1: function(receiver, f) {
    var t1 = new H.WhereIterable(receiver, f);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
      this.add$1(receiver, t1.get$current());
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    return H.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    var t1 = new H.MappedListIterable(receiver, f);
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
  },
  join$1: function(receiver, separator) {
    var t1, list, i, t2;
    t1 = receiver.length;
    list = P.List_List(t1, null);
    for (i = 0; i < receiver.length; ++i) {
      t2 = H.S(receiver[i]);
      if (i >= t1)
        throw H.ioore(list, i);
      list[i] = t2;
    }
    return list.join(separator);
  },
  join$0: function($receiver) {
    return this.join$1($receiver, "");
  },
  take$1: function(receiver, n) {
    return H.SubListIterable$(receiver, 0, n, null);
  },
  skip$1: function(receiver, n) {
    return H.SubListIterable$(receiver, n, null, null);
  },
  firstWhere$2$orElse: function(receiver, test, orElse) {
    return H.IterableMixinWorkaround_firstWhere(receiver, test, orElse);
  },
  firstWhere$1: function($receiver, test) {
    return this.firstWhere$2$orElse($receiver, test, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw H.wrapException(new P.ArgumentError(start));
    if (start < 0 || start > receiver.length)
      throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
    if (end == null)
      end = receiver.length;
    else {
      if (typeof end !== "number" || Math.floor(end) !== end)
        throw H.wrapException(new P.ArgumentError(end));
      if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length));
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  getRange$2: function(receiver, start, end) {
    H.IterableMixinWorkaround__rangeCheck(receiver, start, end);
    return H.SubListIterable$(receiver, start, end, null);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  removeRange$2: function(receiver, start, end) {
    var receiverLength, t1;
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("removeRange"));
    receiverLength = receiver.length;
    t1 = J.getInterceptor$n(start);
    if (t1.$lt(start, 0) || t1.$gt(start, receiverLength))
      throw H.wrapException(P.RangeError$range(start, 0, receiverLength));
    t1 = J.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, receiverLength))
      throw H.wrapException(P.RangeError$range(end, start, receiverLength));
    if (typeof end !== "number")
      throw H.iae(end);
    H.Arrays_copy(receiver, end, receiver, start, receiverLength - end);
    if (typeof start !== "number")
      throw H.iae(start);
    this.set$length(receiver, receiverLength - (end - start));
  },
  any$1: function(receiver, f) {
    return H.IterableMixinWorkaround_any(receiver, f);
  },
  get$reversed: function(receiver) {
    var t1 = new H.ReversedListIterable(receiver);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  sort$1: function(receiver, compare) {
    if (!!receiver.immutable$list)
      H.throwExpression(P.UnsupportedError$("sort"));
    H.IterableMixinWorkaround_sortList(receiver, compare);
  },
  indexOf$2: function(receiver, element, start) {
    return H.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  lastIndexOf$2: function(receiver, element, start) {
    return H.IterableMixinWorkaround_lastIndexOfList(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  contains$1: function(receiver, other) {
    var i;
    for (i = 0; i < receiver.length; ++i)
      if (J.$eq(receiver[i], other) === true)
        return true;
    return false;
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  "+isNotEmpty": 0,
  toString$0: function(receiver) {
    return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  "+toString:0:0": 0,
  toList$1$growable: function(receiver, growable) {
    return P.List_List$from(receiver, growable, H.getRuntimeTypeArgument(receiver, "JSArray", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    var t1 = new H.ListIterator(receiver, receiver.length, 0, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "JSArray", 0)]);
    return t1;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw H.wrapException(new P.ArgumentError(newLength));
    if (newLength < 0)
      throw H.wrapException(P.RangeError$value(newLength));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("set length"));
    receiver.length = newLength;
  },
  "+length=": 0,
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(P.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      H.throwExpression(P.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  $isList: true,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true,
  $asJSArray: function() {
    return [null];
  },
  $asList: function() {
    return [null];
  },
  $asIterable: function() {
    return [null];
  }
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (typeof b !== "number")
      throw H.wrapException(new P.ArgumentError(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if (this.get$isNegative(receiver) === bIsNegative)
          return 0;
        if (this.get$isNegative(receiver))
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  "+compareTo:1:0": 0,
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var t1;
    if (receiver >= -2147483648 && receiver <= 2147483647)
      return receiver | 0;
    if (isFinite(receiver)) {
      t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
      return t1 + 0;
    }
    throw H.wrapException(P.UnsupportedError$('' + receiver));
  },
  round$0: function(receiver) {
    return this.toInt$0(this.roundToDouble$0(receiver));
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toStringAsExponential$1: function(receiver, fractionDigits) {
    var result;
    if (fractionDigits < 0 || fractionDigits > 20)
      throw H.wrapException(P.RangeError$(fractionDigits));
    result = receiver.toExponential(fractionDigits);
    if (receiver === 0 && this.get$isNegative(receiver))
      return "-" + result;
    return result;
  },
  toRadixString$1: function(receiver, radix) {
    if (radix < 2 || radix > 36)
      throw H.wrapException(P.RangeError$(radix));
    return receiver.toString(radix);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  "+toString:0:0": 0,
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver * other;
  },
  $tdiv: function(receiver, other) {
    if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
      return receiver / other | 0;
    else {
      if (typeof other !== "number")
        H.throwExpression(P.ArgumentError$(other));
      return this.toInt$0(receiver / other);
    }
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw H.wrapException(new P.ArgumentError(other));
    if (other > 31)
      return 0;
    return receiver << other >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw H.wrapException(P.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $and: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return (receiver & other) >>> 0;
  },
  $xor: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return (receiver ^ other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true,
  static: {
"": "JSNumber__MIN_INT32,JSNumber__MAX_INT32",
}

},

JSInt: {"": "int/JSNumber;",
  get$runtimeType: function(receiver) {
    return C.Type_SnA;
  },
  $isdouble: true,
  $isnum: true,
  $isint: true
},

JSDouble: {"": "double/JSNumber;",
  get$runtimeType: function(receiver) {
    return C.Type_qq1;
  },
  $isdouble: true,
  $isnum: true
},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(P.ArgumentError$(index));
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    if (index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    return H.allMatchesInStringUnchecked(receiver, str);
  },
  matchAsPrefix$2: function(receiver, string, start) {
    var t1, t2, t3, i;
    if (!(start < 0)) {
      t1 = J.get$length$asx(string);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = start > t1;
    } else
      t1 = true;
    if (t1)
      throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(string)));
    t1 = receiver.length;
    t2 = J.getInterceptor$asx(string);
    t3 = t2.get$length(string);
    if (typeof t3 !== "number")
      throw H.iae(t3);
    if (start + t1 > t3)
      return;
    for (i = 0; i < t1; ++i) {
      t3 = t2.codeUnitAt$1(string, start + i);
      if (i >= t1)
        H.throwExpression(P.RangeError$value(i));
      if (t3 !== receiver.charCodeAt(i))
        return;
    }
    return new H.StringMatch(start, string, receiver);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var t1, otherLength, t2;
    if (typeof other !== "string")
      H.throwExpression(new P.ArgumentError(other));
    t1 = J.getInterceptor$asx(other);
    otherLength = t1.get$length(other);
    t2 = receiver.length;
    if (J.$gt$n(otherLength, t2))
      return false;
    if (typeof otherLength !== "number")
      throw H.iae(otherLength);
    return t1.$eq(other, this.substring$1(receiver, t2 - otherLength));
  },
  replaceAll$2: function(receiver, from, to) {
    return H.stringReplaceAllUnchecked(receiver, from, to);
  },
  replaceFirst$2: function(receiver, from, to) {
    return H.stringReplaceFirstUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    return receiver.split(pattern);
  },
  startsWith$2: function(receiver, pattern, index) {
    var endIndex;
    if (index < 0 || index > receiver.length)
      throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
    if (typeof pattern === "string") {
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    }
    return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
  },
  startsWith$1: function($receiver, pattern) {
    return this.startsWith$2($receiver, pattern, 0);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
      H.throwExpression(P.ArgumentError$(startIndex));
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
      H.throwExpression(P.ArgumentError$(endIndex));
    t1 = J.getInterceptor$n(startIndex);
    if (t1.$lt(startIndex, 0))
      throw H.wrapException(P.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex))
      throw H.wrapException(P.RangeError$value(startIndex));
    if (J.$gt$n(endIndex, receiver.length))
      throw H.wrapException(P.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  toUpperCase$0: function(receiver) {
    return receiver.toUpperCase();
  },
  trim$0: function(receiver) {
    var endIndex, startIndex, codeUnit, endIndex0, endIndex1;
    for (endIndex = receiver.length, startIndex = 0; startIndex < endIndex;) {
      if (startIndex >= endIndex)
        H.throwExpression(P.RangeError$value(startIndex));
      codeUnit = receiver.charCodeAt(startIndex);
      if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
        ++startIndex;
      else
        break;
    }
    if (startIndex === endIndex)
      return "";
    for (endIndex0 = endIndex; true; endIndex0 = endIndex1) {
      endIndex1 = endIndex0 - 1;
      if (endIndex1 < 0)
        H.throwExpression(P.RangeError$value(endIndex1));
      if (endIndex1 >= endIndex)
        H.throwExpression(P.RangeError$value(endIndex1));
      codeUnit = receiver.charCodeAt(endIndex1);
      if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
        ;
      else
        break;
    }
    if (startIndex === 0 && endIndex0 === endIndex)
      return receiver;
    return receiver.substring(startIndex, endIndex0);
  },
  get$codeUnits: function(receiver) {
    return new J._CodeUnits(receiver);
  },
  indexOf$2: function(receiver, pattern, start) {
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw H.wrapException(new P.ArgumentError(start));
    if (start < 0 || start > receiver.length)
      throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
    return receiver.indexOf(pattern, start);
  },
  indexOf$1: function($receiver, pattern) {
    return this.indexOf$2($receiver, pattern, 0);
  },
  lastIndexOf$2: function(receiver, pattern, start) {
    var t1, t2, i;
    start = receiver.length;
    if (typeof pattern === "string") {
      t1 = pattern.length;
      if (typeof start !== "number")
        throw start.$add();
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    }
    t1 = J.getInterceptor$s(pattern);
    i = start;
    while (true) {
      if (typeof i !== "number")
        throw i.$ge();
      if (!(i >= 0))
        break;
      if (t1.matchAsPrefix$2(pattern, receiver, i) != null)
        return i;
      --i;
    }
    return -1;
  },
  lastIndexOf$1: function($receiver, pattern) {
    return this.lastIndexOf$2($receiver, pattern, null);
  },
  contains$2: function(receiver, other, startIndex) {
    if (other == null)
      H.throwExpression(new P.ArgumentError(null));
    if (startIndex < 0 || startIndex > receiver.length)
      throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length));
    return H.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  "+isNotEmpty": 0,
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  "+compareTo:1:0": 0,
  toString$0: function(receiver) {
    return receiver;
  },
  "+toString:0:0": 0,
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$runtimeType: function(receiver) {
    return C.Type_Ejg;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(P.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $isString: true,
  static: {
JSString__isWhitespace: function(codeUnit) {
  if (codeUnit < 256)
    switch (codeUnit) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 133:
      case 160:
        return true;
      default:
        return false;
    }
  switch (codeUnit) {
    case 5760:
    case 6158:
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8232:
    case 8233:
    case 8239:
    case 8287:
    case 12288:
    case 65279:
      return true;
    default:
      return false;
  }
}}

},

_CodeUnits: {"": "UnmodifiableListBase;__interceptors$_string",
  get$length: function(_) {
    return this.__interceptors$_string.length;
  },
  "+length": 0,
  $index: function(_, i) {
    var t1, t2;
    t1 = this.__interceptors$_string;
    if (typeof i !== "number" || Math.floor(i) !== i)
      H.throwExpression(new P.ArgumentError(i));
    t2 = J.getInterceptor$n(i);
    if (t2.$lt(i, 0))
      H.throwExpression(new P.RangeError("value " + H.S(i)));
    if (t2.$ge(i, t1.length))
      H.throwExpression(new P.RangeError("value " + H.S(i)));
    return t1.charCodeAt(i);
  },
  "+[]:1:0": 0,
  $asUnmodifiableListBase: function() {
    return [J.JSInt];
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  }
}}],
["_isolate_helper", "dart:_isolate_helper", , H, {
_callInIsolate: function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
},

startRootIsolate: function(entry) {
  var rootContext;
  $globalState = H._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = H._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  if (!!entry.$is_args1)
    rootContext.eval$1(new H.startRootIsolate_closure(entry));
  else if (!!entry.$is_args2)
    rootContext.eval$1(new H.startRootIsolate_closure0(entry));
  else
    rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

IsolateNatives_computeThisScript: function() {
  var currentScript = init.currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  if (typeof version == "function" && typeof os == "object" && "system" in os)
    return H.IsolateNatives_computeThisScriptD8();
  if (typeof version == "function" && typeof system == "function")
    return thisFilename();
  return;
},

IsolateNatives_computeThisScriptD8: function() {
  var stack, matches;
  stack = new Error().stack;
  if (stack == null) {
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
    if (stack == null)
      throw H.wrapException(P.UnsupportedError$("No stack trace"));
  }
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, args, message, isSpawnUri, replyTo, context, t2;
  msg = H._deserializeMessage(e.data);
  t1 = J.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : init.globalFunctions[functionName];
      args = t1.$index(msg, "args");
      message = H._deserializeMessage(t1.$index(msg, "msg"));
      isSpawnUri = t1.$index(msg, "isSpawnUri");
      replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
      context = H._IsolateContext$();
      $globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      H.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "args"), t1.$index(msg, "msg"), t1.$index(msg, "isSpawnUri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      H.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      } else
        P.print(t1.$index(msg, "msg"));
      break;
    case "error":
      throw H.wrapException(t1.$index(msg, "msg"));
    default:
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    t1.toString;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      H.unwrapException(exception);
      trace = new H._StackTrace(exception, null);
      throw H.wrapException(P.Exception_Exception(trace));
    }

},

IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, replyTo) {
  var t1;
  H.Primitives_initializeStatics($globalState.currentContext.id);
  $.lazyPort = H.ReceivePortImpl$();
  t1 = $.lazyPort;
  t1.toString;
  J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, $globalState.currentContext.id)]);
  if (isSpawnUri !== true)
    topLevel.call$1(message);
  else {
    t1 = J.getInterceptor(topLevel);
    if (!!t1.$is_args2)
      topLevel.call$2(args, message);
    else if (!!t1.$is_args1)
      topLevel.call$1(args);
    else
      topLevel.call$0();
  }
},

IsolateNatives__spawnWorker: function(functionName, uri, args, message, isSpawnUri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(replyPort), "args", args, "msg", H._serializeMessage(message), "isSpawnUri", isSpawnUri, "functionName", functionName], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
},

_waitForPendingPorts: function(message, callback) {
  var finder = H._PendingSendPortFinder$();
  finder.traverse$1(message);
  P.Future_wait(finder.ports).then$1(new H._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return new H._JsDeserializer(null).deserialize$1(message);
  else
    return message;
},

_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

startRootIsolate_closure: {"": "Closure;entry_0",
  call$0: function() {
    this.entry_0.call$1([]);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

startRootIsolate_closure0: {"": "Closure;entry_1",
  call$0: function() {
    this.entry_1.call$2([], null);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { H.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
    this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
    this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
    if (this.isWorker === true) {
      this.mainManager = new H._MainManagerStub();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  static: {
_Manager$: function(entry) {
  var t1 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
}}

},

_IsolateContext: {"": "Object;id>,ports,isolateStatics<",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        $ = old.get$isolateStatics();
    }
    return result;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._collection$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, P.ReceivePort);
    this.isolateStatics = new Isolate();
  },
  $is_IsolateContext: true,
  static: {
_IsolateContext$: function() {
  var t1 = new H._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
}}

},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._collection$_length === 0)
      throw H.wrapException(P.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop.activeTimerCount === 0) {
        t1 = t1.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new H._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        trace = new H._StackTrace(exception, null);
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    P.Timer_Timer(C.Duration_0, this);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_IsolateEvent: {"": "Object;isolate,fn,message>",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  },
  $is_IsolateEvent: true
},

_MainManagerStub: {"": "Object;"},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,args_1,message_2,isSpawnUri_3,replyTo_4",
  call$0: function() {
    H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.replyTo_4);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_BaseSendPort: {"": "Object;", $isSendPort: true},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort,_isolateId",
  send$1: function(_, message) {
    H._waitForPendingPorts(message, new H._NativeJsSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort) === true;
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = $globalState.isolates;
    t3 = this.this_1;
    t4 = t3._isolateId;
    isolate = t2.$index(t2, t4);
    if (isolate == null)
      return;
    if ((t3._receivePort.get$__isolate_helper$_controller()._state & 4) !== 0)
      return;
    shouldSerialize = $globalState.currentContext != null && $globalState.currentContext.id !== t4;
    msg = this.message_2;
    t1.msg_0 = msg;
    if (shouldSerialize)
      t1.msg_0 = H._serializeMessage(t1.msg_0);
    t2 = $globalState.topEventLoop;
    t4 = "receive " + H.S(msg);
    t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send__closure(t1, t3, shouldSerialize), t4));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_3,shouldSerialize_4",
  call$0: function() {
    var t1, t2;
    t1 = this.this_3._receivePort;
    if ((t1.get$__isolate_helper$_controller()._state & 4) === 0) {
      if (this.shouldSerialize_4) {
        t2 = this.box_0;
        t2.msg_0 = H._deserializeMessage(t2.msg_0);
      }
      t1 = t1.get$__isolate_helper$_controller();
      t2 = this.box_0.msg_0;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._async$_add$1(t2);
    }
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
  send$1: function(_, message) {
    H._waitForPendingPorts(message, new H._WorkerSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) === true && J.$eq(this._isolateId, other._isolateId) === true && J.$eq(this._receivePortId, other._receivePortId) === true;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = J.$shl$n(this._workerId, 16);
    t2 = J.$shl$n(this._isolateId, 8);
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    return (t1 ^ t2 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1",
  call$0: function() {
    var t1, workerMessage, t2, manager;
    t1 = this.this_0;
    workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", t1, "msg", this.message_1], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.toString;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1._workerId);
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

ReceivePortImpl: {"": "Stream;_id<,__isolate_helper$_controller<",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = this.__isolate_helper$_controller;
    t1.toString;
    t1 = new P._ControllerStream(t1);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  close$0: function(_) {
    var t1 = this.__isolate_helper$_controller;
    if ((t1._state & 4) !== 0)
      return;
    t1.close$0(t1);
    $globalState.currentContext.unregister$1(this._id);
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, H.ReceivePortImpl.prototype.close$0, _receiver, "close$0");
  },
  ReceivePortImpl$0: function() {
    this.__isolate_helper$_controller = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
    var t1 = $globalState.currentContext;
    t1.register$2(t1, this._id, this);
  },
  $asStream: function() {
    return [null];
  },
  $isReceivePort: true,
  $isStream: true,
  static: {
"": "ReceivePortImpl__nextFreeId",
ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = t1 + 1;
  t1 = new H.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
}}

},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    J.forEach$1$ax(list, this.get$_dispatch());
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    J.forEach$1$ax(map.get$values(map), this.get$_dispatch());
  },
  visitSendPort$1: function(port) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = new H._JsVisitedMap(null);
  },
  static: {
_PendingSendPortFinder$: function() {
  var t1 = new H._PendingSendPortFinder([], new H._MessageTraverserVisitedMap());
  t1._PendingSendPortFinder$0();
  return t1;
}}

},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (!!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return new H._NativeJsSendPort(x._receivePort, x._isolateId);
    if (!!x.$is_WorkerSendPort)
      return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = J.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if (J.$eq(managerId, $globalState.currentManagerId) === true) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new H._NativeJsSendPort(receivePort, isolateId);
    } else
      return new H._WorkerSendPort(managerId, receivePortId, isolateId);
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  "+[]:1:0": 0,
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  "+[]=:2:0": 0,
  reset$0: function(_) {
    this.tagged = P.List_List(null, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  "+[]:1:0": 0,
  $indexSet: function(_, object, info) {
  },
  "+[]=:2:0": 0,
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    if (H._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    var t1;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isSendPort)
      return this.visitSendPort$1(x);
    return this.visitObject$1(x);
  },
  get$_dispatch: function() {
    return new H.BoundClosure$1(this, H._MessageTraverser.prototype._dispatch$1, null, "_dispatch$1");
  },
  visitObject$1: function(x) {
    throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
  }
},

_Copier: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = P.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = copy.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw H.ioore(copy, i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2, copy;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    copy = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1.copy_0 = copy;
    t2 = this._visited;
    t2.$indexSet(t2, map, copy);
    map.forEach$1(map, new H._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_Serializer: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1(J.toList$0$ax(map.get$keys())), this._serializeList$1(J.toList$0$ax(map.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var t1, len, result, t2, i, t3;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = P.List_List(len, null);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = result.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw H.ioore(result, i);
      result[i] = t3;
    }
    return result;
  }
},

_Deserializer: {"": "Object;",
  deserialize$1: function(x) {
    if (H._Deserializer_isPrimitive(x))
      return x;
    this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = J.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = J.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw H.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    values = t1.$index(x, 3);
    t1 = J.getInterceptor$asx(keys);
    len = t1.get$length(keys);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = J.getInterceptor$asx(values);
    i = 0;
    for (; i < len; ++i)
      result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
    return result;
  },
  deserializeObject$1: function(x) {
    throw H.wrapException("Unexpected serialized object");
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle",
  cancel$0: function() {
    if ($.get$globalThis().setTimeout != null) {
      if (this._inEventLoop)
        throw H.wrapException(P.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      var t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount - 1;
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else
      throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
  },
  static: {
TimerImpl$: function(milliseconds, callback) {
  var t1 = new H.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
}}

},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0._handle = null;
    this.callback_1.call$0();
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2._handle = null;
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
}}],
["_js_helper", "dart:_js_helper", , H, {
isJsIndexable: function(object, record) {
  var result, t1;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  t1 = J.getInterceptor(object);
  return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = J.toString$0(value);
  if (typeof res !== "string")
    throw H.wrapException(P.ArgumentError$(value));
  return res;
},

throwInvalidReflectionError: function(memberName) {
  throw H.wrapException(P.UnsupportedError$("Can't use '" + H.S(memberName) + "' in reflection because it is not included in a @MirrorsUsed annotation."));
},

Primitives_initializeStatics: function(id) {
  $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + H.S(id));
  $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + H.S(id));
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives__throwFormatException: function(string) {
  throw H.wrapException(P.FormatException$(string));
},

Primitives_parseInt: function(source, radix, handleError) {
  var match, t1, maxCharCode, digitsPart, i, t2;
  if (handleError == null)
    handleError = H.Primitives__throwFormatException$closure;
  if (typeof source !== "string")
    H.throwExpression(new P.ArgumentError(source));
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (radix == null) {
    if (match != null) {
      t1 = match.length;
      if (2 >= t1)
        throw H.ioore(match, 2);
      if (match[2] != null)
        return parseInt(source, 16);
      if (3 >= t1)
        throw H.ioore(match, 3);
      if (match[3] != null)
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    radix = 10;
  } else {
    if (typeof radix !== "number" || Math.floor(radix) !== radix)
      throw H.wrapException(new P.ArgumentError("Radix is not an integer"));
    if (radix < 2 || radix > 36)
      throw H.wrapException(P.RangeError$("Radix " + H.S(radix) + " not in range 2..36"));
    if (match != null) {
      if (radix === 10) {
        if (3 >= match.length)
          throw H.ioore(match, 3);
        t1 = match[3] != null;
      } else
        t1 = false;
      if (t1)
        return parseInt(source, 10);
      if (!(radix < 10)) {
        if (3 >= match.length)
          throw H.ioore(match, 3);
        t1 = match[3] == null;
      } else
        t1 = true;
      if (t1) {
        maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
        if (1 >= match.length)
          throw H.ioore(match, 1);
        digitsPart = match[1];
        t1 = J.getInterceptor$asx(digitsPart);
        i = 0;
        while (true) {
          t2 = t1.get$length(digitsPart);
          if (typeof t2 !== "number")
            throw H.iae(t2);
          if (!(i < t2))
            break;
          t1.codeUnitAt$1(digitsPart, 0);
          if (t1.codeUnitAt$1(digitsPart, i) > maxCharCode)
            return handleError.call$1(source);
          ++i;
        }
      }
    }
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, radix);
},

Primitives_parseDouble: function(source, handleError) {
  var result, trimmed;
  if (typeof source !== "string")
    H.throwExpression(new P.ArgumentError(source));
  if (handleError == null)
    handleError = H.Primitives__throwFormatException$closure;
  if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
    return handleError.call$1(source);
  result = parseFloat(source);
  if (isNaN(result)) {
    trimmed = J.trim$0$s(source);
    if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
      return result;
    return handleError.call$1(source);
  }
  return result;
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = C.JS_CONST_86y(J.getInterceptor(object));
  if ($name === "Object") {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = J.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  t1 = H.getRuntimeTypeInfo(object);
  return H.S($name) + H.joinArguments(t1, 0, null);
},

Primitives_objectToString: function(object) {
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Primitives_numMicroseconds: function() {
  if (typeof window != "undefined" && window !== null) {
    var performance = window.performance;
    if (performance != null && typeof performance.webkitNow == "function")
      return C.JSNumber_methods.toInt$0(Math.floor(1000 * performance.webkitNow()));
  }
  return 1000 * Date.now();
},

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

Primitives_stringFromCodePoints: function(codePoints) {
  var a, $arguments, t1, t2, i;
  a = [];
  a.$builtinTypeInfo = [J.JSInt];
  $arguments = H.substitute(codePoints.$asJSArray, H.getRuntimeTypeInfo(codePoints));
  t1 = $arguments == null ? null : $arguments[0];
  t2 = new H.ListIterator(codePoints, codePoints.length, 0, null);
  t2.$builtinTypeInfo = [t1];
  for (; t2.moveNext$0();) {
    i = t2._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(P.ArgumentError$(i));
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + (C.JSInt_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw H.wrapException(P.ArgumentError$(i));
  }
  return H.Primitives__fromCharCodeApply(a);
},

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, i;
  for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(charCodes, "JSArray", 0)]); t1.moveNext$0();) {
    i = t1._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(P.ArgumentError$(i));
    if (i < 0)
      throw H.wrapException(P.ArgumentError$(i));
    if (i > 65535)
      return H.Primitives_stringFromCodePoints(charCodes);
  }
  return H.Primitives__fromCharCodeApply(charCodes);
},

Primitives_valueFromDecomposedDate: function(years, month, day, hours, minutes, seconds, milliseconds, isUtc) {
  var jsMonth, value, t1;
  if (typeof years !== "number" || Math.floor(years) !== years)
    H.throwExpression(new P.ArgumentError(years));
  if (typeof month !== "number" || Math.floor(month) !== month)
    H.throwExpression(new P.ArgumentError(month));
  if (typeof day !== "number" || Math.floor(day) !== day)
    H.throwExpression(new P.ArgumentError(day));
  if (typeof hours !== "number" || Math.floor(hours) !== hours)
    H.throwExpression(new P.ArgumentError(hours));
  if (typeof minutes !== "number" || Math.floor(minutes) !== minutes)
    H.throwExpression(new P.ArgumentError(minutes));
  if (typeof seconds !== "number" || Math.floor(seconds) !== seconds)
    H.throwExpression(new P.ArgumentError(seconds));
  jsMonth = J.$sub$n(month, 1);
  value = isUtc ? Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds) : new Date(years, jsMonth, day, hours, minutes, seconds, milliseconds).valueOf();
  if (isNaN(value) || value < -8640000000000000 || value > 8640000000000000)
    throw H.wrapException(new P.ArgumentError(null));
  t1 = J.getInterceptor$n(years);
  if (t1.$le(years, 0) || t1.$lt(years, 100))
    return H.Primitives_patchUpY2K(value, years, isUtc);
  return value;
},

Primitives_patchUpY2K: function(value, years, isUtc) {
  var date = new Date(value);
  if (isUtc)
    date.setUTCFullYear(years);
  else
    date.setFullYear(years);
  return date.valueOf();
},

Primitives_lazyAsJsDate: function(receiver) {
  if (receiver.date === void 0)
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
},

Primitives_getYear: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
},

Primitives_getMonth: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
},

Primitives_getDay: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
},

Primitives_getHours: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
},

Primitives_getMinutes: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
},

Primitives_getSeconds: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
},

Primitives_getMilliseconds: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  object[key] = value;
},

Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
  var t1, buffer, $arguments, allNamedArguments, listOfNamedArguments, t2, t3, t4, selectorName, jsFunction;
  t1 = {};
  t1.argumentCount_0 = 0;
  buffer = P.StringBuffer$("");
  $arguments = [];
  t1.argumentCount_0 = t1.argumentCount_0 + positionalArguments.length;
  C.JSArray_methods.addAll$1($arguments, positionalArguments);
  if ("call$catchAll" in $function) {
    allNamedArguments = $function.call$catchAll();
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
      namedArguments.forEach$1(namedArguments, new H.Primitives_applyFunction_closure(allNamedArguments));
    listOfNamedArguments = Object.getOwnPropertyNames(allNamedArguments);
    t2 = t1.argumentCount_0;
    t3 = J.getInterceptor$asx(listOfNamedArguments);
    t4 = t3.get$length(listOfNamedArguments);
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t1.argumentCount_0 = t2 + t4;
    t3.forEach$1(listOfNamedArguments, new H.Primitives_applyFunction_closure0(buffer, $arguments, allNamedArguments));
  } else if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
    namedArguments.forEach$1(namedArguments, new H.Primitives_applyFunction_closure1(t1, buffer, $arguments));
  selectorName = "call$" + H.S(t1.argumentCount_0) + H.S(buffer);
  jsFunction = $function[selectorName];
  if (jsFunction == null) {
    if (namedArguments == null)
      t1 = [];
    else {
      t1 = namedArguments.get$keys();
      t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
    }
    return J.noSuchMethod$1($function, new H.JSInvocationMirror(C.Symbol_call, selectorName, 0, $arguments, t1, null));
  }
  return jsFunction.apply($function, $arguments);
},

Primitives_getConstructorOrInterceptor: function(className) {
  if (className == "String")
    return C.C_JSString;
  if (className == "int")
    return C.C_JSInt;
  if (className == "double")
    return C.C_JSDouble;
  if (className == "num")
    return C.C_JSNumber;
  if (className == "bool")
    return C.C_JSBool;
  if (className == "List")
    return C.C_JSArray;
  return init.allClasses[className];
},

JsCache_allocate: function() {
  var result = {x:0};
  delete result.x;
  return result;
},

iae: function(argument) {
  throw H.wrapException(P.ArgumentError$(argument));
},

ioore: function(receiver, index) {
  if (receiver == null)
    J.get$length$asx(receiver);
  if (typeof index !== "number" || Math.floor(index) !== index)
    H.iae(index);
  throw H.wrapException(P.RangeError$value(index));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = new P.NullThrownError();
  wrapper = new Error();
  wrapper.dartException = ex;
  if ("defineProperty" in Object) {
    Object.defineProperty(wrapper, "message", { get: H.toStringWrapper$closure.call$0 });
    wrapper.name = "";
  } else
    wrapper.toString = H.toStringWrapper$closure.call$0;
  return wrapper;
},

toStringWrapper: function() {
  return J.toString$0(this.dartException);
},

throwExpression: function(ex) {
  throw H.wrapException(ex);
},

makeLiteralListConst: function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
},

unwrapException: function(ex) {
  var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
  t1 = new H.unwrapException_saveStackTrace(ex);
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return t1.call$1(ex.dartException);
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if ("number" in ex && typeof ex.number == "number") {
    number = ex.number;
    ieErrorCode = number & 65535;
    if ((C.JSInt_methods.$shr(number, 16) & 8191) === 10)
      switch (ieErrorCode) {
        case 438:
          return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
        case 445:
        case 5007:
          t2 = H.S(message) + " (Error " + ieErrorCode + ")";
          return t1.call$1(new H.NullError(t2, null));
        default:
      }
  }
  if (ex instanceof TypeError) {
    t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
    t3 = $.get$TypeErrorDecoder_notClosurePattern();
    t4 = $.get$TypeErrorDecoder_nullCallPattern();
    nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
    t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
    t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
    t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
    $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
    t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
    t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
    match = t2.matchTypeError$1(message);
    if (match != null)
      return t1.call$1(H.JsNoSuchMethodError$(message, match));
    else {
      match = t3.matchTypeError$1(message);
      if (match != null) {
        match.method = "call";
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      } else {
        match = t4.matchTypeError$1(message);
        if (match == null) {
          match = nullLiteralCall.matchTypeError$1(message);
          if (match == null) {
            match = t5.matchTypeError$1(message);
            if (match == null) {
              match = t6.matchTypeError$1(message);
              if (match == null) {
                match = t7.matchTypeError$1(message);
                if (match == null) {
                  match = nullLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = t8.matchTypeError$1(message);
                    if (match == null) {
                      match = t9.matchTypeError$1(message);
                      t2 = match != null;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
        } else
          t2 = true;
        if (t2) {
          t2 = match == null ? null : match.method;
          return t1.call$1(new H.NullError(message, t2));
        }
      }
    }
    t2 = typeof message === "string" ? message : "";
    return t1.call$1(new H.UnknownJsTypeError(t2));
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new P.StackOverflowError();
    return t1.call$1(new P.ArgumentError(null));
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new P.StackOverflowError();
  return ex;
},

objectHashCode: function(object) {
  if (object == null || typeof object != 'object')
    return J.get$hashCode$(object);
  else
    return H.Primitives_objectHashCode(object);
},

fillLiteralMap: function(keyValuePairs, result) {
  var $length, index, index0, index1;
  $length = keyValuePairs.length;
  for (index = 0; index < $length; index = index1) {
    index0 = index + 1;
    index1 = index0 + 1;
    result.$indexSet(result, keyValuePairs[index], keyValuePairs[index0]);
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
  var t1 = J.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1) === true)
    return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2) === true)
    return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
  else if (t1.$eq(numberOfArguments, 3) === true)
    return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
  else if (t1.$eq(numberOfArguments, 4) === true)
    return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
  else
    throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,$globalState.currentContext,H.invokeClosure$closure.call$7);
  closure.$identity = $function;
  return $function;
},

propertyTypeCastError: function(value, property) {
  var t1 = J.getInterceptor$asx(property);
  throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
},

interceptedTypeCast: function(value, property) {
  var t1;
  if (value != null)
    t1 = typeof value === "object" && J.getInterceptor(value)[property];
  else
    t1 = true;
  if (t1)
    return value;
  H.propertyTypeCastError(value, property);
},

throwCyclicInit: function(staticName) {
  throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
},

createRuntimeType: function($name) {
  return new H.TypeImpl($name, null);
  "5,6,7";
},

"+createRuntimeType:1:0": 1,

setRuntimeTypeInfo: function(target, typeInfo) {
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getRuntimeTypeArguments: function(target, substitutionName) {
  return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
},

getRuntimeTypeArgument: function(target, substitutionName, index) {
  var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
  return $arguments == null ? null : $arguments[index];
},

getTypeArgumentByIndex: function(target, index) {
  var rti = H.getRuntimeTypeInfo(target);
  return rti == null ? null : rti[index];
},

getRuntimeTypeAsString: function(runtimeType, onTypeVariable) {
  return runtimeType[0].builtin$cls + H.joinArguments(runtimeType, 1, onTypeVariable);
},

runtimeTypeToString: function(type, onTypeVariable) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return H.getRuntimeTypeAsString(type, onTypeVariable);
  else if (typeof type == "function")
    return type.builtin$cls;
  else if (typeof type === "number" && Math.floor(type) === type)
    if (onTypeVariable == null)
      return C.JSInt_methods.toString$0(type);
    else
      return onTypeVariable.call$1(type);
  else
    return;
},

joinArguments: function(types, startIndex, onTypeVariable) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = P.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = H.runtimeTypeToString(argument, onTypeVariable);
    str = typeof str === "string" ? str : H.S(str);
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + H.S(buffer) + ">";
},

getRuntimeTypeString: function(object) {
  var className = typeof object === "object" && object !== null && object.constructor === Array ? "List" : J.getInterceptor(object).constructor.builtin$cls;
  return className + H.joinArguments(object.$builtinTypeInfo, 0, null);
},

substitute: function(substitution, $arguments) {
  if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function") {
    substitution = H.invokeOn(substitution, null, $arguments);
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function")
      $arguments = H.invokeOn(substitution, null, $arguments);
  }
  return $arguments;
},

checkSubtype: function(object, isField, checks, asField) {
  var $arguments, interceptor;
  if (object == null)
    return false;
  $arguments = H.getRuntimeTypeInfo(object);
  interceptor = J.getInterceptor(object);
  if (interceptor[isField] == null)
    return false;
  return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
},

areSubtypes: function(s, t) {
  var len, i;
  if (s == null || t == null)
    return true;
  len = s.length;
  for (i = 0; i < len; ++i)
    if (!H.isSubtype(s[i], t[i]))
      return false;
  return true;
},

checkFunctionSubtype: function(target, signatureName, contextName, context, typeArguments) {
  var interceptor, signatureLocation, typeSignature, targetSignatureFunction, targetSignature;
  if (target == null)
    return true;
  interceptor = J.getInterceptor(target);
  if ("$is_" + H.S(signatureName) in interceptor)
    return true;
  signatureLocation = $;
  if (contextName != null)
    signatureLocation = init.allClasses[contextName];
  typeSignature = signatureLocation["$signature_" + H.S(signatureName)];
  if (typeSignature == null)
    return false;
  targetSignatureFunction = interceptor.$signature;
  if (targetSignatureFunction == null)
    return false;
  targetSignature = H.invokeOn(targetSignatureFunction, interceptor, null);
  if (typeof typeSignature == "function")
    if (typeArguments != null)
      typeSignature = H.invokeOn(typeSignature, null, typeArguments);
    else
      typeSignature = context != null ? H.invokeOn(typeSignature, null, H.getRuntimeTypeArguments(context, contextName)) : H.invokeOn(typeSignature, null, null);
  return H.isFunctionSubtype(targetSignature, typeSignature);
},

computeSignature: function(signature, context, contextName) {
  return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
},

isSupertypeOfNull: function(type) {
  return type == null || type.builtin$cls === "Object" || type.builtin$cls === "Null";
},

checkSubtypeOfRuntimeType: function(o, t) {
  var rti, type;
  if (o == null)
    return H.isSupertypeOfNull(t);
  if (t == null)
    return true;
  rti = H.getRuntimeTypeInfo(o);
  o = J.getInterceptor(o);
  if (rti != null) {
    type = rti.slice();
    type.splice(0, 0, o);
  } else
    type = o;
  return H.isSubtype(type, t);
},

isSubtype: function(s, t) {
  var targetSignatureFunction, t1, typeOfS, t2, typeOfT, substitution;
  if (s === t)
    return true;
  if (s == null || t == null)
    return true;
  if ("func" in t) {
    if (!("func" in s)) {
      if ("$is_" + H.S(t.func) in s)
        return true;
      targetSignatureFunction = s.$signature;
      if (targetSignatureFunction == null)
        return false;
      s = targetSignatureFunction.apply(s, null);
    }
    return H.isFunctionSubtype(s, t);
  }
  if (t.builtin$cls === "Function" && "func" in s)
    return true;
  t1 = typeof s === "object" && s !== null && s.constructor === Array;
  typeOfS = t1 ? s[0] : s;
  t2 = typeof t === "object" && t !== null && t.constructor === Array;
  typeOfT = t2 ? t[0] : t;
  if (!("$is" + H.S(H.runtimeTypeToString(typeOfT, null)) in typeOfS))
    return false;
  substitution = typeOfT !== typeOfS ? typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))] : null;
  if (!t1 && substitution == null || !t2)
    return true;
  t1 = t1 ? s.slice(1) : null;
  t2 = t2 ? t.slice(1) : null;
  return H.areSubtypes(H.substitute(substitution, t1), t2);
},

isAssignable: function(s, t) {
  return H.isSubtype(s, t) || H.isSubtype(t, s);
},

areAssignable: function(s, t, allowShorter) {
  var sLength, tLength, i, t1, t2;
  if (t == null && s == null)
    return true;
  if (t == null)
    return allowShorter;
  if (s == null)
    return false;
  sLength = s.length;
  tLength = t.length;
  if (allowShorter) {
    if (sLength < tLength)
      return false;
  } else if (sLength !== tLength)
    return false;
  for (i = 0; i < tLength; ++i) {
    t1 = s[i];
    t2 = t[i];
    if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
      return false;
  }
  return true;
},

areAssignableMaps: function(s, t) {
  if (t == null)
    return true;
  if (s == null)
    return false;
  return      function (t, s, isAssignable) {
       for (var $name in t) {
         if (!s.hasOwnProperty($name)) {
           return false;
         }
         var tType = t[$name];
         var sType = s[$name];
         if (!isAssignable.call$2(sType, tType)) {
          return false;
         }
       }
       return true;
     }(t, s, H.isAssignable$closure)
  ;
},

isFunctionSubtype: function(s, t) {
  var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
  if (!("func" in s))
    return false;
  if ("void" in s) {
    if (!("void" in t) && "ret" in t)
      return false;
  } else if (!("void" in t)) {
    sReturnType = s.ret;
    tReturnType = t.ret;
    if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
      return false;
  }
  sParameterTypes = s.args;
  tParameterTypes = t.args;
  sOptionalParameterTypes = s.opt;
  tOptionalParameterTypes = t.opt;
  sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
  tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
  sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
  tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
  if (sParametersLen > tParametersLen)
    return false;
  if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
    return false;
  if (sParametersLen === tParametersLen) {
    if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
      return false;
    if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
      return false;
  } else {
    for (pos = 0; pos < sParametersLen; ++pos) {
      t1 = sParameterTypes[pos];
      t2 = tParameterTypes[pos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
      t1 = sOptionalParameterTypes[sPos];
      t2 = tParameterTypes[tPos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    for (sPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
      t1 = tOptionalParameterTypes[sPos];
      t2 = tOptionalParameterTypes[tPos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
  }
  return H.areAssignableMaps(s.named, t.named);
},

invokeOn: function($function, receiver, $arguments) {
  return $function.apply(receiver, $arguments);
},

toStringForNativeObject: function(obj) {
  var t1 = $.getTagFunction;
  return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
},

hashCodeForNativeObject: function(object) {
  return H.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

lookupAndCacheInterceptor: function(obj) {
  var tag, record, interceptor, interceptorClass, mark, t1;
  tag = $.getTagFunction.call$1(obj);
  record = $.dispatchRecordsForInstanceTags[tag];
  if (record != null) {
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  interceptor = $.interceptorsForUncacheableTags[tag];
  if (interceptor != null)
    return interceptor;
  interceptorClass = init.interceptorsByTag[tag];
  if (interceptorClass == null) {
    tag = $.alternateTagFunction.call$2(obj, tag);
    if (tag != null) {
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
    }
  }
  if (interceptorClass == null)
    return;
  interceptor = interceptorClass.prototype;
  mark = tag[0];
  if (mark === "!") {
    record = H.makeLeafDispatchRecord(interceptor);
    $.dispatchRecordsForInstanceTags[tag] = record;
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  if (mark === "~") {
    $.interceptorsForUncacheableTags[tag] = interceptor;
    return interceptor;
  }
  if (mark === "-") {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  }
  if (mark === "+")
    return H.patchInteriorProto(obj, interceptor);
  if (mark === "*")
    throw H.wrapException(P.UnimplementedError$(tag));
  if (init.leafTags[tag] === true) {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  } else
    return H.patchInteriorProto(obj, interceptor);
},

patchInteriorProto: function(obj, interceptor) {
  var proto, record;
  proto = Object.getPrototypeOf(obj);
  record = J.makeDispatchRecord(interceptor, proto, null, null);
  Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
  return interceptor;
},

makeLeafDispatchRecord: function(interceptor) {
  return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
},

makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
  var interceptor = interceptorClass.prototype;
  if (init.leafTags[tag] === true)
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return J.makeDispatchRecord(interceptor, proto, null, null);
},

initNativeDispatch: function() {
  if (true === $.initNativeDispatchFlag)
    return;
  $.initNativeDispatchFlag = true;
  H.initNativeDispatchContinue();
},

initNativeDispatchContinue: function() {
  var map, tags, i, tag, proto, record, interceptorClass;
  $.dispatchRecordsForInstanceTags = Object.create(null);
  $.interceptorsForUncacheableTags = Object.create(null);
  H.initHooks();
  map = init.interceptorsByTag;
  tags = Object.getOwnPropertyNames(map);
  if (typeof window != "undefined") {
    window;
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      proto = $.prototypeForTagFunction.call$1(tag);
      if (proto != null) {
        record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
        if (record != null)
          Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      }
    }
  }
  for (i = 0; i < tags.length; ++i) {
    tag = tags[i];
    if (/^[A-Za-z_]/.test(tag)) {
      interceptorClass = map[tag];
      map["!" + tag] = interceptorClass;
      map["~" + tag] = interceptorClass;
      map["-" + tag] = interceptorClass;
      map["+" + tag] = interceptorClass;
      map["*" + tag] = interceptorClass;
    }
  }
},

initHooks: function() {
  var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
  hooks = C.JS_CONST_TtD();
  hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_rD3, H.applyHooksTransformer(C.JS_CONST_6qb, H.applyHooksTransformer(C.JS_CONST_Cbr(C.JS_CONST_86y), hooks))))));
  if (typeof dartNativeDispatchHooksTransformer != "undefined") {
    transformers = dartNativeDispatchHooksTransformer;
    if (typeof transformers == "function")
      transformers = [transformers];
    if (transformers.constructor == Array)
      for (i = 0; i < transformers.length; ++i) {
        transformer = transformers[i];
        if (typeof transformer == "function")
          hooks = transformer(hooks) || hooks;
      }
  }
  getTag = hooks.getTag;
  getUnknownTag = hooks.getUnknownTag;
  prototypeForTag = hooks.prototypeForTag;
  $.getTagFunction = new H.initHooks_closure(getTag);
  $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
  $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
},

applyHooksTransformer: function(transformer, hooks) {
  return transformer(hooks) || hooks;
},

regExpGetGlobalNative: function(regexp) {
  var nativeRegexp = regexp.get$_nativeGlobalVersion();
  nativeRegexp.lastIndex = 0;
  return nativeRegexp;
},

allMatchesInStringUnchecked: function(needle, haystack) {
  var result, $length, patternLength, startIndex, position, endIndex;
  result = P.List_List(null, P.Match);
  H.setRuntimeTypeInfo(result, [P.Match]);
  $length = haystack.length;
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = C.JSString_methods.indexOf$2(haystack, needle, startIndex);
    if (position === -1)
      break;
    result.push(new H.StringMatch(position, haystack, needle));
    endIndex = position + patternLength;
    if (endIndex === $length)
      break;
    else
      startIndex = position === endIndex ? startIndex + 1 : endIndex;
  }
  return result;
},

stringContainsUnchecked: function(receiver, other, startIndex) {
  var t1, t2;
  if (typeof other === "string")
    return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
  else {
    t1 = J.getInterceptor$s(other);
    if (typeof other === "object" && other !== null && !!t1.$isJSSyntaxRegExp) {
      t1 = C.JSString_methods.substring$1(receiver, startIndex);
      t2 = other._nativeRegExp;
      return t2.test(t1);
    } else
      return J.get$isNotEmpty$asx(t1.allMatches$1(other, C.JSString_methods.substring$1(receiver, startIndex)));
  }
},

stringReplaceAllUnchecked: function(receiver, from, to) {
  var result, $length, i, t1;
  if (typeof from === "string")
    if (from === "")
      if (receiver === "")
        return to;
      else {
        result = P.StringBuffer$("");
        $length = receiver.length;
        result.write$1(to);
        for (i = 0; i < $length; ++i) {
          t1 = receiver[i];
          result._contents = result._contents + t1;
          result._contents = result._contents + to;
        }
        return result._contents;
      }
    else
      return receiver.replace(new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
  else {
    t1 = J.getInterceptor(from);
    if (typeof from === "object" && from !== null && !!t1.$isJSSyntaxRegExp)
      return receiver.replace(H.regExpGetGlobalNative(from), to.replace("$", "$$$$"));
    else {
      if (from == null)
        H.throwExpression(new P.ArgumentError(null));
      throw H.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
    }
  }
},

stringReplaceFirstUnchecked: function(receiver, from, to) {
  var t1;
  if (typeof from === "string")
    return receiver.replace(from, to.replace("$", "$$$$"));
  else {
    t1 = J.getInterceptor(from);
    if (typeof from === "object" && from !== null && !!t1.$isJSSyntaxRegExp)
      return receiver.replace(from._nativeRegExp, to.replace("$", "$$$$"));
    else
      throw H.wrapException("String.replace(Pattern) UNIMPLEMENTED");
  }
},

ConstantMap: {"": "Object;",
  get$isEmpty: function(_) {
    return J.$eq(this.get$length(this), 0);
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return J.$eq(this.get$length(this), 0) !== true;
  },
  "+isNotEmpty": 0,
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  "+toString:0:0": 0,
  _throwUnmodifiable$0: function() {
    throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
  },
  $indexSet: function(_, key, val) {
    return this._throwUnmodifiable$0();
  },
  "+[]=:2:0": 0,
  putIfAbsent$2: function(key, ifAbsent) {
    return this._throwUnmodifiable$0();
  },
  remove$1: function(_, key) {
    return this._throwUnmodifiable$0();
  },
  clear$0: function(_) {
    return this._throwUnmodifiable$0();
  },
  addAll$1: function(_, other) {
    return this._throwUnmodifiable$0();
  },
  $isMap: true
},

ConstantStringMap: {"": "ConstantMap;length>,__js_helper$_jsObject,__js_helper$_keys",
  containsValue$1: function(needle) {
    var t1 = this.get$values(this);
    return t1.any$1(t1, new H.ConstantStringMap_containsValue_closure(this, needle));
  },
  "+containsValue:1:0": 0,
  containsKey$1: function(key) {
    if (typeof key !== "string")
      return false;
    if (key === "__proto__")
      return false;
    return this.__js_helper$_jsObject.hasOwnProperty(key);
  },
  "+containsKey:1:0": 0,
  $index: function(_, key) {
    if (typeof key !== "string")
      return;
    if (!this.containsKey$1(key))
      return;
    return this.__js_helper$_jsObject[key];
  },
  "+[]:1:0": 0,
  forEach$1: function(_, f) {
    J.forEach$1$ax(this.__js_helper$_keys, new H.ConstantStringMap_forEach_closure(this, f));
  },
  get$keys: function() {
    var t1 = new H._ConstantMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
    return t1;
  },
  "+keys": 0,
  get$values: function(_) {
    return H.MappedIterable_MappedIterable(this.__js_helper$_keys, new H.ConstantStringMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
  },
  "+values": 0,
  $asConstantMap: null,
  $asMap: null,
  $isEfficientLength: true
},

ConstantStringMap_containsValue_closure: {"": "Closure;this_0,needle_1",
  call$1: function(value) {
    return J.$eq(value, this.needle_1);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

ConstantStringMap_forEach_closure: {"": "Closure;this_0,f_1",
  call$1: function(key) {
    var t1 = this.this_0;
    return this.f_1.call$2(key, t1.$index(t1, key));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

ConstantStringMap_values_closure: {"": "Closure;this_0",
  call$1: function(key) {
    var t1 = this.this_0;
    return t1.$index(t1, key);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_ConstantMapKeyIterable: {"": "IterableBase;__js_helper$_map",
  get$iterator: function(_) {
    return J.get$iterator$ax(this.__js_helper$_map.__js_helper$_keys);
  },
  $asIterableBase: null,
  $asIterable: null
},

JSInvocationMirror: {"": "Object;__js_helper$_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_namedIndices",
  get$memberName: function() {
    var $name, t1, unmangledName;
    $name = this.__js_helper$_memberName;
    t1 = J.getInterceptor($name);
    if (typeof $name === "object" && $name !== null && !!t1.$isSymbol)
      return $name;
    t1 = $.get$mangledNames();
    unmangledName = t1.$index(t1, $name);
    if (unmangledName != null) {
      t1 = J.split$1$s(unmangledName, ":");
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      $name = t1[0];
    }
    t1 = new H.Symbol0($name);
    this.__js_helper$_memberName = t1;
    return t1;
  },
  get$isMethod: function(_) {
    return this._kind === 0;
  },
  "+isMethod": 0,
  get$isGetter: function() {
    return this._kind === 1;
  },
  "+isGetter": 0,
  get$isSetter: function() {
    return this._kind === 2;
  },
  "+isSetter": 0,
  get$positionalArguments: function() {
    var t1, argumentCount, list, index;
    if (this._kind === 1)
      return C.List_empty;
    t1 = this._arguments;
    argumentCount = t1.length - this._namedArgumentNames.length;
    if (argumentCount === 0)
      return C.List_empty;
    list = [];
    for (index = 0; index < argumentCount; ++index) {
      if (index >= t1.length)
        throw H.ioore(t1, index);
      list.push(t1[index]);
    }
    return H.makeLiteralListConst(list);
  },
  get$namedArguments: function() {
    var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4;
    if (this._kind !== 0) {
      t1 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      H.setRuntimeTypeInfo(t1, [P.Symbol, null]);
      return t1;
    }
    t1 = this._namedArgumentNames;
    namedArgumentCount = t1.length;
    t2 = this._arguments;
    namedArgumentsStartIndex = t2.length - namedArgumentCount;
    if (namedArgumentCount === 0) {
      t1 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      H.setRuntimeTypeInfo(t1, [P.Symbol, null]);
      return t1;
    }
    map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, null);
    for (i = 0; i < namedArgumentCount; ++i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t3 = t1[i];
      t4 = namedArgumentsStartIndex + i;
      if (t4 < 0 || t4 >= t2.length)
        throw H.ioore(t2, t4);
      map.$indexSet(map, new H.Symbol0(t3), t2[t4]);
    }
    return map;
  },
  _getCachedInvocation$1: function(object) {
    var interceptor, $name, isIntercepted, interceptor0, receiver, method;
    interceptor = J.getInterceptor(object);
    $name = this._internalName;
    isIntercepted = $.interceptedNames.indexOf($name) !== -1;
    if (isIntercepted) {
      interceptor0 = object === interceptor ? null : interceptor;
      receiver = interceptor;
      interceptor = interceptor0;
    } else {
      receiver = object;
      interceptor = null;
    }
    method = receiver[$name];
    if (typeof method === "function") {
      if (!("$reflectable" in method))
        H.throwInvalidReflectionError(J.get$_name$x(this.get$memberName()));
      return new H.CachedInvocation(method, isIntercepted, interceptor);
    } else
      return new H.CachedNoSuchMethodInvocation(interceptor);
  },
  static: {
"": "JSInvocationMirror_METHOD,JSInvocationMirror_GETTER,JSInvocationMirror_SETTER",
}

},

CachedInvocation: {"": "Object;jsFunction,isIntercepted,cachedInterceptor",
  get$isNoSuchMethod: function() {
    return false;
  },
  invokeOn$2: function(victim, $arguments) {
    var receiver, arguments0;
    if (!this.isIntercepted) {
      if (typeof $arguments !== "object" || $arguments === null || $arguments.constructor !== Array)
        $arguments = P.List_List$from($arguments, true, null);
      receiver = victim;
    } else {
      arguments0 = [victim];
      C.JSArray_methods.addAll$1(arguments0, $arguments);
      receiver = this.cachedInterceptor;
      receiver = receiver != null ? receiver : victim;
      $arguments = arguments0;
    }
    return this.jsFunction.apply(receiver, $arguments);
  }
},

CachedNoSuchMethodInvocation: {"": "Object;interceptor",
  get$isNoSuchMethod: function() {
    return true;
  },
  invokeOn$2: function(victim, invocation) {
    var receiver = this.interceptor;
    return J.noSuchMethod$1(receiver == null ? victim : receiver, invocation);
  }
},

Primitives_applyFunction_closure: {"": "Closure;allNamedArguments_1",
  call$2: function(key, argument) {
    this.allNamedArguments_1[key] = argument;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Primitives_applyFunction_closure0: {"": "Closure;buffer_2,arguments_3,allNamedArguments_4",
  call$1: function($name) {
    this.buffer_2.write$1("$" + H.S($name));
    this.arguments_3.push(this.allNamedArguments_4[$name]);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Primitives_applyFunction_closure1: {"": "Closure;box_0,buffer_5,arguments_6",
  call$2: function($name, argument) {
    var t1;
    this.buffer_5.write$1("$" + H.S($name));
    this.arguments_6.push(argument);
    t1 = this.box_0;
    t1.argumentCount_0 = t1.argumentCount_0 + 1;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

TypeErrorDecoder: {"": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
  matchTypeError$1: function(message) {
    var match, result, t1;
    match = new RegExp(this._pattern).exec(message);
    if (match == null)
      return;
    result = {};
    t1 = this._arguments;
    if (t1 !== -1)
      result.arguments = match[t1 + 1];
    t1 = this._argumentsExpr;
    if (t1 !== -1)
      result.argumentsExpr = match[t1 + 1];
    t1 = this._expr;
    if (t1 !== -1)
      result.expr = match[t1 + 1];
    t1 = this._method;
    if (t1 !== -1)
      result.method = match[t1 + 1];
    t1 = this._receiver;
    if (t1 !== -1)
      result.receiver = match[t1 + 1];
    return result;
  },
  static: {
"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern",
TypeErrorDecoder_extractPattern: function(message) {
  var match, $arguments, argumentsExpr, expr, method, receiver;
  message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
  match = message.match(/\\\$[a-zA-Z]+\\\$/g);
  if (match == null)
    match = [];
  $arguments = match.indexOf("\\$arguments\\$");
  argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
  expr = match.indexOf("\\$expr\\$");
  method = match.indexOf("\\$method\\$");
  receiver = match.indexOf("\\$receiver\\$");
  return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
},

TypeErrorDecoder_provokeCallErrorOn: function(expression) {
  return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokeCallErrorOnNull: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
  return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokePropertyErrorOnNull: function() {
  return function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
  return function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}();
}}

},

NullError: {"": "Error;_message,_method",
  toString$0: function(_) {
    var t1 = this._method;
    if (t1 == null)
      return "NullError: " + H.S(this._message);
    return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
  },
  "+toString:0:0": 0,
  $isNoSuchMethodError: true,
  $isError: true
},

JsNoSuchMethodError: {"": "Error;_message,_method,_receiver",
  toString$0: function(_) {
    var t1, t2;
    t1 = this._method;
    if (t1 == null)
      return "NoSuchMethodError: " + H.S(this._message);
    t2 = this._receiver;
    if (t2 == null)
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + H.S(this._message) + ")";
    return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + H.S(this._message) + ")";
  },
  "+toString:0:0": 0,
  $isNoSuchMethodError: true,
  $isError: true,
  static: {
JsNoSuchMethodError$: function(_message, match) {
  var t1, t2;
  t1 = match == null;
  t2 = t1 ? null : match.method;
  t1 = t1 ? null : match.receiver;
  return new H.JsNoSuchMethodError(_message, t2, t1);
}}

},

UnknownJsTypeError: {"": "Error;_message",
  toString$0: function(_) {
    var t1 = this._message;
    return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
  },
  "+toString:0:0": 0
},

unwrapException_saveStackTrace: {"": "Closure;ex_0",
  call$1: function(error) {
    var t1 = J.getInterceptor(error);
    if (typeof error === "object" && error !== null && !!t1.$isError)
      if (error.$thrownJsError == null)
        error.$thrownJsError = this.ex_0;
    return error;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_StackTrace: {"": "Object;_exception,_trace",
  toString$0: function(_) {
    var t1, trace;
    t1 = this._trace;
    if (t1 != null)
      return t1;
    t1 = this._exception;
    trace = typeof t1 === "object" ? t1.stack : null;
    t1 = trace == null ? "" : trace;
    this._trace = t1;
    return t1;
  },
  "+toString:0:0": 0
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

invokeClosure_closure2: {"": "Closure;closure_6,arg1_7,arg2_8,arg3_9",
  call$0: function() {
    return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

invokeClosure_closure3: {"": "Closure;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
  call$0: function() {
    return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  },
  "+toString:0:0": 0,
  $isClosure: true,
  $isFunction: true
},

BoundClosure: {"": "Closure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
      return false;
    return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    var t1, receiverHashCode;
    t1 = this._receiver;
    if (t1 == null)
      receiverHashCode = H.Primitives_objectHashCode(this._self);
    else
      receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
    t1 = H.Primitives_objectHashCode(this.__js_helper$_target);
    if (typeof receiverHashCode !== "number")
      throw receiverHashCode.$xor();
    return (receiverHashCode ^ t1) >>> 0;
  },
  $isBoundClosure: true
},

Creates: {"": "Object;types"},

Returns: {"": "Object;types"},

JSName: {"": "Object;name>"},

CastErrorImplementation: {"": "Error;message>",
  toString$0: function(_) {
    return this.message;
  },
  "+toString:0:0": 0,
  $isError: true,
  static: {
CastErrorImplementation$: function(actualType, expectedType) {
  return new H.CastErrorImplementation("CastError: Casting value of type " + actualType + " to incompatible type " + H.S(expectedType));
}}

},

RuntimeError: {"": "Error;message>",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  },
  "+toString:0:0": 0,
  static: {
RuntimeError$: function(message) {
  return new H.RuntimeError(message);
}}

},

TypeImpl: {"": "Object;_typeName<,_unmangledName",
  toString$0: function(_) {
    var t1, unmangledName, unmangledName0;
    t1 = this._unmangledName;
    if (t1 != null)
      return t1;
    unmangledName = this._typeName;
    unmangledName0 = H.unmangleGlobalNameIfPreservedAnyways(unmangledName);
    unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
    this._unmangledName = unmangledName;
    return unmangledName;
  },
  "+toString:0:0": 0,
  get$hashCode: function(_) {
    return J.get$hashCode$(this._typeName);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isTypeImpl && J.$eq(this._typeName, other._typeName) === true;
  },
  $isTypeImpl: true,
  $isType: true
},

TypeVariable: {"": "Object;owner<,name>,bound>"},

initHooks_closure: {"": "Closure;getTag_0",
  call$1: function(o) {
    return this.getTag_0(o);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

initHooks_closure0: {"": "Closure;getUnknownTag_1",
  call$2: function(o, tag) {
    return this.getUnknownTag_1(o, tag);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

initHooks_closure1: {"": "Closure;prototypeForTag_2",
  call$1: function(tag) {
    return this.prototypeForTag_2(tag);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

JSSyntaxRegExp: {"": "Object;_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
  get$_nativeGlobalVersion: function() {
    var t1 = this._nativeGlobalRegExp;
    if (t1 != null)
      return t1;
    t1 = this._nativeRegExp;
    t1 = H.JSSyntaxRegExp_makeNative(t1.source, t1.multiline, !t1.ignoreCase, true);
    this._nativeGlobalRegExp = t1;
    return t1;
  },
  get$_nativeAnchoredVersion: function() {
    var t1 = this._nativeAnchoredRegExp;
    if (t1 != null)
      return t1;
    t1 = this._nativeRegExp;
    t1 = H.JSSyntaxRegExp_makeNative(t1.source + "|()", t1.multiline, !t1.ignoreCase, true);
    this._nativeAnchoredRegExp = t1;
    return t1;
  },
  firstMatch$1: function(str) {
    var m;
    if (typeof str !== "string")
      H.throwExpression(new P.ArgumentError(str));
    m = this._nativeRegExp.exec(str);
    if (m == null)
      return;
    return H._MatchImplementation$(this, m);
  },
  hasMatch$1: function(str) {
    if (typeof str !== "string")
      H.throwExpression(new P.ArgumentError(str));
    return this._nativeRegExp.test(str);
  },
  allMatches$1: function(_, str) {
    if (typeof str !== "string")
      H.throwExpression(new P.ArgumentError(str));
    return new H._AllMatchesIterable(this, str);
  },
  _execGlobal$2: function(string, start) {
    var regexp, match;
    regexp = this.get$_nativeGlobalVersion();
    regexp.lastIndex = start;
    match = regexp.exec(string);
    if (match == null)
      return;
    return H._MatchImplementation$(this, match);
  },
  _execAnchored$2: function(string, start) {
    var regexp, match, t1, t2;
    regexp = this.get$_nativeAnchoredVersion();
    regexp.lastIndex = start;
    match = regexp.exec(string);
    if (match == null)
      return;
    t1 = match.length;
    t2 = t1 - 1;
    if (t2 < 0)
      throw H.ioore(match, t2);
    if (match[t2] != null)
      return;
    J.set$length$asx(match, t2);
    return H._MatchImplementation$(this, match);
  },
  matchAsPrefix$2: function(_, string, start) {
    var t1;
    if (!(start < 0)) {
      t1 = J.get$length$asx(string);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = start > t1;
    } else
      t1 = true;
    if (t1)
      throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(string)));
    return this._execAnchored$2(string, start);
  },
  matchAsPrefix$1: function($receiver, string) {
    return this.matchAsPrefix$2($receiver, string, 0);
  },
  $isJSSyntaxRegExp: true,
  static: {
JSSyntaxRegExp_makeNative: function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  m = multiLine ? "m" : "";
  i = caseSensitive ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw H.wrapException(P.FormatException$("Illegal RegExp pattern: " + pattern + ", " + errorMessage));
}}

},

_MatchImplementation: {"": "Object;pattern,_match",
  group$1: function(index) {
    var t1 = this._match;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  $index: function(_, index) {
    var t1 = this._match;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  "+[]:1:0": 0,
  _MatchImplementation$2: function(pattern, _match) {
  },
  $isMatch: true,
  static: {
_MatchImplementation$: function(pattern, _match) {
  var t1 = new H._MatchImplementation(pattern, _match);
  t1._MatchImplementation$2(pattern, _match);
  return t1;
}}

},

_AllMatchesIterable: {"": "IterableBase;_re,_string",
  get$iterator: function(_) {
    return new H._AllMatchesIterator(this._re, this._string, null);
  },
  $asIterableBase: function() {
    return [P.Match];
  },
  $asIterable: function() {
    return [P.Match];
  }
},

_AllMatchesIterator: {"": "Object;_regExp,_string,__js_helper$_current",
  get$current: function() {
    return this.__js_helper$_current;
  },
  "+current": 0,
  moveNext$0: function() {
    var t1, t2, index;
    if (this._string == null)
      return false;
    t1 = this.__js_helper$_current;
    if (t1 != null) {
      t1 = t1._match;
      t2 = t1.index;
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      t1 = J.get$length$asx(t1[0]);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      index = t2 + t1;
      if (this.__js_helper$_current._match.index === index)
        ++index;
    } else
      index = 0;
    this.__js_helper$_current = this._regExp._execGlobal$2(this._string, index);
    if (this.__js_helper$_current == null) {
      this._string = null;
      return false;
    }
    return true;
  }
},

StringMatch: {"": "Object;start,input,pattern",
  $index: function(_, g) {
    if (J.$eq(g, 0) !== true)
      H.throwExpression(P.RangeError$value(g));
    return this.pattern;
  },
  "+[]:1:0": 0,
  group$1: function(group_) {
    if (J.$eq(group_, 0) !== true)
      throw H.wrapException(P.RangeError$value(group_));
    return this.pattern;
  },
  $isMatch: true
}}],
["annotations", "annotations.dart", , Q, {
AnnotationElement: {"": ["DartdocElement;_annotations%-,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$methodsToCall: function(receiver) {
    return N.concat(E.DartdocElement.prototype.get$methodsToCall.call(this, receiver), C.List_Symbol_addAnnotations);
    "12";
  },
  "+methodsToCall": 1,
  get$annotations: function(receiver) {
    return receiver._annotations;
    "12,98";
  },
  "+annotations": 1,
  set$annotations: function(receiver, newAnnotations) {
    this.notifyObservables$1(receiver, new Q.AnnotationElement_annotations_closure(receiver, newAnnotations));
    "12,99,12,98";
  },
  "+annotations=": 1,
  addAnnotations$0: function(receiver) {
    var t1, out, annotation, t2, t3, hasParams, str, fragment;
    J.clear$0$ax(J.get$children$x(receiver.shadowRoot || receiver.webkitShadowRoot));
    t1 = receiver._annotations;
    if (t1 == null || J.get$isEmpty$asx(J.get$annotations$x(t1)) === true)
      return;
    out = P.StringBuffer$("");
    for (t1 = J.get$iterator$ax(J.get$annotations$x(receiver._annotations)); t1.moveNext$0();) {
      annotation = t1.get$current();
      t2 = J.getInterceptor$x(annotation);
      t3 = "<i><a href=\"#" + H.S(J.get$location$x(t2.get$link(annotation))) + "\">" + H.S(J.get$simpleType$x(t2.get$link(annotation))) + "</a></i>";
      out._contents = out._contents + t3;
      hasParams = J.get$isNotEmpty$asx(t2.get$parameters(annotation));
      if (hasParams)
        out._contents = out._contents + "(";
      str = J.join$1$ax(t2.get$parameters(annotation), ",&nbsp;");
      str = typeof str === "string" ? str : H.S(str);
      out._contents = out._contents + str;
      if (hasParams)
        out._contents = out._contents + ")";
    }
    if (J.get$isNotEmpty$asx(receiver._annotations.get$supportedBrowsers())) {
      out.write$1("<br/><i>Supported on: ");
      out.write$1(J.join$1$ax(receiver._annotations.get$supportedBrowsers(), ",&nbsp;"));
      out.write$1("</i><br/>");
    }
    fragment = this.createFragment$2$validator(receiver, out._contents, $.get$validator());
    (receiver.shadowRoot || receiver.webkitShadowRoot).appendChild(fragment);
    "12";
  },
  "+addAnnotations:0:0": 1,
  "@": function() {
    return [C.CustomTag_8h9];
  },
  static: {
AnnotationElement$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.AnnotationElement_methods.Element$created$0(receiver);
  C.AnnotationElement_methods.PolymerElement$created$0(receiver);
  return receiver;
  "8";
},

"+new AnnotationElement$created:0:0": 1}

},

"+AnnotationElement": [67],

AnnotationElement_annotations_closure: {"": "Closure;this_0-,newAnnotations_1-",
  call$0: function() {
    var t1 = this.newAnnotations_1;
    J.set$_annotations$x(this.this_0, t1);
    return t1;
    "12";
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+AnnotationElement_annotations_closure": [100]}],
["app_bootstrap", "index.html_bootstrap.dart", , E, {
main: function() {
  $._librariesToLoad = ["annotations.dart", "parameters.dart", "item.dart", "variable-heading.dart", "variable.dart", "method-panel.dart", "typedef.dart", "category.dart", "minimap-element.dart", "homepage.dart", "class.dart", "library.dart", "method.dart", "page.dart", "results.dart", "search.dart", "minimap-library.dart", "library-panel.dart", "minimap-class.dart", "main.dart", "app.dart", "index.html.0.dart"];
  $._useDirtyChecking = false;
  A.initPolymer();
}},
1],
["category", "category.dart", , N, {
CategoryElement: {"": ["DartdocElement;_category%-,_methodsCache%-,_variablesCache%-,_everythingElseCache%-,validator%-,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  addChildren$0: function(receiver) {
    var elements, types, root, t1, t2;
    if ((receiver.shadowRoot || receiver.webkitShadowRoot) == null)
      return;
    elements = [];
    types = H.fillLiteralMap(["dartdoc-variable", this.get$categoryVariables(receiver), "dartdoc-item", this.get$categoryEverythingElse(receiver), "method-panel", this.get$categoryMethods(receiver)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    types.forEach$1(types, new N.CategoryElement_addChildren_closure(elements));
    root = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#itemList");
    t1 = J.getInterceptor$x(root);
    t2 = t1.get$children(root);
    t2.clear$0(t2);
    t1 = t1.get$children(root);
    t1.addAll$1(t1, elements);
    "12,101";
  },
  "+addChildren:0:0": 1,
  get$addChildren: function(_receiver) {
    return new H.BoundClosure$i0(this, N.CategoryElement.prototype.addChildren$0, _receiver, "addChildren$0");
  },
  get$observables: function(receiver) {
    return N.concat(E.DartdocElement.prototype.get$observables.call(this, receiver), C.List_gc6);
    "12";
  },
  "+observables": 1,
  get$category: function(receiver) {
    return receiver._category;
    "14,98";
  },
  "+category": 1,
  set$category: function(receiver, newCategory) {
    var t1;
    if (newCategory != null) {
      t1 = J.getInterceptor(newCategory);
      if (typeof newCategory === "object" && newCategory !== null && !!t1.$isContainer) {
        t1 = receiver._category;
        t1 = newCategory == null ? t1 == null : newCategory === t1;
      } else
        t1 = true;
    } else
      t1 = true;
    if (t1)
      return;
    this._flushCache$0(receiver);
    this.notifyObservables$1(receiver, new N.CategoryElement_category_closure(receiver, newCategory));
    this.addChildren$0(receiver);
    "12,102,12,98";
  },
  "+category=": 1,
  get$title: function(receiver) {
    var t1 = receiver._category;
    return t1 == null ? "" : J.get$name$x(t1);
    "7,101";
  },
  "+title": 1,
  get$stylizedName: function(receiver) {
    var t1 = receiver._category;
    return t1 == null ? "" : J.replaceAll$2$s(J.get$name$x(t1), " ", "-");
    "7,101";
  },
  "+stylizedName": 1,
  get$categoryContent: function(receiver) {
    var t1 = receiver._category;
    return t1 == null ? [] : J.get$content$x(t1);
    "12,101";
  },
  "+categoryContent": 1,
  get$categoryMethods: function(receiver) {
    var t1 = receiver._methodsCache;
    if (t1 != null)
      return t1;
    t1 = receiver._category;
    t1 = t1 == null ? [] : J.get$content$x(t1);
    t1 = J.where$1$ax(t1, new N.CategoryElement_categoryMethods_closure());
    t1 = t1.toList$0(t1);
    receiver._methodsCache = t1;
    return t1;
    "12,101";
  },
  "+categoryMethods": 1,
  get$categoryVariables: function(receiver) {
    var t1 = receiver._variablesCache;
    if (t1 != null)
      return t1;
    t1 = receiver._category;
    t1 = t1 == null ? [] : J.get$content$x(t1);
    t1 = J.where$1$ax(t1, new N.CategoryElement_categoryVariables_closure());
    t1 = t1.toList$0(t1);
    receiver._variablesCache = t1;
    return t1;
    "12,101";
  },
  "+categoryVariables": 1,
  get$categoryEverythingElse: function(receiver) {
    var t1 = receiver._everythingElseCache;
    if (t1 != null)
      return t1;
    t1 = receiver._category;
    t1 = t1 == null ? [] : J.get$content$x(t1);
    t1 = J.where$1$ax(t1, new N.CategoryElement_categoryEverythingElse_closure());
    t1 = t1.toList$0(t1);
    receiver._everythingElseCache = t1;
    return t1;
    "12,101";
  },
  "+categoryEverythingElse": 1,
  _flushCache$0: function(receiver) {
    receiver._methodsCache = null;
    receiver._variablesCache = null;
    receiver._everythingElseCache = null;
    "12";
  },
  "+_flushCache:0:0": 1,
  get$accordionStyle: function(receiver) {
    return $.get$viewer()._dartdoc_viewer$__$isDesktop === true ? "" : "collapsed";
    "12,101";
  },
  "+accordionStyle": 1,
  accordionStyleFor$1: function(receiver, isDesktop) {
    return isDesktop === true ? "" : "collapsed";
    "12,103,12";
  },
  "+accordionStyleFor:1:0": 1,
  get$accordionParent: function(receiver) {
    return $.get$viewer()._dartdoc_viewer$__$isDesktop === true ? "" : "#accordion-grouping";
    "12,101";
  },
  "+accordionParent": 1,
  accordionParentFor$1: function(receiver, isDesktop) {
    return isDesktop === true ? "" : "#accordion-grouping";
    "12,103,12";
  },
  "+accordionParentFor:1:0": 1,
  get$divClass: function(receiver) {
    return $.get$viewer()._dartdoc_viewer$__$isDesktop === true ? "collapse in" : "collapse";
    "12,101";
  },
  "+divClass": 1,
  divClassFor$1: function(receiver, isDesktop) {
    return isDesktop === true ? "collapse in" : "collapse";
    "12,103,12";
  },
  "+divClassFor:1:0": 1,
  hideShow$3: function(receiver, $event, detail, target) {
    var list, t1;
    list = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector(J.get$attributes$x(target)._element.getAttribute("data-target"));
    t1 = J.getInterceptor$x(list);
    if (J.contains$1$asx(t1.get$classes(list), "in") === true) {
      J.remove$1$ax(t1.get$classes(list), "in");
      J.set$height$x(list.style, "0px");
    } else {
      J.add$1$ax(t1.get$classes(list), "in");
      J.set$height$x(list.style, "auto");
    }
    "12,104,12,105,12,106,107";
  },
  "+hideShow:3:0": 1,
  get$currentLocation: function(receiver) {
    return J.toString$0(C.Window_methods.get$location(window));
    "12,101";
  },
  "+currentLocation": 1,
  CategoryElement$created$0: function(receiver) {
    var t1 = L.PathObserver$($.get$viewer(), "isDesktop", null);
    t1.get$changes(t1).listen$1(new N.CategoryElement$created_closure(receiver));
    t1 = L.PathObserver$($.get$viewer(), "isInherited", null);
    t1.get$changes(t1).listen$1(new N.CategoryElement$created_closure0(receiver));
    J.setProperty$2$x(receiver.style, "display", "block");
    "12";
  },
  "@": function() {
    return [C.CustomTag_Why];
  },
  static: {
CategoryElement$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6, t7;
  t1 = [];
  H.setRuntimeTypeInfo(t1, [W.NodeValidator]);
  t2 = new W.NodeValidatorBuilder(t1);
  t1.push(W._Html5NodeValidator$(new E.SameProtocolUriPolicy(W.AnchorElement_AnchorElement(null), C.Window_methods.get$location(window))));
  t2.allowCustomElement$2$attributes("method-panel", ["item"]);
  t2.allowCustomElement$2$attributes("dartdoc-item", ["item"]);
  t2.allowCustomElement$2$attributes("dartdoc-variable", ["item"]);
  t2.allowCustomElement$2$attributes("dartdoc-category-interior", ["item"]);
  t2.allowTagExtension$3$attributes("method-panel", "div", ["item"]);
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t3 = $.get$Polymer__polymerSyntax();
  t4 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t5 = J.JSString;
  t6 = W.Element;
  t7 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t5, t6), null, null);
  H.setRuntimeTypeInfo(t7, [t5, t6]);
  receiver._methodsCache = null;
  receiver._variablesCache = null;
  receiver._everythingElseCache = null;
  receiver.validator = t2;
  receiver._pathname = t1;
  receiver.syntax = t3;
  receiver._shadowRoots = t4;
  receiver.$$ = t7;
  C.CategoryElement_methods.Element$created$0(receiver);
  C.CategoryElement_methods.PolymerElement$created$0(receiver);
  C.CategoryElement_methods.CategoryElement$created$0(receiver);
  return receiver;
  "9";
},

"+new CategoryElement$created:0:0": 1}

},

"+CategoryElement": [67],

CategoryElement$created_closure: {"": "Closure;this_0-",
  call$1: function(changes) {
    var change, t1, t2, t3, t4, t5;
    change = J.get$first$ax(changes);
    t1 = this.this_0;
    t2 = J.getInterceptor$x(change);
    t3 = t2.get$oldValue(change) === true ? "" : "collapsed";
    t4 = $.get$viewer()._dartdoc_viewer$__$isDesktop === true ? "" : "collapsed";
    t5 = J.getInterceptor$x(t1);
    t5.notifyPropertyChange$3(t1, C.Symbol_accordionStyle, t3, t4);
    t3 = t2.get$oldValue(change) === true ? "" : "#accordion-grouping";
    t5.notifyPropertyChange$3(t1, C.Symbol_accordionParent, t3, $.get$viewer()._dartdoc_viewer$__$isDesktop === true ? "" : "#accordion-grouping");
    t2 = t2.get$oldValue(change) === true ? "collapse in" : "collapse";
    t5.notifyPropertyChange$3(t1, C.Symbol_divClass, t2, $.get$viewer()._dartdoc_viewer$__$isDesktop === true ? "collapse in" : "collapse");
    "12,108,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+CategoryElement$created_closure": [100],

CategoryElement$created_closure0: {"": "Closure;this_1-",
  call$1: function(changes) {
    var t1, t2;
    t1 = this.this_1;
    t2 = J.getInterceptor$x(t1);
    t2._flushCache$0(t1);
    t2.addChildren$0(t1);
    "12,108,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+CategoryElement$created_closure": [100],

CategoryElement_addChildren_closure: {"": "Closure;elements_0-",
  call$2: function(tagName, items) {
    var t1, t2, t3, subItem, newItem, t4;
    for (t1 = J.get$iterator$ax(items), t2 = this.elements_0, t3 = J.getInterceptor$ax(t2); t1.moveNext$0();) {
      subItem = t1.get$current();
      newItem = document.createElement(tagName, null);
      t4 = J.getInterceptor$x(newItem);
      t4.set$item(newItem, subItem);
      J.add$1$ax(t4.get$classes(newItem), "panel");
      t3.add$1(t2, newItem);
    }
    "12,109,12,33,12";
  },
  "+call:2:0": 1,
  $isFunction: true,
  $is_args2: true
},

"+CategoryElement_addChildren_closure": [100],

CategoryElement_category_closure: {"": "Closure;this_0-,newCategory_1-",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = J.getInterceptor$x(t1);
    t2.set$_category(t1, this.newCategory_1);
    t2._flushCache$0(t1);
    "12";
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+CategoryElement_category_closure": [100],

CategoryElement_categoryMethods_closure: {"": "Closure;",
  call$1: function(each) {
    var t1 = J.getInterceptor$x(each);
    if (typeof each === "object" && each !== null && !!t1.$isMethod)
      t1 = !t1.get$isInherited(each) || $.get$viewer()._dartdoc_viewer$__$isInherited === true;
    else
      t1 = false;
    return t1;
    "12,110,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+CategoryElement_categoryMethods_closure": [100],

CategoryElement_categoryVariables_closure: {"": "Closure;",
  call$1: function(each) {
    var t1 = J.getInterceptor$x(each);
    if (typeof each === "object" && each !== null && !!t1.$isVariable)
      t1 = !t1.get$isInherited(each) || $.get$viewer()._dartdoc_viewer$__$isInherited === true;
    else
      t1 = false;
    return t1;
    "12,110,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+CategoryElement_categoryVariables_closure": [100],

CategoryElement_categoryEverythingElse_closure: {"": "Closure;",
  call$1: function(each) {
    var t1 = J.getInterceptor$x(each);
    if (typeof each !== "object" || each === null || !t1.$isVariable)
      if (typeof each !== "object" || each === null || !t1.$isMethod)
        t1 = t1.get$isInherited(each) !== true || $.get$viewer()._dartdoc_viewer$__$isInherited === true;
      else
        t1 = false;
    else
      t1 = false;
    return t1;
    "12,110,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+CategoryElement_categoryEverythingElse_closure": [100]}],
["category_item", "package:dartdoc_viewer/item.dart", , E, {
nothing: function() {
  return;
},

_wrapComment: function(comment) {
  return "<div>" + H.S(comment == null ? "" : comment) + "</div>";
  "7,11,7,13";
},

"+_wrapComment:1:0": 1,

_sort: function(items) {
  J.forEach$1$ax(items, new E._sort_closure());
  "12,33,34,13";
},

"+_sort:1:0": 1,

_compareLibraryNames: function(a, b) {
  var t1, aIsDart;
  t1 = J.getInterceptor$s(a);
  aIsDart = t1.startsWith$1(a, "dart");
  if (aIsDart === J.startsWith$1$s(b, "dart"))
    return t1.compareTo$1(a, b);
  return aIsDart ? -1 : 1;
},

buildHierarchy: function(page, previous) {
  var t1, t2;
  t1 = J.getInterceptor$x(page);
  if (J.get$isEmpty$asx(t1.get$path(page)) === true) {
    t1 = t1.get$path(page);
    t2 = J.getInterceptor$ax(t1);
    t2.addAll$1(t1, J.get$path$x(previous));
    t2.add$1(t1, page);
  }
  page.addToHierarchy$0();
  "12,36,31,37,31,13";
},

"+buildHierarchy:2:0": 1,

Container: {"": ["ChangeNotifier;name>-,_category_item$__$comment@-,_changes,_records", function() {
    return [C.C_ObservableProperty];
  }, null, null, null],
  get$comment: function() {
    return this._category_item$__$comment;
    "7,13,101";
  },
  "+comment": 1,
  set$comment: function(value) {
    this._category_item$__$comment = F.notifyPropertyChangeHelper(this, C.Symbol_comment, this._category_item$__$comment, value);
    "12,82,7,13";
  },
  "+comment=": 1,
  toString$0: function(_) {
    return H.S(new H.TypeImpl(H.getRuntimeTypeString(this), null)) + "(" + H.S(this.name) + ")";
    "7";
  },
  "+toString:0:0": 1,
  $isContainer: true,
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
Container$: function($name, comment) {
  return new E.Container($name, comment, null, null);
  "10,6,7,11,12";
},

"+new Container:2:0": 1,

"*": [12]}

},

"+Container": [111],

Category: {"": ["Container;content*-,memberNames@-,inheritedCounter@-,memberCounter@-,name-,_category_item$__$comment-,_changes,_records", null, null, null, null, function() {
    return [C.C_ObservableProperty];
  }, null, null, null],
  memberNamed$2$orElse: function($name, orElse) {
    return J.firstWhere$2$orElse$ax(this.content, new E.Category_memberNamed_closure($name), orElse);
    "31,6,7,112,12";
  },
  "+memberNamed:1:1:orElse": 1,
  "*memberNamed": [113],
  memberNamed$1: function(name) {
    return this.memberNamed$2$orElse(name, E.nothing$closure);
  },
  "+memberNamed:1:0": 1,
  addInheritedItem$2: function(clazz, item) {
    var t1, t2;
    t1 = J.getInterceptor$x(item);
    if (J.contains$1$asx(this.memberNames, t1.get$name(item)) !== true) {
      this.memberCounter = J.$add$ns(this.memberCounter, 1);
      this.inheritedCounter = J.$add$ns(this.inheritedCounter, 1);
      t2 = $.get$pageIndex();
      t2.$indexSet(t2, H.S(clazz.get$qualifiedName()) + "." + H.S(t1.get$name(item)), item);
      J.add$1$ax(this.content, item);
    } else
      J.firstWhere$1$ax(this.content, new E.Category_addInheritedItem_closure(item)).addInheritedComment$1(item);
    "12,114,42,115,31";
  },
  "+addInheritedItem:2:0": 1,
  get$hasNonInherited: function() {
    return J.$lt$n(this.inheritedCounter, this.memberCounter);
    "18";
  },
  "+hasNonInherited": 1,
  Category$forStaticMembers$2: function(members, $name) {
    var t1, member;
    for (t1 = J.get$iterator$ax(members); t1.moveNext$0();) {
      member = t1.get$current();
      if (member.get$isStatic() === true) {
        J.add$1$ax(this.memberNames, J.get$name$x(member));
        this.memberCounter = J.$add$ns(this.memberCounter, 1);
        J.add$1$ax(this.content, member);
      }
    }
    "12,24,25,6,12";
  },
  Category$forTypedefs$1: function(yaml) {
    if (yaml != null)
      J.forEach$1$ax(yaml.get$keys(), new E.Category$forTypedefs_closure(this, yaml));
    "12,26,21";
  },
  Category$forClasses$3$isAbstract: function(classes, $name, isAbstract) {
    if (classes != null)
      J.forEach$1$ax(classes, new E.Category$forClasses_closure(this));
    "12,15,16,6,7,17,18";
  },
  Category$forInstanceMembers$2: function(members, $name) {
    var t1, member, t2;
    for (t1 = J.get$iterator$ax(members); t1.moveNext$0();) {
      member = t1.get$current();
      if (member.get$isStatic() !== true) {
        t2 = J.getInterceptor$x(member);
        J.add$1$ax(this.memberNames, t2.get$name(member));
        this.memberCounter = J.$add$ns(this.memberCounter, 1);
        if (t2.get$isInherited(member) === true)
          this.inheritedCounter = J.$add$ns(this.inheritedCounter, 1);
        J.add$1$ax(this.content, member);
      }
    }
    "12,24,25,6,12";
  },
  Category$forVariables$3: function(variables, getters, setters) {
    if (variables != null)
      J.forEach$1$ax(variables.get$keys(), new E.Category$forVariables_closure(this, variables));
    if (getters != null)
      J.forEach$1$ax(getters.get$keys(), new E.Category$forVariables_closure0(this, getters));
    if (setters != null)
      J.forEach$1$ax(setters.get$keys(), new E.Category$forVariables_closure1(this, setters));
    "12,20,21,22,21,23,21";
  },
  Category$forFunctions$5$className$isConstructor$isOperator: function(yaml, $name, className, isConstructor, isOperator) {
    if (yaml != null)
      J.forEach$1$ax(yaml.get$keys(), new E.Category$forFunctions_closure(this, yaml, isConstructor, className, isOperator));
    "12,26,21,6,7,27,18,28,7,29,18";
  },
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
Category$forClasses: function(classes, $name, isAbstract) {
  var t1 = new E.Category([], P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString), 0, 0, $name, null, null, null);
  t1.Category$forClasses$3$isAbstract(classes, $name, isAbstract);
  return t1;
  "14,15,16,6,7,17,18";
},

"+new Category$forClasses:2:1:isAbstract": 1,

"*forClasses": [19],

Category$forVariables: function(variables, getters, setters) {
  var t1 = new E.Category([], P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString), 0, 0, "Properties", null, null, null);
  t1.Category$forVariables$3(variables, getters, setters);
  return t1;
  "14,20,21,22,21,23,21";
},

"+new Category$forVariables:3:0": 1,

Category$forInstanceMembers: function(members, $name) {
  var t1 = new E.Category([], P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString), 0, 0, $name, null, null, null);
  t1.Category$forInstanceMembers$2(members, $name);
  return t1;
  "14,24,25,6,12";
},

"+new Category$forInstanceMembers:2:0": 1,

Category$forStaticMembers: function(members, $name) {
  var t1 = new E.Category([], P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString), 0, 0, $name, null, null, null);
  t1.Category$forStaticMembers$2(members, $name);
  return t1;
  "14,24,25,6,12";
},

"+new Category$forStaticMembers:2:0": 1,

Category$forFunctions: function(yaml, $name, className, isConstructor, isOperator) {
  var t1 = new E.Category([], P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString), 0, 0, $name, null, null, null);
  t1.Category$forFunctions$5$className$isConstructor$isOperator(yaml, $name, className, isConstructor, isOperator);
  return t1;
  "14,26,21,6,7,27,18,28,7,29,18";
},

"+new Category$forFunctions:2:3:className:isConstructor:isOperator": 1,

"*forFunctions": [30, 19, 19],

Category$forTypedefs: function(yaml) {
  var t1 = new E.Category([], P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString), 0, 0, "Typedefs", null, null, null);
  t1.Category$forTypedefs$1(yaml);
  return t1;
  "14,26,21";
},

"+new Category$forTypedefs:1:0": 1}

},

"+Category": [10],

Category_memberNamed_closure: {"": "Closure;name_0-",
  call$1: function(x) {
    return J.$eq(J.get$name$x(x), this.name_0);
    "12,116,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Category_memberNamed_closure": [100],

Category$forClasses_closure: {"": "Closure;this_0-",
  call$1: function(clazz) {
    var t1 = J.getInterceptor$asx(clazz);
    return J.add$1$ax(J.get$content$x(this.this_0), E.Class$forPlaceholder(t1.$index(clazz, "qualifiedName"), t1.$index(clazz, "preview")));
    "12,114,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Category$forClasses_closure": [100],

Category$forVariables_closure: {"": "Closure;this_0-,variables_1-",
  call$1: function(key) {
    var t1 = this.this_0;
    J.add$1$ax(t1.get$memberNames(), key);
    t1.set$memberCounter(J.$add$ns(t1.get$memberCounter(), 1));
    J.add$1$ax(J.get$content$x(t1), E.Variable$(J.$index$asx(this.variables_1, key), "", "", false, false));
    "12,117,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Category$forVariables_closure": [100],

Category$forVariables_closure0: {"": "Closure;this_2-,getters_3-",
  call$1: function(key) {
    var t1 = this.this_2;
    J.add$1$ax(t1.get$memberNames(), key);
    t1.set$memberCounter(J.$add$ns(t1.get$memberCounter(), 1));
    J.add$1$ax(J.get$content$x(t1), E.Variable$(J.$index$asx(this.getters_3, key), "", "", true, false));
    "12,117,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Category$forVariables_closure": [100],

Category$forVariables_closure1: {"": "Closure;this_4-,setters_5-",
  call$1: function(key) {
    var t1 = this.this_4;
    J.add$1$ax(t1.get$memberNames(), key);
    t1.set$memberCounter(J.$add$ns(t1.get$memberCounter(), 1));
    J.add$1$ax(J.get$content$x(t1), E.Variable$(J.$index$asx(this.setters_5, key), "", "", false, true));
    "12,117,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Category$forVariables_closure": [100],

Category$forFunctions_closure: {"": "Closure;this_0-,yaml_1-,isConstructor_2-,className_3-,isOperator_4-",
  call$1: function(key) {
    var t1 = this.this_0;
    J.add$1$ax(t1.get$memberNames(), key);
    t1.set$memberCounter(J.$add$ns(t1.get$memberCounter(), 1));
    J.add$1$ax(J.get$content$x(t1), E.Method$(J.$index$asx(this.yaml_1, key), this.className_3, "", "", this.isConstructor_2, this.isOperator_4));
    "12,117,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Category$forFunctions_closure": [100],

Category$forTypedefs_closure: {"": "Closure;this_0-,yaml_1-",
  call$1: function(key) {
    return J.add$1$ax(J.get$content$x(this.this_0), E.Typedef$(J.$index$asx(this.yaml_1, key)));
    "12,117,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Category$forTypedefs_closure": [100],

Category_addInheritedItem_closure: {"": "Closure;item_0-",
  call$1: function(innerItem) {
    return J.$eq(J.get$name$x(innerItem), J.get$name$x(this.item_0));
    "12,118,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Category_addInheritedItem_closure": [100],

Item: {"": ["Container;path*-,qualifiedName<-,name-,_category_item$__$comment-,_changes,_records", null, function() {
    return [C.C_ObservableProperty];
  }, function() {
    return [C.C_ObservableProperty];
  }, null, null, null],
  get$decoratedName: function(_) {
    return this.name;
    "7,101";
  },
  "+decoratedName": 1,
  decoratedName$1: function($receiver, arg0) {
    return this.get$decoratedName($receiver).call$1(arg0);
  },
  addToHierarchy$0: function() {
    var t1 = $.get$pageIndex();
    t1.$indexSet(t1, this.qualifiedName, this);
    "12";
  },
  "+addToHierarchy:0:0": 1,
  load$0: function(_) {
    return P._Future$immediate(this, null);
    "119";
  },
  "+load:0:0": 1,
  addInheritedComment$1: function(item) {
    "12,115,31";
  },
  "+addInheritedComment:1:0": 1,
  get$isInherited: function(_) {
    return false;
    "18,101";
  },
  "+isInherited": 1,
  get$linkHref: function(_) {
    return this.qualifiedName;
    "7";
  },
  "+linkHref": 1,
  linkHref$1: function($receiver, arg0) {
    return this.get$linkHref($receiver).call$1(arg0);
  },
  get$location: function(_) {
    var t1 = new Y.DocsLocation(null, null, null, null, null);
    t1._extractPieces$1(this.qualifiedName);
    return t1;
    "120";
  },
  "+location": 1,
  get$anchorHrefLocation: function() {
    var t1, basic, t2, $parent;
    t1 = this.qualifiedName;
    basic = new Y.DocsLocation(null, null, null, null, null);
    basic._extractPieces$1(t1);
    t2 = new Y.DocsLocation(null, null, null, null, null);
    t2._extractPieces$1(t1);
    t2 = t2.get$componentNames();
    if (0 >= t2.length)
      throw H.ioore(t2, 0);
    t2.pop();
    $parent = Y.DocsLocation$fromList(t2);
    if ($parent.get$isEmpty($parent))
      return $parent;
    $parent.anchor = C.JSString_methods.$add("id_", C.JSArray_methods.get$last(basic.get$componentNames()));
    return $parent;
    "120";
  },
  "+anchorHrefLocation": 1,
  get$anchorHref: function() {
    var t1, t2, t3, t4, t5;
    t1 = this.get$anchorHrefLocation();
    t2 = t1.get$packagePlus();
    t3 = t1.libraryName;
    if (t3 == null)
      t3 = "";
    t4 = t1.memberName;
    t4 = t4 == null ? "" : "." + H.S(t4);
    t5 = t1.subMemberName;
    t2 = C.JSArray_methods.join$1([t2, t3, t4, t5 == null ? "" : "." + H.S(t5)], "");
    t1 = t1.anchor;
    return t2 + (t1 == null ? "" : "@" + H.S(t1));
    "7";
  },
  "+anchorHref": 1,
  get$isLoaded: function() {
    return true;
    "18";
  },
  "+isLoaded": 1,
  memberNamed$2$orElse: function($name, orElse) {
    return;
    "31,6,7,112,93";
  },
  "+memberNamed:1:1:orElse": 1,
  "*memberNamed": [113],
  memberNamed$1: function(name) {
    return this.memberNamed$2$orElse(name, E.nothing$closure);
  },
  "+memberNamed:1:0": 1,
  get$owner: function() {
    var t1, t2, t3, t4, t5;
    t1 = $.get$pageIndex();
    t2 = new Y.DocsLocation(null, null, null, null, null);
    t2._extractPieces$1(this.qualifiedName);
    t2 = t2.get$componentNames();
    if (0 >= t2.length)
      throw H.ioore(t2, 0);
    t2.pop();
    t2 = Y.DocsLocation$fromList(t2);
    t3 = t2.get$packagePlus();
    t4 = t2.libraryName;
    if (t4 == null)
      t4 = "";
    t5 = t2.memberName;
    t5 = t5 == null ? "" : "." + H.S(t5);
    t2 = t2.subMemberName;
    return t1.$index(t1, C.JSArray_methods.join$1([t3, t4, t5, t2 == null ? "" : "." + H.S(t2)], ""));
    "31";
  },
  "+owner": 1,
  get$home: function(_) {
    return this.get$owner() == null ? null : J.get$home$x(this.get$owner());
    "31";
  },
  "+home": 1,
  $isItem: true,
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
Item$: function($name, qualifiedName, comment) {
  return new E.Item([], qualifiedName, $name, comment, null, null);
  "31,6,7,32,7,11,7";
},

"+new Item:3:0": 1,

"*": [12]}

},

"+Item": [10],

_sort_closure: {"": "Closure;",
  call$1: function(item) {
    J.sort$1$ax(item, new E._sort__closure());
    "12,115,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+_sort_closure": [100],

_sort__closure: {"": "Closure;",
  call$2: function(a, b) {
    return E._compareLibraryNames(J.get$decoratedName$x(a), J.get$decoratedName$x(b));
    "12,121,31,122,31";
  },
  "+call:2:0": 1,
  $isFunction: true,
  $is_args2: true
},

"+_sort__closure": [100],

Home: {"": ["Item;owner@-,libraries*-,path-,qualifiedName-,name-,_category_item$__$comment-,_changes,_records", null, null, null, function() {
    return [C.C_ObservableProperty];
  }, function() {
    return [C.C_ObservableProperty];
  }, null, null, null],
  get$home: function(_) {
    return this;
    "31";
  },
  "+home": 1,
  get$anchorHrefLocation: function() {
    var t1, t2;
    t1 = this.name;
    if (t1 == null)
      t1 = "home";
    t2 = new Y.DocsLocation(null, null, null, null, null);
    t2._extractPieces$1(t1);
    return t2;
    "120";
  },
  "+anchorHrefLocation": 1,
  get$isTopLevelHome: function() {
    return J.$eq(this.name, "home");
    "18";
  },
  "+isTopLevelHome": 1,
  makeMainLibrarySpecial$1: function(yaml) {
    var mainLib, intro, t1;
    mainLib = J.firstWhere$2$orElse$ax(this.libraries, new E.Home_makeMainLibrarySpecial_closure(this), E.nothing$closure);
    if (mainLib != null) {
      J.remove$1$ax(this.libraries, mainLib);
      J.insert$2$ax(this.libraries, 0, mainLib);
      intro = J.$index$asx(J.firstWhere$1$ax(J.$index$asx(yaml, "libraries"), new E.Home_makeMainLibrarySpecial_closure0(mainLib)), "packageIntro");
      if (intro != null && J.get$isEmpty$asx(intro) !== true) {
        t1 = E._wrapComment(intro);
        this._category_item$__$comment = F.notifyPropertyChangeHelper(this, C.Symbol_comment, this._category_item$__$comment, t1);
      }
    }
    "12,26,12";
  },
  "+makeMainLibrarySpecial:1:0": 1,
  memberNamed$2$orElse: function($name, orElse) {
    return J.firstWhere$2$orElse$ax(this.libraries, new E.Home_memberNamed_closure($name), orElse);
    "31,6,7,112,93";
  },
  "+memberNamed:1:1:orElse": 1,
  "*memberNamed": [113],
  memberNamed$1: function(name) {
    return this.memberNamed$2$orElse(name, E.nothing$closure);
  },
  "+memberNamed:1:0": 1,
  Home$1: function(yaml) {
    var libraryList, packages, t1, t2, t3, library, t4, t5, t6, newLibrary;
    libraryList = J.$index$asx(yaml, "libraries");
    packages = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = this.name;
    t2 = J.getInterceptor(t1);
    if (t2.$eq(t1, "home") === true)
      J.forEach$1$ax(libraryList, new E.Home_closure(packages));
    for (t3 = J.get$iterator$ax(t2.$eq(t1, "home") === true ? packages.$index(packages, "") : libraryList); t3.moveNext$0();) {
      library = t3.get$current();
      t4 = J.getInterceptor$asx(library);
      t4.$index(library, "name");
      t5 = t4.$index(library, "qualifiedName");
      t6 = t4.$index(library, "name");
      newLibrary = new E.Library(null, null, null, null, null, null, null, false, null, [], t5, t6, null, null, null);
      newLibrary.previewComment = t4.$index(library, "preview");
      newLibrary.home = this;
      J.add$1$ax(this.libraries, newLibrary);
      t4 = $.get$pageIndex();
      t4.$indexSet(t4, t5, newLibrary);
    }
    packages.remove$1(packages, "");
    packages.forEach$1(packages, new E.Home_closure0(this));
    E._sort([this.libraries]);
    this.makeMainLibrarySpecial$1(yaml);
    t3 = $.get$pageIndex();
    t3.$indexSet(t3, this.qualifiedName, this);
    if (t2.$eq(t1, "home") === true) {
      t1 = $.get$pageIndex();
      t1.$indexSet(t1, "", this);
    }
    "12,26,21";
  },
  $isHome: true,
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
Home__nameFromYaml: function(yaml) {
  var $package = J.$index$asx(yaml, "packageName");
  return $package == null ? "home" : $package;
  "12,26,21";
},

"+_nameFromYaml:1:0": 1,

Home$: function(yaml) {
  var t1 = E.Home__nameFromYaml(yaml);
  t1 = new E.Home(null, [], [], E.Home__nameFromYaml(yaml), t1, E._wrapComment(J.$index$asx(yaml, "introduction")), null, null);
  t1.Home$1(yaml);
  return t1;
  "35,26,21";
},

"+new Home:1:0": 1}

},

"+Home": [31],

Home_closure: {"": "Closure;packages_0-",
  call$1: function(each) {
    return J.add$1$ax(this.packages_0.putIfAbsent$2(J.$index$asx(each, "packageName"), new E.Home__closure1()), each);
    "12,110,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Home_closure": [100],

Home__closure1: {"": "Closure;",
  call$0: function() {
    return [];
    "12";
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Home__closure": [100],

Home_closure0: {"": "Closure;this_1-",
  call$2: function(packageName, libraries) {
    var $package, t1;
    J.firstWhere$2$orElse$ax(libraries, new E.Home__closure(packageName), new E.Home__closure0(libraries));
    $package = E.Home$(H.fillLiteralMap(["libraries", libraries, "packageName", packageName], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    t1 = this.this_1;
    $package.owner = t1;
    J.add$1$ax(J.get$libraries$x(t1), $package);
    "12,123,12,124,12";
  },
  "+call:2:0": 1,
  $isFunction: true,
  $is_args2: true
},

"+Home_closure": [100],

Home__closure: {"": "Closure;packageName_2-",
  call$1: function(each) {
    return J.$eq(J.$index$asx(each, "name"), this.packageName_2);
    "12,110,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Home__closure": [100],

Home__closure0: {"": "Closure;libraries_3-",
  call$0: function() {
    return J.get$first$ax(this.libraries_3);
    "12";
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+Home__closure": [100],

Home_makeMainLibrarySpecial_closure: {"": "Closure;this_0-",
  call$1: function(each) {
    return J.$eq(J.get$name$x(each), J.get$name$x(this.this_0));
    "12,110,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Home_makeMainLibrarySpecial_closure": [100],

Home_makeMainLibrarySpecial_closure0: {"": "Closure;mainLib_1-",
  call$1: function(each) {
    return J.$eq(J.$index$asx(each, "name"), J.get$name$x(this.mainLib_1));
    "12,110,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Home_makeMainLibrarySpecial_closure": [100],

Home_memberNamed_closure: {"": "Closure;name_0-",
  call$1: function(each) {
    var t1, t2;
    t1 = J.getInterceptor$x(each);
    t2 = this.name_0;
    return J.$eq(t1.get$name(each), t2) === true || J.$eq(t1.get$decoratedName(each), t2) === true;
    "12,110,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Home_memberNamed_closure": [100],

LazyItem: {"": ["Item;isLoaded@-,previewComment@-,path-,qualifiedName-,name-,_category_item$__$comment-,_changes,_records", null, null, null, function() {
    return [C.C_ObservableProperty];
  }, function() {
    return [C.C_ObservableProperty];
  }, null, null, null],
  load$0: function(_) {
    var t1;
    if (this.isLoaded === true)
      return P._Future$immediate(this, null);
    t1 = "docs/" + H.S(this.qualifiedName) + ".";
    return W.HttpRequest_getString(P.Uri__uriEncode(C.List_CVk, t1 + ($.isYaml === true ? "yaml" : "json"), false), null, null).then$1(new E.LazyItem_load_closure(this));
    "119";
  },
  "+load:0:0": 1,
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
LazyItem$: function(qualifiedName, $name, previewComment, comment) {
  var t1 = new E.LazyItem(false, null, [], qualifiedName, $name, comment, null, null);
  t1.previewComment = previewComment;
  return t1;
  "38,32,7,6,7,39,12,11,7";
},

"+new LazyItem:4:0": 1,

"*": [12]}

},

"+LazyItem": [31],

LazyItem_load_closure: {"": "Closure;this_0-",
  call$1: function(response) {
    var yaml, t1;
    yaml = $.isYaml === true ? O.loadYaml(response) : C.C_JsonCodec.decode$1(response);
    t1 = this.this_0;
    t1.loadValues$1(yaml);
    E.buildHierarchy(t1, t1);
    return P._Future$immediate(t1, null);
    "12,125,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+LazyItem_load_closure": [100],

Library: {"": ["LazyItem;classes*-,errors*-,typedefs*-,variables*-,functions*-,operators*-,home*-,isLoaded-,previewComment-,path-,qualifiedName-,name-,_category_item$__$comment-,_changes,_records", null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_ObservableProperty];
  }, function() {
    return [C.C_ObservableProperty];
  }, null, null, null],
  addToHierarchy$0: function() {
    E.Item.prototype.addToHierarchy$0.call(this);
    H.IterableMixinWorkaround_forEach([this.classes, this.typedefs, this.errors, this.functions], new E.Library_addToHierarchy_closure(this));
    "12";
  },
  "+addToHierarchy:0:0": 1,
  loadValues$1: function(yaml) {
    var t1, t2, allClasses, classes, exceptions, typedefs, allFunctions, setters, getters, methods, operators;
    t1 = J.getInterceptor$asx(yaml);
    t2 = E._wrapComment(t1.$index(yaml, "comment"));
    this._category_item$__$comment = F.notifyPropertyChangeHelper(this, C.Symbol_comment, this._category_item$__$comment, t2);
    allClasses = t1.$index(yaml, "classes");
    if (allClasses != null) {
      t2 = J.getInterceptor$asx(allClasses);
      classes = t2.$index(allClasses, "class");
      exceptions = t2.$index(allClasses, "error");
      typedefs = t2.$index(allClasses, "typedef");
    } else {
      classes = null;
      exceptions = null;
      typedefs = null;
    }
    this.typedefs = E.Category$forTypedefs(typedefs);
    this.errors = E.Category$forClasses(exceptions, "Exceptions", false);
    this.classes = E.Category$forClasses(classes, "Classes", false);
    allFunctions = t1.$index(yaml, "functions");
    if (allFunctions != null) {
      t2 = J.getInterceptor$asx(allFunctions);
      setters = t2.$index(allFunctions, "setters");
      getters = t2.$index(allFunctions, "getters");
      methods = t2.$index(allFunctions, "methods");
      operators = t2.$index(allFunctions, "operators");
    } else {
      setters = null;
      getters = null;
      methods = null;
      operators = null;
    }
    this.variables = E.Category$forVariables(t1.$index(yaml, "variables"), getters, setters);
    this.functions = E.Category$forFunctions(methods, "Functions", "", false, false);
    this.operators = E.Category$forFunctions(operators, "Operators", "", false, true);
    E._sort([J.get$content$x(this.classes), J.get$content$x(this.errors), J.get$content$x(this.typedefs), J.get$content$x(this.variables), J.get$content$x(this.functions), J.get$content$x(this.operators)]);
    this.isLoaded = true;
    "12,26,21";
  },
  "+loadValues:1:0": 1,
  get$decoratedName: function(_) {
    var t1, t2;
    t1 = this.name;
    t2 = J.getInterceptor$s(t1);
    if (t2.startsWith$1(t1, "dart-"))
      return C.JSString_methods.replaceAll$2(t2.replaceAll$2(t1, "-dom-", "-"), "-", ":");
    else
      return t2.replaceAll$2(t1, "-", ".");
    "7";
  },
  "+decoratedName": 1,
  decoratedName$1: function($receiver, arg0) {
    return this.get$decoratedName($receiver).call$1(arg0);
  },
  get$isDartLibrary: function() {
    return J.startsWith$1$s(this.name, "dart-");
    "18";
  },
  "+isDartLibrary": 1,
  memberNamed$2$orElse: function($name, orElse) {
    var t1, t2, member;
    if ($name == null)
      return orElse.call$0();
    for (t1 = [this.classes, this.functions, this.variables, this.operators, this.typedefs, this.errors], t2 = new H.ListIterator(t1, 6, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      member = t2._current.memberNamed$2$orElse($name, E.nothing$closure);
      if (member != null)
        return member;
    }
    return orElse.call$0();
    "31,6,7,112,93";
  },
  "+memberNamed:1:1:orElse": 1,
  "*memberNamed": [113],
  memberNamed$1: function(name) {
    return this.memberNamed$2$orElse(name, E.nothing$closure);
  },
  "+memberNamed:1:0": 1,
  Library$1: function(yaml) {
    this.loadValues$1(yaml);
    E.buildHierarchy(this, this);
    "12,26,21";
  },
  $isLibrary: true,
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
Library$forPlaceholder: function(library) {
  var t1, t2, t3;
  t1 = J.getInterceptor$asx(library);
  t2 = t1.$index(library, "qualifiedName");
  t3 = t1.$index(library, "name");
  t3 = new E.Library(null, null, null, null, null, null, null, false, null, [], t2, t3, null, null, null);
  t3.previewComment = t1.$index(library, "preview");
  return t3;
  "40,41,21";
},

"+new Library$forPlaceholder:1:0": 1,

Library$: function(yaml) {
  var t1 = J.getInterceptor$asx(yaml);
  t1 = new E.Library(null, null, null, null, null, null, null, false, null, [], t1.$index(yaml, "qualifiedName"), t1.$index(yaml, "name"), null, null, null);
  t1.previewComment = "";
  t1.Library$1(yaml);
  return t1;
  "40,26,21";
},

"+new Library:1:0": 1}

},

"+Library": [38],

Library_addToHierarchy_closure: {"": "Closure;this_0-",
  call$1: function(category) {
    J.forEach$1$ax(J.get$content$x(category), new E.Library_addToHierarchy__closure(this.this_0));
    "12,126,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Library_addToHierarchy_closure": [100],

Library_addToHierarchy__closure: {"": "Closure;this_1-",
  call$1: function(clazz) {
    E.buildHierarchy(clazz, this.this_1);
    "12,114,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Library_addToHierarchy__closure": [100],

Class: {"": ["LazyItem;functions*-,variables*-,constructs@-,operators*-,superClass*-,isAbstract@-,previewComment@-,annotations*-,$implements@-,subclasses*-,generics@-,_instanceVariables@-,_staticVariables@-,_instanceFunctions@-,_staticFunctions@-,isLoaded-,category_item$LazyItem$previewComment-,path-,qualifiedName-,name-,_category_item$__$comment-,_changes,_records", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_ObservableProperty];
  }, function() {
    return [C.C_ObservableProperty];
  }, null, null, null],
  get$constructors: function(_) {
    return this.constructs;
    "12";
  },
  "+constructors": 1,
  flushCaches$0: function() {
    this._instanceVariables = null;
    this._staticVariables = null;
    this._instanceFunctions = null;
    this._staticFunctions = null;
    "12";
  },
  "+flushCaches:0:0": 1,
  get$instanceVariables: function() {
    if (this._instanceVariables == null)
      this._instanceVariables = E.Category$forInstanceMembers(J.get$content$x(this.variables), "Instance Properties");
    return this._instanceVariables;
    "14";
  },
  "+instanceVariables": 1,
  get$staticVariables: function(_) {
    if (this._staticVariables == null)
      this._staticVariables = E.Category$forStaticMembers(J.get$content$x(this.variables), "Static Properties");
    return this._staticVariables;
    "14";
  },
  "+staticVariables": 1,
  get$instanceFunctions: function() {
    if (this._instanceFunctions == null)
      this._instanceFunctions = E.Category$forInstanceMembers(J.get$content$x(this.functions), "Instance Methods");
    return this._instanceFunctions;
    "14";
  },
  "+instanceFunctions": 1,
  get$staticFunctions: function(_) {
    if (this._staticFunctions == null)
      this._staticFunctions = E.Category$forStaticMembers(J.get$content$x(this.functions), "Static Methods");
    return this._staticFunctions;
    "14";
  },
  "+staticFunctions": 1,
  get$anchorHrefLocation: function() {
    var t1 = new Y.DocsLocation(null, null, null, null, null);
    t1._extractPieces$1(this.qualifiedName);
    return t1;
    "120";
  },
  "+anchorHrefLocation": 1,
  addToHierarchy$0: function() {
    E.Item.prototype.addToHierarchy$0.call(this);
    if (this.isLoaded === true)
      H.IterableMixinWorkaround_forEach([this.functions, this.constructs, this.operators], new E.Class_addToHierarchy_closure(this));
    "12";
  },
  "+addToHierarchy:0:0": 1,
  loadValues$1: function(yaml) {
    var t1, t2, t3, genericValues, allMethods, setters, getters, methods, operates, constructors, inheritedMethods, inheritedVariables;
    this.flushCaches$0();
    t1 = J.getInterceptor$asx(yaml);
    t2 = E._wrapComment(t1.$index(yaml, "comment"));
    this._category_item$__$comment = F.notifyPropertyChangeHelper(this, C.Symbol_comment, this._category_item$__$comment, t2);
    this.isAbstract = J.$eq(t1.$index(yaml, "isAbstract"), "true");
    t2 = new E.LinkableType(null);
    t3 = new Y.DocsLocation(null, null, null, null, null);
    t3._extractPieces$1(t1.$index(yaml, "superclass"));
    t2.loc = t3;
    this.superClass = t2;
    if (t1.$index(yaml, "subclass") == null)
      t2 = [];
    else {
      t2 = J.map$1$ax(t1.$index(yaml, "subclass"), new E.Class_loadValues_closure());
      t2 = t2.toList$0(t2);
    }
    this.subclasses = t2;
    this.annotations = E.AnnotationGroup$(t1.$index(yaml, "annotations"));
    if (t1.$index(yaml, "implements") == null)
      t2 = [];
    else {
      t2 = J.map$1$ax(t1.$index(yaml, "implements"), new E.Class_loadValues_closure0());
      t2 = t2.toList$0(t2);
    }
    this.$implements = t2;
    genericValues = t1.$index(yaml, "generics");
    if (genericValues != null)
      J.forEach$1$ax(genericValues.get$keys(), new E.Class_loadValues_closure1(this));
    allMethods = t1.$index(yaml, "methods");
    if (allMethods != null) {
      t2 = J.getInterceptor$asx(allMethods);
      setters = t2.$index(allMethods, "setters");
      getters = t2.$index(allMethods, "getters");
      methods = t2.$index(allMethods, "methods");
      operates = t2.$index(allMethods, "operators");
      constructors = t2.$index(allMethods, "constructors");
    } else {
      setters = null;
      getters = null;
      methods = null;
      operates = null;
      constructors = null;
    }
    this.variables = E.Category$forVariables(t1.$index(yaml, "variables"), getters, setters);
    this.functions = E.Category$forFunctions(methods, "Methods", "", false, false);
    this.operators = E.Category$forFunctions(operates, "Operators", "", false, true);
    this.constructs = E.Category$forFunctions(constructors, "Constructors", this.name, true, false);
    inheritedMethods = t1.$index(yaml, "inheritedMethods");
    inheritedVariables = t1.$index(yaml, "inheritedVariables");
    if (inheritedMethods != null) {
      t1 = J.getInterceptor$asx(inheritedMethods);
      setters = t1.$index(inheritedMethods, "setters");
      getters = t1.$index(inheritedMethods, "getters");
      methods = t1.$index(inheritedMethods, "methods");
      operates = t1.$index(inheritedMethods, "operators");
    }
    this._addVariable$1(inheritedVariables);
    this._addVariable$2$isSetter(setters, true);
    this._addVariable$2$isGetter(getters, true);
    this._addMethod$1(methods);
    this._addMethod$2$isOperator(operates, true);
    E._sort([J.get$content$x(this.functions), J.get$content$x(this.variables), J.get$content$x(this.constructs), J.get$content$x(this.operators)]);
    this.isLoaded = true;
    "12,26,21";
  },
  "+loadValues:1:0": 1,
  _addVariable$3$isGetter$isSetter: function(items, isGetter, isSetter) {
    if (items != null)
      J.forEach$1$ax(J.get$values$x(items), new E.Class__addVariable_closure(this, isSetter, isGetter));
    "12,33,21,55,12,54,12";
  },
  "+_addVariable:1:2:isGetter:isSetter": 1,
  "*_addVariable": [19, 19],
  _addVariable$1: function(items) {
    return this._addVariable$3$isGetter$isSetter(items, false, false);
  },
  "+_addVariable:1:0": 1,
  _addVariable$2$isSetter: function(items, isSetter) {
    return this._addVariable$3$isGetter$isSetter(items, false, isSetter);
  },
  "+_addVariable:2:0:isSetter": 1,
  _addVariable$2$isGetter: function(items, isGetter) {
    return this._addVariable$3$isGetter$isSetter(items, isGetter, false);
  },
  "+_addVariable:2:0:isGetter": 1,
  _addMethod$2$isOperator: function(items, isOperator) {
    if (items != null)
      J.forEach$1$ax(J.get$values$x(items), new E.Class__addMethod_closure(this, isOperator));
    "12,33,21,29,12";
  },
  "+_addMethod:1:1:isOperator": 1,
  "*_addMethod": [19],
  _addMethod$1: function(items) {
    return this._addMethod$2$isOperator(items, false);
  },
  "+_addMethod:1:0": 1,
  get$nameWithGeneric: function(_) {
    var out = P.StringBuffer$("");
    out.write$1(this.name);
    if (J.get$isNotEmpty$asx(this.generics)) {
      out.write$1("<");
      out.write$1(J.join$1$ax(this.generics, ",\u00a0"));
      out.write$1(">");
    }
    return out._contents;
    "7";
  },
  "+nameWithGeneric": 1,
  memberNamed$2$orElse: function($name, orElse) {
    var t1, t2, member;
    if ($name == null)
      return orElse.call$0();
    for (t1 = [this.annotations, this.constructs, this.functions, this.operators, this.variables], t2 = new H.ListIterator(t1, 5, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      member = t2._current.memberNamed$2$orElse($name, E.nothing$closure);
      if (member != null)
        return member;
    }
    return orElse.call$0();
    "31,6,7,112,93";
  },
  "+memberNamed:1:1:orElse": 1,
  "*memberNamed": [113],
  memberNamed$1: function(name) {
    return this.memberNamed$2$orElse(name, E.nothing$closure);
  },
  "+memberNamed:1:0": 1,
  Class$1: function(yaml) {
    this.loadValues$1(yaml);
    "12,26,21";
  },
  Class$forPlaceholder$2: function($location, previewComment) {
    this.operators = E.Category$forFunctions(null, "placeholder", "", false, false);
    this.variables = E.Category$forVariables(null, null, null);
    this.constructs = E.Category$forFunctions(null, "placeholder", "", false, false);
    this.functions = E.Category$forFunctions(null, "placeholder", "", false, false);
    "12,43,7,39,7";
  },
  $isClass: true,
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
Class$forPlaceholder: function($location, previewComment) {
  var t1 = new Y.DocsLocation(null, null, null, null, null);
  t1._extractPieces$1($location);
  t1 = new E.Class(null, null, null, null, null, null, null, null, [], [], [], null, null, null, null, false, null, [], $location, t1.memberName, null, null, null);
  t1.previewComment = previewComment;
  t1.Class$forPlaceholder$2($location, previewComment);
  return t1;
  "42,43,7,39,7";
},

"+new Class$forPlaceholder:2:0": 1,

Class$: function(yaml) {
  var t1 = J.getInterceptor$asx(yaml);
  t1 = new E.Class(null, null, null, null, null, null, null, null, [], [], [], null, null, null, null, false, null, [], t1.$index(yaml, "qualifiedName"), t1.$index(yaml, "name"), null, null, null);
  t1.previewComment = "";
  t1.Class$1(yaml);
  return t1;
  "42,26,21";
},

"+new Class:1:0": 1}

},

"+Class": [38],

Class_addToHierarchy_closure: {"": "Closure;this_0-",
  call$1: function(category) {
    J.forEach$1$ax(J.get$content$x(category), new E.Class_addToHierarchy__closure(this.this_0));
    "12,126,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Class_addToHierarchy_closure": [100],

Class_addToHierarchy__closure: {"": "Closure;this_1-",
  call$1: function(clazz) {
    E.buildHierarchy(clazz, this.this_1);
    "12,114,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Class_addToHierarchy__closure": [100],

Class_loadValues_closure: {"": "Closure;",
  call$1: function(item) {
    var t1, t2;
    t1 = new E.LinkableType(null);
    t2 = new Y.DocsLocation(null, null, null, null, null);
    t2._extractPieces$1(item);
    t1.loc = t2;
    return t1;
    "12,115,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Class_loadValues_closure": [100],

Class_loadValues_closure0: {"": "Closure;",
  call$1: function(item) {
    var t1, t2;
    t1 = new E.LinkableType(null);
    t2 = new Y.DocsLocation(null, null, null, null, null);
    t2._extractPieces$1(item);
    t1.loc = t2;
    return t1;
    "12,115,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Class_loadValues_closure": [100],

Class_loadValues_closure1: {"": "Closure;this_0-",
  call$1: function(generic) {
    return J.add$1$ax(this.this_0.get$generics(), generic);
    "12,127,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Class_loadValues_closure": [100],

Class__addVariable_closure: {"": "Closure;this_0-,isSetter_1-,isGetter_2-",
  call$1: function(item) {
    var t1, t2, object;
    t1 = J.getInterceptor$asx(item);
    t2 = t1.$index(item, "qualifiedName");
    object = E.Variable$(item, t1.$index(item, "commentFrom"), t2, this.isGetter_2, this.isSetter_1);
    t2 = this.this_0;
    J.get$variables$x(t2).addInheritedItem$2(t2, object);
    "12,115,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Class__addVariable_closure": [100],

Class__addMethod_closure: {"": "Closure;this_0-,isOperator_1-",
  call$1: function(item) {
    var t1, t2, t3, object, $location;
    t1 = this.isOperator_1;
    t2 = J.getInterceptor$asx(item);
    t3 = t2.$index(item, "qualifiedName");
    object = E.Method$(item, "", t2.$index(item, "commentFrom"), t3, false, t1);
    t2 = this.this_0;
    $location = t1 === true ? J.get$operators$x(t2) : J.get$functions$x(t2);
    $location.addInheritedItem$2(this.this_0, object);
    "12,115,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Class__addMethod_closure": [100],

AnnotationGroup: {"": "Object;supportedBrowsers@-,annotations*-,domName@-",
  memberNamed$2$orElse: function($name, orElse) {
    var t1, annotation;
    for (t1 = J.get$iterator$ax(this.annotations); t1.moveNext$0();) {
      annotation = t1.get$current();
      if (J.$eq(J.get$name$x(annotation), $name) === true)
        return annotation;
    }
    return orElse.call$0();
    "31,6,7,112,93";
  },
  "+memberNamed:1:1:orElse": 1,
  "*memberNamed": [113],
  memberNamed$1: function(name) {
    return this.memberNamed$2$orElse(name, E.nothing$closure);
  },
  "+memberNamed:1:0": 1,
  AnnotationGroup$1: function(annotes) {
    if (annotes != null)
      J.forEach$1$ax(annotes, new E.AnnotationGroup_closure(this));
    "12,45,25";
  },
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
AnnotationGroup$: function(annotes) {
  var t1 = new E.AnnotationGroup([], [], null);
  t1.AnnotationGroup$1(annotes);
  return t1;
  "44,45,25";
},

"+new AnnotationGroup:1:0": 1}

},

"+AnnotationGroup": [0],

AnnotationGroup_closure: {"": "Closure;this_0-",
  call$1: function(annotation) {
    var t1, t2;
    t1 = J.getInterceptor$asx(annotation);
    if (J.$eq(t1.$index(annotation, "name"), "metadata.SupportedBrowser") === true)
      J.add$1$ax(this.this_0.get$supportedBrowsers(), J.join$1$ax(J.toList$0$ax(t1.$index(annotation, "parameters")), " "));
    else {
      t2 = this.this_0;
      if (J.$eq(t1.$index(annotation, "name"), "metadata.DomName") === true)
        t2.set$domName(J.get$first$ax(t1.$index(annotation, "parameters")));
      else
        J.add$1$ax(J.get$annotations$x(t2), E.Annotation$(annotation));
    }
    "12,128,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+AnnotationGroup_closure": [100],

Annotation: {"": "Object;qualifiedName@-,link*-,parameters*-",
  link$1: function($receiver, arg0) {
    return this.link.call$1(arg0);
  },
  Annotation$1: function(yaml) {
    var t1, t2, t3, t4;
    t1 = J.getInterceptor$asx(yaml);
    t2 = t1.$index(yaml, "name");
    this.qualifiedName = t2;
    t3 = new E.LinkableType(null);
    t4 = new Y.DocsLocation(null, null, null, null, null);
    t4._extractPieces$1(t2);
    t3.loc = t4;
    this.link = t3;
    this.parameters = t1.$index(yaml, "parameters") == null ? [] : t1.$index(yaml, "parameters");
    "12,26,21";
  },
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
Annotation$: function(yaml) {
  var t1 = new E.Annotation(null, null, null);
  t1.Annotation$1(yaml);
  return t1;
  "46,26,21";
},

"+new Annotation:1:0": 1}

},

"+Annotation": [0],

Parameterized: {"": ["Item;parameters*-,path-,qualifiedName-,name-,_category_item$__$comment-,_changes,_records", null, null, function() {
    return [C.C_ObservableProperty];
  }, function() {
    return [C.C_ObservableProperty];
  }, null, null, null],
  getParameters$1: function(parameters) {
    var values = [];
    if (parameters != null)
      J.forEach$1$ax(parameters, new E.Parameterized_getParameters_closure(values));
    return values;
    "129,130,21";
  },
  "+getParameters:1:0": 1,
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
Parameterized$: function($name, qualifiedName, comment) {
  return new E.Parameterized(null, [], qualifiedName, $name, comment, null, null);
  "47,6,7,32,7,11,7";
},

"+new Parameterized:3:0": 1,

"*": [12]}

},

"+Parameterized": [31],

Parameterized_getParameters_closure: {"": "Closure;values_0-",
  call$2: function($name, data) {
    J.add$1$ax(this.values_0, E.Parameter$($name, data));
    "12,6,12,131,12";
  },
  "+call:2:0": 1,
  $isFunction: true,
  $is_args2: true
},

"+Parameterized_getParameters_closure": [100],

Typedef: {"": ["Parameterized;type*-,annotations*-,parameters-,path-,qualifiedName-,name-,_category_item$__$comment-,_changes,_records", null, null, null, null, function() {
    return [C.C_ObservableProperty];
  }, function() {
    return [C.C_ObservableProperty];
  }, null, null, null],
  Typedef$1: function(yaml) {
    var t1, t2, t3;
    t1 = J.getInterceptor$asx(yaml);
    t2 = new E.LinkableType(null);
    t3 = new Y.DocsLocation(null, null, null, null, null);
    t3._extractPieces$1(t1.$index(yaml, "return"));
    t2.loc = t3;
    this.type = t2;
    this.parameters = this.getParameters$1(t1.$index(yaml, "parameters"));
    this.annotations = E.AnnotationGroup$(t1.$index(yaml, "annotations"));
    "12,26,21";
  },
  $isTypedef: true,
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
Typedef$: function(yaml) {
  var t1, t2;
  t1 = J.getInterceptor$asx(yaml);
  t2 = t1.$index(yaml, "name");
  t1 = new E.Typedef(null, null, null, [], t1.$index(yaml, "qualifiedName"), t2, E._wrapComment(t1.$index(yaml, "comment")), null, null);
  t1.Typedef$1(yaml);
  return t1;
  "48,26,21";
},

"+new Typedef:1:0": 1}

},

"+Typedef": [47],

Method: {"": ["Parameterized;isStatic@-,isAbstract@-,isConstant@-,isConstructor*-,inheritedFrom*-,commentFrom*-,className*-,isOperator@-,annotations*-,type*-,parameters-,path-,qualifiedName-,name-,_category_item$__$comment-,_changes,_records", null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_ObservableProperty];
  }, function() {
    return [C.C_ObservableProperty];
  }, null, null, null],
  addToHierarchy$0: function() {
    if (J.$eq(this.inheritedFrom, "") !== true)
      E.Item.prototype.addToHierarchy$0.call(this);
    "12";
  },
  "+addToHierarchy:0:0": 1,
  addInheritedComment$1: function(item) {
    var t1;
    if (J.$eq(this._category_item$__$comment, "<span></span>") === true) {
      t1 = item.get$comment();
      this._category_item$__$comment = F.notifyPropertyChangeHelper(this, C.Symbol_comment, this._category_item$__$comment, t1);
      this.commentFrom = J.get$commentFrom$x(item);
    }
    "12,115,12";
  },
  "+addInheritedComment:1:0": 1,
  get$isInherited: function(_) {
    return J.$eq(this.inheritedFrom, "") !== true && this.inheritedFrom != null;
    "18";
  },
  "+isInherited": 1,
  get$decoratedName: function(_) {
    var t1, t2, t3;
    if (this.isConstructor === true) {
      t1 = this.name;
      t2 = J.$eq(t1, "");
      t3 = this.className;
      t1 = t2 !== true ? H.S(t3) + "." + H.S(t1) : t3;
    } else
      t1 = this.name;
    return t1;
    "7";
  },
  "+decoratedName": 1,
  decoratedName$1: function($receiver, arg0) {
    return this.get$decoratedName($receiver).call$1(arg0);
  },
  get$linkHref: function(_) {
    var t1, t2, t3, t4, t5;
    t1 = this.get$anchorHrefLocation();
    t2 = t1.get$packagePlus();
    t3 = t1.libraryName;
    if (t3 == null)
      t3 = "";
    t4 = t1.memberName;
    t4 = t4 == null ? "" : "." + H.S(t4);
    t5 = t1.subMemberName;
    t2 = C.JSArray_methods.join$1([t2, t3, t4, t5 == null ? "" : "." + H.S(t5)], "");
    t1 = t1.anchor;
    return t2 + (t1 == null ? "" : "@" + H.S(t1));
    "12";
  },
  "+linkHref": 1,
  linkHref$1: function($receiver, arg0) {
    return this.get$linkHref($receiver).call$1(arg0);
  },
  get$anchorHrefLocation: function() {
    if (this.isConstructor === true && J.$eq(this.name, "") === true) {
      var locationForUnnamed = new Y.DocsLocation(null, null, null, null, null);
      locationForUnnamed._extractPieces$1(this.qualifiedName);
      locationForUnnamed.anchor = C.JSString_methods.$add("id_", locationForUnnamed.memberName);
      return locationForUnnamed;
    } else
      return E.Item.prototype.get$anchorHrefLocation.call(this);
    "120";
  },
  "+anchorHrefLocation": 1,
  toString$0: function(_) {
    return this.get$decoratedName(this);
    "7";
  },
  "+toString:0:0": 1,
  Method$6$className$commentFrom$inheritedFrom$isConstructor$isOperator: function(yaml, className, commentFrom, inheritedFrom, isConstructor, isOperator) {
    var t1 = J.getInterceptor$asx(yaml);
    this.isStatic = J.$eq(t1.$index(yaml, "static"), "true");
    this.isAbstract = J.$eq(t1.$index(yaml, "abstract"), "true");
    this.isConstant = J.$eq(t1.$index(yaml, "constant"), "true");
    this.isOperator = isOperator;
    this.isConstructor = isConstructor;
    this.inheritedFrom = inheritedFrom;
    this.commentFrom = J.$eq(commentFrom, "") === true ? t1.$index(yaml, "commentFrom") : commentFrom;
    this.type = E.NestedType$(J.get$first$ax(t1.$index(yaml, "return")));
    this.parameters = this.getParameters$1(t1.$index(yaml, "parameters"));
    this.className = className;
    this.annotations = E.AnnotationGroup$(t1.$index(yaml, "annotations"));
    "12,26,21,27,18,28,7,29,18,50,7,51,7";
  },
  $isMethod: true,
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
Method$: function(yaml, className, commentFrom, inheritedFrom, isConstructor, isOperator) {
  var t1, t2;
  t1 = J.getInterceptor$asx(yaml);
  t2 = t1.$index(yaml, "name");
  t1 = new E.Method(null, null, null, null, null, null, null, null, null, null, null, [], t1.$index(yaml, "qualifiedName"), t2, E._wrapComment(t1.$index(yaml, "comment")), null, null);
  t1.Method$6$className$commentFrom$inheritedFrom$isConstructor$isOperator(yaml, className, commentFrom, inheritedFrom, isConstructor, isOperator);
  return t1;
  "49,26,21,27,18,28,7,29,18,50,7,51,7";
},

"+new Method:1:5:className:commentFrom:inheritedFrom:isConstructor:isOperator": 1,

"*": [30, 30, 30, 19, 19]}

},

"+Method": [47],

Parameter: {"": "Object;name*-,isOptional@-,isNamed@-,hasDefault@-,type*-,defaultValue*-,annotations*-",
  get$decoratedName: function(_) {
    var decorated = this.name;
    if (this.hasDefault === true)
      decorated = this.isNamed === true ? H.S(decorated) + ": " + H.S(this.defaultValue) : H.S(decorated) + "=" + H.S(this.defaultValue);
    return decorated;
    "7";
  },
  "+decoratedName": 1,
  decoratedName$1: function($receiver, arg0) {
    return this.get$decoratedName($receiver).call$1(arg0);
  },
  Parameter$2: function($name, yaml) {
    var t1 = J.getInterceptor$asx(yaml);
    this.isOptional = J.$eq(t1.$index(yaml, "optional"), "true");
    this.isNamed = J.$eq(t1.$index(yaml, "named"), "true");
    this.hasDefault = J.$eq(t1.$index(yaml, "default"), "true");
    this.type = E.NestedType$(J.get$first$ax(t1.$index(yaml, "type")));
    this.defaultValue = t1.$index(yaml, "value");
    this.annotations = E.AnnotationGroup$(t1.$index(yaml, "annotations"));
    "12,6,7,26,21";
  },
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
Parameter$: function($name, yaml) {
  var t1 = new E.Parameter($name, null, null, null, null, null, null);
  t1.Parameter$2($name, yaml);
  return t1;
  "52,6,7,26,21";
},

"+new Parameter:2:0": 1}

},

"+Parameter": [0],

Variable: {"": ["Item;isFinal*-,isStatic@-,isAbstract@-,isConstant@-,isGetter@-,isSetter@-,inheritedFrom*-,commentFrom*-,setterParameter*-,type*-,annotations*-,path-,qualifiedName-,name-,_category_item$__$comment-,_changes,_records", null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_ObservableProperty];
  }, function() {
    return [C.C_ObservableProperty];
  }, null, null, null],
  addInheritedComment$1: function(item) {
    var t1;
    if (J.$eq(this._category_item$__$comment, "<span></span>") === true) {
      t1 = item.get$comment();
      this._category_item$__$comment = F.notifyPropertyChangeHelper(this, C.Symbol_comment, this._category_item$__$comment, t1);
      this.commentFrom = J.get$commentFrom$x(item);
    }
    "12,115,31";
  },
  "+addInheritedComment:1:0": 1,
  get$isInherited: function(_) {
    return J.$eq(this.inheritedFrom, "") !== true && this.inheritedFrom != null;
    "18";
  },
  "+isInherited": 1,
  addToHierarchy$0: function() {
    if (J.$eq(this.inheritedFrom, "") !== true)
      E.Item.prototype.addToHierarchy$0.call(this);
    "12";
  },
  "+addToHierarchy:0:0": 1,
  Variable$5$commentFrom$inheritedFrom$isGetter$isSetter: function(yaml, commentFrom, inheritedFrom, isGetter, isSetter) {
    var t1, parameters, parameterName;
    this.isGetter = isGetter;
    this.isSetter = isSetter;
    this.inheritedFrom = inheritedFrom;
    this.commentFrom = J.$eq(commentFrom, "") === true ? J.$index$asx(yaml, "commentFrom") : commentFrom;
    t1 = J.getInterceptor$asx(yaml);
    this.isFinal = J.$eq(t1.$index(yaml, "final"), "true");
    this.isStatic = J.$eq(t1.$index(yaml, "static"), "true");
    this.isConstant = J.$eq(t1.$index(yaml, "constant"), "true");
    this.isAbstract = J.$eq(t1.$index(yaml, "abstract"), "true");
    if (isGetter === true)
      this.type = E.NestedType$(J.get$first$ax(t1.$index(yaml, "return")));
    else if (isSetter === true) {
      this.type = E.NestedType$(J.get$first$ax(t1.$index(yaml, "return")));
      parameters = t1.$index(yaml, "parameters");
      parameterName = J.get$first$ax(parameters.get$keys());
      this.setterParameter = E.Parameter$(parameterName, J.$index$asx(parameters, parameterName));
    } else
      this.type = E.NestedType$(J.get$first$ax(t1.$index(yaml, "type")));
    this.annotations = E.AnnotationGroup$(t1.$index(yaml, "annotations"));
    "12,26,21,54,18,55,18,50,7,51,7";
  },
  $isVariable: true,
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
Variable$: function(yaml, commentFrom, inheritedFrom, isGetter, isSetter) {
  var t1, t2;
  t1 = J.getInterceptor$asx(yaml);
  t2 = t1.$index(yaml, "name");
  t1 = new E.Variable(null, null, null, null, null, null, null, null, null, null, null, [], t1.$index(yaml, "qualifiedName"), t2, E._wrapComment(t1.$index(yaml, "comment")), null, null);
  t1.Variable$5$commentFrom$inheritedFrom$isGetter$isSetter(yaml, commentFrom, inheritedFrom, isGetter, isSetter);
  return t1;
  "53,26,21,54,18,55,18,50,7,51,7";
},

"+new Variable:1:4:commentFrom:inheritedFrom:isGetter:isSetter": 1,

"*": [30, 30, 19, 19]}

},

"+Variable": [31],

NestedType: {"": "Object;outer@-,inner@-",
  get$isDynamic: function() {
    return this.outer.get$isDynamic();
    "12";
  },
  "+isDynamic": 1,
  NestedType$1: function(yaml) {
    var t1, t2, t3, innerMap;
    if (yaml == null) {
      t1 = new E.LinkableType(null);
      t2 = new Y.DocsLocation(null, null, null, null, null);
      t2._extractPieces$1("void");
      t1.loc = t2;
      this.outer = t1;
    } else {
      t1 = J.getInterceptor$asx(yaml);
      t2 = new E.LinkableType(null);
      t3 = new Y.DocsLocation(null, null, null, null, null);
      t3._extractPieces$1(t1.$index(yaml, "outer"));
      t2.loc = t3;
      this.outer = t2;
      innerMap = t1.$index(yaml, "inner");
      if (innerMap != null)
        J.forEach$1$ax(innerMap, new E.NestedType_closure(this));
    }
    "12,26,21";
  },
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
NestedType$: function(yaml) {
  var t1 = new E.NestedType(null, []);
  t1.NestedType$1(yaml);
  return t1;
  "56,26,21";
},

"+new NestedType:1:0": 1}

},

"+NestedType": [0],

NestedType_closure: {"": "Closure;this_0-",
  call$1: function(element) {
    return J.add$1$ax(this.this_0.get$inner(), E.NestedType$(element));
    "12,87,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+NestedType_closure": [100],

LinkableType: {"": "Object;loc@-",
  get$simpleType: function(_) {
    return J.get$name$x(this.loc);
    "7";
  },
  "+simpleType": 1,
  get$location: function(_) {
    return this.loc.get$withAnchor();
    "7";
  },
  "+location": 1,
  get$qualifiedName: function() {
    return this.loc.get$withAnchor();
    "7";
  },
  "+qualifiedName": 1,
  get$isDynamic: function() {
    return J.$eq(J.get$name$x(this.loc), "dynamic");
    "12";
  },
  "+isDynamic": 1,
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
LinkableType$: function(type) {
  var t1, t2;
  t1 = new E.LinkableType(null);
  t2 = new Y.DocsLocation(null, null, null, null, null);
  t2._extractPieces$1(type);
  t1.loc = t2;
  return t1;
  "57,58,7";
},

"+new LinkableType:1:0": 1}

},

"+LinkableType": [0],
"": ["docsPath<-", function() {
  return [C.C_Reflectable];
}]}],
["class_", "class.dart", , U, {
ClassElement: {"": ["MemberElement;_item-,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$defaultItem: function(receiver) {
    return E.Class$forPlaceholder("loading.loading", "loading");
    "12";
  },
  "+defaultItem": 1,
  get$observables: function(receiver) {
    return N.concat(E.MemberElement.prototype.get$observables.call(this, receiver), C.List_h00);
    "12";
  },
  "+observables": 1,
  get$methodsToCall: function(receiver) {
    return N.concat(E.DartdocElement.prototype.get$methodsToCall.call(this, receiver), C.List_sYh);
    "12";
  },
  "+methodsToCall": 1,
  wrongClass$1: function(receiver, newItem) {
    var t1 = J.getInterceptor(newItem);
    return typeof newItem !== "object" || newItem === null || !t1.$isClass;
    "18,132,12";
  },
  "+wrongClass:1:0": 1,
  get$item: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver);
    "12";
  },
  "+item": 1,
  set$item: function(receiver, newItem) {
    E.MemberElement.prototype.set$item.call(this, receiver, newItem);
    return newItem;
    "12,132,12";
  },
  "+item=": 1,
  get$variables: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver).get$instanceVariables();
    "14,101";
  },
  "+variables": 1,
  get$operators: function(receiver) {
    return J.get$operators$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "14,101";
  },
  "+operators": 1,
  get$constructors: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver).get$constructs();
    "14,101";
  },
  "+constructors": 1,
  get$methods: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver).get$instanceFunctions();
    "14,101";
  },
  "+methods": 1,
  get$staticMethods: function(receiver) {
    return J.get$staticFunctions$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "14,101";
  },
  "+staticMethods": 1,
  get$staticVariables: function(receiver) {
    return J.get$staticVariables$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "14,101";
  },
  "+staticVariables": 1,
  get$shouldShowOperators: function(receiver) {
    var t1 = J.get$operators$x(E.MemberElement.prototype.get$item.call(this, receiver));
    if (J.get$isNotEmpty$asx(J.get$content$x(t1)))
      t1 = $.get$viewer()._dartdoc_viewer$__$isInherited === true || t1.get$hasNonInherited();
    else
      t1 = false;
    return t1;
    "18,101";
  },
  "+shouldShowOperators": 1,
  get$shouldShowVariables: function(receiver) {
    var t1 = E.MemberElement.prototype.get$item.call(this, receiver).get$instanceVariables();
    if (J.get$isNotEmpty$asx(J.get$content$x(t1)))
      t1 = $.get$viewer()._dartdoc_viewer$__$isInherited === true || t1.get$hasNonInherited();
    else
      t1 = false;
    return t1;
    "18,101";
  },
  "+shouldShowVariables": 1,
  get$shouldShowStaticVariables: function(receiver) {
    var t1 = J.get$staticVariables$x(E.MemberElement.prototype.get$item.call(this, receiver));
    if (J.get$isNotEmpty$asx(J.get$content$x(t1)))
      t1 = $.get$viewer()._dartdoc_viewer$__$isInherited === true || t1.get$hasNonInherited();
    else
      t1 = false;
    return t1;
    "18,101";
  },
  "+shouldShowStaticVariables": 1,
  get$shouldShowConstructors: function(receiver) {
    var t1 = E.MemberElement.prototype.get$item.call(this, receiver).get$constructs();
    if (J.get$isNotEmpty$asx(J.get$content$x(t1)))
      t1 = $.get$viewer()._dartdoc_viewer$__$isInherited === true || t1.get$hasNonInherited();
    else
      t1 = false;
    return t1;
    "18,101";
  },
  "+shouldShowConstructors": 1,
  get$shouldShowMethods: function(receiver) {
    var t1 = E.MemberElement.prototype.get$item.call(this, receiver).get$instanceFunctions();
    if (J.get$isNotEmpty$asx(J.get$content$x(t1)))
      t1 = $.get$viewer()._dartdoc_viewer$__$isInherited === true || t1.get$hasNonInherited();
    else
      t1 = false;
    return t1;
    "18,101";
  },
  "+shouldShowMethods": 1,
  get$shouldShowStaticMethods: function(receiver) {
    var t1 = J.get$staticFunctions$x(E.MemberElement.prototype.get$item.call(this, receiver));
    if (J.get$isNotEmpty$asx(J.get$content$x(t1)))
      t1 = $.get$viewer()._dartdoc_viewer$__$isInherited === true || t1.get$hasNonInherited();
    else
      t1 = false;
    return t1;
    "18,101";
  },
  "+shouldShowStaticMethods": 1,
  shouldShow$1: function(receiver, thing) {
    var t1;
    if (J.get$isNotEmpty$asx(J.get$content$x(thing)))
      t1 = $.get$viewer()._dartdoc_viewer$__$isInherited === true || thing.get$hasNonInherited();
    else
      t1 = false;
    return t1;
    "18,133,14,101";
  },
  "+shouldShow:1:0": 1,
  get$annotations: function(receiver) {
    return J.get$annotations$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "44,101";
  },
  "+annotations": 1,
  set$annotations: function(receiver, _) {
    "12,134,12";
  },
  "+annotations=": 1,
  get$interfaces: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver) == null ? [] : E.MemberElement.prototype.get$item.call(this, receiver).get$$implements();
    "135,101";
  },
  "+interfaces": 1,
  get$subclasses: function(receiver) {
    return J.get$subclasses$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "135,101";
  },
  "+subclasses": 1,
  get$superClass: function(receiver) {
    return J.get$superClass$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "57,101";
  },
  "+superClass": 1,
  showSubclass$3: function(receiver, $event, detail, target) {
    J.remove$1$ax(J.get$classes$x((receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#" + H.S(J.get$name$x(E.MemberElement.prototype.get$item.call(this, receiver))) + "-subclass-hidden")), "hidden");
    J.add$1$ax(J.get$classes$x((receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#" + H.S(J.get$name$x(E.MemberElement.prototype.get$item.call(this, receiver))) + "-subclass-button")), "hidden");
    "12,104,12,105,12,106,12";
  },
  "+showSubclass:3:0": 1,
  get$nameWithGeneric: function(receiver) {
    return J.get$nameWithGeneric$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "7,101";
  },
  "+nameWithGeneric": 1,
  get$name: function(receiver) {
    return J.get$name$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "7,101";
  },
  "+name": 1,
  get$isNotObject: function(receiver) {
    return J.$eq(E.MemberElement.prototype.get$item.call(this, receiver).get$qualifiedName(), "dart.core.Object") !== true;
    "18,101";
  },
  "+isNotObject": 1,
  addExtraSubclassLinks$0: function(receiver) {
    this.makeLinks$1(receiver, J.skip$1$ax(J.get$subclasses$x(E.MemberElement.prototype.get$item.call(this, receiver)), 3));
    "12,101";
  },
  "+addExtraSubclassLinks:0:0": 1,
  addInterfaceLinks$0: function(receiver) {
    var p, t1, t2;
    p = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#interfaces");
    if (p == null)
      return;
    t1 = J.getInterceptor$x(p);
    t2 = t1.get$children(p);
    t2.clear$0(t2);
    if (J.get$isNotEmpty$asx(E.MemberElement.prototype.get$item.call(this, receiver) == null ? [] : E.MemberElement.prototype.get$item.call(this, receiver).get$$implements()))
      p.appendChild(t1.createFragment$1(p, C.JSString_methods.$add("Implements:&nbsp;", this.makeLinks$1(receiver, E.MemberElement.prototype.get$item.call(this, receiver) == null ? [] : E.MemberElement.prototype.get$item.call(this, receiver).get$$implements())) + "&nbsp;"));
    if (J.get$superClass$x(E.MemberElement.prototype.get$item.call(this, receiver)) != null)
      p.appendChild(t1.createFragment$1(p, C.JSString_methods.$add("Extends:&nbsp;", this.makeLinks$1(receiver, [J.get$superClass$x(E.MemberElement.prototype.get$item.call(this, receiver))]))));
    "12,101";
  },
  "+addInterfaceLinks:0:0": 1,
  addSubclassLinks$0: function(receiver) {
    var p, buttonThatMustBeStatic, t1, t2, text, q;
    if ((receiver.shadowRoot || receiver.webkitShadowRoot) == null)
      return;
    p = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#subclasses");
    buttonThatMustBeStatic = p.querySelector(".btn-link");
    t1 = J.getInterceptor$x(p);
    t2 = t1.get$children(p);
    t2.clear$0(t2);
    text = this.makeLinks$1(receiver, J.take$1$ax(J.get$subclasses$x(E.MemberElement.prototype.get$item.call(this, receiver)), 3));
    if (J.get$isEmpty$asx(J.get$subclasses$x(E.MemberElement.prototype.get$item.call(this, receiver))) === true) {
      if (buttonThatMustBeStatic != null)
        J.add$1$ax(J.get$classes$x(buttonThatMustBeStatic), "hidden");
    } else {
      p.appendChild(t1.createFragment$2$validator(p, C.JSString_methods.$add("Subclasses: ", text), $.get$validator()));
      if (buttonThatMustBeStatic != null)
        J.remove$1$ax(J.get$classes$x(buttonThatMustBeStatic), "hidden");
    }
    if (J.$le$n(J.get$length$asx(J.get$subclasses$x(E.MemberElement.prototype.get$item.call(this, receiver))), 3))
      return;
    if (buttonThatMustBeStatic != null)
      p.appendChild(buttonThatMustBeStatic);
    p.appendChild(t1.createFragment$2$validator(p, "<span id=\"" + H.S(J.get$name$x(E.MemberElement.prototype.get$item.call(this, receiver))) + "-subclass-hidden\" class=\"hidden\">,&nbsp;</span>", $.get$validator()));
    q = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#" + H.S(J.get$name$x(E.MemberElement.prototype.get$item.call(this, receiver))) + "-subclass-hidden");
    q.appendChild(J.createFragment$1$x(q, this.makeLinks$1(receiver, J.skip$1$ax(J.get$subclasses$x(E.MemberElement.prototype.get$item.call(this, receiver)), 3))));
    "12,101";
  },
  "+addSubclassLinks:0:0": 1,
  makeLinks$1: function(receiver, classes) {
    var t1 = J.map$1$ax(classes, new U.ClassElement_makeLinks_closure());
    return t1.join$1(t1, ",&nbsp;");
    "12,15,136";
  },
  "+makeLinks:1:0": 1,
  ClassElement$created$0: function(receiver) {
    var t1 = L.PathObserver$($.get$viewer(), "isInherited", null);
    t1.get$changes(t1).listen$1(new U.ClassElement$created_closure(receiver));
    "12";
  },
  "@": function() {
    return [C.CustomTag_qRH];
  },
  static: {
ClassElement$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.ClassElement_methods.Element$created$0(receiver);
  C.ClassElement_methods.PolymerElement$created$0(receiver);
  C.ClassElement_methods.MemberElement$created$0(receiver);
  C.ClassElement_methods.ClassElement$created$0(receiver);
  return receiver;
  "59";
},

"+new ClassElement$created:0:0": 1}

},

"+ClassElement": [68],

ClassElement$created_closure: {"": "Closure;this_0-",
  call$1: function(changes) {
    var t1, t2;
    t1 = this.this_0;
    t2 = J.getInterceptor$x(t1);
    t2.notifyPropertyChange$3(t1, C.Symbol_shouldShowOperators, null, true);
    t2.notifyPropertyChange$3(t1, C.Symbol_shouldShowVariables, null, true);
    t2.notifyPropertyChange$3(t1, C.Symbol_shouldShowConstructors, null, true);
    t2.notifyPropertyChange$3(t1, C.Symbol_shouldShowMethods, null, true);
    t2.notifyPropertyChange$3(t1, C.Symbol_variables, null, []);
    t2.notifyPropertyChange$3(t1, C.Symbol_operators, null, []);
    t2.notifyPropertyChange$3(t1, C.Symbol_constructors, null, []);
    t2.notifyPropertyChange$3(t1, C.Symbol_methods, null, []);
    "12,108,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+ClassElement$created_closure": [100],

ClassElement_makeLinks_closure: {"": "Closure;",
  call$1: function(cls) {
    var t1 = J.getInterceptor$x(cls);
    return "<a href=\"#" + H.S(t1.get$location(cls)) + "\">" + H.S(t1.get$simpleType(cls)) + "</a>";
    "12,137,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+ClassElement_makeLinks_closure": [100]}],
["composer", "package:yaml/src/composer.dart", , T, {
Composer: {"": "Visitor;_root,_anchors,_idCounter",
  visitAlias$1: function(alias) {
    var t1 = this._anchors;
    if (!t1.containsKey$1(alias.anchor))
      throw H.wrapException(K.YamlException$("no anchor for alias " + H.S(alias.anchor)));
    return t1.$index(t1, alias.anchor);
  },
  visitScalar$1: function(scalar) {
    var t1, t2, t3, fn, result, tagParsers, key;
    if (J.$eq(J.get$name$x(scalar.tag), "!") === true) {
      t1 = scalar._model$_content;
      t1 = t1 != null ? t1 : scalar.get$canonicalContent();
      return this.setAnchor$2(scalar, new R.ScalarNode(null, t1, new R.Tag("tag:yaml.org,2002:str", 0), null));
    } else if (J.$eq(J.get$name$x(scalar.tag), "?") === true) {
      for (t1 = [this.get$parseNull(), this.get$parseBool(), this.get$parseInt(), this.get$parseFloat()], t2 = new H.ListIterator(t1, 4, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = scalar._model$_content, t3 = t1 != null; t2.moveNext$0();) {
        fn = t2._current;
        result = fn.call$1(t3 ? t1 : scalar.get$canonicalContent());
        if (result != null)
          return result;
      }
      t1 = t3 ? t1 : scalar.get$canonicalContent();
      return this.setAnchor$2(scalar, new R.ScalarNode(null, t1, new R.Tag("tag:yaml.org,2002:str", 0), null));
    }
    tagParsers = H.fillLiteralMap(["null", this.get$parseNull(), "bool", this.get$parseBool(), "int", this.get$parseInt(), "float", this.get$parseFloat(), "str", this.get$parseString()], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    for (t1 = tagParsers.get$keys(), t2 = t1._collection$_map, t3 = new P.LinkedHashMapKeyIterator(t2, t2._modifications, null, null), H.setRuntimeTypeInfo(t3, [H.getTypeArgumentByIndex(t1, 0)]), t3._cell = t2._first; t3.moveNext$0();) {
      key = t3._collection$_current;
      if (J.$eq(J.get$name$x(scalar.tag), "tag:yaml.org,2002:" + H.S(key)) !== true)
        continue;
      t1 = tagParsers.$index(tagParsers, key);
      t2 = scalar._model$_content;
      t3 = t2 != null;
      result = t1.call$1(t3 ? t2 : scalar.get$canonicalContent());
      if (result != null)
        return this.setAnchor$2(scalar, result);
      t1 = "invalid literal for " + H.S(key) + ": \"";
      throw H.wrapException(K.YamlException$(t1 + H.S(t3 ? t2 : scalar.get$canonicalContent()) + "\""));
    }
    throw H.wrapException(K.YamlException$("undefined tag: \"" + H.S(J.get$name$x(scalar.tag)) + "\""));
  },
  visitSequence$1: function(seq) {
    var tagName, t1, result;
    tagName = J.get$name$x(seq.tag);
    t1 = J.getInterceptor(tagName);
    if (t1.$eq(tagName, "!") !== true && t1.$eq(tagName, "?") !== true && t1.$eq(tagName, "tag:yaml.org,2002:seq") !== true)
      throw H.wrapException(K.YamlException$("invalid tag for sequence: " + H.S(tagName)));
    result = this.setAnchor$2(seq, new R.SequenceNode(null, new R.Tag("tag:yaml.org,2002:seq", 1), null));
    J.set$content$x(result, O.Visitor.prototype.visitSequence$1.call(this, seq));
    return result;
  },
  visitMapping$1: function(map) {
    var tagName, t1, result;
    tagName = J.get$name$x(map.tag);
    t1 = J.getInterceptor(tagName);
    if (t1.$eq(tagName, "!") !== true && t1.$eq(tagName, "?") !== true && t1.$eq(tagName, "tag:yaml.org,2002:map") !== true)
      throw H.wrapException(K.YamlException$("invalid tag for mapping: " + H.S(tagName)));
    result = this.setAnchor$2(map, new R.MappingNode(null, new R.Tag("tag:yaml.org,2002:map", 2), null));
    J.set$content$x(result, O.Visitor.prototype.visitMapping$1.call(this, map));
    return result;
  },
  setAnchor$2: function(anchored, result) {
    var t1;
    if (anchored.anchor == null)
      return result;
    t1 = this._idCounter;
    this._idCounter = t1 + 1;
    result.set$anchor("" + t1);
    t1 = this._anchors;
    t1.$indexSet(t1, anchored.anchor, result);
    return result;
  },
  parseNull$1: function($content) {
    var t1 = H.JSSyntaxRegExp_makeNative("^(null|Null|NULL|~|)$", false, true, false);
    if (typeof $content !== "string")
      H.throwExpression(new P.ArgumentError($content));
    if (!t1.test($content))
      return;
    return new R.ScalarNode(null, null, new R.Tag("tag:yaml.org,2002:null", 0), null);
  },
  get$parseNull: function() {
    return new H.BoundClosure$1(this, T.Composer.prototype.parseNull$1, null, "parseNull$1");
  },
  parseBool$1: function($content) {
    var match, t1;
    match = new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^(?:(true|True|TRUE)|(false|False|FALSE))$", false, true, false), null, null).firstMatch$1($content);
    if (match == null)
      return;
    t1 = match._match;
    if (1 >= t1.length)
      throw H.ioore(t1, 1);
    return new R.ScalarNode(null, t1[1] != null, new R.Tag("tag:yaml.org,2002:bool", 0), null);
  },
  get$parseBool: function() {
    return new H.BoundClosure$1(this, T.Composer.prototype.parseBool$1, null, "parseBool$1");
  },
  parseInt$1: function($content) {
    var match, t1;
    match = new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^[-+]?[0-9]+$", false, true, false), null, null).firstMatch$1($content);
    if (match != null) {
      t1 = match._match;
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      return new R.ScalarNode(null, H.Primitives_parseInt(t1[0], null, null), new R.Tag("tag:yaml.org,2002:int", 0), null);
    }
    match = new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^0o([0-7]+)$", false, true, false), null, null).firstMatch$1($content);
    if (match != null) {
      t1 = match._match;
      if (1 >= t1.length)
        throw H.ioore(t1, 1);
      return new R.ScalarNode(null, H.Primitives_parseInt(t1[1], 8, null), new R.Tag("tag:yaml.org,2002:int", 0), null);
    }
    match = new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^0x[0-9a-fA-F]+$", false, true, false), null, null).firstMatch$1($content);
    if (match != null) {
      t1 = match._match;
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      return new R.ScalarNode(null, H.Primitives_parseInt(t1[0], null, null), new R.Tag("tag:yaml.org,2002:int", 0), null);
    }
    return;
  },
  get$parseInt: function() {
    return new H.BoundClosure$1(this, T.Composer.prototype.parseInt$1, null, "parseInt$1");
  },
  parseFloat$1: function($content) {
    var match, t1, value;
    match = new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^[-+]?(\\.[0-9]+|[0-9]+(\\.[0-9]*)?)([eE][-+]?[0-9]+)?$", false, true, false), null, null).firstMatch$1($content);
    if (match != null) {
      t1 = match._match;
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      return new R.ScalarNode(null, H.Primitives_parseDouble(J.replaceAll$2$s(t1[0], new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("\\.$", false, true, false), null, null), ""), null), new R.Tag("tag:yaml.org,2002:float", 0), null);
    }
    match = new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^([+-]?)\\.(inf|Inf|INF)$", false, true, false), null, null).firstMatch$1($content);
    if (match != null) {
      t1 = match._match;
      if (1 >= t1.length)
        throw H.ioore(t1, 1);
      value = J.$eq(t1[1], "-") === true ? -1 / 0 : 1 / 0;
      return new R.ScalarNode(null, value, new R.Tag("tag:yaml.org,2002:float", 0), null);
    }
    if (new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^\\.(nan|NaN|NAN)$", false, true, false), null, null).firstMatch$1($content) != null)
      return new R.ScalarNode(null, 0 / 0, new R.Tag("tag:yaml.org,2002:float", 0), null);
    return;
  },
  get$parseFloat: function() {
    return new H.BoundClosure$1(this, T.Composer.prototype.parseFloat$1, null, "parseFloat$1");
  },
  parseString$1: function($content) {
    return new R.ScalarNode(null, $content, new R.Tag("tag:yaml.org,2002:str", 0), null);
  },
  get$parseString: function() {
    return new H.BoundClosure$1(this, T.Composer.prototype.parseString$1, null, "parseString$1");
  }
}}],
["constructor", "package:yaml/src/constructor.dart", , T, {
Constructor: {"": "Visitor;_$constructor$_root,_$constructor$_anchors",
  visitScalar$1: function(scalar) {
    return scalar.value;
  },
  visitSequence$1: function(seq) {
    var anchor, dartSeq;
    anchor = this.getAnchor$1(seq);
    if (anchor != null)
      return anchor;
    dartSeq = this.setAnchor$2(seq, []);
    J.addAll$1$ax(dartSeq, O.Visitor.prototype.visitSequence$1.call(this, seq));
    return dartSeq;
  },
  visitMapping$1: function(map) {
    var anchor, dartMap, t1;
    anchor = this.getAnchor$1(map);
    if (anchor != null)
      return anchor;
    dartMap = this.setAnchor$2(map, new L.YamlMap(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    t1 = O.Visitor.prototype.visitMapping$1.call(this, map);
    t1.forEach$1(t1, new T.Constructor_visitMapping_closure(dartMap));
    return dartMap;
  },
  getAnchor$1: function(anchored) {
    var t1, t2;
    t1 = anchored.anchor;
    if (t1 == null)
      return;
    t2 = this._$constructor$_anchors;
    if (t2.containsKey$1(t1))
      return t2.$index(t2, anchored.anchor);
  },
  setAnchor$2: function(anchored, value) {
    var t1, t2;
    t1 = anchored.anchor;
    if (t1 == null)
      return value;
    t2 = this._$constructor$_anchors;
    t2.$indexSet(t2, t1, value);
    return value;
  }
},

Constructor_visitMapping_closure: {"": "Closure;dartMap_0",
  call$2: function(k, v) {
    J.$indexSet$ax(this.dartMap_0, k, v);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
}}],
["custom_element.polyfill", "package:custom_element/polyfill.dart", , B, {
_isReady: function() {
  if ($.get$context() == null)
    return true;
  var customElements = J.$index$asx($.get$context(), "CustomElements");
  if (customElements == null)
    return "register" in document;
  return J.$eq(J.$index$asx(customElements, "ready"), true);
},

closure: {"": "Closure;",
  call$0: function() {
    if (B._isReady() === true)
      return P._Future$immediate(null, null);
    var t1 = new W._EventStream(document, "WebComponentsReady", false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1.get$first(t1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
}}],
["dart._collection.dev", "dart:_collection-dev", , H, {
Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var t1, i, j, t2, t3;
  t1 = J.getInterceptor$n(srcStart);
  if (t1.$lt(srcStart, dstStart))
    for (i = J.$sub$n(t1.$add(srcStart, count), 1), j = J.$sub$n(J.$add$ns(dstStart, count), 1), t1 = J.getInterceptor$asx(src); t2 = J.getInterceptor$n(i), t2.$ge(i, srcStart); i = t2.$sub(i, 1), j = J.$sub$n(j, 1))
      C.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t2 = J.getInterceptor$asx(src), j = dstStart, i = srcStart; t3 = J.getInterceptor$n(i), t3.$lt(i, t1.$add(srcStart, count)); i = t3.$add(i, 1), j = J.$add$ns(j, 1))
      C.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
},

Arrays_indexOf: function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i >>> 0 !== i || i >= a.length)
      throw H.ioore(a, i);
    if (J.$eq(a[i], element) === true)
      return i;
  }
  return -1;
},

Arrays_lastIndexOf: function(a, element, startIndex) {
  var t1, i;
  if (typeof startIndex !== "number")
    throw startIndex.$lt();
  if (startIndex < 0)
    return -1;
  t1 = a.length;
  if (startIndex >= t1)
    startIndex = t1 - 1;
  for (i = startIndex; i >= 0; --i) {
    if (i >= a.length)
      throw H.ioore(a, i);
    if (J.$eq(a[i], element) === true)
      return i;
  }
  return -1;
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(iterable, "JSArray", 0)]); t1.moveNext$0();)
    f.call$1(t1._current);
},

IterableMixinWorkaround_any: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(iterable, "JSArray", 0)]); t1.moveNext$0();)
    if (f.call$1(t1._current) === true)
      return true;
  return false;
},

IterableMixinWorkaround_fold: function(iterable, initialValue, combine) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(iterable, "JSArray", 0)]); t1.moveNext$0();)
    initialValue = combine.call$2(initialValue, t1._current);
  return initialValue;
},

IterableMixinWorkaround_firstWhere: function(iterable, test, orElse) {
  var t1, element;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(iterable, "JSArray", 0)]); t1.moveNext$0();) {
    element = t1._current;
    if (test.call$1(element) === true)
      return element;
  }
  if (orElse != null)
    return orElse.call$0();
  throw H.wrapException(new P.StateError("No matching element"));
},

IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw H.ioore(t1, i);
    if (t1[i] === iterable)
      return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
  }
  result = P.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

IterableMixinWorkaround_sortList: function(list, compare) {
  if (compare == null)
    compare = P.Comparable_compare$closure;
  H.Sort__doSort(list, 0, list.length - 1, compare);
},

IterableMixinWorkaround_lastIndexOfList: function(list, element, start) {
  return H.Arrays_lastIndexOf(list, element, list.length - 1);
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  var t1 = J.getInterceptor$n(start);
  if (t1.$lt(start, 0) || t1.$gt(start, list.length))
    throw H.wrapException(P.RangeError$range(start, 0, list.length));
  t1 = J.getInterceptor$n(end);
  if (t1.$lt(end, start) || t1.$gt(end, list.length))
    throw H.wrapException(P.RangeError$range(end, start, list.length));
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length, t1;
  H.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = J.$sub$n(end, start);
  if (J.$eq($length, 0))
    return;
  t1 = J.getInterceptor$n(skipCount);
  if (t1.$lt(skipCount, 0))
    throw H.wrapException(new P.ArgumentError(skipCount));
  if (J.$gt$n(t1.$add(skipCount, $length), J.get$length$asx(from)))
    throw H.wrapException(P.StateError$("Not enough elements"));
  H.Arrays_copy(from, skipCount, list, start, $length);
},

IterableMixinWorkaround_insertAllList: function(list, index, iterable) {
  var t1, t2, element, index0;
  t1 = J.getInterceptor$n(index);
  if (t1.$lt(index, 0) || t1.$gt(index, list.length))
    throw H.wrapException(P.RangeError$range(index, 0, list.length));
  C.JSArray_methods.set$length(list, list.length + 2);
  t1 = t1.$add(index, 2);
  t2 = list.length;
  if (!!list.immutable$list)
    H.throwExpression(P.UnsupportedError$("set range"));
  H.IterableMixinWorkaround_setRangeList(list, t1, t2, list, index);
  for (t1 = new H.ListIterator(iterable, 2, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(iterable, "JSArray", 0)]); t1.moveNext$0(); index = index0) {
    element = t1._current;
    index0 = J.$add$ns(index, 1);
    C.JSArray_methods.$indexSet(list, index, element);
  }
},

Sort__doSort: function(a, left, right, compare) {
  if (J.$le$n(J.$sub$n(right, left), 32))
    H.Sort__insertionSort(a, left, right, compare);
  else
    H.Sort__dualPivotQuicksort(a, left, right, compare);
},

Sort__insertionSort: function(a, left, right, compare) {
  var i, t1, t2, el, j, t3;
  for (i = J.$add$ns(left, 1), t1 = J.getInterceptor$asx(a); t2 = J.getInterceptor$n(i), t2.$le(i, right); i = t2.$add(i, 1)) {
    el = t1.$index(a, i);
    j = i;
    while (true) {
      t3 = J.getInterceptor$n(j);
      if (!(t3.$gt(j, left) && J.$gt$n(compare.call$2(t1.$index(a, t3.$sub(j, 1)), el), 0)))
        break;
      t1.$indexSet(a, j, t1.$index(a, t3.$sub(j, 1)));
      j = t3.$sub(j, 1);
    }
    t1.$indexSet(a, j, el);
  }
},

Sort__dualPivotQuicksort: function(a, left, right, compare) {
  var t1, sixth, t2, index1, index5, index3, t3, index2, index4, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t4, t5, less0, great0;
  t1 = J.getInterceptor$n(right);
  sixth = J.$tdiv$n(J.$add$ns(t1.$sub(right, left), 1), 6);
  t2 = J.getInterceptor$ns(left);
  index1 = t2.$add(left, sixth);
  index5 = t1.$sub(right, sixth);
  index3 = J.$tdiv$n(t2.$add(left, right), 2);
  t3 = J.getInterceptor$n(index3);
  index2 = t3.$sub(index3, sixth);
  index4 = t3.$add(index3, sixth);
  t3 = J.getInterceptor$asx(a);
  el1 = t3.$index(a, index1);
  el2 = t3.$index(a, index2);
  el3 = t3.$index(a, index3);
  el4 = t3.$index(a, index4);
  el5 = t3.$index(a, index5);
  if (J.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t3.$indexSet(a, index1, el1);
  t3.$indexSet(a, index3, el3);
  t3.$indexSet(a, index5, el5);
  t3.$indexSet(a, index2, t3.$index(a, left));
  t3.$indexSet(a, index4, t3.$index(a, right));
  less = t2.$add(left, 1);
  great = t1.$sub(right, 1);
  t1 = J.$eq(compare.call$2(el2, el4), 0) === true;
  if (t1)
    for (k = less; t2 = J.getInterceptor$n(k), t2.$le(k, great); k = t2.$add(k, 1)) {
      ak = t3.$index(a, k);
      comp = compare.call$2(ak, el2);
      t4 = J.getInterceptor(comp);
      if (t4.$eq(comp, 0) === true)
        continue;
      if (t4.$lt(comp, 0)) {
        if (!t2.$eq(k, less)) {
          t3.$indexSet(a, k, t3.$index(a, less));
          t3.$indexSet(a, less, ak);
        }
        less = J.$add$ns(less, 1);
      } else
        for (; true;) {
          comp = compare.call$2(t3.$index(a, great), el2);
          t4 = J.getInterceptor$n(comp);
          if (t4.$gt(comp, 0)) {
            great = J.$sub$n(great, 1);
            continue;
          } else {
            t5 = J.getInterceptor$n(great);
            if (t4.$lt(comp, 0)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              less0 = J.$add$ns(less, 1);
              t3.$indexSet(a, less, t3.$index(a, great));
              great0 = t5.$sub(great, 1);
              t3.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              t3.$indexSet(a, k, t3.$index(a, great));
              great0 = t5.$sub(great, 1);
              t3.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; t2 = J.getInterceptor$n(k), t2.$le(k, great); k = t2.$add(k, 1)) {
      ak = t3.$index(a, k);
      if (J.$lt$n(compare.call$2(ak, el2), 0)) {
        if (!t2.$eq(k, less)) {
          t3.$indexSet(a, k, t3.$index(a, less));
          t3.$indexSet(a, less, ak);
        }
        less = J.$add$ns(less, 1);
      } else if (J.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;)
          if (J.$gt$n(compare.call$2(t3.$index(a, great), el4), 0)) {
            great = J.$sub$n(great, 1);
            if (J.$lt$n(great, k))
              break;
            continue;
          } else {
            t4 = J.getInterceptor$n(great);
            if (J.$lt$n(compare.call$2(t3.$index(a, great), el2), 0)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              less0 = J.$add$ns(less, 1);
              t3.$indexSet(a, less, t3.$index(a, great));
              great0 = t4.$sub(great, 1);
              t3.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t3.$indexSet(a, k, t3.$index(a, great));
              great0 = t4.$sub(great, 1);
              t3.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
  t2 = J.getInterceptor$n(less);
  t3.$indexSet(a, left, t3.$index(a, t2.$sub(less, 1)));
  t3.$indexSet(a, t2.$sub(less, 1), el2);
  t4 = J.getInterceptor$ns(great);
  t3.$indexSet(a, right, t3.$index(a, t4.$add(great, 1)));
  t3.$indexSet(a, t4.$add(great, 1), el4);
  H.Sort__doSort(a, left, t2.$sub(less, 2), compare);
  H.Sort__doSort(a, t4.$add(great, 2), right, compare);
  if (t1)
    return;
  if (t2.$lt(less, index1) && t4.$gt(great, index5)) {
    for (; J.$eq(compare.call$2(t3.$index(a, less), el2), 0) === true;)
      less = J.$add$ns(less, 1);
    for (; J.$eq(compare.call$2(t3.$index(a, great), el4), 0) === true;)
      great = J.$sub$n(great, 1);
    for (k = less; t1 = J.getInterceptor$n(k), t1.$le(k, great); k = t1.$add(k, 1)) {
      ak = t3.$index(a, k);
      if (J.$eq(compare.call$2(ak, el2), 0) === true) {
        if (!t1.$eq(k, less)) {
          t3.$indexSet(a, k, t3.$index(a, less));
          t3.$indexSet(a, less, ak);
        }
        less = J.$add$ns(less, 1);
      } else if (J.$eq(compare.call$2(ak, el4), 0) === true)
        for (; true;)
          if (J.$eq(compare.call$2(t3.$index(a, great), el4), 0) === true) {
            great = J.$sub$n(great, 1);
            if (J.$lt$n(great, k))
              break;
            continue;
          } else {
            t2 = J.getInterceptor$n(great);
            if (J.$lt$n(compare.call$2(t3.$index(a, great), el2), 0)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              less0 = J.$add$ns(less, 1);
              t3.$indexSet(a, less, t3.$index(a, great));
              great0 = t2.$sub(great, 1);
              t3.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t3.$indexSet(a, k, t3.$index(a, great));
              great0 = t2.$sub(great, 1);
              t3.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    H.Sort__doSort(a, less, great, compare);
  } else
    H.Sort__doSort(a, less, great, compare);
},

ListIterable: {"": "IterableBase;",
  get$iterator: function(_) {
    var t1 = new H.ListIterator(this, this.get$length(this), 0, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
    return t1;
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return J.$eq(this.get$length(this), 0);
  },
  "+isEmpty": 0,
  get$first: function(_) {
    if (J.$eq(this.get$length(this), 0) === true)
      throw H.wrapException(new P.StateError("No elements"));
    return this.elementAt$1(this, 0);
  },
  get$last: function(_) {
    if (J.$eq(this.get$length(this), 0) === true)
      throw H.wrapException(new P.StateError("No elements"));
    return this.elementAt$1(this, J.$sub$n(this.get$length(this), 1));
  },
  contains$1: function(_, element) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      if (J.$eq(this.elementAt$1(this, i), element) === true)
        return true;
      if ($length !== this.get$length(this))
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
    return false;
  },
  any$1: function(_, test) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      if (test.call$1(this.elementAt$1(this, i)) === true)
        return true;
      if ($length !== this.get$length(this))
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
    return false;
  },
  firstWhere$2$orElse: function(_, test, orElse) {
    var $length, i, element;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      element = this.elementAt$1(this, i);
      if (test.call$1(element) === true)
        return element;
      if ($length !== this.get$length(this))
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
    if (orElse != null)
      return orElse.call$0();
    throw H.wrapException(new P.StateError("No matching element"));
  },
  firstWhere$1: function($receiver, test) {
    return this.firstWhere$2$orElse($receiver, test, null);
  },
  join$1: function(_, separator) {
    var $length, t1, first, buffer, i, str;
    $length = this.get$length(this);
    if (separator.length !== 0) {
      t1 = J.getInterceptor($length);
      if (t1.$eq($length, 0) === true)
        return "";
      first = H.S(this.elementAt$1(this, 0));
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      buffer = P.StringBuffer$(first);
      if (typeof $length !== "number")
        throw H.iae($length);
      i = 1;
      for (; i < $length; ++i) {
        buffer._contents = buffer._contents + separator;
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : H.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return buffer._contents;
    } else {
      buffer = P.StringBuffer$("");
      if (typeof $length !== "number")
        throw H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : H.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return buffer._contents;
    }
  },
  join$0: function($receiver) {
    return this.join$1($receiver, "");
  },
  where$1: function(_, test) {
    return P.IterableBase.prototype.where$1.call(this, this, test);
  },
  map$1: function(_, f) {
    var t1 = new H.MappedListIterable(this, f);
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
  },
  fold$2: function(_, initialValue, combine) {
    var $length, value, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw H.iae($length);
    value = initialValue;
    i = 0;
    for (; i < $length; ++i) {
      value = combine.call$2(value, this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
    return value;
  },
  skip$1: function(_, count) {
    return H.SubListIterable$(this, count, null, null);
  },
  take$1: function(_, count) {
    return H.SubListIterable$(this, 0, count, null);
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(this, "ListIterable", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = P.List_List(this.get$length(this), H.getRuntimeTypeArgument(this, "ListIterable", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
    }
    i = 0;
    while (true) {
      t1 = this.get$length(this);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = t1;
      ++i;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  $asIterableBase: null,
  $asIterable: null,
  $isEfficientLength: true
},

SubListIterable: {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1;
    $length = J.get$length$asx(this._iterable);
    t1 = this._endOrLength;
    if (t1 == null || J.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = J.get$length$asx(this._iterable);
    t1 = this._start;
    if (J.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = J.get$length$asx(this._iterable);
    t1 = this._start;
    if (J.$ge$n(t1, $length))
      return 0;
    t2 = this._endOrLength;
    if (t2 == null || J.$ge$n(t2, $length))
      return J.$sub$n($length, t1);
    return J.$sub$n(t2, t1);
  },
  "+length": 0,
  elementAt$1: function(_, index) {
    var realIndex = J.$add$ns(this.get$_startIndex(), index);
    if (J.$lt$n(index, 0) || J.$ge$n(realIndex, this.get$_endIndex()))
      throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
    return J.elementAt$1$ax(this._iterable, realIndex);
  },
  skip$1: function(_, count) {
    if (J.$lt$n(count, 0))
      throw H.wrapException(new P.RangeError("value " + H.S(count)));
    return H.SubListIterable$(this._iterable, J.$add$ns(this._start, count), this._endOrLength, null);
  },
  take$1: function(_, count) {
    var t1, t2, newEnd;
    if (J.$lt$n(count, 0))
      throw H.wrapException(P.RangeError$value(count));
    t1 = this._endOrLength;
    t2 = this._start;
    if (t1 == null)
      return H.SubListIterable$(this._iterable, t2, J.$add$ns(t2, count), null);
    else {
      newEnd = J.$add$ns(t2, count);
      if (J.$lt$n(t1, newEnd))
        return this;
      return H.SubListIterable$(this._iterable, t2, newEnd, null);
    }
  },
  SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
    var t1, t2, t3;
    t1 = this._start;
    t2 = J.getInterceptor$n(t1);
    if (t2.$lt(t1, 0))
      throw H.wrapException(P.RangeError$value(t1));
    t3 = this._endOrLength;
    if (t3 != null) {
      if (J.$lt$n(t3, 0))
        throw H.wrapException(P.RangeError$value(t3));
      if (t2.$gt(t1, t3))
        throw H.wrapException(P.RangeError$range(t1, 0, t3));
    }
  },
  $asListIterable: null,
  $asIterable: null,
  static: {
SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
  var t1 = new H.SubListIterable(_iterable, _start, _endOrLength);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
  return t1;
}}

},

ListIterator: {"": "Object;_iterable,_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  "+current": 0,
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = J.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (J.$eq(this._length, $length) !== true)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    t3 = this._index;
    if (typeof $length !== "number")
      throw H.iae($length);
    if (t3 >= $length) {
      this._current = null;
      return false;
    }
    this._current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = new H.MappedIterator(null, J.get$iterator$ax(this._iterable), this._f);
    t1.$builtinTypeInfo = this.$builtinTypeInfo;
    return t1;
  },
  get$length: function(_) {
    return J.get$length$asx(this._iterable);
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return J.get$isEmpty$asx(this._iterable);
  },
  "+isEmpty": 0,
  get$first: function(_) {
    return this._f$1(J.get$first$ax(this._iterable));
  },
  get$last: function(_) {
    return this._f$1(J.get$last$ax(this._iterable));
  },
  elementAt$1: function(_, index) {
    return this._f$1(J.elementAt$1$ax(this._iterable, index));
  },
  $asIterableBase: function($S, $T) {
    return [$T];
  },
  $asIterable: function($S, $T) {
    return [$T];
  },
  static: {
MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
  var t1 = J.getInterceptor(iterable);
  if (typeof iterable === "object" && iterable !== null && !!t1.$isEfficientLength) {
    t1 = new H.EfficientLengthMappedIterable(iterable, $function);
    H.setRuntimeTypeInfo(t1, [$S, $T]);
    return t1;
  }
  t1 = new H.MappedIterable(iterable, $function);
  H.setRuntimeTypeInfo(t1, [$S, $T]);
  return t1;
}}

},

EfficientLengthMappedIterable: {"": "MappedIterable;_iterable,_f", $asMappedIterable: null,
  $asIterable: function($S, $T) {
    return [$T];
  },
  $isEfficientLength: true
},

MappedIterator: {"": "Iterator;_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0()) {
      this._current = this._f$1(t1.get$current());
      return true;
    }
    this._current = null;
    return false;
  },
  get$current: function() {
    return this._current;
  },
  "+current": 0,
  $asIterator: function($S, $T) {
    return [$T];
  }
},

MappedListIterable: {"": "ListIterable;_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return J.get$length$asx(this._source);
  },
  "+length": 0,
  elementAt$1: function(_, index) {
    return this._f$1(J.elementAt$1$ax(this._source, index));
  },
  $asListIterable: function($S, $T) {
    return [$T];
  },
  $asIterable: function($S, $T) {
    return [$T];
  },
  $isEfficientLength: true
},

WhereIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
    t1.$builtinTypeInfo = this.$builtinTypeInfo;
    return t1;
  },
  $asIterableBase: null,
  $asIterable: null
},

WhereIterator: {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0();)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  "+current": 0,
  $asIterator: null
},

ExpandIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = new H.ExpandIterator(J.get$iterator$ax(this._iterable), this._f, C.C_EmptyIterator, null);
    t1.$builtinTypeInfo = this.$builtinTypeInfo;
    return t1;
  },
  $asIterableBase: function($S, $T) {
    return [$T];
  },
  $asIterable: function($S, $T) {
    return [$T];
  }
},

ExpandIterator: {"": "Object;_iterator,_f,_currentExpansion,_current",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$current: function() {
    return this._current;
  },
  "+current": 0,
  moveNext$0: function() {
    if (this._currentExpansion == null)
      return false;
    for (var t1 = this._iterator; !this._currentExpansion.moveNext$0();) {
      this._current = null;
      if (t1.moveNext$0()) {
        this._currentExpansion = null;
        this._currentExpansion = J.get$iterator$ax(this._f$1(t1.get$current()));
      } else
        return false;
    }
    this._current = this._currentExpansion.get$current();
    return true;
  }
},

TakeIterable: {"": "IterableBase;_iterable,_takeCount",
  get$iterator: function(_) {
    var t1 = this._iterable;
    t1 = new H.TakeIterator(t1.get$iterator(t1), this._takeCount);
    t1.$builtinTypeInfo = this.$builtinTypeInfo;
    return t1;
  },
  $asIterableBase: null,
  $asIterable: null,
  static: {
TakeIterable_TakeIterable: function(iterable, takeCount, $E) {
  var t1;
  if (takeCount < 0)
    throw H.wrapException(new P.ArgumentError(takeCount));
  if (!!iterable.$isEfficientLength) {
    t1 = new H.EfficientLengthTakeIterable(iterable, takeCount);
    H.setRuntimeTypeInfo(t1, [$E]);
    return t1;
  }
  t1 = new H.TakeIterable(iterable, takeCount);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
}}

},

EfficientLengthTakeIterable: {"": "TakeIterable;_iterable,_takeCount",
  get$length: function(_) {
    var t1, iterableLength;
    t1 = this._iterable;
    iterableLength = t1.get$length(t1);
    t1 = this._takeCount;
    if (J.$gt$n(iterableLength, t1))
      return t1;
    return iterableLength;
  },
  "+length": 0,
  $asTakeIterable: null,
  $asIterable: null,
  $isEfficientLength: true
},

TakeIterator: {"": "Iterator;_iterator,_dev$_remaining",
  moveNext$0: function() {
    this._dev$_remaining = this._dev$_remaining - 1;
    if (this._dev$_remaining >= 0)
      return this._iterator.moveNext$0();
    this._dev$_remaining = -1;
    return false;
  },
  get$current: function() {
    if (this._dev$_remaining < 0)
      return;
    return this._iterator.get$current();
  },
  "+current": 0,
  $asIterator: null
},

TakeWhileIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = new H.TakeWhileIterator(J.get$iterator$ax(this._iterable), this._f, false);
    t1.$builtinTypeInfo = this.$builtinTypeInfo;
    return t1;
  },
  $asIterableBase: null,
  $asIterable: null
},

TakeWhileIterator: {"": "Iterator;_iterator,_f,_isFinished",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    if (this._isFinished)
      return false;
    var t1 = this._iterator;
    if (!t1.moveNext$0() || this._f$1(t1.get$current()) !== true) {
      this._isFinished = true;
      return false;
    }
    return true;
  },
  get$current: function() {
    if (this._isFinished)
      return;
    return this._iterator.get$current();
  },
  "+current": 0,
  $asIterator: null
},

SkipIterable: {"": "IterableBase;_iterable,_skipCount",
  skip$1: function(_, n) {
    if (typeof n !== "number" || Math.floor(n) !== n || n < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(n)));
    return H.SkipIterable_SkipIterable(this._iterable, J.$add$ns(this._skipCount, n), H.getTypeArgumentByIndex(this, 0));
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    t1 = new H.SkipIterator(t1.get$iterator(t1), this._skipCount);
    t1.$builtinTypeInfo = this.$builtinTypeInfo;
    return t1;
  },
  SkipIterable$_$2: function(_iterable, _skipCount, $E) {
    var t1 = this._skipCount;
    if (typeof t1 !== "number" || Math.floor(t1) !== t1 || J.$lt$n(t1, 0))
      throw H.wrapException(P.RangeError$(t1));
  },
  $asIterableBase: null,
  $asIterable: null,
  static: {
SkipIterable_SkipIterable: function(iterable, skipCount, $E) {
  var t1;
  if (!!iterable.$isEfficientLength) {
    t1 = new H.EfficientLengthSkipIterable(iterable, skipCount);
    H.setRuntimeTypeInfo(t1, [$E]);
    t1.SkipIterable$_$2(iterable, skipCount, $E);
    return t1;
  }
  return H.SkipIterable$_(iterable, skipCount, $E);
},

SkipIterable$_: function(_iterable, _skipCount, $E) {
  var t1 = new H.SkipIterable(_iterable, _skipCount);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.SkipIterable$_$2(_iterable, _skipCount, $E);
  return t1;
}}

},

EfficientLengthSkipIterable: {"": "SkipIterable;_iterable,_skipCount",
  get$length: function(_) {
    var t1, $length;
    t1 = this._iterable;
    $length = J.$sub$n(t1.get$length(t1), this._skipCount);
    if (J.$ge$n($length, 0))
      return $length;
    return 0;
  },
  "+length": 0,
  $asSkipIterable: null,
  $asIterable: null,
  $isEfficientLength: true
},

SkipIterator: {"": "Iterator;_iterator,_skipCount",
  moveNext$0: function() {
    var t1, i, t2;
    t1 = this._iterator;
    i = 0;
    while (true) {
      t2 = this._skipCount;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      if (!(i < t2))
        break;
      t1.moveNext$0();
      ++i;
    }
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  "+current": 0,
  $asIterator: null
},

EmptyIterator: {"": "Object;",
  moveNext$0: function() {
    return false;
  },
  get$current: function() {
    return;
  },
  "+current": 0
},

FixedLengthListMixin: {"": "Object;",
  set$length: function(receiver, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
  },
  "+length=": 0,
  add$1: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
  },
  insert$2: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
  },
  addAll$1: function(receiver, iterable) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
  },
  remove$1: function(receiver, element) {
    throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
  },
  clear$0: function(receiver) {
    throw H.wrapException(P.UnsupportedError$("Cannot clear a fixed-length list"));
  },
  removeLast$0: function(receiver) {
    throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
  }
},

UnmodifiableListMixin: {"": "Object;",
  $indexSet: function(_, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  "+[]=:2:0": 0,
  set$length: function(_, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
  },
  "+length=": 0,
  add$1: function(_, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  insert$2: function(_, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  addAll$1: function(_, iterable) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  remove$1: function(_, element) {
    throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  sort$1: function(_, compare) {
    throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  clear$0: function(_) {
    throw H.wrapException(P.UnsupportedError$("Cannot clear an unmodifiable list"));
  },
  removeLast$0: function(_) {
    throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true,
  $isIterable: true,
  $asIterable: null
},

UnmodifiableListBase: {"": "ListBase+UnmodifiableListMixin;", $asListBase: null, $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

ReversedListIterable: {"": "ListIterable;_source",
  get$length: function(_) {
    return J.get$length$asx(this._source);
  },
  "+length": 0,
  elementAt$1: function(_, index) {
    var t1, t2;
    t1 = this._source;
    t2 = J.getInterceptor$asx(t1);
    return t2.elementAt$1(t1, J.$sub$n(J.$sub$n(t2.get$length(t1), 1), index));
  },
  $asListIterable: null,
  $asIterable: null
},

Symbol0: {"": "Object;_name>",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isSymbol0 && J.$eq(this._name, other._name) === true;
  },
  get$hashCode: function(_) {
    var t1 = J.get$hashCode$(this._name);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return 536870911 & 664597 * t1;
  },
  toString$0: function(_) {
    return "Symbol(\"" + H.S(this._name) + "\")";
  },
  "+toString:0:0": 0,
  $isSymbol0: true,
  $isSymbol: true,
  static: {
"": "Symbol_validationPattern",
Symbol_validate: function($name) {
  var t1 = J.getInterceptor$asx($name);
  if (t1.get$isEmpty($name) === true)
    return $name;
  if (t1.startsWith$1($name, "_"))
    throw H.wrapException(new P.ArgumentError("\"" + H.S($name) + "\" is a private identifier"));
  t1 = $.get$Symbol_validationPattern()._nativeRegExp;
  if (typeof $name !== "string")
    H.throwExpression(new P.ArgumentError($name));
  if (!t1.test($name))
    throw H.wrapException(new P.ArgumentError("\"" + H.S($name) + "\" is not an identifier or an empty String"));
  return $name;
}}

}}],
["dart._js_mirrors", "dart:_js_mirrors", , H, {
s: function($name) {
  if ($name == null)
    return;
  return new H.Symbol0($name);
},

setterSymbol: function(symbol) {
  return H.s(H.S(J.get$_name$x(symbol)) + "=");
},

reflect: function(reflectee) {
  var t1 = J.getInterceptor(reflectee);
  if (typeof reflectee === "object" && reflectee !== null && !!t1.$isClosure)
    return new H.JsClosureMirror(reflectee);
  else
    return new H.JsInstanceMirror(reflectee);
},

reflectClassByMangledName: function(mangledName) {
  var t1, unmangledName;
  t1 = $.get$mangledGlobalNames();
  unmangledName = t1.$index(t1, mangledName);
  return H.reflectClassByName(H.s(unmangledName == null ? mangledName : unmangledName), mangledName);
},

reflectClassByName: function(symbol, mangledName) {
  var mirror, t1, typeArgIndex, t2, constructorOrInterceptor, index, $constructor, descriptor, fields, fieldsMetadata, mixins;
  if ($.classMirrors == null)
    $.classMirrors = H.JsCache_allocate();
  mirror = $.classMirrors[mangledName];
  if (mirror != null)
    return mirror;
  t1 = J.getInterceptor$asx(mangledName);
  typeArgIndex = t1.indexOf$1(mangledName, "<");
  if (typeArgIndex !== -1) {
    t2 = H.reflectClassByMangledName(t1.substring$2(mangledName, 0, typeArgIndex));
    mirror = new H.JsTypeBoundClassMirror(t2, t1.substring$2(mangledName, typeArgIndex + 1, J.$sub$n(t1.get$length(mangledName), 1)), null, null, null, null, null, null, null, null, null, null, null, t2.get$simpleName());
    $.classMirrors[mangledName] = mirror;
    return mirror;
  }
  constructorOrInterceptor = H.Primitives_getConstructorOrInterceptor(mangledName);
  if (constructorOrInterceptor == null) {
    index = init.functionAliases[mangledName];
    if (index != null) {
      mirror = new H.JsTypedefMirror(mangledName, null, symbol);
      mirror.referent = new H.JsFunctionTypeMirror(init.metadata[index], null, null, null, mirror);
      $.classMirrors[mangledName] = mirror;
      return mirror;
    }
    throw H.wrapException(P.UnsupportedError$("Cannot find class for: " + H.S(symbol._name)));
  }
  t1 = J.getInterceptor(constructorOrInterceptor);
  $constructor = typeof constructorOrInterceptor === "object" && constructorOrInterceptor !== null && !!t1.$isInterceptor ? constructorOrInterceptor.constructor : constructorOrInterceptor;
  descriptor = $constructor["@"];
  if (descriptor == null) {
    fields = null;
    fieldsMetadata = null;
  } else {
    fields = descriptor[""];
    t1 = J.getInterceptor$asx(fields);
    if (typeof fields === "object" && fields !== null && (fields.constructor === Array || !!t1.$isList)) {
      t2 = t1.getRange$2(fields, 1, t1.get$length(fields));
      fieldsMetadata = t2.toList$0(t2);
      fields = t1.$index(fields, 0);
    } else
      fieldsMetadata = null;
    if (typeof fields !== "string")
      fields = "";
  }
  t1 = J.split$1$s(fields, ";");
  if (0 >= t1.length)
    throw H.ioore(t1, 0);
  mixins = J.split$1$s(t1[0], "+");
  if (mixins.length > 1) {
    t1 = $.get$mangledGlobalNames();
    t1 = t1.$index(t1, mangledName) == null;
  } else
    t1 = false;
  mirror = t1 ? H.reflectMixinApplication(mixins, mangledName) : new H.JsClassMirror(mangledName, constructorOrInterceptor, fields, fieldsMetadata, H.JsCache_allocate(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, symbol);
  $.classMirrors[mangledName] = mirror;
  return mirror;
},

filterMethods: function(methods) {
  var result, t1, method;
  result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
  for (t1 = J.get$iterator$ax(methods); t1.moveNext$0();) {
    method = t1.get$current();
    if (J.get$isConstructor$x(method) !== true && method.get$isGetter() !== true && method.get$isSetter() !== true)
      result.$indexSet(result, method.get$simpleName(), method);
  }
  return result;
},

filterConstructors: function(methods) {
  var result, t1, method;
  result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
  for (t1 = J.get$iterator$ax(methods); t1.moveNext$0();) {
    method = t1.get$current();
    if (J.get$isConstructor$x(method) === true)
      result.$indexSet(result, method.get$simpleName(), method);
  }
  return result;
},

filterMembers: function(methods, variables) {
  var result, t1, method, $name, t2, t3;
  result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
  result.addAll$1(result, variables);
  for (t1 = J.get$iterator$ax(methods); t1.moveNext$0();) {
    method = t1.get$current();
    if (method.get$isSetter() === true) {
      $name = J.get$_name$x(method.get$simpleName());
      t2 = J.getInterceptor$asx($name);
      t2 = result.$index(result, H.s(t2.substring$2($name, 0, J.$sub$n(t2.get$length($name), 1))));
      t3 = J.getInterceptor(t2);
      if (typeof t2 === "object" && t2 !== null && !!t3.$isVariableMirror)
        continue;
    }
    if (J.get$isConstructor$x(method) === true)
      continue;
    result.putIfAbsent$2(method.get$simpleName(), new H.filterMembers_closure(method));
  }
  return result;
},

reflectMixinApplication: function(mixinNames, mangledName) {
  var mixins, t1, mangledName0, t2, unmangledName, it, superclass;
  mixins = [];
  for (t1 = new H.ListIterator(mixinNames, mixinNames.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(mixinNames, "JSArray", 0)]); t1.moveNext$0();) {
    mangledName0 = t1._current;
    t2 = $.get$mangledGlobalNames();
    unmangledName = t2.$index(t2, mangledName0);
    mixins.push(H.reflectClassByName(H.s(unmangledName == null ? mangledName0 : unmangledName), mangledName0));
  }
  it = new H.ListIterator(mixins, mixins.length, 0, null);
  H.setRuntimeTypeInfo(it, [H.getRuntimeTypeArgument(mixins, "JSArray", 0)]);
  it.moveNext$0();
  superclass = it._current;
  for (; it.moveNext$0();)
    superclass = new H.JsMixinApplication(superclass, it._current, null, H.s(mangledName));
  return superclass;
},

findTypeVariableIndex: function(typeVariables, $name) {
  var t1, i, t2;
  t1 = J.getInterceptor$asx(typeVariables);
  i = 0;
  while (true) {
    t2 = t1.get$length(typeVariables);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (!(i < t2))
      break;
    if (J.$eq(t1.$index(typeVariables, i).get$simpleName(), H.s($name)) === true)
      return i;
    ++i;
  }
  throw H.wrapException(new P.ArgumentError("Type variable not present in list."));
},

typeMirrorFromRuntimeTypeRepresentation: function(owner, type) {
  var t1, context, t2, representation, typeVariable, typeVariables;
  t1 = {};
  t1.ownerClass_0 = null;
  for (context = owner; context != null;) {
    t2 = J.getInterceptor(context);
    if (typeof context === "object" && context !== null && !!t2.$isClassMirror) {
      t1.ownerClass_0 = context;
      break;
    }
    context = context.get$owner();
  }
  if (type == null)
    return $.get$JsMirrorSystem__dynamicType();
  else {
    t2 = t1.ownerClass_0;
    if (t2 == null)
      representation = H.runtimeTypeToString(type, null);
    else if (t2.get$isOriginalDeclaration())
      if (typeof type === "number" && Math.floor(type) === type) {
        typeVariable = init.metadata[type];
        typeVariables = t2.get$typeVariables();
        return J.$index$asx(typeVariables, H.findTypeVariableIndex(typeVariables, J.get$name$x(typeVariable)));
      } else
        representation = H.runtimeTypeToString(type, null);
    else
      representation = H.runtimeTypeToString(type, new H.typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable(t1));
  }
  if (representation != null)
    return H.reflectClassByMangledName(representation);
  return P.reflectClass(C.Type_EjN);
},

computeQualifiedName: function(owner, simpleName) {
  if (owner == null)
    return simpleName;
  return H.s(H.S(J.get$_name$x(owner.get$qualifiedName())) + "." + H.S(J.get$_name$x(simpleName)));
},

extractMetadata: function(victim) {
  var metadataFunction, source, index, t1;
  metadataFunction = victim["@"];
  if (metadataFunction != null)
    return metadataFunction();
  if (typeof victim !== "function")
    return C.List_empty;
  source = Function.prototype.toString.call(victim);
  index = C.JSString_methods.lastIndexOf$1(source, new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("\"[0-9,]*\";?[ \n\r]*}", false, true, false), null, null));
  if (index === -1)
    return C.List_empty;
  ++index;
  t1 = new H.MappedListIterable(C.JSString_methods.substring$2(source, index, C.JSString_methods.indexOf$2(source, "\"", index)).split(","), P.int_parse$closure);
  H.setRuntimeTypeInfo(t1, [null, null]);
  t1 = new H.MappedListIterable(t1, new H.extractMetadata_closure());
  H.setRuntimeTypeInfo(t1, [null, null]);
  return t1.toList$0(t1);
},

parseCompactFieldSpecification: function(owner, fieldSpecification, isStatic, result) {
  var t1, fieldNames, fieldsMetadata, t2, fieldNumber, field, fieldNumber0, metadata, mirror;
  t1 = J.getInterceptor$asx(fieldSpecification);
  if (typeof fieldSpecification === "object" && fieldSpecification !== null && (fieldSpecification.constructor === Array || !!t1.$isList)) {
    fieldNames = H.splitFields(t1.$index(fieldSpecification, 0), ",");
    fieldsMetadata = t1.sublist$1(fieldSpecification, 1);
  } else {
    fieldNames = typeof fieldSpecification === "string" ? H.splitFields(fieldSpecification, ",") : [];
    fieldsMetadata = null;
  }
  for (t1 = new H.ListIterator(fieldNames, fieldNames.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(fieldNames, "JSArray", 0)]), t2 = fieldsMetadata != null, fieldNumber = 0; t1.moveNext$0();) {
    field = t1._current;
    if (t2) {
      fieldNumber0 = fieldNumber + 1;
      if (fieldNumber >= fieldsMetadata.length)
        throw H.ioore(fieldsMetadata, fieldNumber);
      metadata = fieldsMetadata[fieldNumber];
      fieldNumber = fieldNumber0;
    } else
      metadata = null;
    mirror = H.JsVariableMirror_JsVariableMirror$from(field, metadata, owner, isStatic);
    if (mirror != null)
      result.push(mirror);
  }
},

splitFields: function(string, pattern) {
  var t1 = J.getInterceptor$asx(string);
  if (t1.get$isEmpty(string) === true) {
    t1 = [];
    H.setRuntimeTypeInfo(t1, [J.JSString]);
    return t1;
  }
  return t1.split$1(string, pattern);
},

isOperatorName: function($name) {
  switch ($name) {
    case "==":
    case "[]":
    case "*":
    case "/":
    case "%":
    case "~/":
    case "+":
    case "<<":
    case ">>":
    case ">=":
    case ">":
    case "<=":
    case "<":
    case "&":
    case "^":
    case "|":
    case "-":
    case "unary-":
    case "[]=":
    case "~":
      return true;
    default:
      return false;
  }
},

isReflectiveDataInPrototype: function(key) {
  var t1, firstChar;
  t1 = J.getInterceptor(key);
  if (t1.$eq(key, "") === true || t1.$eq(key, "$methodsWithOptionalArguments") === true)
    return true;
  firstChar = t1.$index(key, 0);
  t1 = J.getInterceptor(firstChar);
  return t1.$eq(firstChar, "*") === true || t1.$eq(firstChar, "+") === true;
},

JsMirrorSystem: {"": "Object;_cachedLibraries,isolate",
  get$libraries: function(_) {
    var t1, result, t2, library;
    t1 = this._cachedLibraries;
    if (t1 != null)
      return t1;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = $.get$JsMirrorSystem_librariesByName(), t1 = t1.get$values(t1), t2 = new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t2.moveNext$0();)
      for (t1 = J.get$iterator$ax(t2._current); t1.moveNext$0();) {
        library = t1.get$current();
        result.$indexSet(result, library.get$uri(), library);
      }
    t1 = new H.UnmodifiableMapView(result);
    H.setRuntimeTypeInfo(t1, [P.Uri, P.LibraryMirror]);
    this._cachedLibraries = t1;
    return t1;
  },
  "+libraries": 0,
  static: {
"": "JsMirrorSystem__dynamicType,JsMirrorSystem__voidType,JsMirrorSystem_librariesByName",
JsMirrorSystem_computeLibrariesByName: function() {
  var result, jsLibraries, t1, data, t2, $name, t3, uri, classes, functions, metadataFunction, fields, isRoot, globalObject, metadata;
  result = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, [J.JSArray, P.LibraryMirror]);
  jsLibraries = init.libraries;
  if (jsLibraries == null)
    return result;
  for (jsLibraries.toString, t1 = new H.ListIterator(jsLibraries, jsLibraries.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(jsLibraries, "JSArray", 0)]); t1.moveNext$0();) {
    data = t1._current;
    t2 = J.getInterceptor$asx(data);
    $name = t2.$index(data, 0);
    t3 = t2.$index(data, 1);
    uri = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(t3));
    classes = t2.$index(data, 2);
    functions = t2.$index(data, 3);
    metadataFunction = t2.$index(data, 4);
    fields = t2.$index(data, 5);
    isRoot = t2.$index(data, 6);
    globalObject = t2.$index(data, 7);
    metadata = metadataFunction == null ? C.List_empty : metadataFunction();
    J.add$1$ax(result.putIfAbsent$2($name, new H.JsMirrorSystem_computeLibrariesByName_closure()), new H.JsLibraryMirror(uri, classes, functions, metadata, fields, isRoot, globalObject, null, null, null, null, null, null, null, null, null, null, H.s($name)));
  }
  return result;
}}

},

JsMirrorSystem_computeLibrariesByName_closure: {"": "Closure;",
  call$0: function() {
    var t1 = [];
    H.setRuntimeTypeInfo(t1, [P.LibraryMirror]);
    return t1;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

JsMirror: {"": "Object;",
  toString$0: function(_) {
    return this.get$_prettyName();
  },
  "+toString:0:0": 0,
  _getField$1: function(receiver) {
    throw H.wrapException(P.UnimplementedError$(null));
  },
  _setField$2: function(receiver, arg) {
    throw H.wrapException(P.UnimplementedError$(null));
  },
  $isMirror: true
},

JsIsolateMirror: {"": "JsMirror;_isolateContext",
  get$_prettyName: function() {
    return "Isolate";
  },
  get$rootLibrary: function() {
    var t1 = $.get$currentJsMirrorSystem();
    t1 = t1.get$libraries(t1).__js_mirrors$_source;
    t1 = t1.get$values(t1);
    return t1.firstWhere$1(t1, new H.JsIsolateMirror_rootLibrary_closure());
  },
  $isMirror: true
},

JsIsolateMirror_rootLibrary_closure: {"": "Closure;",
  call$1: function(library) {
    return library.get$_isRoot();
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

JsDeclarationMirror: {"": "JsMirror;simpleName<",
  get$qualifiedName: function() {
    return H.computeQualifiedName(this.get$owner(), this.get$simpleName());
  },
  "+qualifiedName": 0,
  get$isPrivate: function() {
    return J.startsWith$1$s(J.get$_name$x(this.get$simpleName()), "_");
  },
  toString$0: function(_) {
    return this.get$_prettyName() + " on '" + H.S(J.get$_name$x(this.get$simpleName())) + "'";
  },
  "+toString:0:0": 0,
  get$_methods: function() {
    throw H.wrapException(H.RuntimeError$("Should not call _methods"));
  },
  _invoke$2: function(positionalArguments, namedArguments) {
    throw H.wrapException(H.RuntimeError$("Should not call _invoke"));
  },
  get$location: function(_) {
    return H.throwExpression(P.UnimplementedError$(null));
  },
  "+location": 0,
  $isDeclarationMirror: true,
  $isMirror: true
},

JsTypeVariableMirror: {"": "JsTypeMirror;owner<,_typeVariable,_cachedUpperBound,simpleName",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isJsTypeVariableMirror && J.$eq(this.simpleName, other.simpleName) === true && J.$eq(this.owner, other.owner) === true;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = J.get$hashCode$(C.Type_AGr._typeName);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    t2 = J.get$hashCode$(this.simpleName);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t3 = J.get$hashCode$(this.owner);
    if (typeof t3 !== "number")
      throw H.iae(t3);
    return (1073741823 & t1 ^ 17 * t2 ^ 19 * t3) >>> 0;
  },
  get$_prettyName: function() {
    return "TypeVariableMirror";
  },
  $isJsTypeVariableMirror: true,
  $isTypeVariableMirror: true,
  $isTypeMirror: true,
  $isDeclarationMirror: true,
  $isMirror: true
},

JsTypeMirror: {"": "JsDeclarationMirror;simpleName",
  get$_prettyName: function() {
    return "TypeMirror";
  },
  get$owner: function() {
    return;
  },
  "+owner": 0,
  get$metadata: function() {
    return H.throwExpression(P.UnimplementedError$(null));
  },
  get$typeVariables: function() {
    return C.List_empty0;
  },
  get$typeArguments: function() {
    return C.List_empty1;
  },
  get$isOriginalDeclaration: function() {
    return true;
  },
  get$originalDeclaration: function() {
    return this;
  },
  $isTypeMirror: true,
  $isDeclarationMirror: true,
  $isMirror: true
},

JsLibraryMirror: {"": "JsDeclarationMirror_JsObjectMirror;uri<,_classes,_functions,_metadata,_compactFieldSpecification,_isRoot<,_globalObject<,_cachedFunctionMirrors,_cachedFields,_cachedClasses,_cachedFunctions,_cachedGetters,_cachedSetters,_cachedVariables,_cachedMembers,_cachedDeclarations,_cachedMetadata,simpleName",
  get$_prettyName: function() {
    return "LibraryMirror";
  },
  get$qualifiedName: function() {
    return this.simpleName;
  },
  "+qualifiedName": 0,
  get$_methods: function() {
    return this.get$_functionMirrors();
  },
  get$classes: function(_) {
    var t1, result, className, t2, unmangledName, cls;
    t1 = this._cachedClasses;
    if (t1 != null)
      return t1;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = J.get$iterator$ax(this._classes); t1.moveNext$0();) {
      className = t1.get$current();
      t2 = $.get$mangledGlobalNames();
      unmangledName = t2.$index(t2, className);
      cls = H.reflectClassByName(H.s(unmangledName == null ? className : unmangledName), className);
      t2 = J.getInterceptor(cls);
      if (typeof cls === "object" && cls !== null && !!t2.$isJsClassMirror) {
        result.$indexSet(result, cls.simpleName, cls);
        cls._owner = this;
      }
    }
    t1 = new H.UnmodifiableMapView(result);
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.ClassMirror]);
    this._cachedClasses = t1;
    return t1;
  },
  "+classes": 0,
  setField$2: function(fieldName, arg) {
    var $name, t1, t2, mirror;
    $name = fieldName.get$_name(fieldName);
    $name.endsWith$1($name, "=");
    t1 = this.get$functions(this);
    t2 = H.s(H.S($name) + "=");
    t1 = t1.__js_mirrors$_source;
    mirror = t1.$index(t1, t2);
    if (mirror == null) {
      t1 = this.get$variables(this).__js_mirrors$_source;
      mirror = t1.$index(t1, fieldName);
    }
    if (mirror == null)
      throw H.wrapException(P.NoSuchMethodError$(this, H.setterSymbol(fieldName), [arg], null, null));
    mirror._setField$2(this, arg);
    return H.reflect(arg);
  },
  "+setField:2:0": 0,
  getField$1: function(fieldName) {
    var t1, mirror;
    t1 = this.get$members().__js_mirrors$_source;
    mirror = t1.$index(t1, fieldName);
    if (mirror == null)
      throw H.wrapException(P.NoSuchMethodError$(this, fieldName, [], null, null));
    return H.reflect(mirror._getField$1(this));
  },
  "+getField:1:0": 0,
  invoke$3: function(memberName, positionalArguments, namedArguments) {
    var t1, mirror;
    t1 = this.get$members().__js_mirrors$_source;
    mirror = t1.$index(t1, memberName);
    if (mirror == null)
      throw H.wrapException(P.NoSuchMethodError$(this, memberName, positionalArguments, namedArguments, null));
    t1 = J.getInterceptor(mirror);
    if (typeof mirror === "object" && mirror !== null && !!t1.$isJsMethodMirror)
      if (!("$reflectable" in mirror._jsFunction))
        H.throwInvalidReflectionError(J.get$_name$x(memberName));
    return H.reflect(mirror._invoke$2(positionalArguments, namedArguments));
  },
  "+invoke:3:0": 0,
  "*invoke": [12],
  invoke$2: function(memberName, positionalArguments) {
    return this.invoke$3(memberName, positionalArguments, null);
  },
  "+invoke:2:0": 0,
  _loadField$1: function($name) {
    return $[$name];
  },
  _storeField$2: function($name, arg) {
    $[$name] = arg;
  },
  get$_functionMirrors: function() {
    var t1, result, t2, t3, i, t4, $name, jsFunction, unmangledName, isConstructor, mirror;
    t1 = this._cachedFunctionMirrors;
    if (t1 != null)
      return t1;
    result = P.List_List(null, H.JsMethodMirror);
    H.setRuntimeTypeInfo(result, [H.JsMethodMirror]);
    t1 = this._functions;
    t2 = J.getInterceptor$asx(t1);
    t3 = this._globalObject;
    i = 0;
    while (true) {
      t4 = t2.get$length(t1);
      if (typeof t4 !== "number")
        throw H.iae(t4);
      if (!(i < t4))
        break;
      c$0: {
        $name = t2.$index(t1, i);
        jsFunction = t3[$name];
        t4 = $.get$mangledGlobalNames();
        unmangledName = t4.$index(t4, $name);
        if (unmangledName == null)
          break c$0;
        t4 = J.getInterceptor$s(unmangledName);
        isConstructor = t4.startsWith$1(unmangledName, "new ");
        if (isConstructor) {
          t4 = t4.substring$1(unmangledName, 4);
          unmangledName = H.stringReplaceAllUnchecked(t4, "$", ".");
        }
        mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(unmangledName, jsFunction, !isConstructor, isConstructor);
        result.push(mirror);
        mirror._owner = this;
      }
      ++i;
    }
    this._cachedFunctionMirrors = result;
    return result;
  },
  get$_fields: function() {
    var t1, result;
    t1 = this._cachedFields;
    if (t1 != null)
      return t1;
    result = [];
    H.setRuntimeTypeInfo(result, [P.VariableMirror]);
    H.parseCompactFieldSpecification(this, this._compactFieldSpecification, true, result);
    this._cachedFields = result;
    return result;
  },
  get$functions: function(_) {
    var t1, result, t2, mirror;
    t1 = this._cachedFunctions;
    if (t1 != null)
      return t1;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = this.get$_functionMirrors(), t1.toString, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      mirror = t2._current;
      if (J.get$isConstructor$x(mirror) !== true)
        result.$indexSet(result, mirror.get$simpleName(), mirror);
    }
    t1 = new H.UnmodifiableMapView(result);
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.MethodMirror]);
    this._cachedFunctions = t1;
    return t1;
  },
  "+functions": 0,
  get$getters: function() {
    var t1 = this._cachedGetters;
    if (t1 != null)
      return t1;
    t1 = new H.UnmodifiableMapView(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.MethodMirror]);
    this._cachedGetters = t1;
    return t1;
  },
  get$setters: function() {
    var t1 = this._cachedSetters;
    if (t1 != null)
      return t1;
    t1 = new H.UnmodifiableMapView(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.MethodMirror]);
    this._cachedSetters = t1;
    return t1;
  },
  get$variables: function(_) {
    var t1, result, t2, mirror;
    t1 = this._cachedVariables;
    if (t1 != null)
      return t1;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = this.get$_fields(), t1.toString, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      mirror = t2._current;
      result.$indexSet(result, mirror.get$simpleName(), mirror);
    }
    t1 = new H.UnmodifiableMapView(result);
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.VariableMirror]);
    this._cachedVariables = t1;
    return t1;
  },
  "+variables": 0,
  get$members: function() {
    var t1, result, t2;
    t1 = this._cachedMembers;
    if (t1 != null)
      return t1;
    t1 = this.get$classes(this);
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    result.addAll$1(result, t1);
    t1 = new H.JsLibraryMirror_members_addToResult(result);
    t2 = this.get$functions(this).__js_mirrors$_source;
    t2.forEach$1(t2, t1);
    t2 = this.get$getters().__js_mirrors$_source;
    t2.forEach$1(t2, t1);
    t2 = this.get$setters().__js_mirrors$_source;
    t2.forEach$1(t2, t1);
    t2 = this.get$variables(this).__js_mirrors$_source;
    t2.forEach$1(t2, t1);
    t1 = new H.UnmodifiableMapView(result);
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.Mirror]);
    this._cachedMembers = t1;
    return t1;
  },
  get$declarations: function() {
    var t1, result;
    t1 = this._cachedDeclarations;
    if (t1 != null)
      return t1;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, P.DeclarationMirror);
    t1 = this.get$members().__js_mirrors$_source;
    t1.forEach$1(t1, new H.JsLibraryMirror_declarations_addToResult(result));
    t1 = new H.UnmodifiableMapView(result);
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.DeclarationMirror]);
    this._cachedDeclarations = t1;
    return t1;
  },
  "+declarations": 0,
  get$metadata: function() {
    var t1 = this._cachedMetadata;
    if (t1 != null)
      return t1;
    t1 = new P.UnmodifiableListView(J.map$1$ax(this._metadata, H.reflect$closure));
    H.setRuntimeTypeInfo(t1, [P.InstanceMirror]);
    this._cachedMetadata = t1;
    return t1;
  },
  get$owner: function() {
    return;
  },
  "+owner": 0,
  $isLibraryMirror: true,
  $isMirror: true,
  $isDeclarationMirror: true
},

JsDeclarationMirror_JsObjectMirror: {"": "JsDeclarationMirror+JsObjectMirror;", $isMirror: true},

JsLibraryMirror_members_addToResult: {"": "Closure;result_0",
  call$2: function(key, value) {
    var t1 = this.result_0;
    t1.$indexSet(t1, key, value);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

JsLibraryMirror_declarations_addToResult: {"": "Closure;result_0",
  call$2: function(key, value) {
    var t1 = this.result_0;
    t1.$indexSet(t1, key, value);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

filterMembers_closure: {"": "Closure;method_0",
  call$0: function() {
    return this.method_0;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

JsMixinApplication: {"": "JsTypeMirror_JsObjectMirror;superclass<,mixin,_cachedSimpleName,simpleName",
  get$_prettyName: function() {
    return "ClassMirror";
  },
  get$simpleName: function() {
    var t1, superName;
    t1 = this._cachedSimpleName;
    if (t1 != null)
      return t1;
    superName = J.get$_name$x(this.superclass.get$qualifiedName());
    t1 = this.mixin;
    t1 = J.contains$1$asx(superName, " with ") === true ? H.s(H.S(superName) + ", " + H.S(J.get$_name$x(t1.get$qualifiedName()))) : H.s(H.S(superName) + " with " + H.S(J.get$_name$x(t1.get$qualifiedName())));
    this._cachedSimpleName = t1;
    return t1;
  },
  get$qualifiedName: function() {
    return this.get$simpleName();
  },
  "+qualifiedName": 0,
  get$methods: function(_) {
    return J.get$methods$x(this.mixin);
  },
  "+methods": 0,
  get$variables: function(_) {
    return J.get$variables$x(this.mixin);
  },
  "+variables": 0,
  get$declarations: function() {
    return this.mixin.get$declarations();
  },
  "+declarations": 0,
  invoke$3: function(memberName, positionalArguments, namedArguments) {
    throw H.wrapException(P.NoSuchMethodError$(this, memberName, positionalArguments, namedArguments, null));
  },
  "+invoke:3:0": 0,
  "*invoke": [12],
  invoke$2: function(memberName, positionalArguments) {
    return this.invoke$3(memberName, positionalArguments, null);
  },
  "+invoke:2:0": 0,
  getField$1: function(fieldName) {
    throw H.wrapException(P.NoSuchMethodError$(this, fieldName, null, null, null));
  },
  "+getField:1:0": 0,
  setField$2: function(fieldName, arg) {
    throw H.wrapException(P.NoSuchMethodError$(this, H.setterSymbol(fieldName), [arg], null, null));
  },
  "+setField:2:0": 0,
  get$superinterfaces: function() {
    return [this.mixin];
  },
  get$constructors: function(_) {
    return J.get$constructors$x(this.mixin);
  },
  "+constructors": 0,
  get$isOriginalDeclaration: function() {
    return true;
  },
  get$originalDeclaration: function() {
    return this;
  },
  get$typeVariables: function() {
    throw H.wrapException(P.UnimplementedError$(null));
  },
  get$typeArguments: function() {
    return C.List_empty1;
  },
  $isClassMirror: true,
  $isMirror: true,
  $isTypeMirror: true,
  $isDeclarationMirror: true
},

JsTypeMirror_JsObjectMirror: {"": "JsTypeMirror+JsObjectMirror;", $isMirror: true},

JsObjectMirror: {"": "Object;", $isMirror: true},

JsInstanceMirror: {"": "JsObjectMirror;reflectee<",
  get$type: function(_) {
    return H.reflectClassByMangledName(J.get$runtimeType$(this.reflectee)._typeName);
  },
  "+type": 0,
  invoke$3: function(memberName, positionalArguments, namedArguments) {
    var $name, reflectiveName;
    $name = J.get$_name$x(memberName);
    reflectiveName = $name + ":" + positionalArguments.length + ":0";
    return this._invoke$4(memberName, 0, reflectiveName, positionalArguments);
  },
  "+invoke:3:0": 0,
  "*invoke": [12],
  invoke$2: function(memberName, positionalArguments) {
    return this.invoke$3(memberName, positionalArguments, null);
  },
  "+invoke:2:0": 0,
  _invoke$4: function($name, type, reflectiveName, $arguments) {
    var cacheName, t1, cache, cacheEntry, t2, mangledName, argumentNames, invocation;
    cacheName = $.Primitives_mirrorInvokeCacheName;
    t1 = this.reflectee;
    cache = t1.constructor[cacheName];
    if (cache == null) {
      cache = H.JsCache_allocate();
      t1.constructor[cacheName] = cache;
    }
    cacheEntry = cache[reflectiveName];
    if (cacheEntry == null) {
      t2 = $.get$reflectiveNames();
      mangledName = t2.$index(t2, reflectiveName);
      if (type === 0) {
        t2 = H.SubListIterable$(J.split$1$s(reflectiveName, ":"), 3, null, null);
        argumentNames = t2.toList$0(t2);
      } else
        argumentNames = C.List_empty;
      invocation = new H.JSInvocationMirror($name, mangledName, type, $arguments, argumentNames, null);
      cacheEntry = invocation._getCachedInvocation$1(t1);
      cache[reflectiveName] = cacheEntry;
    } else
      invocation = null;
    if (cacheEntry.get$isNoSuchMethod()) {
      if (invocation == null) {
        t2 = $.get$reflectiveNames();
        invocation = new H.JSInvocationMirror($name, t2.$index(t2, reflectiveName), type, $arguments, [], null);
      }
      return H.reflect(cacheEntry.invokeOn$2(t1, invocation));
    } else
      return H.reflect(cacheEntry.invokeOn$2(t1, $arguments));
  },
  setField$2: function(fieldName, arg) {
    var reflectiveName = H.S(J.get$_name$x(fieldName)) + "=";
    this._invoke$4(H.s(reflectiveName), 2, reflectiveName, [arg]);
    return H.reflect(arg);
  },
  "+setField:2:0": 0,
  getField$1: function(fieldName) {
    return this._invoke$4(fieldName, 1, J.get$_name$x(fieldName), []);
  },
  "+getField:1:0": 0,
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other === "object" && other !== null && !!t1.$isJsInstanceMirror) {
      t1 = this.reflectee;
      t2 = other.reflectee;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1 = H.objectHashCode(this.reflectee);
    if (typeof t1 !== "number")
      throw t1.$xor();
    return (t1 ^ 909522486) >>> 0;
  },
  toString$0: function(_) {
    return "InstanceMirror on " + H.S(P.Error_safeToString(this.reflectee));
  },
  "+toString:0:0": 0,
  $isJsInstanceMirror: true,
  $isInstanceMirror: true,
  $isMirror: true
},

JsInstanceMirror_invoke_closure: {"": "Closure;",
  call$1: function(i) {
    return init.metadata[i];
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

JsInstanceMirror_invoke_closure0: {"": "Closure;defaultArguments_0",
  call$2: function(symbol, value) {
    var parameter, t1;
    parameter = J.get$_name$x(symbol);
    t1 = this.defaultArguments_0;
    if (t1.containsKey$1(parameter))
      t1.$indexSet(t1, parameter, value);
    else
      throw H.wrapException(H.UnimplementedNoSuchMethodError$("Invoking noSuchMethod with named arguments not implemented"));
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

JsTypeBoundClassMirror: {"": "JsDeclarationMirror;_class,_typeArguments,_cachedTypeArguments,_cachedDeclarations,_cachedMembers,_cachedConstructors,_cachedVariables,_cachedGetters,_cachedSetters,_cachedMethodsMap,_cachedMethods,_superclass,_cachedSuperinterfaces,simpleName",
  get$_prettyName: function() {
    return "ClassMirror";
  },
  get$_mangledName: function() {
    return H.S(this._class.get$_mangledName()) + "<" + this._typeArguments + ">";
  },
  "+_mangledName": 0,
  get$typeVariables: function() {
    return this._class.get$typeVariables();
  },
  get$typeArguments: function() {
    var t1, result, t2, t3, level, currentTypeArgument, i, character;
    t1 = this._cachedTypeArguments;
    if (t1 != null)
      return t1;
    result = P.List_List(null, null);
    t1 = new H.JsTypeBoundClassMirror_typeArguments_addTypeArgument(result);
    t2 = this._typeArguments;
    if (C.JSString_methods.indexOf$1(t2, "<") === -1)
      H.IterableMixinWorkaround_forEach(t2.split(","), new H.JsTypeBoundClassMirror_typeArguments_closure(t1));
    else {
      for (t3 = t2.length, level = 0, currentTypeArgument = "", i = 0; i < t3; ++i) {
        character = t2[i];
        if (character === " ")
          continue;
        else if (character === "<") {
          currentTypeArgument += character;
          ++level;
        } else if (character === ">") {
          currentTypeArgument += character;
          --level;
        } else if (character === ",")
          if (level > 0)
            currentTypeArgument += character;
          else {
            t1.call$1(currentTypeArgument);
            currentTypeArgument = "";
          }
        else
          currentTypeArgument += character;
      }
      t1.call$1(currentTypeArgument);
    }
    t1 = new P.UnmodifiableListView(result);
    H.setRuntimeTypeInfo(t1, [null]);
    this._cachedTypeArguments = t1;
    return t1;
  },
  get$_methods: function() {
    var t1 = this._cachedMethods;
    if (t1 != null)
      return t1;
    t1 = this._class._getMethodsWithOwner$1(this);
    this._cachedMethods = t1;
    return t1;
  },
  get$methods: function(_) {
    var t1 = this._cachedMethodsMap;
    if (t1 != null)
      return t1;
    t1 = new H.UnmodifiableMapView(H.filterMethods(this.get$_methods()));
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.MethodMirror]);
    this._cachedMethodsMap = t1;
    return t1;
  },
  "+methods": 0,
  get$constructors: function(_) {
    var t1 = this._cachedConstructors;
    if (t1 != null)
      return t1;
    t1 = new H.UnmodifiableMapView(H.filterConstructors(this.get$_methods()));
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.MethodMirror]);
    this._cachedConstructors = t1;
    return t1;
  },
  "+constructors": 0,
  get$variables: function(_) {
    var t1, result, t2, mirror;
    t1 = this._cachedVariables;
    if (t1 != null)
      return t1;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = this._class._getFieldsWithOwner$1(this), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      mirror = t2._current;
      result.$indexSet(result, mirror.get$simpleName(), mirror);
    }
    t1 = new H.UnmodifiableMapView(result);
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.VariableMirror]);
    this._cachedVariables = t1;
    return t1;
  },
  "+variables": 0,
  get$members: function() {
    var t1 = this._cachedMembers;
    if (t1 != null)
      return t1;
    t1 = new H.UnmodifiableMapView(H.filterMembers(this.get$_methods(), this.get$variables(this)));
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.DeclarationMirror]);
    this._cachedMembers = t1;
    return t1;
  },
  get$declarations: function() {
    var t1, result;
    t1 = this._cachedDeclarations;
    if (t1 != null)
      return t1;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, P.DeclarationMirror);
    result.addAll$1(result, this.get$members());
    result.addAll$1(result, this.get$constructors(this));
    J.forEach$1$ax(this._class.get$typeVariables(), new H.JsTypeBoundClassMirror_declarations_closure(result));
    t1 = new H.UnmodifiableMapView(result);
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.DeclarationMirror]);
    this._cachedDeclarations = t1;
    return t1;
  },
  "+declarations": 0,
  setField$2: function(fieldName, arg) {
    return this._class.setField$2(fieldName, arg);
  },
  "+setField:2:0": 0,
  getField$1: function(fieldName) {
    return this._class.getField$1(fieldName);
  },
  "+getField:1:0": 0,
  get$owner: function() {
    return this._class.get$owner();
  },
  "+owner": 0,
  get$metadata: function() {
    return this._class.get$metadata();
  },
  get$superclass: function() {
    var t1 = this._superclass;
    if (t1 != null)
      return t1;
    t1 = H.typeMirrorFromRuntimeTypeRepresentation(this, init.metadata[J.$index$asx(init.typeInformation[this._class.get$_mangledName()], 0)]);
    this._superclass = t1;
    return t1;
  },
  invoke$3: function(memberName, positionalArguments, namedArguments) {
    return this._class.invoke$3(memberName, positionalArguments, namedArguments);
  },
  "+invoke:3:0": 0,
  "*invoke": [12],
  invoke$2: function(memberName, positionalArguments) {
    return this.invoke$3(memberName, positionalArguments, null);
  },
  "+invoke:2:0": 0,
  get$isOriginalDeclaration: function() {
    return false;
  },
  get$originalDeclaration: function() {
    return this._class;
  },
  get$superinterfaces: function() {
    var t1 = this._cachedSuperinterfaces;
    if (t1 != null)
      return t1;
    t1 = this._class._getSuperinterfacesWithOwner$1(this);
    this._cachedSuperinterfaces = t1;
    return t1;
  },
  get$location: function(_) {
    return J.get$location$x(this._class);
  },
  "+location": 0,
  get$qualifiedName: function() {
    return this._class.get$qualifiedName();
  },
  "+qualifiedName": 0,
  get$simpleName: function() {
    return this._class.get$simpleName();
  },
  $isClassMirror: true,
  $isMirror: true,
  $isTypeMirror: true,
  $isDeclarationMirror: true
},

JsTypeBoundClassMirror_typeArguments_addTypeArgument: {"": "Closure;result_0",
  call$1: function(typeArgument) {
    var parsedIndex, t1, typeVariable;
    parsedIndex = H.Primitives_parseInt(typeArgument, null, new H.JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure());
    t1 = this.result_0;
    if (J.$eq(parsedIndex, -1) === true)
      t1.push(H.reflectClassByMangledName(J.trim$0$s(typeArgument)));
    else {
      typeVariable = init.metadata[parsedIndex];
      t1.push(new H.JsTypeVariableMirror(P.reflectClass(typeVariable.get$owner()), typeVariable, null, H.s(J.get$name$x(typeVariable))));
    }
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure: {"": "Closure;",
  call$1: function(_) {
    return -1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

JsTypeBoundClassMirror_typeArguments_closure: {"": "Closure;addTypeArgument_1",
  call$1: function(t) {
    return this.addTypeArgument_1.call$1(t);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

JsTypeBoundClassMirror_declarations_closure: {"": "Closure;result_0",
  call$1: function(tv) {
    var t1 = this.result_0;
    t1.$indexSet(t1, tv.get$simpleName(), tv);
    return tv;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

JsClassMirror: {"": "JsTypeMirror_JsObjectMirror0;_mangledName<-,_jsConstructorOrInterceptor<-,_fieldsDescriptor<-,_fieldsMetadata<-,_jsConstructorCache<-,_metadata@-,_superclass@-,_cachedMethods@-,_cachedFields@-,_cachedConstructors@-,_cachedMethodsMap@-,_cachedGetters@-,_cachedSetters@-,_cachedVariables@-,_cachedMembers@-,_cachedDeclarations@-,_cachedMetadata@-,_cachedSuperinterfaces@-,_cachedTypeVariables@-,_owner@-,simpleName",
  get$_prettyName: function() {
    return "ClassMirror";
    "7";
  },
  "+_prettyName": 1,
  get$_jsConstructor: function() {
    var t1, t2;
    t1 = this._jsConstructorOrInterceptor;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isInterceptor)
      return t1.constructor;
    else
      return t1;
    "12";
  },
  "+_jsConstructor": 1,
  get$constructors: function(_) {
    var t1 = this._cachedConstructors;
    if (t1 != null)
      return t1;
    t1 = new H.UnmodifiableMapView(H.filterConstructors(this.get$_methods()));
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.MethodMirror]);
    this._cachedConstructors = t1;
    return t1;
    "138";
  },
  "+constructors": 1,
  _getMethodsWithOwner$1: function(methodOwner) {
    var $prototype, result, keys, t1, key, t2, simpleName, mirror, result0, $length, i, mangledName, jsFunction, i0, reflectionName, isConstructor, unmangledName;
    $prototype = this.get$_jsConstructor().prototype;
    result = (function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})($prototype, Object.prototype.hasOwnProperty);
    result.fixed$length = true;
    keys = result;
    result = [];
    H.setRuntimeTypeInfo(result, [H.JsMethodMirror]);
    for (t1 = new H.ListIterator(keys, keys.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(keys, "JSArray", 0)]); t1.moveNext$0();) {
      key = t1._current;
      if (H.isReflectiveDataInPrototype(key))
        continue;
      t2 = $.get$mangledNames();
      simpleName = t2.$index(t2, key);
      if (simpleName == null)
        continue;
      mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(simpleName, $prototype[key], false, false);
      result.push(mirror);
      mirror._owner = methodOwner;
    }
    result0 = (function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})(init.statics[this._mangledName], Object.prototype.hasOwnProperty);
    result0.fixed$length = true;
    keys = result0;
    $length = keys.length;
    for (i = 0; i < $length; ++i) {
      mangledName = keys[i];
      if (H.isReflectiveDataInPrototype(mangledName))
        continue;
      jsFunction = this.get$owner().get$_globalObject()[mangledName];
      i0 = i + 1;
      if (i0 < $length) {
        reflectionName = keys[i0];
        t1 = J.getInterceptor$s(reflectionName);
        if (t1.startsWith$1(reflectionName, "+")) {
          reflectionName = t1.substring$1(reflectionName, 1);
          isConstructor = C.JSString_methods.startsWith$1(reflectionName, "new ");
          if (isConstructor) {
            t1 = C.JSString_methods.substring$1(reflectionName, 4);
            reflectionName = H.stringReplaceAllUnchecked(t1, "$", ".");
          }
          i = i0;
        } else
          isConstructor = false;
        unmangledName = reflectionName;
      } else {
        unmangledName = mangledName;
        isConstructor = false;
      }
      mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(unmangledName, jsFunction, !isConstructor, isConstructor);
      result.push(mirror);
      mirror._owner = methodOwner;
    }
    return result;
    "139,140,141";
  },
  "+_getMethodsWithOwner:1:0": 1,
  get$_methods: function() {
    var t1 = this._cachedMethods;
    if (t1 != null)
      return t1;
    t1 = this._getMethodsWithOwner$1(this);
    this._cachedMethods = t1;
    return t1;
    "139";
  },
  "+_methods": 1,
  _getFieldsWithOwner$1: function(fieldOwner) {
    var result, t1, instanceFieldSpecfication, staticDescriptor;
    result = [];
    H.setRuntimeTypeInfo(result, [P.VariableMirror]);
    t1 = J.split$1$s(this._fieldsDescriptor, ";");
    if (1 >= t1.length)
      throw H.ioore(t1, 1);
    instanceFieldSpecfication = t1[1];
    t1 = this._fieldsMetadata;
    if (t1 != null) {
      instanceFieldSpecfication = [instanceFieldSpecfication];
      C.JSArray_methods.addAll$1(instanceFieldSpecfication, t1);
    }
    H.parseCompactFieldSpecification(fieldOwner, instanceFieldSpecfication, false, result);
    staticDescriptor = init.statics[this._mangledName];
    if (staticDescriptor != null)
      H.parseCompactFieldSpecification(fieldOwner, staticDescriptor[""], true, result);
    return result;
    "142,143,141";
  },
  "+_getFieldsWithOwner:1:0": 1,
  get$_fields: function() {
    var t1 = this._cachedFields;
    if (t1 != null)
      return t1;
    t1 = this._getFieldsWithOwner$1(this);
    this._cachedFields = t1;
    return t1;
    "142";
  },
  "+_fields": 1,
  get$methods: function(_) {
    var t1 = this._cachedMethodsMap;
    if (t1 != null)
      return t1;
    t1 = new H.UnmodifiableMapView(H.filterMethods(this.get$_methods()));
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.MethodMirror]);
    this._cachedMethodsMap = t1;
    return t1;
    "138";
  },
  "+methods": 1,
  get$variables: function(_) {
    var t1, result, mirror;
    t1 = this._cachedVariables;
    if (t1 != null)
      return t1;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = J.get$iterator$ax(this.get$_fields()); t1.moveNext$0();) {
      mirror = t1.get$current();
      result.$indexSet(result, mirror.get$simpleName(), mirror);
    }
    t1 = new H.UnmodifiableMapView(result);
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.VariableMirror]);
    this._cachedVariables = t1;
    return t1;
    "144";
  },
  "+variables": 1,
  get$members: function() {
    var t1 = this._cachedMembers;
    if (t1 != null)
      return t1;
    t1 = new H.UnmodifiableMapView(H.filterMembers(this.get$_methods(), this.get$variables(this)));
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.Mirror]);
    this._cachedMembers = t1;
    return t1;
    "145";
  },
  "+members": 1,
  get$declarations: function() {
    var t1, result;
    t1 = this._cachedDeclarations;
    if (t1 != null)
      return t1;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, P.DeclarationMirror);
    t1 = new H.JsClassMirror_declarations_addToResult(result);
    J.forEach$1$ax(this.get$members(), t1);
    J.forEach$1$ax(this.get$constructors(this), t1);
    J.forEach$1$ax(this.get$typeVariables(), new H.JsClassMirror_declarations_closure(result));
    t1 = new H.UnmodifiableMapView(result);
    H.setRuntimeTypeInfo(t1, [P.Symbol, P.DeclarationMirror]);
    this._cachedDeclarations = t1;
    return t1;
    "146";
  },
  "+declarations": 1,
  setField$2: function(fieldName, arg) {
    var mirror, jsName;
    mirror = J.$index$asx(this.get$variables(this), fieldName);
    if (mirror != null && mirror.get$isStatic() === true && J.get$isFinal$x(mirror) !== true) {
      jsName = mirror.get$_jsName();
      if (!(jsName in $))
        throw H.wrapException(H.RuntimeError$("Cannot find \"" + jsName + "\" in current isolate."));
      $[jsName] = arg;
      return H.reflect(arg);
    }
    throw H.wrapException(P.NoSuchMethodError$(this, H.setterSymbol(fieldName), [arg], null, null));
    "147,148,149,150,0";
  },
  "+setField:2:0": 1,
  getField$1: function(fieldName) {
    var mirror, jsName;
    mirror = J.$index$asx(this.get$variables(this), fieldName);
    if (mirror != null && mirror.get$isStatic() === true) {
      jsName = mirror.get$_jsName();
      if (!(jsName in $))
        throw H.wrapException(H.RuntimeError$("Cannot find \"" + jsName + "\" in current isolate."));
      if (jsName in init.lazies)
        return H.reflect($[init.lazies[jsName]]());
      else
        return H.reflect($[jsName]);
    }
    throw H.wrapException(P.NoSuchMethodError$(this, fieldName, null, null, null));
    "147,148,149";
  },
  "+getField:1:0": 1,
  get$owner: function() {
    var t1, t2, unmangledName, unmangledName0, rti, t3, t4;
    if (this._owner == null) {
      t1 = this._jsConstructorOrInterceptor;
      t2 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t2.$isInterceptor) {
        unmangledName = C.Type_HqF._typeName;
        t1 = $.get$mangledGlobalNames();
        unmangledName0 = t1.$index(t1, unmangledName);
        this._owner = H.reflectClassByName(H.s(unmangledName0 == null ? unmangledName : unmangledName0), unmangledName).get$owner();
      } else {
        t1 = $.get$JsMirrorSystem_librariesByName();
        t1 = t1.get$values(t1);
        t2 = J.get$iterator$ax(t1._iterable);
        rti = H.getRuntimeTypeInfo(t1);
        t3 = rti == null ? null : rti[0];
        rti = H.getRuntimeTypeInfo(t1);
        t4 = rti == null ? null : rti[1];
        t1 = new H.MappedIterator(null, t2, t1._f);
        t1.$builtinTypeInfo = [t3, t4];
        for (; t1.moveNext$0();)
          for (t2 = J.get$iterator$ax(t1._current); t2.moveNext$0();)
            J.get$classes$x(t2.get$current());
      }
      if (this._owner == null)
        throw H.wrapException(new P.StateError("Class \"" + H.S(J.get$_name$x(this.simpleName)) + "\" has no owner"));
    }
    return this._owner;
    "151";
  },
  "+owner": 1,
  get$metadata: function() {
    var t1 = this._cachedMetadata;
    if (t1 != null)
      return t1;
    if (this._metadata == null)
      this._metadata = H.extractMetadata(this.get$_jsConstructor().prototype);
    t1 = new P.UnmodifiableListView(J.map$1$ax(this._metadata, H.reflect$closure));
    H.setRuntimeTypeInfo(t1, [P.InstanceMirror]);
    this._cachedMetadata = t1;
    return t1;
    "152";
  },
  "+metadata": 1,
  get$superclass: function() {
    var typeInformation, t1, t2, superclassName, mixins, t3;
    if (this._superclass == null) {
      typeInformation = init.typeInformation[this._mangledName];
      if (typeInformation != null)
        this._superclass = H.typeMirrorFromRuntimeTypeRepresentation(this, init.metadata[J.$index$asx(typeInformation, 0)]);
      else {
        t1 = this._fieldsDescriptor;
        t2 = J.split$1$s(t1, ";");
        if (0 >= t2.length)
          throw H.ioore(t2, 0);
        superclassName = t2[0];
        t2 = J.getInterceptor$s(superclassName);
        mixins = t2.split$1(superclassName, "+");
        t3 = mixins.length;
        if (t3 > 1) {
          if (t3 !== 2)
            throw H.wrapException(H.RuntimeError$("Strange mixin: " + H.S(t1)));
          this._superclass = H.reflectClassByMangledName(mixins[0]);
        } else
          this._superclass = t2.$eq(superclassName, "") === true ? this : H.reflectClassByMangledName(superclassName);
      }
    }
    return J.$eq(this._superclass, this) === true ? null : this._superclass;
    "153";
  },
  "+superclass": 1,
  invoke$3: function(memberName, positionalArguments, namedArguments) {
    var mirror;
    if (namedArguments != null && J.get$isEmpty$asx(namedArguments) !== true)
      throw H.wrapException(P.UnsupportedError$("Named arguments are not implemented."));
    mirror = J.$index$asx(this.get$methods(this), memberName);
    if (mirror == null || mirror.get$isStatic() !== true)
      throw H.wrapException(P.NoSuchMethodError$(this, memberName, positionalArguments, namedArguments, null));
    if (!mirror.canInvokeReflectively$0())
      H.throwInvalidReflectionError(J.get$_name$x(memberName));
    return H.reflect(mirror._invoke$2(positionalArguments, namedArguments));
    "147,154,149,155,25,156,157";
  },
  "+invoke:3:0": 1,
  "*invoke": [12],
  invoke$2: function(memberName, positionalArguments) {
    return this.invoke$3(memberName, positionalArguments, null);
  },
  "+invoke:2:0": 1,
  get$isOriginalDeclaration: function() {
    return true;
    "18";
  },
  "+isOriginalDeclaration": 1,
  get$originalDeclaration: function() {
    return this;
    "153";
  },
  "+originalDeclaration": 1,
  _getSuperinterfacesWithOwner$1: function(owner) {
    var typeInformation, t1, result;
    typeInformation = init.typeInformation[this._mangledName];
    if (typeInformation != null) {
      t1 = new H.MappedListIterable(J.skip$1$ax(typeInformation, 1), new H.JsClassMirror__getSuperinterfacesWithOwner_lookupType(owner));
      H.setRuntimeTypeInfo(t1, [null, null]);
      result = t1.toList$0(t1);
    } else
      result = C.List_empty2;
    t1 = new P.UnmodifiableListView(result);
    H.setRuntimeTypeInfo(t1, [P.ClassMirror]);
    return t1;
    "158,159,141";
  },
  "+_getSuperinterfacesWithOwner:1:0": 1,
  get$superinterfaces: function() {
    var t1 = this._cachedSuperinterfaces;
    if (t1 != null)
      return t1;
    t1 = this._getSuperinterfacesWithOwner$1(this);
    this._cachedSuperinterfaces = t1;
    return t1;
    "158";
  },
  "+superinterfaces": 1,
  get$typeVariables: function() {
    var t1, result, typeVariables, i, typeVariable;
    t1 = this._cachedTypeVariables;
    if (t1 != null)
      return t1;
    result = P.List_List(null, null);
    typeVariables = this.get$_jsConstructor().prototype["<>"];
    if (typeVariables == null)
      return result;
    for (i = 0; i < typeVariables.length; ++i) {
      typeVariable = init.metadata[typeVariables[i]];
      result.push(new H.JsTypeVariableMirror(this, typeVariable, null, H.s(J.get$name$x(typeVariable))));
    }
    t1 = new P.UnmodifiableListView(result);
    H.setRuntimeTypeInfo(t1, [null]);
    this._cachedTypeVariables = t1;
    return t1;
    "160";
  },
  "+typeVariables": 1,
  get$typeArguments: function() {
    return C.List_empty1;
    "161";
  },
  "+typeArguments": 1,
  $isJsClassMirror: true,
  $isClassMirror: true,
  $isMirror: true,
  $isTypeMirror: true,
  $isDeclarationMirror: true
},

"+JsClassMirror": [162, 153],

JsTypeMirror_JsObjectMirror0: {"": "JsTypeMirror+JsObjectMirror;", $isMirror: true},

JsClassMirror_declarations_addToResult: {"": "Closure;result_0-",
  call$2: function(key, value) {
    J.$indexSet$ax(this.result_0, key, value);
    "12,117,149,82,163";
  },
  "+call:2:0": 1,
  $isFunction: true,
  $is_args2: true
},

"+JsClassMirror_declarations_addToResult": [100],

JsClassMirror_declarations_closure: {"": "Closure;result_1-",
  call$1: function(tv) {
    J.$indexSet$ax(this.result_1, tv.get$simpleName(), tv);
    return tv;
    "12,164,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+JsClassMirror_declarations_closure": [100],

JsClassMirror__getSuperinterfacesWithOwner_lookupType: {"": "Closure;owner_0-",
  call$1: function(i) {
    return H.typeMirrorFromRuntimeTypeRepresentation(this.owner_0, init.metadata[i]);
    "153,165,81";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+JsClassMirror__getSuperinterfacesWithOwner_lookupType": [100],

JsVariableMirror: {"": "JsDeclarationMirror;_jsName<,isFinal>,isStatic<,_metadataFunction,_owner,_metadata,simpleName",
  get$_prettyName: function() {
    return "VariableMirror";
  },
  "+_prettyName": 0,
  get$type: function(_) {
    return $.get$JsMirrorSystem__dynamicType();
  },
  "+type": 0,
  get$owner: function() {
    return this._owner;
  },
  "+owner": 0,
  get$metadata: function() {
    if (this._metadata == null) {
      var t1 = this._metadataFunction;
      this._metadata = t1 == null ? C.List_empty : t1();
    }
    t1 = J.map$1$ax(this._metadata, H.reflect$closure);
    return t1.toList$0(t1);
  },
  "+metadata": 0,
  _getField$1: function(receiver) {
    return receiver._loadField$1(this._jsName);
  },
  _setField$2: function(receiver, arg) {
    if (this.isFinal)
      throw H.wrapException(P.NoSuchMethodError$(this, H.setterSymbol(this.simpleName), [arg], null, null));
    receiver._storeField$2(this._jsName, arg);
  },
  $isVariableMirror: true,
  $isDeclarationMirror: true,
  $isMirror: true,
  static: {
"": "JsVariableMirror_REFLECTION_MARKER",
JsVariableMirror_JsVariableMirror$from: function(descriptor, metadataFunction, owner, isStatic) {
  var t1, $length, t2, code, isFinal, jsName, divider, accessorName, unmangledName, setterName;
  t1 = J.getInterceptor$asx(descriptor);
  $length = t1.get$length(descriptor);
  t2 = J.getInterceptor$n($length);
  if (H.JsVariableMirror_fieldCode(t1.codeUnitAt$1(descriptor, t2.$sub($length, 1))) === 45) {
    $length = t2.$sub($length, 1);
    t2 = J.getInterceptor$n($length);
    code = H.JsVariableMirror_fieldCode(t1.codeUnitAt$1(descriptor, t2.$sub($length, 1)));
  } else
    return;
  if (code === 0)
    return;
  isFinal = C.JSInt_methods.$shr(code, 2) === 0;
  jsName = t1.substring$2(descriptor, 0, t2.$sub($length, 1));
  divider = t1.indexOf$1(descriptor, ":");
  if (divider > 0) {
    accessorName = C.JSString_methods.substring$2(jsName, 0, divider);
    jsName = t1.substring$1(descriptor, divider + 1);
  } else
    accessorName = jsName;
  if (isStatic) {
    t1 = $.get$mangledGlobalNames();
    unmangledName = t1.$index(t1, accessorName);
  } else {
    t1 = $.get$mangledNames();
    unmangledName = t1.$index(t1, "get$" + accessorName);
  }
  if (unmangledName == null)
    unmangledName = accessorName;
  if (isFinal) {
    setterName = H.s(H.S(unmangledName) + "=");
    for (t1 = J.get$iterator$ax(owner.get$_methods()); isFinal = true, t1.moveNext$0();)
      if (J.$eq(t1.get$current().get$simpleName(), setterName) === true) {
        isFinal = false;
        break;
      }
  }
  return new H.JsVariableMirror(jsName, isFinal, isStatic, metadataFunction, owner, null, H.s(unmangledName));
},

JsVariableMirror_fieldCode: function(code) {
  if (code === 45)
    return code;
  if (code >= 60 && code <= 64)
    return code - 59;
  if (code >= 123 && code <= 126)
    return code - 117;
  if (code >= 37 && code <= 43)
    return code - 27;
  return 0;
}}

},

JsClosureMirror: {"": "JsInstanceMirror;reflectee",
  toString$0: function(_) {
    return "ClosureMirror on '" + H.S(P.Error_safeToString(this.reflectee)) + "'";
  },
  "+toString:0:0": 0,
  $isInstanceMirror: true,
  $isMirror: true
},

JsMethodMirror: {"": "JsDeclarationMirror;_jsFunction,_parameterCount,isGetter<,isSetter<,isStatic<,isConstructor>,isOperator<,_owner,_metadata,_returnType,_parameters,simpleName",
  get$_prettyName: function() {
    return "MethodMirror";
  },
  "+_prettyName": 0,
  get$parameters: function(_) {
    var t1 = this._parameters;
    if (t1 != null)
      return t1;
    this.get$metadata();
    return this._parameters;
  },
  "+parameters": 0,
  canInvokeReflectively$0: function() {
    return "$reflectable" in this._jsFunction;
  },
  get$owner: function() {
    return this._owner;
  },
  "+owner": 0,
  get$returnType: function() {
    this.get$metadata();
    return H.typeMirrorFromRuntimeTypeRepresentation(this._owner, this._returnType);
  },
  get$metadata: function() {
    var raw, t1, formals, t2, parameterLength, formalsCount, i, $name, type, formalsCount0, t3;
    if (this._metadata == null) {
      raw = H.extractMetadata(this._jsFunction);
      t1 = this._parameterCount;
      formals = P.List_List(t1, null);
      t2 = J.getInterceptor$asx(raw);
      if (t2.get$isEmpty(raw) !== true) {
        this._returnType = t2.$index(raw, 0);
        t1 = J.$mul$n(t1, 2);
        if (typeof t1 !== "number")
          throw H.iae(t1);
        parameterLength = 1 + t1;
        for (t1 = formals.length, formalsCount = 0, i = 1; i < parameterLength; i += 2, formalsCount = formalsCount0) {
          $name = t2.$index(raw, i);
          type = t2.$index(raw, i + 1);
          formalsCount0 = formalsCount + 1;
          t3 = H.s($name);
          if (formalsCount >= t1)
            throw H.ioore(formals, formalsCount);
          formals[formalsCount] = new H.JsParameterMirror(this, type, t3);
        }
        raw = t2.sublist$1(raw, parameterLength);
      } else {
        if (typeof t1 !== "number")
          throw H.iae(t1);
        t2 = formals.length;
        i = 0;
        for (; i < t1; ++i) {
          t3 = H.s("argument" + i);
          if (i >= t2)
            throw H.ioore(formals, i);
          formals[i] = new H.JsParameterMirror(this, null, t3);
        }
      }
      t1 = new P.UnmodifiableListView(formals);
      H.setRuntimeTypeInfo(t1, [P.ParameterMirror]);
      this._parameters = t1;
      t1 = new P.UnmodifiableListView(J.map$1$ax(raw, H.reflect$closure));
      H.setRuntimeTypeInfo(t1, [null]);
      this._metadata = t1;
    }
    return this._metadata;
  },
  "+metadata": 0,
  _invoke$2: function(positionalArguments, namedArguments) {
    if (namedArguments != null && J.get$isEmpty$asx(namedArguments) !== true)
      throw H.wrapException(P.UnsupportedError$("Named arguments are not implemented."));
    if (!this.isStatic && !this.isConstructor)
      throw H.wrapException(H.RuntimeError$("Cannot invoke instance method without receiver."));
    if (!J.$eq(this._parameterCount, J.get$length$asx(positionalArguments)) || this._jsFunction == null)
      throw H.wrapException(P.NoSuchMethodError$(this._owner, this.simpleName, positionalArguments, namedArguments, null));
    return this._jsFunction.apply($, P.List_List$from(positionalArguments, true, null));
  },
  _getField$1: function(receiver) {
    if (this.isGetter)
      return this._invoke$2([], null);
    else
      throw H.wrapException(P.UnimplementedError$("getField on " + H.S(receiver)));
  },
  _setField$2: function(receiver, arg) {
    if (this.isSetter)
      return this._invoke$2([arg], null);
    else
      throw H.wrapException(P.NoSuchMethodError$(this, H.setterSymbol(this.simpleName), [], null, null));
  },
  get$isAbstract: function() {
    return false;
  },
  "+isAbstract": 0,
  get$isRegularMethod: function() {
    return !this.isGetter && !this.isSetter && !this.isConstructor;
  },
  $isJsMethodMirror: true,
  $isMethodMirror: true,
  $isDeclarationMirror: true,
  $isMirror: true,
  static: {
JsMethodMirror_JsMethodMirror$fromUnmangledName: function($name, jsFunction, isStatic, isConstructor) {
  var info, isOperator, isSetter, t1, requiredParameterCount, isGetter, optionalParameterCount;
  info = J.split$1$s($name, ":");
  if (0 >= info.length)
    throw H.ioore(info, 0);
  $name = info[0];
  isOperator = H.isOperatorName($name);
  isSetter = !isOperator && J.endsWith$1$s($name, "=") === true;
  t1 = info.length;
  if (t1 === 1) {
    if (isSetter) {
      requiredParameterCount = 1;
      isGetter = false;
    } else {
      requiredParameterCount = 0;
      isGetter = true;
    }
    optionalParameterCount = 0;
  } else {
    if (1 >= t1)
      throw H.ioore(info, 1);
    requiredParameterCount = H.Primitives_parseInt(info[1], null, null);
    if (2 >= info.length)
      throw H.ioore(info, 2);
    optionalParameterCount = H.Primitives_parseInt(info[2], null, null);
    isGetter = false;
  }
  t1 = H.s($name);
  return new H.JsMethodMirror(jsFunction, J.$add$ns(requiredParameterCount, optionalParameterCount), isGetter, isSetter, isStatic, isConstructor, isOperator, null, null, null, null, t1);
}}

},

JsParameterMirror: {"": "JsDeclarationMirror;owner<,__js_mirrors$_type,simpleName",
  get$_prettyName: function() {
    return "ParameterMirror";
  },
  "+_prettyName": 0,
  get$type: function(_) {
    return H.typeMirrorFromRuntimeTypeRepresentation(this.owner, this.__js_mirrors$_type);
  },
  "+type": 0,
  get$isStatic: function() {
    return false;
  },
  "+isStatic": 0,
  get$isFinal: function(_) {
    return false;
  },
  "+isFinal": 0,
  get$isOptional: function() {
    return false;
  },
  "+isOptional": 0,
  get$isNamed: function() {
    return false;
  },
  "+isNamed": 0,
  get$defaultValue: function(_) {
    return;
  },
  "+defaultValue": 0,
  get$metadata: function() {
    return H.throwExpression(P.UnimplementedError$(null));
  },
  "+metadata": 0,
  $isParameterMirror: true,
  $isVariableMirror: true,
  $isDeclarationMirror: true,
  $isMirror: true
},

JsTypedefMirror: {"": "JsDeclarationMirror;_mangledName<,referent,simpleName",
  get$value: function(_) {
    return this.referent;
  },
  "+value": 0,
  get$_prettyName: function() {
    return "TypedefMirror";
  },
  "+_prettyName": 0,
  $isTypeMirror: true,
  $isDeclarationMirror: true,
  $isMirror: true
},

JsFunctionTypeMirror: {"": "Object;_typeData,_cachedToString,_cachedReturnType,_cachedParameters,owner@",
  get$isOriginalDeclaration: function() {
    return true;
  },
  "+isOriginalDeclaration": 0,
  get$parameters: function(_) {
    var t1, result, t2, t3, parameterCount, parameterCount0, result0, $name;
    t1 = this._cachedParameters;
    if (t1 != null)
      return t1;
    result = [];
    t1 = this._typeData;
    if ("args" in t1)
      for (t2 = t1.args, t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]), parameterCount = 0; t3.moveNext$0(); parameterCount = parameterCount0) {
        parameterCount0 = parameterCount + 1;
        result.push(new H.JsParameterMirror(this, t3._current, H.s("argument" + parameterCount)));
      }
    else
      parameterCount = 0;
    if ("opt" in t1)
      for (t2 = t1.opt, t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]); t3.moveNext$0(); parameterCount = parameterCount0) {
        parameterCount0 = parameterCount + 1;
        result.push(new H.JsParameterMirror(this, t3._current, H.s("argument" + parameterCount)));
      }
    if ("named" in t1)
      for (result0 = (function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})(t1.named, Object.prototype.hasOwnProperty), result0.fixed$length = true, t2 = result0, t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]); t3.moveNext$0();) {
        $name = t3._current;
        result.push(new H.JsParameterMirror(this, t1.named[$name], H.s($name)));
      }
    t1 = new P.UnmodifiableListView(result);
    H.setRuntimeTypeInfo(t1, [P.ParameterMirror]);
    this._cachedParameters = t1;
    return t1;
  },
  "+parameters": 0,
  toString$0: function(_) {
    var t1, t2, t3, s, sep, argument, result, $name;
    t1 = this._cachedToString;
    if (t1 != null)
      return t1;
    t1 = this._typeData;
    if ("args" in t1)
      for (t2 = t1.args, t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]), s = "FunctionTypeMirror on '(", sep = ""; t3.moveNext$0(); sep = ", ") {
        argument = t3._current;
        s = C.JSString_methods.$add(s + sep, H.runtimeTypeToString(argument, null));
      }
    else {
      s = "FunctionTypeMirror on '(";
      sep = "";
    }
    if ("opt" in t1) {
      s += sep + "[";
      for (t2 = t1.opt, t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]), sep = ""; t3.moveNext$0(); sep = ", ") {
        argument = t3._current;
        s = C.JSString_methods.$add(s + sep, H.runtimeTypeToString(argument, null));
      }
      s += "]";
    }
    if ("named" in t1) {
      s += sep + "{";
      for (result = (function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})(t1.named, Object.prototype.hasOwnProperty), result.fixed$length = true, t2 = result, t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]), sep = ""; t3.moveNext$0(); sep = ", ") {
        $name = t3._current;
        s = C.JSString_methods.$add(s + sep + (H.S($name) + ": "), H.runtimeTypeToString(t1.named[$name], null));
      }
      s += "}";
    }
    s += ") -> ";
    if (!!t1.void)
      s += "void";
    else
      s = "ret" in t1 ? C.JSString_methods.$add(s, H.runtimeTypeToString(t1.ret, null)) : s + "dynamic";
    t1 = s + "'";
    this._cachedToString = t1;
    return t1;
  },
  "+toString:0:0": 0,
  $isClassMirror: true,
  $isMirror: true,
  $isTypeMirror: true,
  $isDeclarationMirror: true
},

typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable: {"": "Closure;box_0",
  call$1: function(index) {
    var typeVariable, t1, variableIndex;
    typeVariable = init.metadata[index];
    t1 = this.box_0;
    variableIndex = H.findTypeVariableIndex(t1.ownerClass_0.get$typeVariables(), J.get$name$x(typeVariable));
    return J.$index$asx(t1.ownerClass_0.get$typeArguments(), variableIndex).get$_mangledName();
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

extractMetadata_closure: {"": "Closure;",
  call$1: function(i) {
    return init.metadata[i];
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

UnmodifiableMapView: {"": "Object;__js_mirrors$_source",
  get$length: function(_) {
    return this.__js_mirrors$_source._collection$_length;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return this.__js_mirrors$_source._collection$_length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this.__js_mirrors$_source._collection$_length !== 0;
  },
  "+isNotEmpty": 0,
  $index: function(_, key) {
    var t1 = this.__js_mirrors$_source;
    return t1.$index(t1, key);
  },
  "+[]:1:0": 0,
  containsKey$1: function(key) {
    return this.__js_mirrors$_source.containsKey$1(key);
  },
  "+containsKey:1:0": 0,
  containsValue$1: function(value) {
    return this.__js_mirrors$_source.containsValue$1(value);
  },
  "+containsValue:1:0": 0,
  forEach$1: function(_, f) {
    var t1 = this.__js_mirrors$_source;
    return t1.forEach$1(t1, f);
  },
  get$keys: function() {
    var t1, t2;
    t1 = this.__js_mirrors$_source;
    t2 = new P.LinkedHashMapKeyIterable(t1);
    H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
    return t2;
  },
  "+keys": 0,
  get$values: function(_) {
    var t1 = this.__js_mirrors$_source;
    return t1.get$values(t1);
  },
  "+values": 0,
  $indexSet: function(_, key, value) {
    return H.UnmodifiableMapView__throw();
  },
  "+[]=:2:0": 0,
  putIfAbsent$2: function(key, ifAbsent) {
    H.UnmodifiableMapView__throw();
  },
  addAll$1: function(_, other) {
    return H.UnmodifiableMapView__throw();
  },
  remove$1: function(_, key) {
    H.UnmodifiableMapView__throw();
  },
  clear$0: function(_) {
    return H.UnmodifiableMapView__throw();
  },
  $isMap: true,
  static: {
UnmodifiableMapView__throw: function() {
  throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable Map"));
}}

},

UnimplementedNoSuchMethodError: {"": "Error;__js_mirrors$_message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.__js_mirrors$_message;
  },
  "+toString:0:0": 0,
  $isNoSuchMethodError: true,
  $isError: true,
  static: {
UnimplementedNoSuchMethodError$: function(_message) {
  return new H.UnimplementedNoSuchMethodError(_message);
}}

}}],
["dart._js_names", "dart:_js_names", , H, {
computeMangledNames: function(jsMangledNames, isGlobal) {
  var result, keys, t1, t2, key, value, t3;
  result = (function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})(jsMangledNames, Object.prototype.hasOwnProperty);
  result.fixed$length = true;
  keys = result;
  result = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  H.setRuntimeTypeInfo(result, [J.JSString, J.JSString]);
  for (t1 = new H.ListIterator(keys, keys.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(keys, "JSArray", 0)]), t2 = !isGlobal; t1.moveNext$0();) {
    key = t1._current;
    value = jsMangledNames[key];
    result.$indexSet(result, key, value);
    if (t2) {
      t3 = J.getInterceptor$s(key);
      if (t3.startsWith$1(key, "get$"))
        result.$indexSet(result, "set$" + t3.substring$1(key, 4), value + "=");
    }
  }
  return result;
},

computeReflectiveNames: function(map) {
  var result = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  H.setRuntimeTypeInfo(result, [J.JSString, J.JSString]);
  map.forEach$1(map, new H.computeReflectiveNames_closure(result));
  return result;
},

unmangleGlobalNameIfPreservedAnyways: function($name) {
  return init.mangledGlobalNames[$name];
},

computeReflectiveNames_closure: {"": "Closure;result_0",
  call$2: function(mangledName, reflectiveName) {
    var t1 = this.result_0;
    t1.$indexSet(t1, reflectiveName, mangledName);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
}}],
["dart.async", "dart:async", , P, {
_invokeErrorHandler: function(errorHandler, error, stackTrace) {
  var t1 = J.getInterceptor(errorHandler);
  if (!!t1.$is_args2)
    return errorHandler.call$2(error, stackTrace);
  else
    return errorHandler.call$1(error);
},

_registerErrorHandler: function(errorHandler, zone) {
  var t1 = J.getInterceptor(errorHandler);
  if (!!t1.$is_args2)
    return zone.registerBinaryCallback$1(errorHandler);
  else
    return zone.registerUnaryCallback$1(errorHandler);
},

Future_wait: function(futures) {
  var t1, t2, t3, future, pos, t4, t5, result, completer;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new P.Future_wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = new H.ListIterator(futures, futures.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(futures, "JSArray", 0)]); t3.moveNext$0();) {
    future = t3._current;
    pos = t1.remaining_2;
    t1.remaining_2 = pos + 1;
    t4 = future.catchError$1(t2);
    t5 = $.Zone__current;
    result = new P._Future(0, t5, null, null, t5.registerUnaryCallback$1(new P.Future_wait_closure(t1, pos)), null, P._registerErrorHandler(null, $.Zone__current), null);
    result.$builtinTypeInfo = [null];
    t4._addListener$1(result);
  }
  t2 = t1.remaining_2;
  if (t2 === 0)
    return P._Future$immediate(C.List_empty, null);
  t1.values_1 = P.List_List(t2, null);
  t2 = J.JSArray;
  t3 = P._Future$(t2);
  completer = new P._AsyncCompleter(t3);
  H.setRuntimeTypeInfo(completer, [t2]);
  t1.completer_0 = completer;
  return t3;
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      H.unwrapException(exception);
      milliseconds = C.Duration_0.get$inMilliseconds();
      H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  $.get$_asyncCallbacks()._add$1(callback);
  if (!$._callbacksAreEnqueued) {
    P._createTimer(C.Duration_0, P._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

scheduleMicrotask: function(callback) {
  var t1;
  if (J.$eq($.Zone__current, C.C__RootZone) === true) {
    $.Zone__current.scheduleMicrotask$1(callback);
    return;
  }
  t1 = $.Zone__current;
  t1.scheduleMicrotask$1(t1.bindCallback$2$runGuarded(callback, true));
},

StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
  var t1;
  if (sync) {
    t1 = new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  } else {
    t1 = new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  }
  return t1;
},

StreamController_StreamController$broadcast: function(onCancel, onListen, sync, $T) {
  var t1;
  if (sync) {
    t1 = new P._SyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
    H.setRuntimeTypeInfo(t1, [$T]);
    t1._async$_previous = t1;
    t1._async$_next = t1;
  } else {
    t1 = new P._AsyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
    H.setRuntimeTypeInfo(t1, [$T]);
    t1._async$_previous = t1;
    t1._async$_next = t1;
  }
  return t1;
},

_runGuarded: function(notificationHandler) {
  var result, e, s, t1, t2, exception;
  if (notificationHandler == null)
    return;
  try {
    result = notificationHandler.call$0();
    t1 = result;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isFuture)
      return result;
    return;
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    $.Zone__current.handleUncaughtError$2(e, s);
  }

},

_nullDataHandler: function(value) {
},

_nullErrorHandler: function(error, stackTrace) {
  $.Zone__current.handleUncaughtError$2(error, stackTrace);
},

_nullDoneHandler: function() {
},

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    onError.call$2(e, s);
  }

},

_cancelAndError: function(subscription, future, error, stackTrace) {
  var cancelFuture, t1;
  cancelFuture = subscription.cancel$0();
  t1 = J.getInterceptor(cancelFuture);
  if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
    cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
  else
    future._completeError$2(error, stackTrace);
},

_cancelAndErrorClosure: function(subscription, future) {
  return new P._cancelAndErrorClosure_closure(subscription, future);
},

_cancelAndValue: function(subscription, future, value) {
  var cancelFuture, t1;
  cancelFuture = subscription.cancel$0();
  t1 = J.getInterceptor(cancelFuture);
  if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
    cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
  else
    future._complete$1(value);
},

Timer_Timer: function(duration, callback) {
  var t1;
  if (J.$eq($.Zone__current, C.C__RootZone) === true)
    return $.Zone__current.createTimer$2(duration, callback);
  t1 = $.Zone__current;
  return t1.createTimer$2(duration, t1.bindCallback$2$runGuarded(callback, true));
},

_createTimer: function(duration, callback) {
  var milliseconds = duration.get$inMilliseconds();
  return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

_rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
  $self.run$1(new P._rootHandleUncaughtError_closure(error, stackTrace));
},

_rootRun: function($self, $parent, zone, f) {
  var old, t1;
  if (J.$eq($.Zone__current, zone) === true)
    return f.call$0();
  old = $.Zone__current;
  try {
    $.Zone__current = zone;
    t1 = f.call$0();
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRunUnary: function($self, $parent, zone, f, arg) {
  var old, t1;
  if (J.$eq($.Zone__current, zone) === true)
    return f.call$1(arg);
  old = $.Zone__current;
  try {
    $.Zone__current = zone;
    t1 = f.call$1(arg);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
  var old, t1;
  if (J.$eq($.Zone__current, zone) === true)
    return f.call$2(arg1, arg2);
  old = $.Zone__current;
  try {
    $.Zone__current = zone;
    t1 = f.call$2(arg1, arg2);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRegisterCallback: function($self, $parent, zone, f) {
  return f;
},

_rootRegisterUnaryCallback: function($self, $parent, zone, f) {
  return f;
},

_rootRegisterBinaryCallback: function($self, $parent, zone, f) {
  return f;
},

_rootScheduleMicrotask: function($self, $parent, zone, f) {
  P._scheduleAsyncCallback(f);
},

_rootCreateTimer: function($self, $parent, zone, duration, callback) {
  return P._createTimer(duration, callback);
},

_rootPrint: function($self, $parent, zone, line) {
  H.printString(H.S(line));
},

_printToZone: function(line) {
  J.print$1$x($.Zone__current, line);
},

_rootFork: function($self, $parent, zone, specification, zoneValues) {
  var t1, copiedMap;
  $.printToZone = P._printToZone$closure;
  if (specification == null)
    specification = C._ZoneSpecification_woc;
  else {
    t1 = J.getInterceptor(specification);
    if (typeof specification !== "object" || specification === null || !t1.$is_ZoneSpecification)
      throw H.wrapException(P.ArgumentError$("ZoneSpecifications must be instantiated with the provided constructor."));
  }
  copiedMap = P.HashMap_HashMap(null, null, null, null, null);
  if (zoneValues != null)
    J.forEach$1$ax(zoneValues, new P._rootFork_closure(copiedMap));
  return new P._CustomizedZone(zone, specification, copiedMap);
},

_AsyncError: {"": "Object;error>,stackTrace<", $isError: true},

_BroadcastStream: {"": "_ControllerStream;_controller", $as_ControllerStream: null, $asStream: null},

_BroadcastSubscription: {"": "_ControllerSubscription;_eventState@,_async$_next@,_async$_previous@,_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  get$_controller: function() {
    return this._controller;
  },
  _expectsEvent$1: function(eventId) {
    var t1 = this._eventState;
    if (typeof t1 !== "number")
      throw t1.$and();
    return (t1 & 1) === eventId;
  },
  _toggleEventId$0: function() {
    var t1 = this._eventState;
    if (typeof t1 !== "number")
      throw t1.$xor();
    this._eventState = (t1 ^ 1) >>> 0;
  },
  get$_isFiring: function() {
    var t1 = this._eventState;
    if (typeof t1 !== "number")
      throw t1.$and();
    return (t1 & 2) !== 0;
  },
  _setRemoveAfterFiring$0: function() {
    var t1 = this._eventState;
    if (typeof t1 !== "number")
      throw t1.$or();
    this._eventState = (t1 | 4) >>> 0;
  },
  get$_removeAfterFiring: function() {
    var t1 = this._eventState;
    if (typeof t1 !== "number")
      throw t1.$and();
    return (t1 & 4) !== 0;
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._BroadcastSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._BroadcastSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_ControllerSubscription: null,
  $asStreamSubscription: null,
  static: {
"": "_BroadcastSubscription__STATE_EVENT_ID,_BroadcastSubscription__STATE_FIRING,_BroadcastSubscription__STATE_REMOVE_AFTER_FIRING",
}

},

_BroadcastStreamController: {"": "Object;_onListen<,_onCancel<,_async$_next@,_async$_previous@",
  get$_isFiring: function() {
    return (this._state & 2) !== 0;
  },
  _ensureDoneFuture$0: function() {
    var t1 = this._doneFuture;
    if (t1 != null)
      return t1;
    t1 = P._Future$(null);
    this._doneFuture = t1;
    return t1;
  },
  _addListener$1: function(subscription) {
    subscription._async$_previous = this._async$_previous;
    subscription._async$_next = this;
    this._async$_previous.set$_async$_next(subscription);
    this._async$_previous = subscription;
    subscription._eventState = this._state & 1;
  },
  _removeListener$1: function(subscription) {
    var previous, next;
    previous = subscription.get$_async$_previous();
    next = subscription.get$_async$_next();
    previous.set$_async$_next(next);
    next.set$_async$_previous(previous);
    subscription.set$_async$_previous(subscription);
    subscription.set$_async$_next(subscription);
  },
  _subscribe$1: function(cancelOnError) {
    var t1, t2, subscription;
    if ((this._state & 4) !== 0)
      throw H.wrapException(new P.StateError("Subscribing to closed stream"));
    t1 = $.Zone__current;
    t2 = cancelOnError ? 1 : 0;
    subscription = new P._BroadcastSubscription(null, null, null, this, null, null, null, t1, t2, null, null);
    subscription.$builtinTypeInfo = this.$builtinTypeInfo;
    subscription._async$_previous = subscription;
    subscription._async$_next = subscription;
    this._addListener$1(subscription);
    t1 = this._async$_next;
    t2 = this._async$_previous;
    if (t1 == null ? t2 == null : t1 === t2)
      P._runGuarded(this._onListen);
    return subscription;
  },
  _recordCancel$1: function(subscription) {
    if (subscription.get$_async$_next() === subscription)
      return;
    if (subscription.get$_isFiring())
      subscription._setRemoveAfterFiring$0();
    else {
      this._removeListener$1(subscription);
      if ((this._state & 2) === 0 && this._async$_next === this)
        this._callOnCancel$0();
    }
  },
  _recordPause$1: function(subscription) {
  },
  _recordResume$1: function(subscription) {
  },
  _addEventError$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add new events after calling close");
    return new P.StateError("Cannot add new events while doing an addStream");
  },
  add$1: function(_, data) {
    if (this._state >= 4)
      throw H.wrapException(this._addEventError$0());
    this._sendData$1(data);
  },
  get$add: function(_receiver) {
    return new W.BoundClosure$i1(this, P._BroadcastStreamController.prototype.add$1, _receiver, "add$1");
  },
  addError$2: function(error, stackTrace) {
    if (this._state >= 4)
      throw H.wrapException(this._addEventError$0());
    this._sendError$2(error, stackTrace);
  },
  get$addError: function() {
    return new P.BoundClosure$2(this, P._BroadcastStreamController.prototype.addError$2, null, "addError$2");
  },
  close$0: function(_) {
    var t1, doneFuture;
    t1 = this._state;
    if ((t1 & 4) !== 0)
      return this._doneFuture;
    if (t1 >= 4)
      throw H.wrapException(this._addEventError$0());
    this._state = (t1 | 4) >>> 0;
    doneFuture = this._ensureDoneFuture$0();
    this._sendDone$0();
    return doneFuture;
  },
  _async$_add$1: function(data) {
    this._sendData$1(data);
  },
  _addError$2: function(error, stackTrace) {
    this._sendError$2(error, stackTrace);
  },
  _close$0: function() {
    var addState = this._addStreamState;
    this._addStreamState = null;
    this._state = (this._state & 4294967287) >>> 0;
    C.JSNull_methods.complete$0(addState);
  },
  _forEachListener$1: function(action) {
    var t1, id, link, link0;
    t1 = this._state;
    if ((t1 & 2) !== 0)
      throw H.wrapException(new P.StateError("Cannot fire new event. Controller is already firing an event"));
    if (this._async$_next === this)
      return;
    id = t1 & 1;
    this._state = (t1 ^ 3) >>> 0;
    link = this._async$_next;
    for (; link !== this;)
      if (link._expectsEvent$1(id)) {
        t1 = link.get$_eventState();
        if (typeof t1 !== "number")
          throw t1.$or();
        link.set$_eventState((t1 | 2) >>> 0);
        action.call$1(link);
        link._toggleEventId$0();
        link0 = link.get$_async$_next();
        if (link.get$_removeAfterFiring())
          this._removeListener$1(link);
        t1 = link.get$_eventState();
        if (typeof t1 !== "number")
          throw t1.$and();
        link.set$_eventState((t1 & 4294967293) >>> 0);
        link = link0;
      } else
        link = link.get$_async$_next();
    this._state = (this._state & 4294967293) >>> 0;
    if (this._async$_next === this)
      this._callOnCancel$0();
  },
  _callOnCancel$0: function() {
    if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
      this._doneFuture._asyncComplete$1(null);
    P._runGuarded(this._onCancel);
  }
},

_SyncBroadcastStreamController: {"": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
  _sendData$1: function(data) {
    if (this._async$_next === this)
      return;
    this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
  },
  _sendError$2: function(error, stackTrace) {
    if (this._async$_next === this)
      return;
    this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
  },
  _sendDone$0: function() {
    if (this._async$_next !== this)
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(this));
    else
      this._doneFuture._asyncComplete$1(null);
  },
  $as_BroadcastStreamController: null
},

_SyncBroadcastStreamController__sendData_closure: {"": "Closure;this_0,data_1",
  call$1: function(subscription) {
    subscription._async$_add$1(this.data_1);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_SyncBroadcastStreamController__sendError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$1: function(subscription) {
    subscription._addError$2(this.error_1, this.stackTrace_2);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_SyncBroadcastStreamController__sendDone_closure: {"": "Closure;this_0",
  call$1: function(subscription) {
    subscription._close$0();
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_AsyncBroadcastStreamController: {"": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
  _sendData$1: function(data) {
    var link, t1;
    for (link = this._async$_next; link !== this; link = link.get$_async$_next()) {
      t1 = new P._DelayedData(data, null);
      t1.$builtinTypeInfo = [null];
      link._addPending$1(t1);
    }
  },
  _sendError$2: function(error, stackTrace) {
    var link;
    for (link = this._async$_next; link !== this; link = link.get$_async$_next())
      link._addPending$1(new P._DelayedError(error, stackTrace, null));
  },
  _sendDone$0: function() {
    var link = this._async$_next;
    if (link !== this)
      for (; link !== this; link = link.get$_async$_next())
        link._addPending$1(C.C__DelayedDone);
    else
      this._doneFuture._asyncComplete$1(null);
  },
  $as_BroadcastStreamController: null
},

Future: {"": "Object;", $isFuture: true},

Future_wait_handleError: {"": "Closure;box_0",
  call$2: function(error, stackTrace) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$2(error, stackTrace);
    }
    return;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Future_wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 < 0 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    t2[t3] = value;
    t1.remaining_2 = t1.remaining_2 - 1;
    if (t1.remaining_2 === 0) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2 = t2.future;
      if (t2._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t2._asyncComplete$1(t1);
    }
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_Completer: {"": "Object;"},

_AsyncCompleter: {"": "_Completer;future",
  complete$1: function(_, value) {
    var t1 = this.future;
    if (t1._state !== 0)
      throw H.wrapException(new P.StateError("Future already completed"));
    t1._asyncComplete$1(value);
  },
  complete$0: function($receiver) {
    return this.complete$1($receiver, null);
  },
  completeError$2: function(error, stackTrace) {
    var t1;
    if (error == null)
      throw H.wrapException(new P.ArgumentError("Error must not be null"));
    t1 = this.future;
    if (t1._state !== 0)
      throw H.wrapException(new P.StateError("Future already completed"));
    t1._asyncCompleteError$2(error, stackTrace);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  },
  get$completeError: function() {
    return new P.BoundClosure$2(this, P._AsyncCompleter.prototype.completeError$2, null, "completeError$2");
  },
  $as_Completer: null
},

_Future: {"": "Object;_state,_zone<,_resultOrListeners,_nextListener@,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
  get$_isComplete: function() {
    return this._state >= 4;
  },
  get$_hasError: function() {
    return this._state === 8;
  },
  set$_isChained: function(value) {
    if (value)
      this._state = 2;
    else
      this._state = 0;
  },
  get$_onValue: function() {
    return this._state === 2 ? null : this._onValueCallback;
  },
  _onValue$1: function(arg0) {
    return this.get$_onValue().call$1(arg0);
  },
  get$_errorTest: function() {
    return this._state === 2 ? null : this._errorTestCallback;
  },
  get$_onError: function() {
    return this._state === 2 ? null : this._onErrorCallback;
  },
  get$_whenCompleteAction: function() {
    return this._state === 2 ? null : this._whenCompleteActionCallback;
  },
  _whenCompleteAction$0: function() {
    return this.get$_whenCompleteAction().call$0();
  },
  then$2$onError: function(f, onError) {
    var result = P._Future$_then(f, onError, null);
    this._addListener$1(result);
    return result;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(onError, test) {
    var result = P._Future$_catchError(onError, test, null);
    this._addListener$1(result);
    return result;
  },
  catchError$1: function(onError) {
    return this.catchError$2$test(onError, null);
  },
  whenComplete$1: function(action) {
    var result = P._Future$_whenComplete(action, H.getTypeArgumentByIndex(this, 0));
    this._addListener$1(result);
    return result;
  },
  get$_value: function() {
    return this._resultOrListeners;
  },
  get$_error: function() {
    return this._resultOrListeners;
  },
  _setValue$1: function(value) {
    this._state = 4;
    this._resultOrListeners = value;
  },
  _setError$2: function(error, stackTrace) {
    this._state = 8;
    this._resultOrListeners = new P._AsyncError(error, stackTrace);
  },
  _addListener$1: function(listener) {
    if (this._state >= 4)
      this._zone.scheduleMicrotask$1(new P._Future__addListener_closure(this, listener));
    else {
      listener.set$_nextListener(this._resultOrListeners);
      this._resultOrListeners = listener;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _complete$1: function(value) {
    var t1, listeners;
    t1 = J.getInterceptor(value);
    if (typeof value === "object" && value !== null && !!t1.$isFuture) {
      P._Future__chainFutures(value, this);
      return;
    }
    listeners = this._removeListeners$0();
    this._setValue$1(value);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$2: function(error, stackTrace) {
    var listeners = this._removeListeners$0();
    this._setError$2(error, stackTrace);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$1: function(error) {
    return this._completeError$2(error, null);
  },
  get$_completeError: function() {
    return new P.BoundClosure$2(this, P._Future.prototype._completeError$2, null, "_completeError$2");
  },
  _asyncComplete$1: function(value) {
    var t1, t2;
    t1 = J.getInterceptor(value);
    t2 = typeof value === "object" && value !== null && !!t1.$isFuture;
    if (t2)
      ;
    if (t2)
      t1 = typeof value !== "object" || value === null || !t1.$is_Future || value._state < 4;
    else
      t1 = false;
    if (t1) {
      this._complete$1(value);
      return;
    }
    if (this._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    this._state = 1;
    this._zone.scheduleMicrotask$1(new P._Future__asyncComplete_closure(this, value));
  },
  _asyncCompleteError$2: function(error, stackTrace) {
    if (this._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    this._state = 1;
    this._zone.scheduleMicrotask$1(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
  },
  _async$_Future$immediate$1: function(value, $T) {
    this._asyncComplete$1(value);
  },
  $is_Future: true,
  $isFuture: true,
  static: {
"": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR",
_Future$: function($T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$immediate: function(value, $T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._async$_Future$immediate$1(value, $T);
  return t1;
},

_Future$_then: function(onValueCallback, onErrorCallback, $T) {
  var t1 = $.Zone__current;
  t1 = new P._Future(0, t1, null, null, t1.registerUnaryCallback$1(onValueCallback), null, P._registerErrorHandler(onErrorCallback, $.Zone__current), null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$_catchError: function(onErrorCallback, errorTestCallback, $T) {
  var t1, t2;
  t1 = $.Zone__current;
  t2 = P._registerErrorHandler(onErrorCallback, t1);
  t2 = new P._Future(0, t1, null, null, null, $.Zone__current.registerUnaryCallback$1(errorTestCallback), t2, null);
  H.setRuntimeTypeInfo(t2, [$T]);
  return t2;
},

_Future$_whenComplete: function(whenCompleteActionCallback, $T) {
  var t1 = $.Zone__current;
  t1 = new P._Future(0, t1, null, null, null, null, null, t1.registerCallback$1(whenCompleteActionCallback));
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future__chainFutures: function(source, target) {
  var t1;
  target.set$_isChained(true);
  t1 = J.getInterceptor(source);
  if (typeof source === "object" && source !== null && !!t1.$is_Future)
    if (source._state >= 4)
      P._Future__propagateToListeners(source, target);
    else
      source._addListener$1(target);
  else
    source.then$2$onError(new P._Future__chainFutures_closure(target), new P._Future__chainFutures_closure0(target));
},

_Future__propagateMultipleListeners: function(source, listeners) {
  var listeners0;
  do {
    listeners0 = listeners.get$_nextListener();
    listeners.set$_nextListener(null);
    P._Future__propagateToListeners(source, listeners);
    if (listeners0 != null) {
      listeners = listeners0;
      continue;
    } else
      break;
  } while (true);
},

_Future__propagateToListeners: function(source, listeners) {
  var t1, t2, hasError, asyncError, t3, t4, t5, chainSource, listeners0;
  t1 = {};
  t1.source_4 = source;
  for (; true;) {
    t2 = {};
    if (!t1.source_4.get$_isComplete())
      return;
    hasError = t1.source_4.get$_hasError();
    if (hasError && listeners == null) {
      asyncError = t1.source_4.get$_error();
      t1.source_4.get$_zone().handleUncaughtError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
      return;
    }
    if (listeners == null)
      return;
    if (listeners.get$_nextListener() != null) {
      P._Future__propagateMultipleListeners(t1.source_4, listeners);
      return;
    }
    if (hasError && !t1.source_4.get$_zone().inSameErrorZone$1(listeners.get$_zone())) {
      asyncError = t1.source_4.get$_error();
      t1.source_4.get$_zone().handleUncaughtError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
      return;
    }
    t3 = $.Zone__current;
    t4 = listeners.get$_zone();
    if (t3 == null ? t4 != null : t3 !== t4) {
      listeners.get$_zone().run$1(new P._Future__propagateToListeners_closure(t1, listeners));
      return;
    }
    t2.listenerHasValue_1 = null;
    t2.listenerValueOrError_2 = null;
    t2.isPropagationAborted_3 = false;
    listeners.get$_zone().run$1(new P._Future__propagateToListeners_closure0(t1, t2, hasError, listeners));
    if (t2.isPropagationAborted_3)
      return;
    t3 = t2.listenerHasValue_1 === true;
    if (t3) {
      t4 = t2.listenerValueOrError_2;
      t5 = J.getInterceptor(t4);
      t5 = typeof t4 === "object" && t4 !== null && !!t5.$isFuture;
      t4 = t5;
    } else
      t4 = false;
    if (t4) {
      chainSource = t2.listenerValueOrError_2;
      t2 = J.getInterceptor(chainSource);
      if (typeof chainSource === "object" && chainSource !== null && !!t2.$is_Future && chainSource._state >= 4) {
        listeners.set$_isChained(true);
        t1.source_4 = chainSource;
        continue;
      }
      P._Future__chainFutures(chainSource, listeners);
      return;
    }
    if (t3) {
      listeners0 = listeners._removeListeners$0();
      listeners._setValue$1(t2.listenerValueOrError_2);
    } else {
      listeners0 = listeners._removeListeners$0();
      asyncError = t2.listenerValueOrError_2;
      listeners._setError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
    }
    t1.source_4 = listeners;
    listeners = listeners0;
  }
}}

},

_Future__addListener_closure: {"": "Closure;this_0,listener_1",
  call$0: function() {
    P._Future__propagateToListeners(this.this_0, this.listener_1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_Future__chainFutures_closure: {"": "Closure;target_0",
  call$1: function(value) {
    this.target_0._complete$1(value);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_Future__chainFutures_closure0: {"": "Closure;target_1",
  call$2: function(error, stackTrace) {
    this.target_1._completeError$2(error, stackTrace);
  },
  "+call:2:0": 0,
  "*call": [12],
  call$1: function(error) {
    return this.call$2(error, null);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_args2: true,
  $is_Object__Object: true,
  $is_args1: true
},

_Future__asyncComplete_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    this.this_0._complete$1(this.value_1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_Future__asyncCompleteError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    this.this_0._completeError$2(this.error_1, this.stackTrace_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_Future__propagateToListeners_closure: {"": "Closure;box_2,listener_3",
  call$0: function() {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_Future__propagateToListeners_closure0: {"": "Closure;box_2,box_1,hasError_4,listener_5",
  call$0: function() {
    var t1, value, asyncError, test, matchesTest, errorCallback, e, s, t2, t3, t4, exception;
    t1 = {};
    try {
      t2 = this.box_2;
      if (!this.hasError_4) {
        value = t2.source_4.get$_value();
        t2 = this.listener_5;
        t3 = this.box_1;
        if (t2.get$_onValue() != null) {
          t3.listenerValueOrError_2 = t2._onValue$1(value);
          t3.listenerHasValue_1 = true;
        } else {
          t3.listenerValueOrError_2 = value;
          t3.listenerHasValue_1 = true;
        }
      } else {
        asyncError = t2.source_4.get$_error();
        t2 = this.listener_5;
        test = t2.get$_errorTest();
        matchesTest = true;
        if (test != null)
          matchesTest = test.call$1(J.get$error$x(asyncError));
        t3 = matchesTest === true && t2.get$_onError() != null;
        t4 = this.box_1;
        if (t3) {
          errorCallback = t2.get$_onError();
          t4.listenerValueOrError_2 = P._invokeErrorHandler(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          t4.listenerHasValue_1 = true;
        } else {
          t4.listenerValueOrError_2 = asyncError;
          t4.listenerHasValue_1 = false;
        }
      }
      t2 = this.listener_5;
      if (t2.get$_whenCompleteAction() != null) {
        t1.completeResult_0 = t2._whenCompleteAction$0();
        t3 = t1.completeResult_0;
        t4 = J.getInterceptor(t3);
        if (typeof t3 === "object" && t3 !== null && !!t4.$isFuture) {
          t2.set$_isChained(true);
          t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners__closure(this.box_2, t2), new P._Future__propagateToListeners__closure0(t1, t2));
          this.box_1.isPropagationAborted_3 = true;
        }
      }
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      if (this.hasError_4) {
        t1 = J.get$error$x(this.box_2.source_4.get$_error());
        t2 = e;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      t2 = this.box_1;
      if (t1)
        t2.listenerValueOrError_2 = this.box_2.source_4.get$_error();
      else
        t2.listenerValueOrError_2 = new P._AsyncError(e, s);
      this.box_1.listenerHasValue_1 = false;
    }

  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_Future__propagateToListeners__closure: {"": "Closure;box_2,listener_6",
  call$1: function(ignored) {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_6);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_Future__propagateToListeners__closure0: {"": "Closure;box_0,listener_7",
  call$2: function(error, stackTrace) {
    var t1, t2, t3, completeResult;
    t1 = this.box_0;
    t2 = t1.completeResult_0;
    t3 = J.getInterceptor(t2);
    if (typeof t2 !== "object" || t2 === null || !t3.$is_Future) {
      completeResult = P._Future$(null);
      t1.completeResult_0 = completeResult;
      completeResult._setError$2(error, stackTrace);
    }
    P._Future__propagateToListeners(t1.completeResult_0, this.listener_7);
  },
  "+call:2:0": 0,
  "*call": [12],
  call$1: function(error) {
    return this.call$2(error, null);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_args2: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream: {"": "Object;",
  where$1: function(_, test) {
    var t1 = new P._WhereStream(test, this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
    return t1;
  },
  map$1: function(_, convert) {
    var t1 = new P._MapStream(convert, this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
    return t1;
  },
  join$1: function(_, separator) {
    var t1, result, buffer;
    t1 = {};
    result = P._Future$(J.JSString);
    buffer = P.StringBuffer$("");
    t1.subscription_0 = null;
    t1.first_1 = true;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_join_closure(t1, this, separator, result, buffer), true, new P.Stream_join_closure0(result, buffer), new P.Stream_join_closure1(result));
    return result;
  },
  contains$1: function(_, needle) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSBool);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_contains_closure(t1, this, needle, future), true, new P.Stream_contains_closure0(future), future.get$_completeError());
    return future;
  },
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = P._Future$(null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
    return future;
  },
  any$1: function(_, test) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSBool);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_any_closure(t1, this, test, future), true, new P.Stream_any_closure0(future), future.get$_completeError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
    future.$builtinTypeInfo = [J.JSInt];
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
    return future;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSBool);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
    return future;
  },
  "+isEmpty": 0,
  toList$0: function(_) {
    var result, future;
    result = [];
    H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
    future = P._Future$([J.JSArray, H.getRuntimeTypeArgument(this, "Stream", 0)]);
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
    return future;
  },
  take$1: function(_, count) {
    return P._TakeStream$(this, count, null);
  },
  skip$1: function(_, count) {
    return P._SkipStream$(this, count, null);
  },
  get$first: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
    return future;
  },
  get$last: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
    t1.result_0 = null;
    t1.foundResult_1 = false;
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_last_closure(t1, this), true, new P.Stream_last_closure0(t1, future), future.get$_completeError());
    return future;
  },
  firstWhere$2$defaultValue: function(_, test, defaultValue) {
    var t1, future;
    t1 = {};
    future = P._Future$(null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_firstWhere_closure(t1, this, test, future), true, new P.Stream_firstWhere_closure0(defaultValue, future), future.get$_completeError());
    return future;
  },
  firstWhere$1: function($receiver, test) {
    return this.firstWhere$2$defaultValue($receiver, test, null);
  },
  elementAt$1: function(_, index) {
    var t1, t2, future;
    t1 = {};
    t1.index_0 = index;
    t2 = t1.index_0;
    if (typeof t2 !== "number" || Math.floor(t2) !== t2 || J.$lt$n(t2, 0))
      throw H.wrapException(new P.ArgumentError(t1.index_0));
    future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
    t1.subscription_1 = null;
    t1.subscription_1 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_elementAt_closure(t1, this, future), true, new P.Stream_elementAt_closure0(t1, future), future.get$_completeError());
    return future;
  },
  $isStream: true
},

Stream_join_closure: {"": "Closure;box_0,this_1,separator_2,result_3,buffer_4",
  call$1: function(element) {
    var e, s, t1, exception, t2;
    t1 = this.box_0;
    if (!t1.first_1)
      this.buffer_4.write$1(this.separator_2);
    t1.first_1 = false;
    try {
      this.buffer_4.write$1(element);
    } catch (exception) {
      t2 = H.unwrapException(exception);
      e = t2;
      s = new H._StackTrace(exception, null);
      P._cancelAndError(t1.subscription_0, this.result_3, e, s);
    }

  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_join_closure1: {"": "Closure;result_5",
  call$1: function(e) {
    this.result_5._completeError$1(e);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_join_closure0: {"": "Closure;result_6,buffer_7",
  call$0: function() {
    this.result_6._complete$1(this.buffer_7._contents);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_contains_closure: {"": "Closure;box_0,this_1,needle_2,future_3",
  call$1: function(element) {
    var t1, t2;
    t1 = this.box_0;
    t2 = this.future_3;
    P._runUserCode(new P.Stream_contains__closure(this.needle_2, element), new P.Stream_contains__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription_0, t2));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_contains__closure: {"": "Closure;needle_4,element_5",
  call$0: function() {
    return J.$eq(this.element_5, this.needle_4);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_contains__closure0: {"": "Closure;box_0,future_6",
  call$1: function(isMatch) {
    if (isMatch === true)
      P._cancelAndValue(this.box_0.subscription_0, this.future_6, true);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_contains_closure0: {"": "Closure;future_7",
  call$0: function() {
    this.future_7._complete$1(false);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_forEach_closure: {"": "Closure;box_0,this_1,action_2,future_3",
  call$1: function(element) {
    P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_forEach__closure: {"": "Closure;action_4,element_5",
  call$0: function() {
    return this.action_4.call$1(this.element_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_forEach__closure0: {"": "Closure;",
  call$1: function(_) {
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_forEach_closure0: {"": "Closure;future_6",
  call$0: function() {
    this.future_6._complete$1(null);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_any_closure: {"": "Closure;box_0,this_1,test_2,future_3",
  call$1: function(element) {
    var t1, t2;
    t1 = this.box_0;
    t2 = this.future_3;
    P._runUserCode(new P.Stream_any__closure(this.test_2, element), new P.Stream_any__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription_0, t2));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_any__closure: {"": "Closure;test_4,element_5",
  call$0: function() {
    return this.test_4.call$1(this.element_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_any__closure0: {"": "Closure;box_0,future_6",
  call$1: function(isMatch) {
    if (isMatch === true)
      P._cancelAndValue(this.box_0.subscription_0, this.future_6, true);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_any_closure0: {"": "Closure;future_7",
  call$0: function() {
    this.future_7._complete$1(false);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = t1.count_0 + 1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._complete$1(this.box_0.count_0);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_isEmpty_closure: {"": "Closure;box_0,future_1",
  call$1: function(_) {
    P._cancelAndValue(this.box_0.subscription_0, this.future_1, false);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_isEmpty_closure0: {"": "Closure;future_2",
  call$0: function() {
    this.future_2._complete$1(true);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_toList_closure: {"": "Closure;this_0,result_1",
  call$1: function(data) {
    this.result_1.push(data);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_toList_closure0: {"": "Closure;result_2,future_3",
  call$0: function() {
    this.future_3._complete$1(this.result_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_first_closure: {"": "Closure;box_0,this_1,future_2",
  call$1: function(value) {
    P._cancelAndValue(this.box_0.subscription_0, this.future_2, value);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_first_closure0: {"": "Closure;future_3",
  call$0: function() {
    this.future_3._completeError$1(new P.StateError("No elements"));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_last_closure: {"": "Closure;box_0,this_1",
  call$1: function(value) {
    var t1 = this.box_0;
    t1.foundResult_1 = true;
    t1.result_0 = value;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_last_closure0: {"": "Closure;box_0,future_2",
  call$0: function() {
    var t1 = this.box_0;
    if (t1.foundResult_1) {
      this.future_2._complete$1(t1.result_0);
      return;
    }
    this.future_2._completeError$1(new P.StateError("No elements"));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_firstWhere_closure: {"": "Closure;box_0,this_1,test_2,future_3",
  call$1: function(value) {
    var t1, t2;
    t1 = this.box_0;
    t2 = this.future_3;
    P._runUserCode(new P.Stream_firstWhere__closure(this.test_2, value), new P.Stream_firstWhere__closure0(t1, t2, value), P._cancelAndErrorClosure(t1.subscription_0, t2));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_firstWhere__closure: {"": "Closure;test_4,value_5",
  call$0: function() {
    return this.test_4.call$1(this.value_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_firstWhere__closure0: {"": "Closure;box_0,future_6,value_7",
  call$1: function(isMatch) {
    if (isMatch === true)
      P._cancelAndValue(this.box_0.subscription_0, this.future_6, this.value_7);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_firstWhere_closure0: {"": "Closure;defaultValue_8,future_9",
  call$0: function() {
    this.future_9._completeError$1(new P.StateError("firstMatch ended without match"));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Stream_elementAt_closure: {"": "Closure;box_0,this_1,future_2",
  call$1: function(value) {
    var t1 = this.box_0;
    if (J.$eq(t1.index_0, 0) === true) {
      P._cancelAndValue(t1.subscription_1, this.future_2, value);
      return;
    }
    t1.index_0 = J.$sub$n(t1.index_0, 1);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Stream_elementAt_closure0: {"": "Closure;box_0,future_3",
  call$0: function() {
    this.future_3._completeError$1(new P.RangeError("value " + H.S(this.box_0.index_0)));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

StreamSubscription: {"": "Object;", $isStreamSubscription: true},

_StreamController: {"": "Object;",
  get$_pendingEvents: function() {
    if ((this._state & 8) === 0)
      return this._varData;
    return this._varData.get$varData();
  },
  _ensurePendingEvents$0: function() {
    if ((this._state & 8) === 0) {
      if (this._varData == null)
        this._varData = new P._StreamImplEvents(null, null, 0);
      return this._varData;
    }
    var state = this._varData;
    state.get$varData();
    return state.get$varData();
  },
  get$_subscription: function() {
    if ((this._state & 8) !== 0)
      return this._varData.get$varData();
    return this._varData;
  },
  _badEventState$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add event after closing");
    return new P.StateError("Cannot add event while adding a stream");
  },
  _ensureDoneFuture$0: function() {
    if (this._doneFuture == null) {
      this._doneFuture = P._Future$(null);
      if ((this._state & 2) !== 0)
        this._doneFuture._complete$1(null);
    }
    return this._doneFuture;
  },
  add$1: function(_, value) {
    if (this._state >= 4)
      throw H.wrapException(this._badEventState$0());
    this._async$_add$1(value);
  },
  close$0: function(_) {
    var t1 = this._state;
    if ((t1 & 4) !== 0)
      return this._doneFuture;
    if (t1 >= 4)
      throw H.wrapException(this._badEventState$0());
    this._state = (t1 | 4) >>> 0;
    this._ensureDoneFuture$0();
    t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendDone$0();
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, C.C__DelayedDone);
    }
    return this._doneFuture;
  },
  _async$_add$1: function(value) {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendData$1(value);
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t2 = new P._DelayedData(value, null);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "_StreamController", 0)]);
      t1.add$1(t1, t2);
    }
  },
  _addError$2: function(error, stackTrace) {
    var t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendError$2(error, stackTrace);
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, new P._DelayedError(error, stackTrace, null));
    }
  },
  _close$0: function() {
    var addState = this._varData;
    this._varData = addState.get$varData();
    this._state = (this._state & 4294967287) >>> 0;
    addState.complete$0(addState);
  },
  _subscribe$1: function(cancelOnError) {
    var t1, t2, subscription, pendingEvents, addState;
    if ((this._state & 3) !== 0)
      throw H.wrapException(new P.StateError("Stream has already been listened to."));
    t1 = $.Zone__current;
    t2 = cancelOnError ? 1 : 0;
    subscription = new P._ControllerSubscription(this, null, null, null, t1, t2, null, null);
    H.setRuntimeTypeInfo(subscription, [null]);
    pendingEvents = this.get$_pendingEvents();
    this._state = (this._state | 1) >>> 0;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.set$varData(subscription);
      addState.resume$0();
    } else
      this._varData = subscription;
    subscription._setPendingEvents$1(pendingEvents);
    subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
    return subscription;
  },
  _recordCancel$1: function(subscription) {
    var t1, future;
    if ((this._state & 8) !== 0)
      this._varData.cancel$0();
    this._varData = null;
    this._state = (this._state & 4294967286 | 2) >>> 0;
    t1 = new P._StreamController__recordCancel_complete(this);
    future = P._runGuarded(this.get$_onCancel());
    if (future != null)
      future = future.whenComplete$1(t1);
    else
      t1.call$0();
    return future;
  },
  _recordPause$1: function(subscription) {
    var addState;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.pause$0(addState);
    }
    P._runGuarded(this.get$_onPause());
  },
  _recordResume$1: function(subscription) {
    if ((this._state & 8) !== 0)
      this._varData.resume$0();
    P._runGuarded(this.get$_onResume());
  }
},

_StreamController__subscribe_closure: {"": "Closure;this_0",
  call$0: function() {
    P._runGuarded(this.this_0.get$_onListen());
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_StreamController__recordCancel_complete: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0._doneFuture;
    if (t1 != null && t1._state === 0)
      t1._asyncComplete$1(null);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_SyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    this.get$_subscription()._async$_add$1(data);
  },
  _sendError$2: function(error, stackTrace) {
    this.get$_subscription()._addError$2(error, stackTrace);
  },
  _sendDone$0: function() {
    this.get$_subscription()._close$0();
  }
},

_AsyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    var t1, t2;
    t1 = this.get$_subscription();
    t2 = new P._DelayedData(data, null);
    H.setRuntimeTypeInfo(t2, [null]);
    t1._addPending$1(t2);
  },
  _sendError$2: function(error, stackTrace) {
    this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace, null));
  },
  _sendDone$0: function() {
    this.get$_subscription()._addPending$1(C.C__DelayedDone);
  }
},

_AsyncStreamController: {"": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__AsyncStreamControllerDispatch: {"": "_StreamController+_AsyncStreamControllerDispatch;", $as_StreamController: null},

_SyncStreamController: {"": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__SyncStreamControllerDispatch: {"": "_StreamController+_SyncStreamControllerDispatch;", $as_StreamController: null},

_ControllerStream: {"": "_StreamImpl;_controller",
  _createSubscription$1: function(cancelOnError) {
    return this._controller._subscribe$1(cancelOnError);
  },
  get$hashCode: function(_) {
    return (H.Primitives_objectHashCode(this._controller) ^ 892482866) >>> 0;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$is_ControllerStream)
      return false;
    return other._controller === this._controller;
  },
  $is_ControllerStream: true,
  $as_StreamImpl: null,
  $asStream: null
},

_ControllerSubscription: {"": "_BufferingStreamSubscription;_controller<,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  _onCancel$0: function() {
    return this.get$_controller()._recordCancel$1(this);
  },
  get$_onCancel: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onCancel$0, null, "_onCancel$0");
  },
  _onPause$0: function() {
    this.get$_controller()._recordPause$1(this);
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
    this.get$_controller()._recordResume$1(this);
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_BufferingStreamSubscription: null,
  $asStreamSubscription: null
},

_EventSink: {"": "Object;"},

_BufferingStreamSubscription: {"": "Object;_async$_onData,_onError<,_onDone,_zone<,_state,_cancelFuture,_pending",
  _setPendingEvents$1: function(pendingEvents) {
    if (pendingEvents == null)
      return;
    this._pending = pendingEvents;
    if (!pendingEvents.get$isEmpty(pendingEvents)) {
      this._state = (this._state | 64) >>> 0;
      this._pending.schedule$1(this);
    }
  },
  onData$1: function(handleData) {
    this._async$_onData = $.Zone__current.registerUnaryCallback$1(handleData);
  },
  onError$1: function(_, handleError) {
    if (handleError == null)
      handleError = P._nullErrorHandler$closure;
    this._onError = P._registerErrorHandler(handleError, $.Zone__current);
  },
  onDone$1: function(handleDone) {
    if (handleDone == null)
      handleDone = P._nullDoneHandler$closure;
    this._onDone = $.Zone__current.registerCallback$1(handleDone);
  },
  pause$1: function(_, resumeSignal) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 + 128 | 4) >>> 0;
    if (t1 < 128 && this._pending != null)
      this._pending.cancelSchedule$0();
    if ((t1 & 4) === 0 && (this._state & 32) === 0)
      this._guardCallback$1(this.get$_onPause());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 >= 128) {
      this._state = t1 - 128;
      t1 = this._state;
      if (t1 < 128) {
        if ((t1 & 64) !== 0) {
          t1 = this._pending;
          t1 = !t1.get$isEmpty(t1);
        } else
          t1 = false;
        if (t1)
          this._pending.schedule$1(this);
        else {
          this._state = (this._state & 4294967291) >>> 0;
          if ((this._state & 32) === 0)
            this._guardCallback$1(this.get$_onResume());
        }
      }
    }
  },
  cancel$0: function() {
    this._state = (this._state & 4294967279) >>> 0;
    if ((this._state & 8) !== 0)
      return this._cancelFuture;
    this._cancel$0();
    return this._cancelFuture;
  },
  get$_mayResumeInput: function() {
    if (this._state < 128) {
      var t1 = this._pending;
      t1 = t1 == null || t1.get$isEmpty(t1);
    } else
      t1 = false;
    return t1;
  },
  _cancel$0: function() {
    this._state = (this._state | 8) >>> 0;
    if ((this._state & 64) !== 0)
      this._pending.cancelSchedule$0();
    if ((this._state & 32) === 0)
      this._pending = null;
    this._cancelFuture = this._onCancel$0();
  },
  _async$_add$1: function(data) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 32)
      this._sendData$1(data);
    else {
      t1 = new P._DelayedData(data, null);
      H.setRuntimeTypeInfo(t1, [null]);
      this._addPending$1(t1);
    }
  },
  _addError$2: function(error, stackTrace) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 32)
      this._sendError$2(error, stackTrace);
    else
      this._addPending$1(new P._DelayedError(error, stackTrace, null));
  },
  _close$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 | 2) >>> 0;
    if (this._state < 32)
      this._sendDone$0();
    else
      this._addPending$1(C.C__DelayedDone);
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  _onCancel$0: function() {
  },
  get$_onCancel: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onCancel$0, null, "_onCancel$0");
  },
  _addPending$1: function($event) {
    var pending, t1;
    pending = this._pending;
    if (pending == null) {
      pending = new P._StreamImplEvents(null, null, 0);
      this._pending = pending;
    }
    pending.add$1(pending, $event);
    t1 = this._state;
    if ((t1 & 64) === 0) {
      this._state = (t1 | 64) >>> 0;
      if (this._state < 128)
        this._pending.schedule$1(this);
    }
  },
  _sendData$1: function(data) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    this._zone.runUnaryGuarded$2(this._async$_onData, data);
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendError$2: function(error, stackTrace) {
    var t1, t2, t3;
    t1 = this._state;
    t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
    if ((t1 & 1) !== 0) {
      this._state = (t1 | 16) >>> 0;
      this._cancel$0();
      t1 = this._cancelFuture;
      t3 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t3.$isFuture)
        t1.whenComplete$1(t2);
      else
        t2.call$0();
    } else {
      t2.call$0();
      this._checkState$1((t1 & 4) !== 0);
    }
  },
  _sendDone$0: function() {
    var t1, t2, t3;
    t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
    this._cancel$0();
    this._state = (this._state | 16) >>> 0;
    t2 = this._cancelFuture;
    t3 = J.getInterceptor(t2);
    if (typeof t2 === "object" && t2 !== null && !!t3.$isFuture)
      t2.whenComplete$1(t1);
    else
      t1.call$0();
  },
  _guardCallback$1: function(callback) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    callback.call$0();
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _checkState$1: function(wasInputPaused) {
    var t1, isInputPaused;
    if ((this._state & 64) !== 0) {
      t1 = this._pending;
      t1 = t1.get$isEmpty(t1);
    } else
      t1 = false;
    if (t1) {
      this._state = (this._state & 4294967231) >>> 0;
      if ((this._state & 4) !== 0 && this.get$_mayResumeInput())
        this._state = (this._state & 4294967291) >>> 0;
    }
    for (; true; wasInputPaused = isInputPaused) {
      t1 = this._state;
      if ((t1 & 8) !== 0) {
        this._pending = null;
        return;
      }
      isInputPaused = (t1 & 4) !== 0;
      if (wasInputPaused === isInputPaused)
        break;
      this._state = (t1 ^ 32) >>> 0;
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = (this._state & 4294967263) >>> 0;
    }
    t1 = this._state;
    if ((t1 & 64) !== 0 && t1 < 128)
      this._pending.schedule$1(this);
  },
  $isStreamSubscription: true,
  static: {
"": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT",
}

},

_BufferingStreamSubscription__sendError_sendError: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    var t1, t2, t3, t4, t5;
    t1 = this.this_0;
    t2 = t1._state;
    if ((t2 & 8) !== 0 && (t2 & 16) === 0)
      return;
    t1._state = (t2 | 32) >>> 0;
    t2 = t1._zone;
    if (!t2.inSameErrorZone$1($.Zone__current))
      $.Zone__current.handleUncaughtError$2(this.error_1, this.stackTrace_2);
    else {
      t3 = t1._onError;
      t4 = J.getInterceptor(t3);
      t5 = this.error_1;
      if (!!t4.$is_args2)
        t2.runBinaryGuarded$3(t3, t5, this.stackTrace_2);
      else
        t2.runUnaryGuarded$2(t3, t5);
    }
    t1._state = (t1._state & 4294967263) >>> 0;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_BufferingStreamSubscription__sendDone_sendDone: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1._state;
    if ((t2 & 16) === 0)
      return;
    t1._state = (t2 | 42) >>> 0;
    t1._zone.runGuarded$1(t1._onDone);
    t1._state = (t1._state & 4294967263) >>> 0;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_StreamImpl: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var subscription = this._createSubscription$1(true === cancelOnError);
    subscription.onData$1(onData);
    subscription.onError$1(subscription, onError);
    subscription.onDone$1(onDone);
    return subscription;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  _createSubscription$1: function(cancelOnError) {
    var t1, t2;
    t1 = $.Zone__current;
    t2 = cancelOnError ? 1 : 0;
    t2 = new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
    t2.$builtinTypeInfo = this.$builtinTypeInfo;
    return t2;
  },
  _onListen$1: function(subscription) {
  },
  get$_onListen: function() {
    return new H.BoundClosure$1(this, P._StreamImpl.prototype._onListen$1, null, "_onListen$1");
  },
  $asStream: null
},

_DelayedEvent: {"": "Object;next@"},

_DelayedData: {"": "_DelayedEvent;value>,next",
  perform$1: function(dispatch) {
    dispatch._sendData$1(this.value);
  }
},

_DelayedError: {"": "_DelayedEvent;error>,stackTrace<,next",
  perform$1: function(dispatch) {
    dispatch._sendError$2(this.error, this.stackTrace);
  }
},

_DelayedDone: {"": "Object;",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  get$next: function() {
    return;
  },
  set$next: function(_) {
    throw H.wrapException(new P.StateError("No events after a done."));
  }
},

_PendingEvents: {"": "Object;",
  schedule$1: function(dispatch) {
    var t1 = this._state;
    if (t1 === 1)
      return;
    if (t1 >= 1) {
      this._state = 1;
      return;
    }
    P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  },
  cancelSchedule$0: function() {
    if (this._state === 1)
      this._state = 3;
  }
},

_PendingEvents_schedule_closure: {"": "Closure;this_0,dispatch_1",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1._state;
    t1._state = 0;
    if (oldState === 3)
      return;
    t1.handleNext$1(this.dispatch_1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_StreamImplEvents: {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  "+isEmpty": 0,
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(dispatch) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  },
  clear$0: function(_) {
    if (this._state === 1)
      this._state = 3;
    this.lastPendingEvent = null;
    this.firstPendingEvent = null;
  }
},

_cancelAndError_closure: {"": "Closure;future_0,error_1,stackTrace_2",
  call$0: function() {
    return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_cancelAndErrorClosure_closure: {"": "Closure;subscription_0,future_1",
  call$2: function(error, stackTrace) {
    return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_cancelAndValue_closure: {"": "Closure;future_0,value_1",
  call$0: function() {
    return this.future_0._complete$1(this.value_1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_ForwardingStream: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var result = P._ForwardingStreamSubscription$(this, true === cancelOnError, H.getRuntimeTypeArgument(this, "_ForwardingStream", 0), H.getRuntimeTypeArgument(this, "_ForwardingStream", 1));
    result.onData$1(onData);
    result.onError$1(result, onError);
    result.onDone$1(onDone);
    return result;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  _handleData$2: function(data, sink) {
    sink._async$_add$1(data);
  },
  $asStream: function($S, $T) {
    return [$T];
  }
},

_ForwardingStreamSubscription: {"": "_BufferingStreamSubscription;_stream,_subscription,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  _async$_add$1: function(data) {
    if ((this._state & 2) !== 0)
      return;
    P._BufferingStreamSubscription.prototype._async$_add$1.call(this, data);
  },
  _addError$2: function(error, stackTrace) {
    if ((this._state & 2) !== 0)
      return;
    P._BufferingStreamSubscription.prototype._addError$2.call(this, error, stackTrace);
  },
  _onPause$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.pause$0(t1);
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.resume$0();
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  _onCancel$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      this._subscription = null;
      t1.cancel$0();
    }
    return;
  },
  get$_onCancel: function() {
    return new P.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._onCancel$0, null, "_onCancel$0");
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new H.BoundClosure$1(this, P._ForwardingStreamSubscription.prototype._handleData$1, null, "_handleData$1");
  },
  _handleError$2: function(error, stackTrace) {
    this._addError$2(error, stackTrace);
  },
  get$_handleError: function() {
    return new P.BoundClosure$20(this, P._ForwardingStreamSubscription.prototype._handleError$2, null, "_handleError$2");
  },
  _handleDone$0: function() {
    this._close$0();
  },
  get$_handleDone: function() {
    return new P.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._handleDone$0, null, "_handleDone$0");
  },
  _ForwardingStreamSubscription$2: function(_stream, cancelOnError, $S, $T) {
    var t1, t2;
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this._subscription = this._stream._async$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
  },
  $as_BufferingStreamSubscription: function($S, $T) {
    return [$T];
  },
  $asStreamSubscription: function($S, $T) {
    return [$T];
  },
  static: {
_ForwardingStreamSubscription$: function(_stream, cancelOnError, $S, $T) {
  var t1, t2;
  t1 = $.Zone__current;
  t2 = cancelOnError ? 1 : 0;
  t2 = new P._ForwardingStreamSubscription(_stream, null, null, null, null, t1, t2, null, null);
  H.setRuntimeTypeInfo(t2, [$S, $T]);
  t2._ForwardingStreamSubscription$2(_stream, cancelOnError, $S, $T);
  return t2;
}}

},

_WhereStream: {"": "_ForwardingStream;_test,_async$_source",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    satisfies = null;
    try {
      satisfies = this._test$1(inputEvent);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      sink._addError$2(e, s);
      return;
    }

    if (satisfies === true)
      sink._async$_add$1(inputEvent);
  },
  $as_ForwardingStream: function($T) {
    return [$T, $T];
  },
  $asStream: null
},

_MapStream: {"": "_ForwardingStream;_transform,_async$_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      sink._addError$2(e, s);
      return;
    }

    sink._async$_add$1(outputEvent);
  },
  $as_ForwardingStream: null,
  $asStream: function($S, $T) {
    return [$T];
  }
},

_TakeStream: {"": "_ForwardingStream;_remaining,_async$_source",
  _handleData$2: function(inputEvent, sink) {
    if (this._remaining > 0) {
      sink._async$_add$1(inputEvent);
      this._remaining = this._remaining - 1;
      if (this._remaining === 0)
        sink._close$0();
    }
  },
  _TakeStream$2: function(source, count, $T) {
  },
  $as_ForwardingStream: function($T) {
    return [$T, $T];
  },
  $asStream: null,
  static: {
_TakeStream$: function(source, count, $T) {
  var t1 = new P._TakeStream(count, source);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._TakeStream$2(source, count, $T);
  return t1;
}}

},

_SkipStream: {"": "_ForwardingStream;_remaining,_async$_source",
  _handleData$2: function(inputEvent, sink) {
    if (J.$gt$n(this._remaining, 0)) {
      this._remaining = J.$sub$n(this._remaining, 1);
      return;
    }
    sink._async$_add$1(inputEvent);
  },
  _SkipStream$2: function(source, count, $T) {
    if (typeof count !== "number" || Math.floor(count) !== count || count < 0)
      throw H.wrapException(new P.ArgumentError(count));
  },
  $as_ForwardingStream: function($T) {
    return [$T, $T];
  },
  $asStream: null,
  static: {
_SkipStream$: function(source, count, $T) {
  var t1 = new P._SkipStream(count, source);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._SkipStream$2(source, count, $T);
  return t1;
}}

},

Timer: {"": "Object;"},

ZoneSpecification: {"": "Object;"},

_ZoneSpecification: {"": "Object;handleUncaughtError<,run<,runUnary<,runBinary<,registerCallback<,registerUnaryCallback<,registerBinaryCallback<,scheduleMicrotask<,createTimer<,createPeriodicTimer,print>,fork<",
  handleUncaughtError$2: function(arg0, arg1) {
    return this.handleUncaughtError.call$2(arg0, arg1);
  },
  run$1: function(arg0) {
    return this.run.call$1(arg0);
  },
  registerCallback$1: function(arg0) {
    return this.registerCallback.call$1(arg0);
  },
  registerUnaryCallback$1: function(arg0) {
    return this.registerUnaryCallback.call$1(arg0);
  },
  registerBinaryCallback$1: function(arg0) {
    return this.registerBinaryCallback.call$1(arg0);
  },
  scheduleMicrotask$1: function(arg0) {
    return this.scheduleMicrotask.call$1(arg0);
  },
  scheduleMicrotask$2: function(arg0, arg1) {
    return this.scheduleMicrotask.call$2(arg0, arg1);
  },
  createTimer$2: function(arg0, arg1) {
    return this.createTimer.call$2(arg0, arg1);
  },
  print$1: function($receiver, arg0) {
    return this.print.call$1(arg0);
  },
  fork$1$specification: function(arg0) {
    return this.fork.call$1$specification(arg0);
  },
  $is_ZoneSpecification: true
},

ZoneDelegate: {"": "Object;"},

Zone: {"": "Object;"},

_ZoneDelegate: {"": "Object;_degelationTarget",
  get$_zone: function() {
    return this._degelationTarget;
  },
  handleUncaughtError$3: function(zone, error, stackTrace) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$handleUncaughtError() == null;)
      $parent = t1.get$parent($parent);
    return $parent.get$_specification().get$handleUncaughtError().call$5($parent, new P._ZoneDelegate(t1.get$parent($parent)), zone, error, stackTrace);
  },
  run$2: function(zone, f) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$run() == null;)
      $parent = t1.get$parent($parent);
    return $parent.get$_specification().get$run().call$4($parent, new P._ZoneDelegate(t1.get$parent($parent)), zone, f);
  },
  runUnary$3: function(zone, f, arg) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$runUnary() == null;)
      $parent = t1.get$parent($parent);
    return $parent.get$_specification().get$runUnary().call$5($parent, new P._ZoneDelegate(t1.get$parent($parent)), zone, f, arg);
  },
  runBinary$4: function(zone, f, arg1, arg2) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$runBinary() == null;)
      $parent = t1.get$parent($parent);
    return $parent.get$_specification().get$runBinary().call$6($parent, new P._ZoneDelegate(t1.get$parent($parent)), zone, f, arg1, arg2);
  },
  registerCallback$2: function(zone, f) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$registerCallback() == null;)
      $parent = t1.get$parent($parent);
    return $parent.get$_specification().get$registerCallback().call$4($parent, new P._ZoneDelegate(t1.get$parent($parent)), zone, f);
  },
  "+registerCallback:2:0": 0,
  registerUnaryCallback$2: function(zone, f) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$registerUnaryCallback() == null;)
      $parent = t1.get$parent($parent);
    return $parent.get$_specification().get$registerUnaryCallback().call$4($parent, new P._ZoneDelegate(t1.get$parent($parent)), zone, f);
  },
  registerBinaryCallback$2: function(zone, f) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$registerBinaryCallback() == null;)
      $parent = t1.get$parent($parent);
    return $parent.get$_specification().get$registerBinaryCallback().call$4($parent, new P._ZoneDelegate(t1.get$parent($parent)), zone, f);
  },
  scheduleMicrotask$2: function(zone, f) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$scheduleMicrotask() == null;)
      $parent = t1.get$parent($parent);
    t1 = t1.get$parent($parent);
    $parent.get$_specification().get$scheduleMicrotask().call$4($parent, new P._ZoneDelegate(t1), zone, f);
  },
  createTimer$3: function(zone, duration, f) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$createTimer() == null;)
      $parent = t1.get$parent($parent);
    return $parent.get$_specification().get$createTimer().call$5($parent, new P._ZoneDelegate(t1.get$parent($parent)), zone, duration, f);
  },
  print$2: function(_, zone, line) {
    var $parent, t1, t2;
    $parent = this._degelationTarget;
    for (; t1 = $parent.get$_specification(), t2 = J.getInterceptor$x($parent), t1.get$print(t1) == null;)
      $parent = t2.get$parent($parent);
    t1 = $parent.get$_specification();
    t1.get$print(t1).call$4($parent, new P._ZoneDelegate(t2.get$parent($parent)), zone, line);
  },
  fork$3: function(zone, specification, zoneValues) {
    var $parent, t1;
    $parent = this._degelationTarget;
    for (; t1 = J.getInterceptor$x($parent), $parent.get$_specification().get$fork() == null;)
      $parent = t1.get$parent($parent);
    t1 = t1.get$parent($parent);
    return $parent.get$_specification().get$fork().call$5($parent, new P._ZoneDelegate(t1), zone, specification, zoneValues);
  }
},

_BaseZone: {"": "Object;",
  inSameErrorZone$1: function(otherZone) {
    return this.get$_errorZone() === otherZone.get$_errorZone();
  },
  runGuarded$1: function(f) {
    var e, s, t1, exception;
    try {
      t1 = this.run$1(f);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  runUnaryGuarded$2: function(f, arg) {
    var e, s, t1, exception;
    try {
      t1 = this.runUnary$2(f, arg);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  runBinaryGuarded$3: function(f, arg1, arg2) {
    var e, s, t1, exception;
    try {
      t1 = this.runBinary$3(f, arg1, arg2);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  bindCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindCallback_closure(this, registered);
    else
      return new P._BaseZone_bindCallback_closure0(this, registered);
  },
  bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerUnaryCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindUnaryCallback_closure(this, registered);
    else
      return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
  }
},

_BaseZone_bindCallback_closure: {"": "Closure;this_0,registered_1",
  call$0: function() {
    return this.this_0.runGuarded$1(this.registered_1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_BaseZone_bindCallback_closure0: {"": "Closure;this_2,registered_3",
  call$0: function() {
    return this.this_2.run$1(this.registered_3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_BaseZone_bindUnaryCallback_closure: {"": "Closure;this_0,registered_1",
  call$1: function(arg) {
    return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_BaseZone_bindUnaryCallback_closure0: {"": "Closure;this_2,registered_3",
  call$1: function(arg) {
    return this.this_2.runUnary$2(this.registered_3, arg);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_CustomizedZone: {"": "_BaseZone;parent>,_specification<,_map",
  get$_errorZone: function() {
    return this.parent.get$_errorZone();
  },
  $index: function(_, key) {
    var t1, result;
    t1 = this._map;
    result = t1.$index(t1, key);
    if (result != null || t1.containsKey$1(key))
      return result;
    t1 = this.parent;
    if (t1 != null)
      return J.$index$asx(t1, key);
    return;
  },
  "+[]:1:0": 0,
  handleUncaughtError$2: function(error, stackTrace) {
    return new P._ZoneDelegate(this).handleUncaughtError$3(this, error, stackTrace);
  },
  fork$2$specification$zoneValues: function(specification, zoneValues) {
    return new P._ZoneDelegate(this).fork$3(this, specification, zoneValues);
  },
  fork$1$specification: function(specification) {
    return this.fork$2$specification$zoneValues(specification, null);
  },
  run$1: function(f) {
    return new P._ZoneDelegate(this).run$2(this, f);
  },
  runUnary$2: function(f, arg) {
    return new P._ZoneDelegate(this).runUnary$3(this, f, arg);
  },
  runBinary$3: function(f, arg1, arg2) {
    return new P._ZoneDelegate(this).runBinary$4(this, f, arg1, arg2);
  },
  registerCallback$1: function(f) {
    return new P._ZoneDelegate(this).registerCallback$2(this, f);
  },
  "+registerCallback:1:0": 0,
  registerUnaryCallback$1: function(f) {
    return new P._ZoneDelegate(this).registerUnaryCallback$2(this, f);
  },
  registerBinaryCallback$1: function(f) {
    return new P._ZoneDelegate(this).registerBinaryCallback$2(this, f);
  },
  scheduleMicrotask$1: function(f) {
    new P._ZoneDelegate(this).scheduleMicrotask$2(this, f);
  },
  createTimer$2: function(duration, f) {
    return new P._ZoneDelegate(this).createTimer$3(this, duration, f);
  },
  print$1: function(_, line) {
    var t1 = new P._ZoneDelegate(this);
    t1.print$2(t1, this, line);
  }
},

_rootHandleUncaughtError_closure: {"": "Closure;error_0,stackTrace_1",
  call$0: function() {
    P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_rootHandleUncaughtError__closure: {"": "Closure;error_2,stackTrace_3",
  call$0: function() {
    var t1, trace, t2;
    t1 = this.error_2;
    P.print("Uncaught Error: " + H.S(t1));
    trace = this.stackTrace_3;
    if (trace == null) {
      t2 = J.getInterceptor(t1);
      t2 = typeof t1 === "object" && t1 !== null && !!t2.$isError;
    } else
      t2 = false;
    if (t2)
      trace = t1.get$stackTrace();
    if (trace != null)
      P.print("Stack Trace: \n" + H.S(trace) + "\n");
    throw H.wrapException(t1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_rootFork_closure: {"": "Closure;copiedMap_0",
  call$2: function(key, value) {
    var t1;
    if (key == null)
      throw H.wrapException(P.ArgumentError$("ZoneValue key must not be null"));
    t1 = this.copiedMap_0;
    t1.$indexSet(t1, key, value);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_RootZoneSpecification: {"": "Object;",
  get$handleUncaughtError: function() {
    return P._rootHandleUncaughtError$closure;
  },
  handleUncaughtError$2: function(arg0, arg1) {
    return this.get$handleUncaughtError().call$2(arg0, arg1);
  },
  get$run: function() {
    return P._rootRun$closure;
  },
  run$1: function(arg0) {
    return this.get$run().call$1(arg0);
  },
  get$runUnary: function() {
    return P._rootRunUnary$closure;
  },
  get$runBinary: function() {
    return P._rootRunBinary$closure;
  },
  get$registerCallback: function() {
    return P._rootRegisterCallback$closure;
  },
  "+registerCallback": 0,
  registerCallback$1: function(arg0) {
    return this.get$registerCallback().call$1(arg0);
  },
  get$registerUnaryCallback: function() {
    return P._rootRegisterUnaryCallback$closure;
  },
  registerUnaryCallback$1: function(arg0) {
    return this.get$registerUnaryCallback().call$1(arg0);
  },
  get$registerBinaryCallback: function() {
    return P._rootRegisterBinaryCallback$closure;
  },
  registerBinaryCallback$1: function(arg0) {
    return this.get$registerBinaryCallback().call$1(arg0);
  },
  get$scheduleMicrotask: function() {
    return P._rootScheduleMicrotask$closure;
  },
  scheduleMicrotask$1: function(arg0) {
    return this.get$scheduleMicrotask().call$1(arg0);
  },
  scheduleMicrotask$2: function(arg0, arg1) {
    return this.get$scheduleMicrotask().call$2(arg0, arg1);
  },
  get$createTimer: function() {
    return P._rootCreateTimer$closure;
  },
  createTimer$2: function(arg0, arg1) {
    return this.get$createTimer().call$2(arg0, arg1);
  },
  get$print: function(_) {
    return P._rootPrint$closure;
  },
  print$1: function($receiver, arg0) {
    return this.get$print($receiver).call$1(arg0);
  },
  get$fork: function() {
    return P._rootFork$closure;
  },
  fork$1$specification: function(arg0) {
    return this.get$fork().call$1$specification(arg0);
  }
},

_RootZone: {"": "_BaseZone;",
  get$parent: function(_) {
    return;
  },
  get$_specification: function() {
    return C.C__RootZoneSpecification;
  },
  get$_errorZone: function() {
    return this;
  },
  inSameErrorZone$1: function(otherZone) {
    return otherZone.get$_errorZone() === this;
  },
  $index: function(_, key) {
    return;
  },
  "+[]:1:0": 0,
  handleUncaughtError$2: function(error, stackTrace) {
    return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
  },
  fork$2$specification$zoneValues: function(specification, zoneValues) {
    return P._rootFork(this, null, this, specification, zoneValues);
  },
  fork$1$specification: function(specification) {
    return this.fork$2$specification$zoneValues(specification, null);
  },
  run$1: function(f) {
    return P._rootRun(this, null, this, f);
  },
  runUnary$2: function(f, arg) {
    return P._rootRunUnary(this, null, this, f, arg);
  },
  runBinary$3: function(f, arg1, arg2) {
    return P._rootRunBinary(this, null, this, f, arg1, arg2);
  },
  registerCallback$1: function(f) {
    return f;
  },
  "+registerCallback:1:0": 0,
  registerUnaryCallback$1: function(f) {
    return f;
  },
  registerBinaryCallback$1: function(f) {
    return f;
  },
  scheduleMicrotask$1: function(f) {
    P._scheduleAsyncCallback(f);
  },
  createTimer$2: function(duration, f) {
    return P._createTimer(duration, f);
  },
  print$1: function(_, line) {
    H.printString(H.S(line));
    return;
  }
}}],
["dart.collection", "dart:collection", , P, {
_defaultEquals: function(a, b) {
  return J.$eq(a, b);
},

_defaultHashCode: function(a) {
  return J.get$hashCode$(a);
},

HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1;
  if (equals == null) {
    t1 = new P._HashMap(0, null, null, null, null);
    H.setRuntimeTypeInfo(t1, [$K, $V]);
    return t1;
  }
  hashCode = P._defaultHashCode$closure;
  return P._CustomHashMap$(equals, hashCode, isValidKey, $K, $V);
},

HashSet_HashSet$identity: function($E) {
  var t1 = new P._IdentityHashSet(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
},

_iterableToString: function(iterable) {
  var parts, t1;
  t1 = $.get$_toStringVisiting();
  if (t1.contains$1(t1, iterable))
    return "(...)";
  t1 = $.get$_toStringVisiting();
  t1.add$1(t1, iterable);
  parts = [];
  try {
    P._iterablePartsToStrings(iterable, parts);
  } finally {
    t1 = $.get$_toStringVisiting();
    t1.remove$1(t1, iterable);
  }
  t1 = P.StringBuffer$("(");
  t1.writeAll$2(parts, ", ");
  t1.write$1(")");
  return t1._contents;
},

_iterablePartsToStrings: function(iterable, parts) {
  var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
  it = iterable.get$iterator(iterable);
  $length = 0;
  count = 0;
  while (true) {
    if (!($length < 80 || count < 3))
      break;
    if (!it.moveNext$0())
      return;
    next = H.S(it.get$current());
    parts.push(next);
    $length += next.length + 2;
    ++count;
  }
  if (!it.moveNext$0()) {
    if (count <= 5)
      return;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    ultimateString = parts.pop();
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    penultimateString = parts.pop();
  } else {
    penultimate = it.get$current();
    ++count;
    if (!it.moveNext$0()) {
      if (count <= 4) {
        parts.push(H.S(penultimate));
        return;
      }
      ultimateString = H.S(penultimate);
      if (0 >= parts.length)
        throw H.ioore(parts, 0);
      penultimateString = parts.pop();
      $length += ultimateString.length + 2;
    } else {
      ultimate = it.get$current();
      ++count;
      for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
        ultimate0 = it.get$current();
        ++count;
        if (count > 100) {
          while (true) {
            if (!($length > 75 && count > 3))
              break;
            if (0 >= parts.length)
              throw H.ioore(parts, 0);
            $length -= parts.pop().length + 2;
            --count;
          }
          parts.push("...");
          return;
        }
      }
      penultimateString = H.S(penultimate);
      ultimateString = H.S(ultimate);
      $length += ultimateString.length + penultimateString.length + 4;
    }
  }
  if (count > parts.length + 2) {
    $length += 5;
    elision = "...";
  } else
    elision = null;
  while (true) {
    if (!($length > 80 && parts.length > 3))
      break;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    $length -= parts.pop().length + 2;
    if (elision == null) {
      $length += 5;
      elision = "...";
    }
  }
  if (elision != null)
    parts.push(elision);
  parts.push(penultimateString);
  parts.push(ultimateString);
},

LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1;
  if (hashCode == null) {
    if (equals == null) {
      t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
      H.setRuntimeTypeInfo(t1, [$K, $V]);
      return t1;
    }
    hashCode = P._defaultHashCode$closure;
  } else {
    if (P.identityHashCode$closure === hashCode && P.identical$closure === equals) {
      t1 = new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0);
      H.setRuntimeTypeInfo(t1, [$K, $V]);
      return t1;
    }
    if (equals == null)
      equals = P._defaultEquals$closure;
  }
  return P._LinkedCustomHashMap$(equals, hashCode, isValidKey, $K, $V);
},

LinkedHashMap_LinkedHashMap$fromIterables: function(keys, values, $K, $V) {
  var map = P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
  P.Maps__fillMapWithIterables(map, keys, values);
  return map;
},

LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
  var t1 = new P._LinkedHashSet(0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
},

Maps_mapToString: function(m) {
  var t1, result, i, t2;
  t1 = {};
  for (i = 0; i < $.get$Maps__toStringList().length; ++i) {
    t2 = $.get$Maps__toStringList();
    if (i >= t2.length)
      throw H.ioore(t2, i);
    if (t2[i] === m)
      return "{...}";
  }
  result = P.StringBuffer$("");
  try {
    $.get$Maps__toStringList().push(m);
    result.write$1("{");
    t1.first_0 = true;
    J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
    result.write$1("}");
  } finally {
    t1 = $.get$Maps__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

Maps__fillMapWithIterables: function(map, keys, values) {
  var keyIterator, valueIterator, hasNextKey, hasNextValue;
  keyIterator = J.get$iterator$ax(keys);
  valueIterator = values.get$iterator(values);
  hasNextKey = keyIterator.moveNext$0();
  hasNextValue = valueIterator.moveNext$0();
  while (true) {
    if (!(hasNextKey && hasNextValue))
      break;
    map.$indexSet(map, keyIterator.get$current(), valueIterator.get$current());
    hasNextKey = keyIterator.moveNext$0();
    hasNextValue = valueIterator.moveNext$0();
  }
  if (hasNextKey || hasNextValue)
    throw H.wrapException(new P.ArgumentError("Iterables do not have same length."));
},

_HashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._collection$_length;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return this._collection$_length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this._collection$_length !== 0;
  },
  "+isNotEmpty": 0,
  get$keys: function() {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
    return t1;
  },
  "+keys": 0,
  get$values: function(_) {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._HashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
  },
  "+values": 0,
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  "+containsKey:1:0": 0,
  containsValue$1: function(value) {
    var t1 = this._computeKeys$0();
    t1.toString;
    return H.IterableMixinWorkaround_any(t1, new P._HashMap_containsValue_closure(this, value));
  },
  "+containsValue:1:0": 0,
  addAll$1: function(_, other) {
    J.forEach$1$ax(other, new P._HashMap_addAll_closure(this));
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  "+[]:1:0": 0,
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, t1, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      if (strings[key] == null) {
        this._collection$_length = this._collection$_length + 1;
        this._keys = null;
      }
      if (value == null)
        strings[key] = strings;
      else
        strings[key] = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      if (nums[key] == null) {
        this._collection$_length = this._collection$_length + 1;
        this._keys = null;
      }
      if (value == null)
        nums[key] = nums;
      else
        nums[key] = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [key, value];
        if (t1 == null)
          rest[hash] = rest;
        else
          rest[hash] = t1;
        this._collection$_length = this._collection$_length + 1;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  "+[]=:2:0": 0,
  putIfAbsent$2: function(key, ifAbsent) {
    var value;
    if (this.containsKey$1(key))
      return this.$index(this, key);
    value = ifAbsent.call$0();
    this.$indexSet(this, key, value);
    return value;
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      this._collection$_length = this._collection$_length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  clear$0: function(_) {
    if (this._collection$_length > 0) {
      this._keys = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._collection$_length = 0;
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, key) {
    var value;
    if (table != null && table[key] != null) {
      value = P._HashMap__getTableEntry(table, key);
      delete table[key];
      this._collection$_length = this._collection$_length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2)
      if (J.$eq(bucket[i], key) === true)
        return i;
    return -1;
  },
  $isMap: true,
  static: {
_HashMap__getTableEntry: function(table, key) {
  var entry = table[key];
  return entry === table ? null : entry;
}}

},

_HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_HashMap_containsValue_closure: {"": "Closure;this_0,value_1",
  call$1: function(each) {
    var t1 = this.this_0;
    return J.$eq(t1.$index(t1, each), this.value_1);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_HashMap_addAll_closure: {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1 = this.this_0;
    t1.$indexSet(t1, key, value);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_CustomHashMap: {"": "_HashMap;_equals,_hashCode,_validKey,_collection$_length,_strings,_nums,_rest,_keys",
  _equals$2: function(arg0, arg1) {
    return this._equals.call$2(arg0, arg1);
  },
  _hashCode$1: function(arg0) {
    return this._hashCode.call$1(arg0);
  },
  _validKey$1: function(arg0) {
    return this._validKey.call$1(arg0);
  },
  $index: function(_, key) {
    if (this._validKey$1(key) !== true)
      return;
    return P._HashMap.prototype.$index.call(this, this, key);
  },
  "+[]:1:0": 0,
  containsKey$1: function(key) {
    if (this._validKey$1(key) !== true)
      return false;
    return P._HashMap.prototype.containsKey$1.call(this, key);
  },
  "+containsKey:1:0": 0,
  remove$1: function(_, key) {
    if (this._validKey$1(key) !== true)
      return;
    return P._HashMap.prototype.remove$1.call(this, this, key);
  },
  _computeHashCode$1: function(key) {
    return this._hashCode$1(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2)
      if (this._equals$2(bucket[i], key) === true)
        return i;
    return -1;
  },
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  "+toString:0:0": 0,
  $as_HashMap: null,
  $asMap: null,
  static: {
_CustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
  var t1 = new P._CustomHashMap_closure($K);
  t1 = new P._CustomHashMap(_equals, _hashCode, t1, 0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
}}

},

_CustomHashMap_closure: {"": "Closure;K_0",
  call$1: function(v) {
    var t1 = H.checkSubtypeOfRuntimeType(v, this.K_0);
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

HashMapKeyIterable: {"": "IterableBase;_collection$_map",
  get$length: function(_) {
    return this._collection$_map._collection$_length;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return this._collection$_map._collection$_length === 0;
  },
  "+isEmpty": 0,
  get$iterator: function(_) {
    var t1 = this._collection$_map;
    t1 = new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
    t1.$builtinTypeInfo = this.$builtinTypeInfo;
    return t1;
  },
  contains$1: function(_, element) {
    return this._collection$_map.containsKey$1(element);
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._collection$_map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
    }
  },
  $asIterableBase: null,
  $asIterable: null,
  $isEfficientLength: true
},

HashMapKeyIterator: {"": "Object;_collection$_map,_keys,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  "+current": 0,
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._collection$_map;
    if (keys !== t1._keys)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$length: function(_) {
    return this._collection$_length;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return this._collection$_length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this._collection$_length !== 0;
  },
  "+isNotEmpty": 0,
  get$keys: function() {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
    return t1;
  },
  "+keys": 0,
  get$values: function(_) {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._LinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
  },
  "+values": 0,
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  "+containsKey:1:0": 0,
  containsValue$1: function(value) {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
    return t1.any$1(t1, new P._LinkedHashMap_containsValue_closure(this, value));
  },
  "+containsValue:1:0": 0,
  addAll$1: function(_, other) {
    J.forEach$1$ax(other, new P._LinkedHashMap_addAll_closure(this));
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_collection$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_collection$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_collection$_value();
    }
  },
  "+[]:1:0": 0,
  $indexSet: function(_, key, value) {
    var strings, table, cell, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      cell = strings[key];
      if (cell == null)
        strings[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_collection$_value(value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      cell = nums[key];
      if (cell == null)
        nums[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_collection$_value(value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_collection$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  "+[]=:2:0": 0,
  putIfAbsent$2: function(key, ifAbsent) {
    var value;
    if (this.containsKey$1(key))
      return this.$index(this, key);
    value = ifAbsent.call$0();
    this.$indexSet(this, key, value);
    return value;
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_collection$_value();
    }
  },
  clear$0: function(_) {
    if (this._collection$_length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._collection$_length = 0;
      this._modifications = this._modifications + 1 & 67108863;
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(), cell.get$_collection$_value());
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell.get$_next();
    }
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_collection$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new P.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._collection$_length = this._collection$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_key(), key) === true)
        return i;
    return -1;
  },
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  "+toString:0:0": 0,
  $isLinkedHashMap: true,
  $isMap: true
},

_LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_LinkedHashMap_containsValue_closure: {"": "Closure;this_0,value_1",
  call$1: function(each) {
    var t1 = this.this_0;
    return J.$eq(t1.$index(t1, each), this.value_1);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_LinkedHashMap_addAll_closure: {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1 = this.this_0;
    t1.$indexSet(t1, key, value);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_LinkedIdentityHashMap: {"": "_LinkedHashMap;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  _computeHashCode$1: function(key) {
    return H.objectHashCode(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i, t1;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i) {
      t1 = bucket[i].get$_key();
      if (t1 == null ? key == null : t1 === key)
        return i;
    }
    return -1;
  },
  $as_LinkedHashMap: null,
  $asLinkedHashMap: null,
  $asMap: null
},

_LinkedCustomHashMap: {"": "_LinkedHashMap;_equals,_hashCode,_validKey,_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  _equals$2: function(arg0, arg1) {
    return this._equals.call$2(arg0, arg1);
  },
  _hashCode$1: function(arg0) {
    return this._hashCode.call$1(arg0);
  },
  _validKey$1: function(arg0) {
    return this._validKey.call$1(arg0);
  },
  $index: function(_, key) {
    if (this._validKey$1(key) !== true)
      return;
    return P._LinkedHashMap.prototype.$index.call(this, this, key);
  },
  "+[]:1:0": 0,
  containsKey$1: function(key) {
    if (this._validKey$1(key) !== true)
      return false;
    return P._LinkedHashMap.prototype.containsKey$1.call(this, key);
  },
  "+containsKey:1:0": 0,
  remove$1: function(_, key) {
    if (this._validKey$1(key) !== true)
      return;
    return P._LinkedHashMap.prototype.remove$1.call(this, this, key);
  },
  _computeHashCode$1: function(key) {
    return this._hashCode$1(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (this._equals$2(bucket[i].get$_key(), key) === true)
        return i;
    return -1;
  },
  $as_LinkedHashMap: null,
  $asLinkedHashMap: null,
  $asMap: null,
  static: {
_LinkedCustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
  var t1 = new P._LinkedCustomHashMap_closure($K);
  t1 = new P._LinkedCustomHashMap(_equals, _hashCode, t1, 0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
}}

},

_LinkedCustomHashMap_closure: {"": "Closure;K_0",
  call$1: function(v) {
    var t1 = H.checkSubtypeOfRuntimeType(v, this.K_0);
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

LinkedHashMapCell: {"": "Object;_key<,_collection$_value@,_next@,_previous@"},

LinkedHashMapKeyIterable: {"": "IterableBase;_collection$_map",
  get$length: function(_) {
    return this._collection$_map._collection$_length;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return this._collection$_map._collection$_length === 0;
  },
  "+isEmpty": 0,
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._collection$_map;
    t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
    t2.$builtinTypeInfo = this.$builtinTypeInfo;
    t2._cell = t1._first;
    return t2;
  },
  contains$1: function(_, element) {
    return this._collection$_map.containsKey$1(element);
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._collection$_map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell.get$_key());
      if (modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = cell.get$_next();
    }
  },
  $asIterableBase: null,
  $asIterable: null,
  $isEfficientLength: true
},

LinkedHashMapKeyIterator: {"": "Object;_collection$_map,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  "+current": 0,
  moveNext$0: function() {
    var t1 = this._collection$_map;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1.get$_key();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  }
},

_HashSet: {"": "_HashSetBase;",
  get$iterator: function(_) {
    var t1 = new P.HashSetIterator(this, this._computeElements$0(), 0, null);
    t1.$builtinTypeInfo = this.$builtinTypeInfo;
    return t1;
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return this._collection$_length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this._collection$_length !== 0;
  },
  "+isNotEmpty": 0,
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      return nums == null ? false : nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    rest = this._rest;
    if (rest == null)
      return;
    bucket = rest[this._computeHashCode$1(object)];
    index = this._findBucketIndex$2(bucket, object);
    if (index < 0)
      return;
    return J.$index$asx(bucket, index);
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      return this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      return this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      this._collection$_length = this._collection$_length + 1;
      this._elements = null;
      return true;
    }
  },
  addAll$1: function(_, objects) {
    var t1;
    for (t1 = J.get$iterator$ax(objects); t1.moveNext$0();)
      this.add$1(this, t1.get$current());
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (typeof object === "string" && object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else if (typeof object === "number" && (object & 0x3ffffff) === object)
      return this._removeHashTableEntry$2(this._nums, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._collection$_length = this._collection$_length - 1;
      this._elements = null;
      bucket.splice(index, 1);
      return true;
    }
  },
  clear$0: function(_) {
    if (this._collection$_length > 0) {
      this._elements = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._collection$_length = 0;
    }
  },
  _computeElements$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._elements;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; ++i0) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._elements = result;
    return result;
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return false;
    table[element] = 0;
    this._collection$_length = this._collection$_length + 1;
    this._elements = null;
    return true;
  },
  _removeHashTableEntry$2: function(table, element) {
    if (table != null && table[element] != null) {
      delete table[element];
      this._collection$_length = this._collection$_length - 1;
      this._elements = null;
      return true;
    } else
      return false;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i], element) === true)
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $asIterable: null,
  $isEfficientLength: true,
  $isIterable: true
},

_IdentityHashSet: {"": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
  _computeHashCode$1: function(key) {
    return H.objectHashCode(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i, t1;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i) {
      t1 = bucket[i];
      if (t1 == null ? element == null : t1 === element)
        return i;
    }
    return -1;
  },
  $as_HashSet: null,
  $asIterable: null
},

HashSetIterator: {"": "Object;_set,_elements,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  "+current": 0,
  moveNext$0: function() {
    var elements, offset, t1;
    elements = this._elements;
    offset = this._offset;
    t1 = this._set;
    if (elements !== t1._elements)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= elements.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = elements[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashSet: {"": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$iterator: function(_) {
    var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
    H.setRuntimeTypeInfo(t1, [null]);
    t1._cell = this._first;
    return t1;
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return this._collection$_length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this._collection$_length !== 0;
  },
  "+isNotEmpty": 0,
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index).get$_collection$_element();
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$1(cell.get$_collection$_element());
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell.get$_next();
    }
  },
  get$first: function(_) {
    var t1 = this._first;
    if (t1 == null)
      throw H.wrapException(new P.StateError("No elements"));
    return t1.get$_collection$_element();
  },
  get$last: function(_) {
    var t1 = this._last;
    if (t1 == null)
      throw H.wrapException(new P.StateError("No elements"));
    return t1.get$_collection$_element();
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      return this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      return this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._newLinkedCell$1(element));
      }
      return true;
    }
  },
  addAll$1: function(_, objects) {
    var t1;
    for (t1 = J.get$iterator$ax(objects); t1.moveNext$0();)
      this.add$1(this, t1.get$current());
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (typeof object === "string" && object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else if (typeof object === "number" && (object & 0x3ffffff) === object)
      return this._removeHashTableEntry$2(this._nums, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    }
  },
  clear$0: function(_) {
    if (this._collection$_length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._collection$_length = 0;
      this._modifications = this._modifications + 1 & 67108863;
    }
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return false;
    table[element] = this._newLinkedCell$1(element);
    return true;
  },
  _removeHashTableEntry$2: function(table, element) {
    var cell;
    if (table == null)
      return false;
    cell = table[element];
    if (cell == null)
      return false;
    this._unlinkCell$1(cell);
    delete table[element];
    return true;
  },
  _newLinkedCell$1: function(element) {
    var cell, last;
    cell = new P.LinkedHashSetCell(element, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._collection$_length = this._collection$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_collection$_element(), element) === true)
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $asIterable: null,
  $isEfficientLength: true,
  $isIterable: true
},

LinkedHashSetCell: {"": "Object;_collection$_element<,_next@,_previous@"},

LinkedHashSetIterator: {"": "Object;_set,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  "+current": 0,
  moveNext$0: function() {
    var t1 = this._set;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1.get$_collection$_element();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  }
},

UnmodifiableListView: {"": "UnmodifiableListBase;_collection$_source",
  get$length: function(_) {
    return J.get$length$asx(this._collection$_source);
  },
  "+length": 0,
  $index: function(_, index) {
    return J.elementAt$1$ax(this._collection$_source, index);
  },
  "+[]:1:0": 0,
  $asUnmodifiableListBase: null,
  $asList: null,
  $asIterable: null
},

_HashSetBase: {"": "IterableBase;",
  toList$1$growable: function(_, growable) {
    var result, t1, i, element, i0;
    if (growable) {
      result = P.List_List(null, H.getTypeArgumentByIndex(this, 0));
      H.setRuntimeTypeInfo(result, [H.getTypeArgumentByIndex(this, 0)]);
      C.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = P.List_List(this.get$length(this), H.getTypeArgumentByIndex(this, 0));
      H.setRuntimeTypeInfo(result, [H.getTypeArgumentByIndex(this, 0)]);
    }
    for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
      element = t1.get$current();
      i0 = i + 1;
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = element;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  "+toString:0:0": 0,
  $asIterableBase: null,
  $asIterable: null,
  $isEfficientLength: true,
  $isIterable: true
},

IterableBase: {"": "Object;",
  map$1: function(_, f) {
    return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "IterableBase", 0), null);
  },
  where$1: function(_, f) {
    var t1 = new H.WhereIterable(this, f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "IterableBase", 0)]);
    return t1;
  },
  contains$1: function(_, element) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      if (J.$eq(t1.get$current(), element) === true)
        return true;
    return false;
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  join$1: function(_, separator) {
    var iterator, buffer, t1;
    iterator = this.get$iterator(this);
    if (!iterator.moveNext$0())
      return "";
    buffer = P.StringBuffer$("");
    if (separator === "")
      do {
        t1 = H.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      } while (iterator.moveNext$0());
    else {
      buffer.write$1(H.S(iterator.get$current()));
      for (; iterator.moveNext$0();) {
        buffer._contents = buffer._contents + separator;
        t1 = H.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      }
    }
    return buffer._contents;
  },
  any$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      if (f.call$1(t1.get$current()) === true)
        return true;
    return false;
  },
  toList$1$growable: function(_, growable) {
    return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
      ++count;
    return count;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return !this.get$iterator(this).moveNext$0();
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this.get$isEmpty(this) !== true;
  },
  "+isNotEmpty": 0,
  take$1: function(_, n) {
    return H.TakeIterable_TakeIterable(this, n, H.getRuntimeTypeArgument(this, "IterableBase", 0));
  },
  takeWhile$1: function(_, test) {
    var t1 = new H.TakeWhileIterable(this, test);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "IterableBase", 0)]);
    return t1;
  },
  skip$1: function(_, n) {
    return H.SkipIterable_SkipIterable(this, n, H.getRuntimeTypeArgument(this, "IterableBase", 0));
  },
  get$first: function(_) {
    var it = this.get$iterator(this);
    if (!it.moveNext$0())
      throw H.wrapException(new P.StateError("No elements"));
    return it.get$current();
  },
  get$last: function(_) {
    var it, result;
    it = this.get$iterator(this);
    if (!it.moveNext$0())
      throw H.wrapException(new P.StateError("No elements"));
    do
      result = it.get$current();
    while (it.moveNext$0());
    return result;
  },
  get$single: function(_) {
    var it, result;
    it = this.get$iterator(this);
    if (!it.moveNext$0())
      throw H.wrapException(new P.StateError("No elements"));
    result = it.get$current();
    if (it.moveNext$0())
      throw H.wrapException(new P.StateError("More than one element"));
    return result;
  },
  firstWhere$2$orElse: function(_, test, orElse) {
    var t1, element;
    for (t1 = this.get$iterator(this); t1.moveNext$0();) {
      element = t1.get$current();
      if (test.call$1(element) === true)
        return element;
    }
    if (orElse != null)
      return orElse.call$0();
    throw H.wrapException(new P.StateError("No matching element"));
  },
  firstWhere$1: function($receiver, test) {
    return this.firstWhere$2$orElse($receiver, test, null);
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element, t2;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
      element = t1.get$current();
      t2 = J.getInterceptor(remaining);
      if (t2.$eq(remaining, 0) === true)
        return element;
      remaining = t2.$sub(remaining, 1);
    }
    throw H.wrapException(P.RangeError$value(index));
  },
  toString$0: function(_) {
    return P._iterableToString(this);
  },
  "+toString:0:0": 0,
  $isIterable: true,
  $asIterable: null
},

ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    var t1 = new H.ListIterator(receiver, this.get$length(receiver), 0, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    return t1;
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
  },
  get$isEmpty: function(receiver) {
    return J.$eq(this.get$length(receiver), 0);
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(receiver) {
    return this.get$isEmpty(receiver) !== true;
  },
  "+isNotEmpty": 0,
  get$first: function(receiver) {
    if (J.$eq(this.get$length(receiver), 0) === true)
      throw H.wrapException(new P.StateError("No elements"));
    return this.$index(receiver, 0);
  },
  get$last: function(receiver) {
    if (J.$eq(this.get$length(receiver), 0) === true)
      throw H.wrapException(new P.StateError("No elements"));
    return this.$index(receiver, J.$sub$n(this.get$length(receiver), 1));
  },
  contains$1: function(receiver, element) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      if (J.$eq(this.$index(receiver, i), element) === true)
        return true;
      if ($length !== this.get$length(receiver))
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
    return false;
  },
  any$1: function(receiver, test) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      if (test.call$1(this.$index(receiver, i)) === true)
        return true;
      if ($length !== this.get$length(receiver))
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
    return false;
  },
  firstWhere$2$orElse: function(receiver, test, orElse) {
    var $length, i, element;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      element = this.$index(receiver, i);
      if (test.call$1(element) === true)
        return element;
      if ($length !== this.get$length(receiver))
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
    if (orElse != null)
      return orElse.call$0();
    throw H.wrapException(new P.StateError("No matching element"));
  },
  firstWhere$1: function($receiver, test) {
    return this.firstWhere$2$orElse($receiver, test, null);
  },
  join$1: function(receiver, separator) {
    var $length, t1, first, buffer, i, str;
    $length = this.get$length(receiver);
    if (separator.length !== 0) {
      t1 = J.getInterceptor($length);
      if (t1.$eq($length, 0) === true)
        return "";
      first = H.S(this.$index(receiver, 0));
      if (t1.$eq($length, this.get$length(receiver)) !== true)
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
      buffer = P.StringBuffer$(first);
      if (typeof $length !== "number")
        throw H.iae($length);
      i = 1;
      for (; i < $length; ++i) {
        buffer._contents = buffer._contents + separator;
        str = this.$index(receiver, i);
        str = typeof str === "string" ? str : H.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return buffer._contents;
    } else {
      buffer = P.StringBuffer$("");
      if (typeof $length !== "number")
        throw H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        str = this.$index(receiver, i);
        str = typeof str === "string" ? str : H.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return buffer._contents;
    }
  },
  where$1: function(receiver, test) {
    var t1 = new H.WhereIterable(receiver, test);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    return t1;
  },
  map$1: function(receiver, f) {
    var t1 = new H.MappedListIterable(receiver, f);
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
  },
  skip$1: function(receiver, count) {
    return H.SubListIterable$(receiver, count, null, null);
  },
  take$1: function(receiver, count) {
    return H.SubListIterable$(receiver, 0, count, null);
  },
  toList$1$growable: function(receiver, growable) {
    var result, i, t1;
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(receiver));
    } else {
      result = P.List_List(this.get$length(receiver), H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    }
    i = 0;
    while (true) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = t1;
      ++i;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    this.set$length(receiver, J.$add$ns(t1, 1));
    this.$indexSet(receiver, t1, element);
  },
  addAll$1: function(receiver, iterable) {
    var t1, element, t2;
    for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();) {
      element = t1.get$current();
      t2 = this.get$length(receiver);
      this.set$length(receiver, J.$add$ns(t2, 1));
      this.$indexSet(receiver, t2, element);
    }
  },
  remove$1: function(receiver, element) {
    var i, t1;
    i = 0;
    while (true) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      if (J.$eq(this.$index(receiver, i), element) === true) {
        this.setRange$4(receiver, i, J.$sub$n(this.get$length(receiver), 1), receiver, i + 1);
        this.set$length(receiver, J.$sub$n(this.get$length(receiver), 1));
        return true;
      }
      ++i;
    }
    return false;
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  removeLast$0: function(receiver) {
    var result;
    if (J.$eq(this.get$length(receiver), 0) === true)
      throw H.wrapException(new P.StateError("No elements"));
    result = this.$index(receiver, J.$sub$n(this.get$length(receiver), 1));
    this.set$length(receiver, J.$sub$n(this.get$length(receiver), 1));
    return result;
  },
  sort$1: function(receiver, compare) {
    H.Sort__doSort(receiver, 0, J.$sub$n(this.get$length(receiver), 1), compare);
  },
  _rangeCheck$2: function(receiver, start, end) {
    var t1;
    if (!(start < 0)) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = start > t1;
    } else
      t1 = true;
    if (t1)
      throw H.wrapException(P.RangeError$range(start, 0, this.get$length(receiver)));
    t1 = J.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, this.get$length(receiver)))
      throw H.wrapException(P.RangeError$range(end, start, this.get$length(receiver)));
  },
  sublist$2: function(receiver, start, end) {
    var $length, result, i, t1;
    end = this.get$length(receiver);
    this._rangeCheck$2(receiver, start, end);
    $length = J.$sub$n(end, start);
    result = P.List_List(null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
    H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    C.JSArray_methods.set$length(result, $length);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      t1 = this.$index(receiver, start + i);
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = t1;
    }
    return result;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  getRange$2: function(receiver, start, end) {
    this._rangeCheck$2(receiver, start, end);
    return H.SubListIterable$(receiver, start, end, null);
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    var t1, $length, t2, i;
    if (start >= 0) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = start > t1;
    } else
      t1 = true;
    if (t1)
      H.throwExpression(P.RangeError$range(start, 0, this.get$length(receiver)));
    t1 = J.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, this.get$length(receiver)))
      H.throwExpression(P.RangeError$range(end, start, this.get$length(receiver)));
    $length = t1.$sub(end, start);
    if (J.$eq($length, 0))
      return;
    if (skipCount < 0)
      throw H.wrapException(new P.ArgumentError(skipCount));
    if (typeof $length !== "number")
      throw H.iae($length);
    t1 = J.getInterceptor$asx(iterable);
    t2 = t1.get$length(iterable);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (skipCount + $length > t2)
      throw H.wrapException(new P.StateError("Not enough elements"));
    if (skipCount < start)
      for (i = $length - 1; i >= 0; --i)
        this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
    else
      for (i = 0; i < $length; ++i)
        this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
  },
  indexOf$2: function(receiver, element, startIndex) {
    var t1, i;
    t1 = this.get$length(receiver);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (startIndex >= t1)
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    i = startIndex;
    while (true) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      if (J.$eq(this.$index(receiver, i), element) === true)
        return i;
      ++i;
    }
    return -1;
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  lastIndexOf$2: function(receiver, element, startIndex) {
    var i, t1;
    startIndex = J.$sub$n(this.get$length(receiver), 1);
    for (i = startIndex; t1 = J.getInterceptor$n(i), t1.$ge(i, 0); i = t1.$sub(i, 1))
      if (J.$eq(this.$index(receiver, i), element) === true)
        return i;
    return -1;
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  insert$2: function(receiver, index, element) {
    var t1;
    if (index >= 0) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = index > t1;
    } else
      t1 = true;
    if (t1)
      throw H.wrapException(P.RangeError$range(index, 0, this.get$length(receiver)));
    if (index === this.get$length(receiver)) {
      this.add$1(receiver, element);
      return;
    }
    this.set$length(receiver, J.$add$ns(this.get$length(receiver), 1));
    this.setRange$4(receiver, index + 1, this.get$length(receiver), receiver, index);
    this.$indexSet(receiver, index, element);
  },
  get$reversed: function(receiver) {
    var t1 = new H.ReversedListIterable(receiver);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  toString$0: function(receiver) {
    var result, t1;
    t1 = $.get$_toStringVisiting();
    if (t1.contains$1(t1, receiver))
      return "[...]";
    result = P.StringBuffer$("");
    try {
      t1 = $.get$_toStringVisiting();
      t1.add$1(t1, receiver);
      result.write$1("[");
      result.writeAll$2(receiver, ", ");
      result.write$1("]");
    } finally {
      t1 = $.get$_toStringVisiting();
      t1.remove$1(t1, receiver);
    }
    return result.get$_contents();
  },
  "+toString:0:0": 0,
  $isList: true,
  $asList: null,
  $isEfficientLength: true,
  $isIterable: true,
  $asIterable: null
},

Maps_mapToString_closure: {"": "Closure;box_0,result_1",
  call$2: function(k, v) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(k);
    t1.write$1(": ");
    t1.write$1(v);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return P._ListQueueIterator$(this, H.getTypeArgumentByIndex(this, 0));
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  "+isEmpty": 0,
  get$length: function(_) {
    return J.$and$n(J.$sub$n(this._tail, this._head), this._table.length - 1);
  },
  "+length": 0,
  get$first: function(_) {
    var t1, t2;
    t1 = this._head;
    if (t1 === this._tail)
      throw H.wrapException(new P.StateError("No elements"));
    t2 = this._table;
    if (t1 < 0 || t1 >= t2.length)
      throw H.ioore(t2, t1);
    return t2[t1];
  },
  get$last: function(_) {
    var t1, t2;
    t1 = this._head;
    t2 = this._tail;
    if (t1 === t2)
      throw H.wrapException(new P.StateError("No elements"));
    t1 = this._table;
    t2 = J.$and$n(J.$sub$n(t2, 1), this._table.length - 1);
    if (t2 < 0 || t2 >= t1.length)
      throw H.ioore(t1, t2);
    return t1[t2];
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    t1 = J.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$gt(index, this.get$length(this)))
      throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
    t1 = this._table;
    t2 = this._head;
    if (typeof index !== "number")
      throw H.iae(index);
    t3 = t1.length;
    t2 = (t2 + index & t3 - 1) >>> 0;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    return t1[t2];
  },
  toList$1$growable: function(_, growable) {
    var list;
    if (growable) {
      list = P.List_List(null, H.getTypeArgumentByIndex(this, 0));
      H.setRuntimeTypeInfo(list, [H.getTypeArgumentByIndex(this, 0)]);
      C.JSArray_methods.set$length(list, this.get$length(this));
    } else {
      list = P.List_List(this.get$length(this), H.getTypeArgumentByIndex(this, 0));
      H.setRuntimeTypeInfo(list, [H.getTypeArgumentByIndex(this, 0)]);
    }
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  addAll$1: function(_, elements) {
    var t1, addCount, $length, t2, t3, endSpace, preSpace;
    t1 = J.getInterceptor(elements);
    if (typeof elements === "object" && elements !== null && (elements.constructor === Array || !!t1.$isList)) {
      addCount = t1.get$length(elements);
      $length = this.get$length(this);
      if (typeof addCount !== "number")
        throw H.iae(addCount);
      t1 = $length + addCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3) {
        this._preGrow$1(t1);
        t2 = this._table;
        H.IterableMixinWorkaround_setRangeList(t2, $length, t1, elements, 0);
        this._tail = J.$add$ns(this._tail, addCount);
      } else {
        t1 = this._tail;
        if (typeof t1 !== "number")
          throw H.iae(t1);
        endSpace = t3 - t1;
        if (addCount < endSpace) {
          H.IterableMixinWorkaround_setRangeList(t2, t1, t1 + addCount, elements, 0);
          this._tail = J.$add$ns(this._tail, addCount);
        } else {
          preSpace = addCount - endSpace;
          H.IterableMixinWorkaround_setRangeList(t2, t1, t1 + endSpace, elements, 0);
          t1 = this._table;
          H.IterableMixinWorkaround_setRangeList(t1, 0, preSpace, elements, endSpace);
          this._tail = preSpace;
        }
      }
      this._modificationCount = this._modificationCount + 1;
    } else
      for (t1 = t1.get$iterator(elements); t1.moveNext$0();)
        this._add$1(t1.get$current());
  },
  remove$1: function(_, object) {
    var i, t1;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      if (J.$eq(t1[i], object) === true) {
        this._remove$1(i);
        this._modificationCount = this._modificationCount + 1;
        return true;
      }
    }
    return false;
  },
  clear$0: function(_) {
    var i, t1, t2, t3, t4;
    i = this._head;
    t1 = this._tail;
    if (i !== t1) {
      for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
        if (i < 0 || i >= t3)
          throw H.ioore(t2, i);
        t2[i] = null;
      }
      this._tail = 0;
      this._head = 0;
      this._modificationCount = this._modificationCount + 1;
    }
  },
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  "+toString:0:0": 0,
  addFirst$1: function(element) {
    var t1, t2;
    t1 = (this._head - 1 & this._table.length - 1) >>> 0;
    this._head = t1;
    t2 = this._table;
    if (t1 < 0 || t1 >= t2.length)
      throw H.ioore(t2, t1);
    t2[t1] = element;
    if (t1 === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw H.wrapException(P.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._head === this._tail)
      throw H.wrapException(new P.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = J.$and$n(J.$sub$n(this._tail, 1), this._table.length - 1);
    this._tail = t1;
    t2 = this._table;
    if (t1 < 0 || t1 >= t2.length)
      throw H.ioore(t2, t1);
    return t2[t1];
  },
  _add$1: function(element) {
    var t1, t2;
    t1 = this._table;
    t2 = this._tail;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw H.ioore(t1, t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & this._table.length - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _remove$1: function(offset) {
    var mask, t1, t2, t3, i, prevOffset, t4, nextOffset;
    mask = this._table.length - 1;
    if ((offset - this._head & mask) >>> 0 < J.$and$n(J.$sub$n(this._tail, offset), mask)) {
      for (t1 = this._head, t2 = this._table, t3 = t2.length, i = offset; i !== t1; i = prevOffset) {
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t3)
          throw H.ioore(t2, prevOffset);
        t4 = t2[prevOffset];
        if (i < 0 || i >= t3)
          throw H.ioore(t2, i);
        t2[i] = t4;
      }
      if (t1 < 0 || t1 >= t3)
        throw H.ioore(t2, t1);
      t2[t1] = null;
      this._head = (t1 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._tail = J.$and$n(J.$sub$n(this._tail, 1), mask);
      for (t1 = this._tail, t2 = this._table, t3 = t2.length, i = offset; i !== t1; i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t3)
          throw H.ioore(t2, nextOffset);
        t4 = t2[nextOffset];
        if (i < 0 || i >= t3)
          throw H.ioore(t2, i);
        t2[i] = t4;
      }
      if (t1 >>> 0 !== t1 || t1 >= t3)
        throw H.ioore(t2, t1);
      t2[t1] = null;
      return offset;
    }
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = P.List_List(this._table.length * 2, H.getTypeArgumentByIndex(this, 0));
    H.setRuntimeTypeInfo(newTable, [H.getTypeArgumentByIndex(this, 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, $length, firstPartSize;
    t1 = this._head;
    t2 = this._tail;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (t1 <= t2) {
      $length = t2 - t1;
      t1 = this._table;
      t2 = this._head;
      H.IterableMixinWorkaround_setRangeList(target, 0, $length, t1, t2);
      return $length;
    } else {
      t2 = this._table;
      firstPartSize = t2.length - t1;
      H.IterableMixinWorkaround_setRangeList(target, 0, firstPartSize, t2, t1);
      t1 = this._tail;
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t2 = this._table;
      H.IterableMixinWorkaround_setRangeList(target, firstPartSize, firstPartSize + t1, t2, 0);
      return J.$add$ns(this._tail, firstPartSize);
    }
  },
  _preGrow$1: function(newElementCount) {
    var newTable = P.List_List(P.ListQueue__nextPowerOf2(newElementCount), H.getTypeArgumentByIndex(this, 0));
    H.setRuntimeTypeInfo(newTable, [H.getTypeArgumentByIndex(this, 0)]);
    this._tail = this._writeToList$1(newTable);
    this._table = newTable;
    this._head = 0;
  },
  ListQueue$1: function(initialCapacity, $E) {
    var t1 = P.List_List(8, $E);
    H.setRuntimeTypeInfo(t1, [$E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $asIterable: null,
  $isEfficientLength: true,
  $isIterable: true,
  static: {
"": "ListQueue__INITIAL_CAPACITY",
ListQueue$: function(initialCapacity, $E) {
  var t1 = new P.ListQueue(null, 0, 0, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.ListQueue$1(initialCapacity, $E);
  return t1;
},

ListQueue__nextPowerOf2: function(number) {
  var nextNumber;
  if (typeof number !== "number")
    throw number.$shl();
  number = (number << 2 >>> 0) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
}}

},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  "+current": 0,
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      H.throwExpression(P.ConcurrentModificationError$(t1));
    t2 = this._collection$_position;
    if (t2 === this._end) {
      this._collection$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw H.ioore(t3, t2);
    this._collection$_current = t3[t2];
    this._collection$_position = (this._collection$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  static: {
_ListQueueIterator$: function(queue, $E) {
  var t1 = new P._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
}}

}}],
["dart.convert", "dart:convert", , P, {
_convertJsonToDart: function(json, reviver) {
  var revive = new P._convertJsonToDart_closure();
  return revive.call$2(null, new P._convertJsonToDart_walk(revive).call$1(json));
},

_parseJson: function(source, reviver) {
  var parsed, e, t1, exception;
  t1 = source;
  if (typeof t1 !== "string")
    throw H.wrapException(new P.ArgumentError(source));
  parsed = null;
  try {
    parsed = JSON.parse(source);
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    throw H.wrapException(P.FormatException$(String(e)));
  }

  return P._convertJsonToDart(parsed, reviver);
},

_convertJsonToDart_closure: {"": "Closure;",
  call$2: function(key, value) {
    return value;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_convertJsonToDart_walk: {"": "Closure;revive_0",
  call$1: function(e) {
    var list, t1, i, keys, map, key, proto;
    if (e == null || typeof e != "object")
      return e;
    if (Object.getPrototypeOf(e) === Array.prototype) {
      list = e;
      for (t1 = this.revive_0, i = 0; i < list.length; ++i)
        list[i] = t1.call$2(i, this.call$1(list[i]));
      return list;
    }
    keys = Object.keys(e);
    map = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
      key = keys[i];
      map.$indexSet(map, key, t1.call$2(key, this.call$1(e[key])));
    }
    proto = e.__proto__;
    if (typeof proto !== "undefined" && proto !== Object.prototype)
      map.$indexSet(map, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
    return map;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Codec: {"": "Object;"},

Converter: {"": "Object;"},

Encoding: {"": "Codec;",
  $asCodec: function() {
    return [J.JSString, [J.JSArray, J.JSInt]];
  }
},

JsonCodec: {"": "Codec;",
  decode$2$reviver: function(source, reviver) {
    return P._parseJson(source, C.JsonDecoder_null._reviver);
  },
  decode$1: function(source) {
    return this.decode$2$reviver(source, null);
  },
  $asCodec: function() {
    return [P.Object, J.JSString];
  }
},

JsonDecoder: {"": "Converter;_reviver",
  $asConverter: function() {
    return [J.JSString, P.Object];
  }
},

Utf8Codec: {"": "Encoding;_allowMalformed",
  get$name: function(_) {
    return "utf-8";
  },
  "+name": 0,
  get$encoder: function() {
    return new P.Utf8Encoder();
  }
},

Utf8Encoder: {"": "Converter;",
  convert$1: function(string) {
    var t1, t2, encoder;
    t1 = string.length;
    t2 = P.List_List(t1 * 3, J.JSInt);
    H.setRuntimeTypeInfo(t2, [J.JSInt]);
    encoder = new P._Utf8Encoder(0, 0, t2);
    if (encoder._fillBuffer$3(string, 0, t1) !== t1)
      encoder._writeSurrogate$2(C.JSString_methods.codeUnitAt$1(string, t1 - 1), 0);
    return C.JSArray_methods.sublist$2(encoder._buffer, 0, encoder._bufferIndex);
  },
  $asConverter: function() {
    return [J.JSString, [J.JSArray, J.JSInt]];
  }
},

_Utf8Encoder: {"": "Object;_carry,_bufferIndex,_buffer",
  _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
    var t1, t2, rune, t3, t4, t5;
    t1 = this._buffer;
    t2 = this._bufferIndex;
    if ((nextCodeUnit & 64512) === 56320) {
      rune = (65536 + ((leadingSurrogate & 1023) << 10 >>> 0) | nextCodeUnit & 1023) >>> 0;
      t3 = t2 + 1;
      this._bufferIndex = t3;
      t4 = C.JSInt_methods.$shr(rune, 18);
      t5 = t1.length;
      if (t2 < 0 || t2 >= t5)
        throw H.ioore(t1, t2);
      t1[t2] = (240 | t4) >>> 0;
      t4 = t3 + 1;
      this._bufferIndex = t4;
      t2 = C.JSInt_methods.$shr(rune, 12);
      if (t3 < 0 || t3 >= t5)
        throw H.ioore(t1, t3);
      t1[t3] = (128 | t2 & 63) >>> 0;
      t2 = t4 + 1;
      this._bufferIndex = t2;
      t3 = C.JSInt_methods.$shr(rune, 6);
      if (t4 < 0 || t4 >= t5)
        throw H.ioore(t1, t4);
      t1[t4] = (128 | t3 & 63) >>> 0;
      this._bufferIndex = t2 + 1;
      if (t2 < 0 || t2 >= t5)
        throw H.ioore(t1, t2);
      t1[t2] = (128 | rune & 63) >>> 0;
      return true;
    } else {
      t3 = t2 + 1;
      this._bufferIndex = t3;
      t4 = C.JSInt_methods.$shr(leadingSurrogate, 12);
      t5 = t1.length;
      if (t2 < 0 || t2 >= t5)
        throw H.ioore(t1, t2);
      t1[t2] = (224 | t4) >>> 0;
      t4 = t3 + 1;
      this._bufferIndex = t4;
      t2 = C.JSInt_methods.$shr(leadingSurrogate, 6);
      if (t3 < 0 || t3 >= t5)
        throw H.ioore(t1, t3);
      t1[t3] = (128 | t2 & 63) >>> 0;
      this._bufferIndex = t4 + 1;
      if (t4 < 0 || t4 >= t5)
        throw H.ioore(t1, t4);
      t1[t4] = (128 | leadingSurrogate & 63) >>> 0;
      return false;
    }
  },
  _fillBuffer$3: function(str, start, end) {
    var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, t5, t6;
    if (start !== end && (C.JSString_methods.codeUnitAt$1(str, end - 1) & 64512) === 55296)
      --end;
    for (t1 = this._buffer, t2 = t1.length, t3 = str.length, stringIndex = start; stringIndex < end; ++stringIndex) {
      if (stringIndex < 0)
        H.throwExpression(new P.RangeError("value " + stringIndex));
      if (stringIndex >= t3)
        H.throwExpression(new P.RangeError("value " + stringIndex));
      codeUnit = str.charCodeAt(stringIndex);
      if (codeUnit <= 127) {
        t4 = this._bufferIndex;
        if (t4 >= t2)
          break;
        this._bufferIndex = t4 + 1;
        if (t4 < 0)
          throw H.ioore(t1, t4);
        t1[t4] = codeUnit;
      } else if ((codeUnit & 64512) === 55296) {
        if (this._bufferIndex + 3 >= t2)
          break;
        stringIndex0 = stringIndex + 1;
        if (stringIndex0 < 0)
          H.throwExpression(new P.RangeError("value " + stringIndex0));
        if (stringIndex0 >= t3)
          H.throwExpression(new P.RangeError("value " + stringIndex0));
        if (this._writeSurrogate$2(codeUnit, str.charCodeAt(stringIndex0)))
          stringIndex = stringIndex0;
      } else if (codeUnit <= 2047) {
        t4 = this._bufferIndex;
        t5 = t4 + 1;
        if (t5 >= t2)
          break;
        this._bufferIndex = t5;
        t6 = C.JSInt_methods.$shr(codeUnit, 6);
        if (t4 < 0 || t4 >= t2)
          throw H.ioore(t1, t4);
        t1[t4] = (192 | t6) >>> 0;
        this._bufferIndex = t5 + 1;
        if (t5 < 0)
          throw H.ioore(t1, t5);
        t1[t5] = (128 | codeUnit & 63) >>> 0;
      } else {
        t4 = this._bufferIndex;
        if (t4 + 2 >= t2)
          break;
        t5 = t4 + 1;
        this._bufferIndex = t5;
        t6 = C.JSInt_methods.$shr(codeUnit, 12);
        if (t4 < 0 || t4 >= t2)
          throw H.ioore(t1, t4);
        t1[t4] = (224 | t6) >>> 0;
        t6 = t5 + 1;
        this._bufferIndex = t6;
        t4 = C.JSInt_methods.$shr(codeUnit, 6);
        if (t5 < 0 || t5 >= t2)
          throw H.ioore(t1, t5);
        t1[t5] = (128 | t4 & 63) >>> 0;
        this._bufferIndex = t6 + 1;
        if (t6 < 0 || t6 >= t2)
          throw H.ioore(t1, t6);
        t1[t6] = (128 | codeUnit & 63) >>> 0;
      }
    }
    return stringIndex;
  },
  static: {
"": "_Utf8Encoder__DEFAULT_BYTE_BUFFER_SIZE",
}

},

Utf8Decoder: {"": "Converter;_allowMalformed",
  convert$1: function(codeUnits) {
    var buffer, decoder;
    buffer = P.StringBuffer$("");
    decoder = new P._Utf8Decoder(this._allowMalformed, buffer, true, 0, 0, 0);
    decoder.convert$3(codeUnits, 0, codeUnits.length);
    decoder.flush$0();
    return buffer._contents;
  },
  $asConverter: function() {
    return [[J.JSArray, J.JSInt], J.JSString];
  }
},

_Utf8Decoder: {"": "Object;_allowMalformed,_stringSink,_isFirstCharacter,_convert$_value,_expectedUnits,_extraUnits",
  close$0: function(_) {
    this.flush$0();
  },
  flush$0: function() {
    if (this._expectedUnits > 0) {
      if (this._allowMalformed !== true)
        throw H.wrapException(P.FormatException$("Unfinished UTF-8 octet sequence"));
      this._stringSink.write$1(P.String_String$fromCharCode(65533));
      this._convert$_value = 0;
      this._expectedUnits = 0;
      this._extraUnits = 0;
    }
  },
  convert$3: function(codeUnits, startIndex, endIndex) {
    var value, expectedUnits, extraUnits, t1, t2, i, t3, unit, charCodes, i0;
    value = this._convert$_value;
    expectedUnits = this._expectedUnits;
    extraUnits = this._extraUnits;
    this._convert$_value = 0;
    this._expectedUnits = 0;
    this._extraUnits = 0;
    $loop$0:
      for (t1 = this._stringSink, t2 = this._allowMalformed !== true, i = startIndex; true; i = i0) {
        $multibyte$2: {
          if (expectedUnits > 0) {
            t3 = codeUnits.length;
            do {
              if (i === endIndex)
                break $loop$0;
              if (i < 0 || i >= t3)
                throw H.ioore(codeUnits, i);
              unit = codeUnits[i];
              if ((unit & 192) !== 128) {
                if (t2)
                  throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + C.JSInt_methods.toRadixString$1(unit, 16)));
                this._isFirstCharacter = false;
                charCodes = P.List_List$filled(1, 65533, J.JSInt);
                charCodes.$builtinTypeInfo = [J.JSInt];
                t3 = H.Primitives_stringFromCharCodes(charCodes);
                t1._contents = t1._contents + t3;
                expectedUnits = 0;
                break $multibyte$2;
              } else {
                value = (value << 6 | unit & 63) >>> 0;
                --expectedUnits;
                ++i;
              }
            } while (expectedUnits > 0);
            t3 = extraUnits - 1;
            if (t3 < 0 || t3 >= 4)
              throw H.ioore(C.List_127_2047_65535_1114111, t3);
            if (value <= C.List_127_2047_65535_1114111[t3]) {
              if (t2)
                throw H.wrapException(P.FormatException$("Overlong encoding of 0x" + C.JSInt_methods.toRadixString$1(value, 16)));
              value = 65533;
              expectedUnits = 0;
              extraUnits = 0;
            }
            if (value > 1114111) {
              if (t2)
                throw H.wrapException(P.FormatException$("Character outside valid Unicode range: 0x" + C.JSInt_methods.toRadixString$1(value, 16)));
              value = 65533;
            }
            if (!this._isFirstCharacter || value !== 65279) {
              charCodes = P.List_List$filled(1, value, J.JSInt);
              charCodes.$builtinTypeInfo = [J.JSInt];
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t1._contents = t1._contents + t3;
            }
            this._isFirstCharacter = false;
          }
        }
        for (; i < endIndex; i = i0) {
          i0 = i + 1;
          if (i < 0 || i >= codeUnits.length)
            throw H.ioore(codeUnits, i);
          unit = codeUnits[i];
          if (unit < 0) {
            if (t2)
              throw H.wrapException(P.FormatException$("Negative UTF-8 code unit: -0x" + C.JSInt_methods.toRadixString$1(-unit, 16)));
            charCodes = P.List_List$filled(1, 65533, J.JSInt);
            charCodes.$builtinTypeInfo = [J.JSInt];
            t3 = H.Primitives_stringFromCharCodes(charCodes);
            t1._contents = t1._contents + t3;
          } else if (unit <= 127) {
            this._isFirstCharacter = false;
            charCodes = P.List_List$filled(1, unit, J.JSInt);
            charCodes.$builtinTypeInfo = [J.JSInt];
            t3 = H.Primitives_stringFromCharCodes(charCodes);
            t1._contents = t1._contents + t3;
          } else {
            if ((unit & 224) === 192) {
              value = unit & 31;
              expectedUnits = 1;
              extraUnits = 1;
              continue $loop$0;
            }
            if ((unit & 240) === 224) {
              value = unit & 15;
              expectedUnits = 2;
              extraUnits = 2;
              continue $loop$0;
            }
            if ((unit & 248) === 240 && unit < 245) {
              value = unit & 7;
              expectedUnits = 3;
              extraUnits = 3;
              continue $loop$0;
            }
            if (t2)
              throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + C.JSInt_methods.toRadixString$1(unit, 16)));
            this._isFirstCharacter = false;
            charCodes = P.List_List$filled(1, 65533, J.JSInt);
            charCodes.$builtinTypeInfo = [J.JSInt];
            t3 = H.Primitives_stringFromCharCodes(charCodes);
            t1._contents = t1._contents + t3;
            value = 65533;
            expectedUnits = 0;
            extraUnits = 0;
          }
        }
        break $loop$0;
      }
    if (expectedUnits > 0) {
      this._convert$_value = value;
      this._expectedUnits = expectedUnits;
      this._extraUnits = extraUnits;
    }
  },
  static: {
"": "_Utf8Decoder__LIMITS",
}

}}],
["dart.core", "dart:core", , P, {
Function__toMangledNames: function(namedArguments) {
  return;
},

Comparable_compare: function(a, b) {
  return J.compareTo$1$ns(a, b);
},

Error_safeToString: function(object) {
  var buffer, t1, i, codeUnit, t2, charCodes;
  if (typeof object === "number" || typeof object === "boolean" || null == object)
    return J.toString$0(object);
  if (typeof object === "string") {
    buffer = new P.StringBuffer("");
    buffer._contents = "\"";
    for (t1 = object.length, i = 0; i < t1; ++i) {
      codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
      if (codeUnit <= 31)
        if (codeUnit === 10)
          buffer._contents = buffer._contents + "\\n";
        else if (codeUnit === 13)
          buffer._contents = buffer._contents + "\\r";
        else if (codeUnit === 9)
          buffer._contents = buffer._contents + "\\t";
        else {
          buffer._contents = buffer._contents + "\\x";
          if (codeUnit < 16)
            buffer._contents = buffer._contents + "0";
          else {
            buffer._contents = buffer._contents + "1";
            codeUnit -= 16;
          }
          t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
          charCodes = P.List_List$filled(1, t2, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          buffer._contents = buffer._contents + t2;
        }
      else if (codeUnit === 92)
        buffer._contents = buffer._contents + "\\\\";
      else if (codeUnit === 34)
        buffer._contents = buffer._contents + "\\\"";
      else {
        charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t2 = H.Primitives_stringFromCharCodes(charCodes);
        buffer._contents = buffer._contents + t2;
      }
    }
    t1 = buffer._contents + "\"";
    buffer._contents = t1;
    return t1;
  }
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Exception_Exception: function(message) {
  return new P._ExceptionImplementation(message);
},

identical: function(a, b) {
  return a == null ? b == null : a === b;
},

identityHashCode: function(object) {
  return H.objectHashCode(object);
},

int_parse: function(source, onError, radix) {
  return H.Primitives_parseInt(source, radix, onError);
},

List_List: function($length, $E) {
  var t1;
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw H.wrapException(P.ArgumentError$("Length must be a positive integer: " + H.S($length) + "."));
  t1 = new Array($length);
  t1.fixed$length = true;
  return t1;
},

List_List$filled: function($length, fill, $E) {
  var t1, result, i;
  if ($length < 0)
    throw H.wrapException(P.ArgumentError$("Length must be a positive integer: " + $length + "."));
  t1 = new Array($length);
  t1.fixed$length = true;
  result = t1;
  if ($length !== 0 && fill != null)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

List_List$from: function(other, growable, $E) {
  var list, t1, $length, fixedList, i;
  list = P.List_List(null, $E);
  H.setRuntimeTypeInfo(list, [$E]);
  for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = P.List_List($length, $E);
  H.setRuntimeTypeInfo(fixedList, [$E]);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw H.ioore(list, i);
    fixedList[i] = list[i];
  }
  return fixedList;
},

print: function(object) {
  var line, t1;
  line = H.S(object);
  t1 = $.printToZone;
  if (t1 == null)
    H.printString(line);
  else
    t1.call$1(line);
},

String_String$fromCharCodes: function(charCodes) {
  return H.Primitives_stringFromCharCodes(charCodes);
},

String_String$fromCharCode: function(charCode) {
  var charCodes = P.List_List$filled(1, charCode, J.JSInt);
  charCodes.$builtinTypeInfo = [J.JSInt];
  return H.Primitives_stringFromCharCodes(charCodes);
},

_combineSurrogatePair: function(start, end) {
  return 65536 + ((start & 1023) << 10 >>> 0) + (end & 1023);
},

Function__toMangledNames_closure: {"": "Closure;result_0",
  call$2: function(symbol, value) {
    var t1 = this.result_0;
    t1.$indexSet(t1, J.get$_name$x(symbol), value);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if (t1.i_1 > 0)
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(J.get$_name$x(key));
    t1.sb_0.write$1(": ");
    t1.sb_0.write$1(P.Error_safeToString(value));
    t1.i_1 = t1.i_1 + 1;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Deprecated: {"": "Object;expires",
  toString$0: function(_) {
    return "Deprecated feature. Will be removed " + this.expires;
  },
  "+toString:0:0": 0
},

bool: {"": "Object;",
  toString$0: function(_) {
    return this ? "true" : "false";
  },
  "+toString:0:0": 0,
  $isbool: true
},

Comparable: {"": "Object;"},

DateTime: {"": "Object;millisecondsSinceEpoch<,isUtc",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDateTime)
      return false;
    return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  "+compareTo:1:0": 0,
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function(_) {
    var t1, y, m, d, h, min, sec, ms;
    t1 = new P.DateTime_toString_twoDigits();
    y = new P.DateTime_toString_fourDigits().call$1(H.Primitives_getYear(this));
    m = t1.call$1(H.Primitives_getMonth(this));
    d = t1.call$1(H.Primitives_getDay(this));
    h = t1.call$1(H.Primitives_getHours(this));
    min = t1.call$1(H.Primitives_getMinutes(this));
    sec = t1.call$1(H.Primitives_getSeconds(this));
    ms = new P.DateTime_toString_threeDigits().call$1(H.Primitives_getMilliseconds(this));
    if (this.isUtc)
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms) + "Z";
    else
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms);
  },
  "+toString:0:0": 0,
  add$1: function(_, duration) {
    return P.DateTime$fromMillisecondsSinceEpoch(this.millisecondsSinceEpoch + duration.get$inMilliseconds(), this.isUtc);
  },
  DateTime$_now$0: function() {
    H.Primitives_lazyAsJsDate(this);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
      throw H.wrapException(new P.ArgumentError(millisecondsSinceEpoch));
  },
  $isDateTime: true,
  static: {
"": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH",
DateTime_parse: function(formattedString) {
  var match, t1, t2, years, month, day, hour, minute, second, millisecond, addOneMillisecond, isUtc, millisecondsSinceEpoch;
  match = new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^([+-]?\\d?\\d\\d\\d\\d)-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(.\\d{1,6})?)?)?( ?[zZ]| ?\\+00(?::?00)?)?)?$", false, true, false), null, null).firstMatch$1(formattedString);
  if (match != null) {
    t1 = new P.DateTime_parse_parseIntOrZero();
    t2 = match._match;
    if (1 >= t2.length)
      throw H.ioore(t2, 1);
    years = H.Primitives_parseInt(t2[1], null, null);
    if (2 >= t2.length)
      throw H.ioore(t2, 2);
    month = H.Primitives_parseInt(t2[2], null, null);
    if (3 >= t2.length)
      throw H.ioore(t2, 3);
    day = H.Primitives_parseInt(t2[3], null, null);
    if (4 >= t2.length)
      throw H.ioore(t2, 4);
    hour = t1.call$1(t2[4]);
    if (5 >= t2.length)
      throw H.ioore(t2, 5);
    minute = t1.call$1(t2[5]);
    if (6 >= t2.length)
      throw H.ioore(t2, 6);
    second = t1.call$1(t2[6]);
    if (7 >= t2.length)
      throw H.ioore(t2, 7);
    millisecond = J.round$0$n(J.$mul$n(new P.DateTime_parse_parseDoubleOrZero().call$1(t2[7]), 1000));
    if (millisecond === 1000) {
      addOneMillisecond = true;
      millisecond = 999;
    } else
      addOneMillisecond = false;
    if (8 >= t2.length)
      throw H.ioore(t2, 8);
    isUtc = t2[8] != null;
    millisecondsSinceEpoch = H.Primitives_valueFromDecomposedDate(years, month, day, hour, minute, second, millisecond, isUtc);
    return P.DateTime$fromMillisecondsSinceEpoch(addOneMillisecond ? millisecondsSinceEpoch + 1 : millisecondsSinceEpoch, isUtc);
  } else
    throw H.wrapException(new P.ArgumentError(formattedString));
},

DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
  var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
},

DateTime$_now: function() {
  var t1 = new P.DateTime(Date.now(), false);
  t1.DateTime$_now$0();
  return t1;
}}

},

DateTime_parse_parseIntOrZero: {"": "Closure;",
  call$1: function(matched) {
    if (matched == null)
      return 0;
    return H.Primitives_parseInt(matched, null, null);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

DateTime_parse_parseDoubleOrZero: {"": "Closure;",
  call$1: function(matched) {
    if (matched == null)
      return 0;
    return H.Primitives_parseDouble(matched, null);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

DateTime_toString_fourDigits: {"": "Closure;",
  call$1: function(n) {
    var t1, absN, sign;
    t1 = J.getInterceptor$n(n);
    absN = t1.abs$0(n);
    sign = t1.$lt(n, 0) ? "-" : "";
    if (absN >= 1000)
      return H.S(n);
    if (absN >= 100)
      return sign + "0" + H.S(absN);
    if (absN >= 10)
      return sign + "00" + H.S(absN);
    return sign + "000" + H.S(absN);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

DateTime_toString_threeDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100))
      return H.S(n);
    if (t1.$ge(n, 10))
      return "0" + H.S(n);
    return "00" + H.S(n);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

DateTime_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return P.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw H.iae(factor);
    return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
  },
  $tdiv: function(_, quotient) {
    if (quotient === 0)
      throw H.wrapException(P.IntegerDivisionByZeroException$());
    return P.Duration$(0, 0, C.JSNumber_methods.$tdiv(this._duration, quotient), 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return this._duration > other.get$_duration();
  },
  $le: function(_, other) {
    return this._duration <= other.get$_duration();
  },
  $ge: function(_, other) {
    return this._duration >= other.get$_duration();
  },
  get$inMilliseconds: function() {
    return C.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  "+compareTo:1:0": 0,
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new P.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
    twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 60000000), 60));
    twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 1000000), 60));
    sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
    return H.S(C.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
  },
  "+toString:0:0": 0,
  $isDuration: true,
  static: {
"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO",
Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
}}

},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return H.S(n);
    if (t1.$ge(n, 10000))
      return "0" + H.S(n);
    if (t1.$ge(n, 1000))
      return "00" + H.S(n);
    if (t1.$ge(n, 100))
      return "000" + H.S(n);
    if (t1.$gt(n, 10))
      return "0000" + H.S(n);
    return "00000" + H.S(n);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Error: {"": "Object;",
  get$stackTrace: function() {
    return new H._StackTrace(this.$thrownJsError, null);
  },
  $isError: true
},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  },
  "+toString:0:0": 0
},

ArgumentError: {"": "Error;message>",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + H.S(t1);
    return "Illegal argument(s)";
  },
  "+toString:0:0": 0,
  static: {
ArgumentError$: function(message) {
  return new P.ArgumentError(message);
}}

},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + H.S(this.message);
  },
  "+toString:0:0": 0,
  static: {
RangeError$: function(message) {
  return new P.RangeError(message);
},

RangeError$value: function(value) {
  return new P.RangeError("value " + H.S(value));
},

"+new RangeError$value:1:0": 0,

RangeError$range: function(value, start, end) {
  return new P.RangeError("value " + H.S(value) + " not in range " + H.S(start) + ".." + H.S(end));
}}

},

NoSuchMethodError: {"": "Error;_core$_receiver,_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, t5, str;
    t1 = {};
    t1.sb_0 = P.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._core$_arguments;
    if (t2 != null) {
      t3 = J.getInterceptor$asx(t2);
      while (true) {
        t4 = t1.i_1;
        t5 = t3.get$length(t2);
        if (typeof t5 !== "number")
          throw H.iae(t5);
        if (!(t4 < t5))
          break;
        if (t1.i_1 > 0) {
          t4 = t1.sb_0;
          t4._contents = t4._contents + ", ";
        }
        t4 = t1.sb_0;
        str = P.Error_safeToString(t3.$index(t2, t1.i_1));
        str = typeof str === "string" ? str : H.S(str);
        t4._contents = t4._contents + str;
        t1.i_1 = t1.i_1 + 1;
      }
    }
    t2 = this._namedArguments;
    if (t2 != null)
      J.forEach$1$ax(t2, new P.NoSuchMethodError_toString_closure(t1));
    return "NoSuchMethodError : method not found: '" + H.S(this._memberName) + "'\nReceiver: " + H.S(P.Error_safeToString(this._core$_receiver)) + "\nArguments: [" + H.S(t1.sb_0) + "]";
  },
  "+toString:0:0": 0,
  $isNoSuchMethodError: true,
  static: {
NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
  return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
}}

},

UnsupportedError: {"": "Error;message>",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  },
  "+toString:0:0": 0,
  $isUnsupportedError: true,
  static: {
UnsupportedError$: function(message) {
  return new P.UnsupportedError(message);
}}

},

UnimplementedError: {"": "Error;message>",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
  },
  "+toString:0:0": 0,
  $isUnsupportedError: true,
  $isError: true,
  static: {
UnimplementedError$: function(message) {
  return new P.UnimplementedError(message);
}}

},

StateError: {"": "Error;message>",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  },
  "+toString:0:0": 0,
  static: {
StateError$: function(message) {
  return new P.StateError(message);
}}

},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
  },
  "+toString:0:0": 0,
  static: {
ConcurrentModificationError$: function(modifiedObject) {
  return new P.ConcurrentModificationError(modifiedObject);
}}

},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  "+toString:0:0": 0,
  get$stackTrace: function() {
    return;
  },
  $isError: true
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  },
  "+toString:0:0": 0,
  static: {
CyclicInitializationError$: function(variableName) {
  return new P.CyclicInitializationError(variableName);
}}

},

_ExceptionImplementation: {"": "Object;message>",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + H.S(t1);
  },
  "+toString:0:0": 0
},

FormatException: {"": "Object;message>",
  toString$0: function(_) {
    return "FormatException: " + H.S(this.message);
  },
  "+toString:0:0": 0,
  static: {
FormatException$: function(message) {
  return new P.FormatException(message);
}}

},

IntegerDivisionByZeroException: {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  "+toString:0:0": 0,
  static: {
IntegerDivisionByZeroException$: function() {
  return new P.IntegerDivisionByZeroException();
}}

},

Expando: {"": "Object;name>",
  toString$0: function(_) {
    return "Expando:" + this.name;
  },
  "+toString:0:0": 0,
  $index: function(_, object) {
    var values = H.Primitives_getProperty(object, "expando$values");
    return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
  },
  "+[]:1:0": 0,
  $indexSet: function(_, object, value) {
    var values = H.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new P.Object();
      H.Primitives_setProperty(object, "expando$values", values);
    }
    H.Primitives_setProperty(values, this._getKey$0(), value);
  },
  "+[]=:2:0": 0,
  _getKey$0: function() {
    var key, t1;
    key = H.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      key = "expando$key$" + t1;
      H.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  static: {
"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount",
}

},

Function: {"": "Object;", $isFunction: true},

Iterable: {"": "Object;", $isIterable: true, $asIterable: null},

Iterator: {"": "Object;"},

Map: {"": "Object;", $isMap: true},

Null: {"": "Object;",
  toString$0: function(_) {
    return "null";
  },
  "+toString:0:0": 0
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return H.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return H.Primitives_objectToString(this);
  },
  "+toString:0:0": 0,
  noSuchMethod$1: function(_, invocation) {
    throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
  },
  "+noSuchMethod:1:0": 0,
  get$runtimeType: function(_) {
    return new H.TypeImpl(H.getRuntimeTypeString(this), null);
  },
  $isObject: true
},

Match: {"": "Object;", $isMatch: true},

StackTrace: {"": "Object;"},

Stopwatch: {"": "Object;_core$_start,_stop",
  start$0: function(_) {
    var t1, t2, t3;
    t1 = this._core$_start == null;
    if (!t1 && this._stop == null)
      return;
    if (t1)
      this._core$_start = H.Primitives_numMicroseconds();
    else {
      t1 = H.Primitives_numMicroseconds();
      t2 = this._stop;
      t3 = this._core$_start;
      if (typeof t2 !== "number")
        throw t2.$sub();
      if (typeof t3 !== "number")
        throw H.iae(t3);
      this._core$_start = t1 - (t2 - t3);
      this._stop = null;
    }
  },
  get$elapsedTicks: function() {
    var t1, t2;
    t1 = this._core$_start;
    if (t1 == null)
      return 0;
    t2 = this._stop;
    if (t2 == null) {
      t1 = H.Primitives_numMicroseconds();
      t2 = this._core$_start;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t2 = t1 - t2;
      t1 = t2;
    } else {
      if (typeof t2 !== "number")
        throw t2.$sub();
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = t2 - t1;
    }
    return t1;
  }
},

RuneIterator: {"": "Object;string,_core$_position,_nextPosition,_currentCodePoint",
  get$current: function() {
    return this._currentCodePoint;
  },
  "+current": 0,
  moveNext$0: function() {
    var t1, t2, codeUnit, nextPosition, t3, nextCodeUnit;
    this._core$_position = this._nextPosition;
    t1 = this.string;
    t2 = J.getInterceptor$asx(t1);
    if (this._core$_position === t2.get$length(t1)) {
      this._currentCodePoint = null;
      return false;
    }
    codeUnit = t2.codeUnitAt$1(t1, this._core$_position);
    nextPosition = this._core$_position + 1;
    if ((codeUnit & 64512) === 55296) {
      t3 = t2.get$length(t1);
      if (typeof t3 !== "number")
        throw H.iae(t3);
      t3 = nextPosition < t3;
    } else
      t3 = false;
    if (t3) {
      nextCodeUnit = t2.codeUnitAt$1(t1, nextPosition);
      if ((nextCodeUnit & 64512) === 56320) {
        this._nextPosition = nextPosition + 1;
        this._currentCodePoint = P._combineSurrogatePair(codeUnit, nextCodeUnit);
        return true;
      }
    }
    this._nextPosition = nextPosition;
    this._currentCodePoint = codeUnit;
    return true;
  }
},

StringBuffer: {"": "Object;_contents<",
  get$length: function(_) {
    return this._contents.length;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return this._contents.length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this._contents.length !== 0;
  },
  "+isNotEmpty": 0,
  write$1: function(obj) {
    var str = typeof obj === "string" ? obj : H.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = J.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(iterator.get$current());
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  clear$0: function(_) {
    this._contents = "";
  },
  toString$0: function(_) {
    return this._contents;
  },
  "+toString:0:0": 0,
  StringBuffer$1: function($content) {
    if (typeof $content === "string")
      this._contents = $content;
    else
      this.write$1($content);
  },
  static: {
StringBuffer$: function($content) {
  var t1 = new P.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

},

Symbol: {"": "Object;", $isSymbol: true},

Type: {"": "Object;", $isType: true},

Uri: {"": "Object;_host,_port,_path,scheme,userInfo,query,fragment,_pathSegments,_queryParameters",
  get$host: function(_) {
    var t1, t2;
    t1 = this._host;
    if (t1 != null && J.startsWith$1$s(t1, "[")) {
      t2 = J.getInterceptor$asx(t1);
      return t2.substring$2(t1, 1, J.$sub$n(t2.get$length(t1), 1));
    }
    return t1;
  },
  get$port: function(_) {
    var t1, t2;
    if (J.$eq(this._port, 0) === true) {
      t1 = this.scheme;
      t2 = J.getInterceptor(t1);
      if (t2.$eq(t1, "http") === true)
        return 80;
      if (t2.$eq(t1, "https") === true)
        return 443;
    }
    return this._port;
  },
  get$path: function(_) {
    return this._path;
  },
  "+path": 0,
  query$1: function($receiver, arg0) {
    return this.query.call$1(arg0);
  },
  _makePath$2: function(path, pathSegments) {
    var t1, result;
    t1 = path == null;
    if (t1 && true)
      return "";
    t1 = !t1;
    if (t1)
      ;
    if (t1)
      result = P.Uri__normalize(path);
    else {
      t1 = C.JSNull_methods.map$1(pathSegments, new P.Uri__makePath_closure());
      result = t1.join$1(t1, "/");
    }
    if (J.$eq(this.get$host(this), "") !== true || J.$eq(this.scheme, "file") === true) {
      t1 = J.getInterceptor$asx(result);
      t1 = t1.get$isNotEmpty(result) && !t1.startsWith$1(result, "/");
    } else
      t1 = false;
    if (t1)
      return "/" + H.S(result);
    return result;
  },
  _merge$2: function(base, reference) {
    var t1 = J.getInterceptor(base);
    if (t1.$eq(base, "") === true)
      return "/" + H.S(reference);
    return t1.substring$2(base, 0, J.$add$ns(t1.lastIndexOf$1(base, "/"), 1)) + H.S(reference);
  },
  _hasDotSegments$1: function(path) {
    var t1 = J.getInterceptor$asx(path);
    if (J.$gt$n(t1.get$length(path), 0) && t1.codeUnitAt$1(path, 0) === 58)
      return true;
    return t1.indexOf$1(path, "/.") !== -1;
  },
  _removeDotSegments$1: function(path) {
    var output, t1, t2, appendSlash, segment;
    if (!this._hasDotSegments$1(path))
      return path;
    output = [];
    for (t1 = J.split$1$s(path, "/"), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), appendSlash = false; t2.moveNext$0();) {
      segment = t2._current;
      if (J.$eq(segment, "..") === true) {
        t1 = output.length;
        if (t1 !== 0)
          if (t1 === 1) {
            if (0 >= t1)
              throw H.ioore(output, 0);
            t1 = J.$eq(output[0], "") !== true;
          } else
            t1 = true;
        else
          t1 = false;
        if (t1) {
          if (0 >= output.length)
            throw H.ioore(output, 0);
          output.pop();
        }
        appendSlash = true;
      } else if ("." === segment)
        appendSlash = true;
      else {
        output.push(segment);
        appendSlash = false;
      }
    }
    if (appendSlash)
      output.push("");
    return C.JSArray_methods.join$1(output, "/");
  },
  resolveUri$1: function(reference) {
    var targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, t1, t2;
    targetScheme = reference.scheme;
    if (J.$eq(targetScheme, "") !== true) {
      targetUserInfo = reference.userInfo;
      targetHost = reference.get$host(reference);
      targetPort = reference.get$port(reference);
      targetPath = this._removeDotSegments$1(reference._path);
      targetQuery = reference.query;
    } else {
      if (J.$eq(reference.get$host(reference), "") !== true) {
        targetUserInfo = reference.userInfo;
        targetHost = reference.get$host(reference);
        targetPort = reference.get$port(reference);
        targetPath = this._removeDotSegments$1(reference._path);
        targetQuery = reference.query;
      } else {
        if (J.$eq(reference._path, "") === true) {
          targetPath = this._path;
          targetQuery = reference.query;
          targetQuery = J.$eq(targetQuery, "") !== true ? targetQuery : this.query;
        } else {
          t1 = J.startsWith$1$s(reference._path, "/");
          t2 = reference._path;
          targetPath = t1 ? this._removeDotSegments$1(t2) : this._removeDotSegments$1(this._merge$2(this._path, t2));
          targetQuery = reference.query;
        }
        targetUserInfo = this.userInfo;
        targetHost = this.get$host(this);
        targetPort = this.get$port(this);
      }
      targetScheme = this.scheme;
    }
    return P.Uri$(reference.fragment, targetHost, targetPath, null, targetPort, targetQuery, null, targetScheme, targetUserInfo);
  },
  _writeAuthority$1: function(ss) {
    var t1 = this.userInfo;
    if ("" !== t1) {
      ss.write$1(t1);
      ss.write$1("@");
    }
    t1 = this._host;
    ss.write$1(t1 == null ? "null" : t1);
    if (J.$eq(this._port, 0) !== true) {
      ss.write$1(":");
      ss.write$1(J.toString$0(this._port));
    }
  },
  toString$0: function(_) {
    var sb, t1;
    sb = P.StringBuffer$("");
    t1 = this.scheme;
    if ("" !== t1) {
      sb.write$1(t1);
      sb.write$1(":");
    }
    if (J.$eq(this.get$host(this), "") !== true || J.$eq(t1, "file") === true) {
      sb.write$1("//");
      this._writeAuthority$1(sb);
    }
    sb.write$1(this._path);
    t1 = this.query;
    if ("" !== t1) {
      sb.write$1("?");
      sb.write$1(t1);
    }
    t1 = this.fragment;
    if ("" !== t1) {
      sb.write$1("#");
      sb.write$1(t1);
    }
    return sb._contents;
  },
  "+toString:0:0": 0,
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isUri)
      return false;
    return J.$eq(this.scheme, other.scheme) === true && J.$eq(this.userInfo, other.userInfo) === true && J.$eq(this.get$host(this), t1.get$host(other)) === true && J.$eq(this.get$port(this), t1.get$port(other)) === true && J.$eq(this._path, other._path) === true && J.$eq(this.query, other.query) === true && J.$eq(this.fragment, other.fragment) === true;
  },
  get$hashCode: function(_) {
    var t1 = new P.Uri_hashCode_combine();
    return t1.call$2(this.scheme, t1.call$2(this.userInfo, t1.call$2(this.get$host(this), t1.call$2(this.get$port(this), t1.call$2(this._path, t1.call$2(this.query, t1.call$2(this.fragment, 1)))))));
  },
  Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
    var t1 = J.getInterceptor(scheme);
    if (t1.$eq(scheme, "http") === true && J.$eq(port, 80) === true)
      this._port = 0;
    else if (t1.$eq(scheme, "https") === true && J.$eq(port, 443) === true)
      this._port = 0;
    else
      this._port = port;
    this._path = this._makePath$2(path, pathSegments);
  },
  $isUri: true,
  static: {
"": "Uri__splitRe,Uri__COMPONENT_SCHEME,Uri__COMPONENT_USER_INFO,Uri__COMPONENT_HOST,Uri__COMPONENT_HOST_IPV6,Uri__COMPONENT_PORT,Uri__COMPONENT_PATH,Uri__COMPONENT_QUERY_DATA,Uri__COMPONENT_FRAGMENT,Uri__DOUBLE_QUOTE,Uri__PERCENT,Uri__ASTERISK,Uri__PLUS,Uri__SLASH,Uri__ZERO,Uri__NINE,Uri__COLON,Uri__LESS,Uri__GREATER,Uri__QUESTION,Uri__AT_SIGN,Uri__UPPER_CASE_A,Uri__UPPER_CASE_F,Uri__UPPER_CASE_Z,Uri__LEFT_BRACKET,Uri__BACKSLASH,Uri__RIGHT_BRACKET,Uri__LOWER_CASE_A,Uri__LOWER_CASE_F,Uri__LOWER_CASE_Z,Uri__BAR,Uri__unreservedTable,Uri__unreserved2396Table,Uri__encodeFullTable,Uri__schemeTable,Uri__schemeLowerTable,Uri__subDelimitersTable,Uri__pathCharTable,Uri__queryCharTable",
Uri$_fromMatch: function(m) {
  var t1, t2, t3, t4, t5, t6, t7, t8;
  t1 = m._match;
  if (1 >= t1.length)
    throw H.ioore(t1, 1);
  t2 = t1[1];
  t2 = P.Uri__makeScheme(t2 != null ? t2 : "");
  t3 = t1.length;
  if (2 >= t3)
    throw H.ioore(t1, 2);
  t4 = t1[2];
  t4 = t4 != null ? t4 : "";
  if (3 >= t3)
    throw H.ioore(t1, 3);
  t5 = t1[3];
  if (4 >= t3)
    throw H.ioore(t1, 4);
  t5 = P.Uri__eitherOf(t5, t1[4]);
  if (5 >= t3)
    throw H.ioore(t1, 5);
  t3 = P.Uri__parseIntOrZero(t1[5]);
  t6 = t1.length;
  if (6 >= t6)
    throw H.ioore(t1, 6);
  t7 = t1[6];
  t7 = t7 != null ? t7 : "";
  if (7 >= t6)
    throw H.ioore(t1, 7);
  t8 = t1[7];
  t8 = t8 != null ? t8 : "";
  if (8 >= t6)
    throw H.ioore(t1, 8);
  t1 = t1[8];
  t1 = t1 != null ? t1 : "";
  t6 = P.Uri__makeScheme(t2);
  t6 = new P.Uri(P.Uri__makeHost(t5), null, null, t6, t4, P.Uri__makeQuery(t8, null), P.Uri__makeFragment(t1), null, null);
  t6.Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo(t1, t5, t7, null, t3, t8, null, t2, t4);
  return t6;
},

Uri$: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
  var t1 = P.Uri__makeScheme(scheme);
  t1 = new P.Uri(P.Uri__makeHost(host), null, null, t1, userInfo, P.Uri__makeQuery(query, queryParameters), P.Uri__makeFragment(fragment), null, null);
  t1.Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo);
  return t1;
},

Uri__makeHost: function(host) {
  var t1, i, t2;
  if (host == null || J.get$isEmpty$asx(host) === true)
    return host;
  t1 = J.getInterceptor$s(host);
  if (t1.codeUnitAt$1(host, 0) === 91) {
    if (t1.codeUnitAt$1(host, J.$sub$n(t1.get$length(host), 1)) !== 93)
      throw H.wrapException(P.FormatException$("Missing end `]` to match `[` in host"));
    P.Uri_parseIPv6Address(t1.substring$2(host, 1, J.$sub$n(t1.get$length(host), 1)));
    return host;
  }
  i = 0;
  while (true) {
    t2 = t1.get$length(host);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (!(i < t2))
      break;
    if (t1.codeUnitAt$1(host, i) === 58) {
      P.Uri_parseIPv6Address(host);
      return "[" + H.S(host) + "]";
    }
    ++i;
  }
  return host;
},

Uri__makeScheme: function(scheme) {
  var t1, t2, t3, $length, allLowercase, i, codeUnit, t4;
  t1 = new P.Uri__makeScheme_isSchemeLowerCharacter();
  t2 = new P.Uri__makeScheme_isSchemeCharacter();
  if (scheme == null)
    return "";
  t3 = J.getInterceptor$asx(scheme);
  $length = t3.get$length(scheme);
  if (typeof $length !== "number")
    throw H.iae($length);
  allLowercase = true;
  i = 0;
  for (; i < $length; ++i) {
    codeUnit = t3.codeUnitAt$1(scheme, i);
    if (i === 0) {
      if (!(codeUnit >= 97 && codeUnit <= 122))
        t4 = codeUnit >= 65 && codeUnit <= 90;
      else
        t4 = true;
      t4 = !t4;
    } else
      t4 = false;
    if (t4)
      throw H.wrapException(new P.ArgumentError("Illegal scheme: " + H.S(scheme)));
    if (t1.call$1(codeUnit) !== true) {
      if (t2.call$1(codeUnit) === true)
        ;
      else
        throw H.wrapException(new P.ArgumentError("Illegal scheme: " + H.S(scheme)));
      allLowercase = false;
    }
  }
  return allLowercase ? scheme : t3.toLowerCase$0(scheme);
},

Uri__makeQuery: function(query, queryParameters) {
  var t1, t2, result;
  t1 = {};
  t2 = query == null;
  if (t2 && true)
    return "";
  t2 = !t2;
  if (t2)
    ;
  if (t2)
    return P.Uri__normalize(query);
  result = P.StringBuffer$("");
  t1.first_0 = true;
  C.JSNull_methods.forEach$1(queryParameters, new P.Uri__makeQuery_closure(t1, result));
  return result._contents;
},

Uri__makeFragment: function(fragment) {
  if (fragment == null)
    return "";
  return P.Uri__normalize(fragment);
},

Uri__normalize: function(component) {
  var t1, t2, t3, t4, t5, t6, $length, t7, t8, codeUnit1, codeUnit2, decodedCodeUnit, t9, charCodes, index;
  t1 = {};
  t2 = new P.Uri__normalize_isNormalizedHexDigit();
  t3 = new P.Uri__normalize_isUnreserved();
  t4 = new P.Uri__normalize_normalizeHexDigit(component, t2, new P.Uri__normalize_isLowerCaseHexDigit());
  t5 = new P.Uri__normalize_decodeHexDigitPair(component);
  t1.result_0 = null;
  t6 = J.getInterceptor$asx(component);
  $length = t6.get$length(component);
  t1.index_1 = 0;
  t1.prevIndex_2 = 0;
  t7 = new P.Uri__normalize_fillResult(t1, component);
  if (typeof $length !== "number")
    throw H.iae($length);
  for (; t8 = t1.index_1, t8 < $length;)
    if (t6.codeUnitAt$1(component, t8) === 37) {
      t8 = t1.index_1;
      if ($length < t8 + 2)
        throw H.wrapException(new P.ArgumentError("Invalid percent-encoding in URI component: " + H.S(component)));
      codeUnit1 = t6.codeUnitAt$1(component, t8 + 1);
      codeUnit2 = t6.codeUnitAt$1(component, t1.index_1 + 2);
      decodedCodeUnit = t5.call$1(t1.index_1 + 1);
      if (t2.call$1(codeUnit1) === true && t2.call$1(codeUnit2) === true && t3.call$1(decodedCodeUnit) !== true)
        t1.index_1 = t1.index_1 + 3;
      else {
        t7.call$0();
        t8 = t3.call$1(decodedCodeUnit);
        t9 = t1.result_0;
        if (t8 === true) {
          t9.toString;
          charCodes = P.List_List$filled(1, decodedCodeUnit, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t8 = H.Primitives_stringFromCharCodes(charCodes);
          t9._contents = t9._contents + t8;
        } else {
          t9.toString;
          t9._contents = t9._contents + "%";
          t8 = t1.result_0;
          t9 = t4.call$1(t1.index_1 + 1);
          t8.toString;
          charCodes = P.List_List$filled(1, t9, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t9 = H.Primitives_stringFromCharCodes(charCodes);
          t8._contents = t8._contents + t9;
          t8 = t1.result_0;
          t9 = t4.call$1(t1.index_1 + 2);
          t8.toString;
          charCodes = P.List_List$filled(1, t9, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t9 = H.Primitives_stringFromCharCodes(charCodes);
          t8._contents = t8._contents + t9;
        }
        index = t1.index_1 + 3;
        t1.index_1 = index;
        t1.prevIndex_2 = index;
      }
    } else
      t1.index_1 = t1.index_1 + 1;
  if (t1.result_0 != null && t1.prevIndex_2 !== t8)
    t7.call$0();
  t1 = t1.result_0;
  if (t1 == null)
    return component;
  return J.toString$0(t1);
},

Uri__parseIntOrZero: function(val) {
  if (val != null && J.$eq(val, "") !== true)
    return H.Primitives_parseInt(val, null, null);
  else
    return 0;
},

Uri__eitherOf: function(val1, val2) {
  if (val1 != null)
    return val1;
  if (val2 != null)
    return val2;
  return "";
},

Uri_parseIPv4Address: function(host) {
  var t1, bytes;
  t1 = new P.Uri_parseIPv4Address_error();
  bytes = host.split(".");
  if (bytes.length !== 4)
    t1.call$1("IPv4 address should contain exactly 4 parts");
  t1 = new H.MappedListIterable(bytes, new P.Uri_parseIPv4Address_closure(t1));
  H.setRuntimeTypeInfo(t1, [null, null]);
  return t1.toList$0(t1);
},

Uri_parseIPv6Address: function(host) {
  var error, parseHex, parts, partStart, last, wildcardSeen, i, t1, atEnd, isLastWildcard, exception, t2, $arguments;
  error = new P.Uri_parseIPv6Address_error();
  parseHex = new P.Uri_parseIPv6Address_parseHex(host, error);
  if (J.$lt$n(J.get$length$asx(host), 2))
    error.call$1("address is too short");
  parts = [];
  partStart = 0;
  wildcardSeen = false;
  i = 0;
  while (true) {
    t1 = J.get$length$asx(host);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (!(i < t1))
      break;
    if (J.codeUnitAt$1$s(host, i) === 58) {
      if (i === 0) {
        ++i;
        if (J.codeUnitAt$1$s(host, i) !== 58)
          error.call$1("invalid start colon.");
        partStart = i;
      }
      if (i === partStart) {
        if (wildcardSeen)
          error.call$1("only one wildcard `::` is allowed");
        J.add$1$ax(parts, -1);
        wildcardSeen = true;
      } else
        J.add$1$ax(parts, parseHex.call$2(partStart, i));
      partStart = i + 1;
    }
    ++i;
  }
  if (J.get$length$asx(parts) === 0)
    error.call$1("too few parts");
  atEnd = J.$eq(partStart, J.get$length$asx(host));
  isLastWildcard = J.$eq(J.get$last$ax(parts), -1);
  if (atEnd && isLastWildcard !== true)
    error.call$1("expected a part after last `:`");
  if (!atEnd)
    try {
      J.add$1$ax(parts, parseHex.call$2(partStart, J.get$length$asx(host)));
    } catch (exception) {
      H.unwrapException(exception);
      try {
        last = P.Uri_parseIPv4Address(J.substring$1$s(host, partStart));
        t1 = J.$shl$n(J.$index$asx(last, 0), 8);
        t2 = J.$index$asx(last, 1);
        if (typeof t2 !== "number")
          throw H.iae(t2);
        J.add$1$ax(parts, (t1 | t2) >>> 0);
        t2 = J.$shl$n(J.$index$asx(last, 2), 8);
        t1 = J.$index$asx(last, 3);
        if (typeof t1 !== "number")
          throw H.iae(t1);
        J.add$1$ax(parts, (t2 | t1) >>> 0);
      } catch (exception) {
        H.unwrapException(exception);
        error.call$1("invalid end of IPv6 address.");
      }

    }

  if (wildcardSeen) {
    if (J.get$length$asx(parts) > 7)
      error.call$1("an address with a wildcard must have less than 7 parts");
  } else if (J.get$length$asx(parts) !== 8)
    error.call$1("an address without a wildcard must contain exactly 8 parts");
  t1 = new H.ExpandIterable(parts, new P.Uri_parseIPv6Address_closure(parts));
  t1.$builtinTypeInfo = [null, null];
  $arguments = H.substitute(t1.$asIterableBase, H.getRuntimeTypeInfo(t1));
  return P.List_List$from(t1, true, $arguments == null ? null : $arguments[0]);
},

Uri__uriEncode: function(canonicalTable, text, spaceToPlus) {
  var t1, result, t2, i, t3, ch, str, nextCh, charCodes;
  t1 = new P.Uri__uriEncode_byteToHex();
  result = P.StringBuffer$("");
  t2 = J.getInterceptor$asx(text);
  i = 0;
  while (true) {
    t3 = t2.get$length(text);
    if (typeof t3 !== "number")
      throw H.iae(t3);
    if (!(i < t3))
      break;
    ch = t2.codeUnitAt$1(text, i);
    if (ch < 128) {
      t3 = C.JSInt_methods.$shr(ch, 4);
      if (t3 < 0 || t3 >= 8)
        throw H.ioore(canonicalTable, t3);
      t3 = (canonicalTable[t3] & C.JSInt_methods.$shl(1, ch & 15)) >>> 0 !== 0;
    } else
      t3 = false;
    if (t3) {
      str = t2.$index(text, i);
      str = typeof str === "string" ? str : H.S(str);
      result._contents = result._contents + str;
    } else if (spaceToPlus && J.$eq(t2.$index(text, i), " ") === true)
      result._contents = result._contents + "+";
    else {
      if (ch >= 55296 && ch < 56320) {
        ++i;
        nextCh = J.$eq(t2.get$length(text), i) === true ? 0 : t2.codeUnitAt$1(text, i);
        if (nextCh >= 56320 && nextCh < 57344)
          ch = 65536 + (ch - 55296 << 10 >>> 0) + (nextCh - 56320);
        else
          throw H.wrapException(new P.ArgumentError("Malformed URI"));
      }
      charCodes = P.List_List$filled(1, ch, J.JSInt);
      charCodes.$builtinTypeInfo = [J.JSInt];
      t3 = H.Primitives_stringFromCharCodes(charCodes);
      t3 = C.JSArray_methods.get$iterator(C.Utf8Codec_false.get$encoder().convert$1(t3));
      for (; t3.moveNext$0();) {
        str = t1.call$1(t3._current);
        str = typeof str === "string" ? str : H.S(str);
        result._contents = result._contents + str;
      }
    }
    ++i;
  }
  return result._contents;
},

Uri__hexCharPairToByte: function(s, pos) {
  var $byte, i, charCode;
  for ($byte = 0, i = 0; i < 2; ++i) {
    charCode = C.JSString_methods.codeUnitAt$1(s, pos + i);
    if (48 <= charCode && charCode <= 57)
      $byte = $byte * 16 + charCode - 48;
    else {
      charCode = (charCode | 32) >>> 0;
      if (97 <= charCode && charCode <= 102)
        $byte = $byte * 16 + charCode - 87;
      else
        throw H.wrapException(new P.ArgumentError("Invalid URL encoding"));
    }
  }
  return $byte;
},

Uri__uriDecode: function(text, encoding, plusToSpace) {
  var result, codepoints, t1, t2, allowMalformed, i, ch, charCodes, t3;
  result = P.StringBuffer$("");
  codepoints = P.List_List(null, J.JSInt);
  H.setRuntimeTypeInfo(codepoints, [J.JSInt]);
  for (t1 = text.length, t2 = t1 - 2, allowMalformed = encoding._allowMalformed, i = 0; i < t1;) {
    ch = C.JSString_methods.codeUnitAt$1(text, i);
    if (ch !== 37) {
      if (plusToSpace && ch === 43)
        result._contents = result._contents + " ";
      else {
        charCodes = P.List_List$filled(1, ch, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t3 = H.Primitives_stringFromCharCodes(charCodes);
        result._contents = result._contents + t3;
      }
      ++i;
    } else {
      C.JSArray_methods.set$length(codepoints, 0);
      for (; ch === 37;) {
        ++i;
        if (i > t2)
          throw H.wrapException(new P.ArgumentError("Truncated URI"));
        codepoints.push(P.Uri__hexCharPairToByte(text, i));
        i += 2;
        if (i === t1)
          break;
        ch = C.JSString_methods.codeUnitAt$1(text, i);
      }
      t3 = new P.Utf8Decoder(allowMalformed).convert$1(codepoints);
      result._contents = result._contents + t3;
    }
  }
  return result._contents;
}}

},

Uri__makeScheme_isSchemeLowerCharacter: {"": "Closure;",
  call$1: function(ch) {
    var t1, t2;
    t1 = J.getInterceptor$n(ch);
    if (t1.$lt(ch, 128)) {
      t2 = t1.$shr(ch, 4);
      if (t2 < 0 || t2 >= 8)
        throw H.ioore(C.List_6Pr, t2);
      t1 = (C.List_6Pr[t2] & C.JSInt_methods.$shl(1, t1.$and(ch, 15))) >>> 0 !== 0;
    } else
      t1 = false;
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri__makeScheme_isSchemeCharacter: {"": "Closure;",
  call$1: function(ch) {
    var t1, t2;
    t1 = J.getInterceptor$n(ch);
    if (t1.$lt(ch, 128)) {
      t2 = t1.$shr(ch, 4);
      if (t2 < 0 || t2 >= 8)
        throw H.ioore(C.List_JYB, t2);
      t1 = (C.List_JYB[t2] & C.JSInt_methods.$shl(1, t1.$and(ch, 15))) >>> 0 !== 0;
    } else
      t1 = false;
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri__makePath_closure: {"": "Closure;",
  call$1: function(s) {
    return P.Uri__uriEncode(C.List_qg4, s, false);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri__makeQuery_closure: {"": "Closure;box_0,result_1",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1("&");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(P.Uri__uriEncode(C.List_nxB, key, true));
    if (value != null && J.get$isEmpty$asx(value) !== true) {
      t1.write$1("=");
      t1.write$1(P.Uri__uriEncode(C.List_nxB, value, true));
    }
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Uri__normalize_isNormalizedHexDigit: {"": "Closure;",
  call$1: function(digit) {
    var t1;
    if (typeof digit !== "number")
      throw H.iae(digit);
    if (!(48 <= digit && digit <= 57))
      t1 = 65 <= digit && digit <= 70;
    else
      t1 = true;
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri__normalize_isLowerCaseHexDigit: {"": "Closure;",
  call$1: function(digit) {
    if (typeof digit !== "number")
      throw H.iae(digit);
    return 97 <= digit && digit <= 102;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri__normalize_isUnreserved: {"": "Closure;",
  call$1: function(ch) {
    var t1, t2;
    t1 = J.getInterceptor$n(ch);
    if (t1.$lt(ch, 128)) {
      t2 = t1.$shr(ch, 4);
      if (t2 < 0 || t2 >= 8)
        throw H.ioore(C.List_nxB, t2);
      t1 = (C.List_nxB[t2] & C.JSInt_methods.$shl(1, t1.$and(ch, 15))) >>> 0 !== 0;
    } else
      t1 = false;
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri__normalize_normalizeHexDigit: {"": "Closure;component_1,isNormalizedHexDigit_2,isLowerCaseHexDigit_3",
  call$1: function(index) {
    var t1, codeUnit;
    t1 = this.component_1;
    codeUnit = J.codeUnitAt$1$s(t1, index);
    if (this.isLowerCaseHexDigit_3.call$1(codeUnit) === true)
      return codeUnit - 32;
    else if (this.isNormalizedHexDigit_2.call$1(codeUnit) !== true)
      throw H.wrapException(new P.ArgumentError("Invalid URI component: " + H.S(t1)));
    else
      return codeUnit;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri__normalize_decodeHexDigitPair: {"": "Closure;component_4",
  call$1: function(index) {
    var t1, t2, t3, $byte, i, codeUnit;
    for (t1 = this.component_4, t2 = J.getInterceptor$ns(index), t3 = J.getInterceptor$s(t1), $byte = 0, i = 0; i < 2; ++i) {
      codeUnit = t3.codeUnitAt$1(t1, t2.$add(index, i));
      if (48 <= codeUnit && codeUnit <= 57)
        $byte = $byte * 16 + codeUnit - 48;
      else {
        codeUnit = (codeUnit | 32) >>> 0;
        if (97 <= codeUnit && codeUnit <= 102)
          $byte = $byte * 16 + codeUnit - 97 + 10;
        else
          throw H.wrapException(new P.ArgumentError("Invalid percent-encoding in URI component: " + H.S(t1)));
      }
    }
    return $byte;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri__normalize_fillResult: {"": "Closure;box_0,component_5",
  call$0: function() {
    var t1, t2, t3, t4, t5;
    t1 = this.box_0;
    t2 = t1.result_0;
    t3 = t1.prevIndex_2;
    t4 = this.component_5;
    t5 = t1.index_1;
    if (t2 == null)
      t1.result_0 = P.StringBuffer$(J.substring$2$s(t4, t3, t5));
    else
      t2.write$1(J.substring$2$s(t4, t3, t5));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Uri_hashCode_combine: {"": "Closure;",
  call$2: function(part, current) {
    return J.$and$n(J.$add$ns(J.$mul$n(current, 31), J.get$hashCode$(part)), 1073741823);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Uri_parseIPv4Address_error: {"": "Closure;",
  call$1: function(msg) {
    throw H.wrapException(P.FormatException$("Illegal IPv4 address, " + H.S(msg)));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri_parseIPv4Address_closure: {"": "Closure;error_0",
  call$1: function(byteString) {
    var $byte, t1;
    $byte = H.Primitives_parseInt(byteString, null, null);
    t1 = J.getInterceptor$n($byte);
    if (t1.$lt($byte, 0) || t1.$gt($byte, 255))
      this.error_0.call$1("each part must be in the range of `0..255`");
    return $byte;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri_parseIPv6Address_error: {"": "Closure;",
  call$1: function(msg) {
    throw H.wrapException(P.FormatException$("Illegal IPv6 address, " + H.S(msg)));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri_parseIPv6Address_parseHex: {"": "Closure;host_0,error_1",
  call$2: function(start, end) {
    var value, t1;
    if (J.$gt$n(J.$sub$n(end, start), 4))
      this.error_1.call$1("an IPv6 part can only contain a maximum of 4 hex digits");
    value = H.Primitives_parseInt(J.substring$2$s(this.host_0, start, end), 16, null);
    t1 = J.getInterceptor$n(value);
    if (t1.$lt(value, 0) || t1.$gt(value, 65535))
      this.error_1.call$1("each part must be in the range of `0x0..0xFFFF`");
    return value;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Uri_parseIPv6Address_closure: {"": "Closure;parts_2",
  call$1: function(value) {
    var t1 = J.getInterceptor(value);
    if (t1.$eq(value, -1) === true)
      return P.List_List$filled((9 - this.parts_2.length) * 2, 0, null);
    else
      return [t1.$shr(value, 8) & 255, t1.$and(value, 255)];
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Uri__uriEncode_byteToHex: {"": "Closure;",
  call$1: function(v) {
    var t1, t2;
    t1 = J.getInterceptor$n(v);
    t2 = t1.$shr(v, 4);
    if (t2 < 0 || t2 >= 16)
      throw H.ioore("0123456789ABCDEF", t2);
    t2 = "%" + "0123456789ABCDEF"[t2];
    t1 = t1.$and(v, 15);
    if (t1 < 0 || t1 >= 16)
      throw H.ioore("0123456789ABCDEF", t1);
    return t2 + "0123456789ABCDEF"[t1];
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["dart.dom.html", "dart:html", , W, {
window: function() {
  return window;
  "60";
},

"+window": 1,

AnchorElement_AnchorElement: function(href) {
  var e = document.createElement("a", null);
  return e;
},

Element_Element$html: function(html, treeSanitizer, validator) {
  var fragment, t1;
  fragment = J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator);
  fragment.toString;
  t1 = new W._ChildNodeListLazy(fragment);
  t1 = t1.where$1(t1, new W.Element_Element$html_closure());
  return t1.get$single(t1);
},

Element__determineTransitionEventType: function(e) {
  if (P.Device_isWebKit() === true)
    return "webkitTransitionEnd";
  else if (P.Device_isOpera() === true)
    return "oTransitionEnd";
  return "transitionend";
},

_ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
  return document.createElement(tag);
},

HttpRequest_getString: function(url, onProgress, withCredentials) {
  return W.HttpRequest_request(url, null, null, onProgress, null, null, null, withCredentials).then$1(new W.HttpRequest_getString_closure());
},

HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
  var t1, completer, xhr, t2;
  t1 = W.HttpRequest;
  completer = new P._AsyncCompleter(P._Future$(t1));
  H.setRuntimeTypeInfo(completer, [t1]);
  xhr = new XMLHttpRequest();
  C.HttpRequest_methods.open$3$async(xhr, "GET", url, true);
  t1 = C.EventStreamProvider_load.forTarget$1(xhr);
  t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new W.HttpRequest_request_closure(completer, xhr)), t1._useCapture);
  H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
  t2._tryResume$0();
  t2 = C.EventStreamProvider_error.forTarget$1(xhr);
  t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(completer.get$completeError()), t2._useCapture);
  H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(t2, 0)]);
  t1._tryResume$0();
  xhr.send();
  return completer.future;
},

InputElement_InputElement: function(type) {
  var e, exception;
  e = document.createElement("input", null);
  if (type != null)
    try {
      J.set$type$x(e, type);
    } catch (exception) {
      H.unwrapException(exception);
    }

  return e;
},

MouseEvent_MouseEvent: function(type, altKey, button, canBubble, cancelable, clientX, clientY, ctrlKey, detail, metaKey, relatedTarget, screenX, screenY, shiftKey, view) {
  var $event = document.createEvent("MouseEvent");
  J._initMouseEvent$15$x($event, type, canBubble, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, relatedTarget);
  return $event;
},

Window__isDartLocation: function(thing) {
  var t1, t2, exception;
  try {
    t1 = thing;
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isLocation;
  } catch (exception) {
    H.unwrapException(exception);
    return false;
  }

},

_convertNativeToDart_Window: function(win) {
  if (win == null)
    return;
  return W._DOMWindowCrossFrame__createSafe(win);
},

_convertNativeToDart_EventTarget: function(e) {
  var $window, t1;
  if (e == null)
    return;
  if ("setInterval" in e) {
    $window = W._DOMWindowCrossFrame__createSafe(e);
    t1 = J.getInterceptor($window);
    if (typeof $window === "object" && $window !== null && !!t1.$isEventTarget)
      return $window;
    return;
  } else
    return e;
},

_convertDartToNative_EventTarget: function(e) {
  return e;
},

_callConstructor: function($constructor, interceptor) {
  return new W._callConstructor_closure($constructor, interceptor);
},

_callEnteredView: function(receiver) {
  return J.enteredView$0$x(receiver);
},

_callLeftView: function(receiver) {
  return J.leftView$0$x(receiver);
},

_callAttributeChanged: function(receiver, $name, oldValue, newValue) {
  return J.attributeChanged$3$x(receiver, $name, oldValue, newValue);
},

_registerCustomElement: function(context, $document, tag, type, extendsTagName) {
  var interceptorClass, interceptor, $constructor, baseClassName, t1, baseConstructor, properties, proto, t2, options;
  interceptorClass = J.findInterceptorConstructorForType(type);
  if (interceptorClass == null)
    throw H.wrapException(new P.ArgumentError(type));
  interceptor = interceptorClass.prototype;
  $constructor = J.findConstructorForNativeSubclassType(type, "created");
  if ($constructor == null)
    throw H.wrapException(new P.ArgumentError(H.S(type) + " has no constructor called 'created'"));
  J.getNativeInterceptor(W._ElementFactoryProvider_createElement_tag("article", null));
  baseClassName = interceptorClass.$nativeSuperclassTag;
  if (baseClassName == null)
    throw H.wrapException(new P.ArgumentError(type));
  t1 = extendsTagName == null;
  if (t1) {
    if (J.$eq(baseClassName, "HTMLElement") !== true)
      throw H.wrapException(P.UnsupportedError$("Class must provide extendsTag if base native class is not HTMLElement"));
  } else if (!($document.createElement(extendsTagName) instanceof window[baseClassName]))
    throw H.wrapException(P.UnsupportedError$("extendsTag does not match base native class"));
  baseConstructor = context[baseClassName];
  properties = {};
  properties.createdCallback = {value: ((function(invokeCallback) {
             return function() {
               return invokeCallback(this);
             };
          })(H.convertDartClosureToJS(W._callConstructor($constructor, interceptor), 1)))};
  properties.enteredViewCallback = {value: ((function(invokeCallback) {
             return function() {
               return invokeCallback(this);
             };
          })(H.convertDartClosureToJS(W._callEnteredView$closure, 1)))};
  properties.leftViewCallback = {value: ((function(invokeCallback) {
             return function() {
               return invokeCallback(this);
             };
          })(H.convertDartClosureToJS(W._callLeftView$closure, 1)))};
  properties.attributeChangedCallback = {value: ((function(invokeCallback) {
             return function(arg1, arg2, arg3) {
               return invokeCallback(this, arg1, arg2, arg3);
             };
          })(H.convertDartClosureToJS(W._callAttributeChanged$closure, 4)))};
  proto = Object.create(baseConstructor.prototype, properties);
  t2 = H.makeLeafDispatchRecord(interceptor);
  Object.defineProperty(proto, init.dispatchPropertyName, {value: t2, enumerable: false, writable: true, configurable: true});
  options = {prototype: proto};
  if (J.$eq(baseClassName, "HTMLElement") !== true)
    if (!t1)
      options.extends = extendsTagName;
  $document.register(tag, options);
},

_wrapZone: function(callback) {
  if (J.$eq($.Zone__current, C.C__RootZone) === true)
    return callback;
  return $.Zone__current.bindUnaryCallback$2$runGuarded(callback, true);
},

HtmlElement: {"": "Element;", "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseFontElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLOptGroupElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement;HtmlElement_Polymer|HtmlElement_Polymer_ChangeNotifier|PolymerElement|DartdocElement|AnnotationElement|CategoryElement|MemberElement|ClassElement|HomeElement|IndexElement|ItemElement|LibraryElement|LibraryPanel|MemberElement_ChangeNotifier|InheritedElement|MethodElement|DartdocMethod|MethodPanel|MinimapElementClass|MinimapElement|MinimapElementLibrary|DartdocElement_ChangeNotifier|PageElement|ParameterElement|PolymerDeclaration|DartdocElement_ChangeNotifier0|Search|TypedefElement|VariableElement|VariableHeading"},

_EntryArray: {"": "Interceptor;", $isList: true,
  $asList: function() {
    return [W.Entry];
  },
  $isEfficientLength: true,
  $isIterable: true,
  $asIterable: function() {
    return [W.Entry];
  },
  "%": "EntryArray"
},

AnchorElement: {"": "HtmlElement;hash%,host=,hostname=,href%,pathname=,port=,protocol=,target=,type%",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "+toString:0:0": 0,
  $isAnchorElement: true,
  "%": ";HTMLAnchorElement;AnchorElement_Polymer|AnchorElement_Polymer_ChangeNotifier|Result"
},

AreaElement: {"": "HtmlElement;hash=,host=,hostname=,href%,pathname=,port=,protocol=,target=", "%": "HTMLAreaElement"},

BaseElement: {"": "HtmlElement;href%,target=", "%": "HTMLBaseElement"},

BeforeLoadEvent: {"": "Event;url=", "%": "BeforeLoadEvent"},

Blob: {"": "Interceptor;type=", $isBlob: true, "%": ";Blob"},

BodyElement: {"": "HtmlElement;", $isBodyElement: true, "%": "HTMLBodyElement"},

ButtonElement: {"": "HtmlElement;form=,name%,type%,value%", "%": "HTMLButtonElement"},

CharacterData: {"": "Node;length=", $isInterceptor: true, "%": "Comment;CharacterData"},

CssStyleDeclaration: {"": "Interceptor_CssStyleDeclarationBase;length=",
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = receiver.getPropertyValue(propertyName);
    return propValue != null ? propValue : "";
  },
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      H.unwrapException(exception);
    }

  },
  setProperty$2: function($receiver, propertyName, value) {
    return this.setProperty$3($receiver, propertyName, value, null);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  "+item:1:0": 0,
  get$item: function(_receiver) {
    return new W.BoundClosure$i1(this, W.CssStyleDeclaration.prototype.item$1, _receiver, "item$1");
  },
  "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
},

CustomEvent: {"": "Event;",
  get$detail: function(receiver) {
    var t1 = receiver._dartDetail;
    if (t1 != null)
      return t1;
    return P.convertNativeToDart_AcceptStructuredClone(receiver.detail, true);
  },
  $isCustomEvent: true,
  "%": "CustomEvent"
},

Document: {"": "Node;",
  createDocumentFragment$0: function(receiver) {
    return receiver.createDocumentFragment();
  },
  getElementById$1: function(receiver, elementId) {
    return receiver.getElementById(elementId);
  },
  querySelector$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  get$onChange: function(receiver) {
    return C.EventStreamProvider_change.forTarget$1(receiver);
  },
  get$onClick: function(receiver) {
    return C.EventStreamProvider_click.forTarget$1(receiver);
  },
  get$onInput: function(receiver) {
    return C.EventStreamProvider_input.forTarget$1(receiver);
  },
  querySelectorAll$1: function(receiver, selectors) {
    return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
  },
  query$1: function(receiver, relativeSelectors) {
    return receiver.querySelector(relativeSelectors);
  },
  "+query:1:0": 0,
  queryAll$1: function(receiver, relativeSelectors) {
    return W._FrozenElementList$_wrap(receiver.querySelectorAll(relativeSelectors), null);
  },
  $isDocument: true,
  "%": "SVGDocument;Document"
},

DocumentFragment: {"": "Node;",
  get$children: function(receiver) {
    var t1;
    if (receiver._children == null) {
      t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
      H.setRuntimeTypeInfo(t1, [null]);
      receiver._children = t1;
    }
    return receiver._children;
  },
  querySelectorAll$1: function(receiver, selectors) {
    return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
  },
  query$1: function(receiver, relativeSelectors) {
    return receiver.querySelector(relativeSelectors);
  },
  "+query:1:0": 0,
  queryAll$1: function(receiver, relativeSelectors) {
    return W._FrozenElementList$_wrap(receiver.querySelectorAll(relativeSelectors), null);
  },
  querySelector$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  $isInterceptor: true,
  "%": ";DocumentFragment"
},

DocumentType: {"": "Node;", $isInterceptor: true, "%": "DocumentType"},

DomError: {"": "Interceptor;message=,name=", "%": "DOMError|FileError"},

DomException: {"": "Interceptor;message=",
  get$name: function(receiver) {
    var errorName = receiver.name;
    if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
      return "SecurityError";
    if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
      return "SyntaxError";
    return errorName;
  },
  "+name": 0,
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "+toString:0:0": 0,
  "%": "DOMException"
},

Element: {"": "Node;title=,className%,id=,tagName=",
  get$attributes: function(receiver) {
    return new W._ElementAttributeMap(receiver);
  },
  get$children: function(receiver) {
    return new W._ChildrenElementList(receiver, receiver.children);
  },
  querySelectorAll$1: function(receiver, selectors) {
    return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
  },
  query$1: function(receiver, relativeSelectors) {
    return receiver.querySelector(relativeSelectors);
  },
  "+query:1:0": 0,
  queryAll$1: function(receiver, relativeSelectors) {
    return W._FrozenElementList$_wrap(receiver.querySelectorAll(relativeSelectors), null);
  },
  get$classes: function(receiver) {
    return new W._ElementCssClassSet(receiver);
  },
  "+classes": 0,
  set$classes: function(receiver, value) {
    var classSet, t1;
    classSet = this.get$classes(receiver);
    t1 = J.getInterceptor$ax(classSet);
    t1.clear$0(classSet);
    t1.addAll$1(classSet, value);
  },
  "+classes=": 0,
  get$dataset: function(receiver) {
    return new W._DataAttributeMap(new W._ElementAttributeMap(receiver));
  },
  enteredView$0: function(receiver) {
  },
  "+enteredView:0:0": 0,
  leftView$0: function(receiver) {
  },
  attributeChanged$3: function(receiver, $name, oldValue, newValue) {
  },
  get$localName: function(receiver) {
    return receiver.localName;
  },
  toString$0: function(receiver) {
    return receiver.localName;
  },
  "+toString:0:0": 0,
  scrollIntoView$1: function(receiver, alignment) {
    var hasScrollIntoViewIfNeeded = !!receiver.scrollIntoViewIfNeeded;
    if (alignment === C.ScrollAlignment_TOP)
      receiver.scrollIntoView(true);
    else if (alignment === C.ScrollAlignment_BOTTOM)
      receiver.scrollIntoView(false);
    else if (hasScrollIntoViewIfNeeded)
      if (alignment === C.ScrollAlignment_CENTER)
        receiver.scrollIntoViewIfNeeded(true);
      else
        receiver.scrollIntoViewIfNeeded();
    else
      receiver.scrollIntoView();
  },
  insertAdjacentText$2: function(receiver, where, text) {
    if (!!receiver.insertAdjacentText)
      receiver.insertAdjacentText(where, text);
    else
      this._insertAdjacentNode$2(receiver, where, document.createTextNode(text));
  },
  _insertAdjacentNode$2: function(receiver, where, node) {
    var t1, first;
    switch (where.toLowerCase()) {
      case "beforebegin":
        receiver.parentNode.insertBefore(node, receiver);
        break;
      case "afterbegin":
        if (receiver.childNodes.length > 0) {
          t1 = receiver.childNodes;
          if (0 >= t1.length)
            throw H.ioore(t1, 0);
          first = t1[0];
        } else
          first = null;
        receiver.insertBefore(node, first);
        break;
      case "beforeend":
        receiver.appendChild(node);
        break;
      case "afterend":
        receiver.parentNode.insertBefore(node, receiver.nextSibling);
        break;
      default:
        throw H.wrapException(new P.ArgumentError("Invalid position " + where));
    }
  },
  matches$1: function(receiver, selectors) {
    if (!!receiver.matches)
      return receiver.matches(selectors);
    else if (!!receiver.webkitMatchesSelector)
      return receiver.webkitMatchesSelector(selectors);
    else if (!!receiver.mozMatchesSelector)
      return receiver.mozMatchesSelector(selectors);
    else if (!!receiver.msMatchesSelector)
      return receiver.msMatchesSelector(selectors);
    else if (!!receiver.oMatchesSelector)
      return receiver.oMatchesSelector(selectors);
    else
      throw H.wrapException(P.UnsupportedError$("Not supported on this platform"));
  },
  matchesWithAncestors$1: function(receiver, selectors) {
    var elem = receiver;
    do {
      if (J.matches$1$x(elem, selectors))
        return true;
      elem = elem.parentElement;
    } while (elem != null);
    return false;
  },
  createShadowRoot$0: function(receiver) {
    return (receiver.createShadowRoot || receiver.webkitCreateShadowRoot).call(receiver);
  },
  get$shadowRoot: function(receiver) {
    return receiver.shadowRoot || receiver.webkitShadowRoot;
  },
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var t1, base, contextElement, fragment;
    if (treeSanitizer == null) {
      if (validator == null) {
        if ($.Element__defaultValidator == null) {
          t1 = [];
          H.setRuntimeTypeInfo(t1, [W.NodeValidator]);
          t1.push(W._Html5NodeValidator$(null));
          t1.push(W._TemplatingNodeValidator$());
          $.Element__defaultValidator = new W.NodeValidatorBuilder(t1);
        }
        validator = $.Element__defaultValidator;
      }
      t1 = $.Element__defaultSanitizer;
      if (t1 == null)
        $.Element__defaultSanitizer = new W._ValidatingTreeSanitizer(validator);
      else
        t1.validator = validator;
      treeSanitizer = $.Element__defaultSanitizer;
    } else if (validator != null)
      throw H.wrapException(new P.ArgumentError("validator can only be passed if treeSanitizer is null"));
    if ($.Element__parseDocument == null) {
      $.Element__parseDocument = document.implementation.createHTMLDocument("");
      $.Element__parseRange = $.Element__parseDocument.createRange();
      base = $.Element__parseDocument.createElement("base", null);
      J.set$href$x(base, document.baseURI);
      $.Element__parseDocument.head.appendChild(base);
    }
    t1 = $.Element__parseDocument;
    if (!!this.$isBodyElement)
      contextElement = t1.body;
    else {
      contextElement = t1.createElement(receiver.tagName, null);
      $.Element__parseDocument.body.appendChild(contextElement);
    }
    if ("createContextualFragment" in window.Range.prototype) {
      $.Element__parseRange.selectNodeContents(contextElement);
      fragment = $.Element__parseRange.createContextualFragment(html);
    } else {
      contextElement.innerHTML = html;
      fragment = $.Element__parseDocument.createDocumentFragment();
      for (; t1 = contextElement.firstChild, t1 != null;)
        fragment.appendChild(t1);
    }
    t1 = $.Element__parseDocument.body;
    if (contextElement == null ? t1 != null : contextElement !== t1)
      J.remove$0$ax(contextElement);
    treeSanitizer.sanitizeTree$1(fragment);
    document.adoptNode(fragment);
    return fragment;
  },
  createFragment$2$validator: function($receiver, html, validator) {
    return this.createFragment$3$treeSanitizer$validator($receiver, html, null, validator);
  },
  createFragment$1: function($receiver, html) {
    return this.createFragment$3$treeSanitizer$validator($receiver, html, null, null);
  },
  createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
    return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
  },
  get$on: function(receiver) {
    return new W.ElementEvents(receiver, receiver);
  },
  focus$0: function(receiver) {
    return receiver.focus();
  },
  querySelector$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  get$onChange: function(receiver) {
    return C.EventStreamProvider_change.forElement$1(receiver);
  },
  get$onClick: function(receiver) {
    return C.EventStreamProvider_click.forElement$1(receiver);
  },
  get$onInput: function(receiver) {
    return C.EventStreamProvider_input.forElement$1(receiver);
  },
  Element$created$0: function(receiver) {
  },
  $isElement: true,
  $isInterceptor: true,
  "%": ";Element"
},

EmbedElement: {"": "HtmlElement;name%,src=,type%", "%": "HTMLEmbedElement"},

ErrorEvent: {"": "Event;error=,message=", "%": "ErrorEvent"},

Event: {"": "Interceptor;_selector},bubbles=,path=,timeStamp=,type=",
  get$target: function(receiver) {
    return W._convertNativeToDart_EventTarget(receiver.target);
  },
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  },
  $isEvent: true,
  "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SecurityPolicyViolationEvent|TrackEvent|WebGLContextEvent|WebKitAnimationEvent;Event"
},

EventTarget: {"": "Interceptor;",
  get$on: function(receiver) {
    return new W.Events(receiver);
  },
  addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  $isEventTarget: true,
  "%": ";EventTarget"
},

FieldSetElement: {"": "HtmlElement;form=,name%,type=", "%": "HTMLFieldSetElement"},

File: {"": "Blob;name=", "%": "File"},

FormElement: {"": "HtmlElement;length=,method=,name%,target=", "%": "HTMLFormElement"},

History: {"": "Interceptor;length=", "%": "History"},

HtmlCollection: {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  "+item:1:0": 0,
  get$item: function(_receiver) {
    return new W.BoundClosure$i1(this, W.HtmlCollection.prototype.item$1, _receiver, "item$1");
  },
  $asList: function() {
    return [W.Node];
  },
  $asIterable: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
},

HtmlDocument: {"": "Document;",
  get$title: function(receiver) {
    return receiver.title;
  },
  "+title": 0,
  "%": "HTMLDocument"
},

HttpRequest: {"": "HttpRequestEventTarget;responseText=",
  open$5$async$password$user: function(receiver, method, url, async, password, user) {
    return receiver.open(method, url, async, user, password);
  },
  open$3$async: function($receiver, method, url, async) {
    return $receiver.open(method, url, async);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  $isHttpRequest: true,
  "%": "XMLHttpRequest"
},

HttpRequestEventTarget: {"": "EventTarget;", "%": ";XMLHttpRequestEventTarget"},

IFrameElement: {"": "HtmlElement;name%,src=", "%": "HTMLIFrameElement"},

ImageData: {"": "Interceptor;", $isImageData: true, "%": "ImageData"},

ImageElement: {"": "HtmlElement;src=",
  complete$0: function($receiver) {
    return this.complete.call$0();
  },
  "%": "HTMLImageElement"
},

InputElement: {"": "HtmlElement;checked%,defaultValue%,form=,name%,required=,src=,type%,value%",
  accept$1: function($receiver, arg0) {
    return this.accept.call$1(arg0);
  },
  $isInputElement: true,
  $isElement: true,
  $isInterceptor: true,
  $isNode: true,
  $isEventTarget: true,
  "%": "HTMLInputElement"
},

KeyboardEvent: {"": "UIEvent;ctrlKey=,location=",
  get$keyCode: function(receiver) {
    return receiver.keyCode;
  },
  $isKeyboardEvent: true,
  "%": "KeyboardEvent"
},

KeygenElement: {"": "HtmlElement;form=,name%,type=", "%": "HTMLKeygenElement"},

LIElement: {"": "HtmlElement;value%", "%": "HTMLLIElement"},

LabelElement: {"": "HtmlElement;form=", "%": "HTMLLabelElement"},

LegendElement: {"": "HtmlElement;form=", "%": "HTMLLegendElement"},

LinkElement: {"": "HtmlElement;href%,type%", $isLinkElement: true, "%": "HTMLLinkElement"},

Location: {"": "Interceptor;hash%,host=,hostname=,href%,pathname=,port=,protocol=",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "+toString:0:0": 0,
  $isLocation: true,
  "%": "Location"
},

MapElement: {"": "HtmlElement;name%", "%": "HTMLMapElement"},

MediaElement: {"": "HtmlElement;error=,src=",
  load$0: function(receiver) {
    return receiver.load();
  },
  "+load:0:0": 0,
  pause$0: function(receiver) {
    return receiver.pause();
  },
  "%": "HTMLAudioElement|HTMLMediaElement|HTMLVideoElement"
},

MediaKeyEvent: {"": "Event;message=", "%": "MediaKeyEvent"},

MediaKeyMessageEvent: {"": "Event;message=", "%": "MediaKeyMessageEvent"},

MediaStream: {"": "EventTarget;id=", "%": "MediaStream"},

MetaElement: {"": "HtmlElement;content%,name%", "%": "HTMLMetaElement"},

MeterElement: {"": "HtmlElement;value%", "%": "HTMLMeterElement"},

MidiConnectionEvent: {"": "Event;port=", "%": "MIDIConnectionEvent"},

MidiOutput: {"": "MidiPort;",
  send$2: function(receiver, data, timestamp) {
    return receiver.send(data, timestamp);
  },
  send$1: function($receiver, data) {
    return $receiver.send(data);
  },
  "%": "MIDIOutput"
},

MidiPort: {"": "EventTarget;id=,name=,type=", "%": "MIDIInput;MIDIPort"},

MouseEvent: {"": "UIEvent;ctrlKey=",
  _initMouseEvent$15: function(receiver, type, canBubble, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, relatedTarget) {
    receiver.initMouseEvent(type, canBubble, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, W._convertDartToNative_EventTarget(relatedTarget));
    return;
  },
  $isMouseEvent: true,
  "%": "DragEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|WheelEvent"
},

Navigator: {"": "Interceptor;", $isInterceptor: true, "%": "Navigator"},

NavigatorUserMediaError: {"": "Interceptor;message=,name=", "%": "NavigatorUserMediaError"},

Node: {"": "EventTarget;firstChild=,lastChild=,nextNode:nextSibling=,nodeType=,ownerDocument=,parent:parentElement=,parentNode=,text:textContent%",
  get$nodes: function(receiver) {
    return new W._ChildNodeListLazy(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      J._replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      H.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  "+toString:0:0": 0,
  append$1: function(receiver, newChild) {
    return receiver.appendChild(newChild);
  },
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  },
  contains$1: function(receiver, other) {
    return receiver.contains(other);
  },
  insertBefore$2: function(receiver, newChild, refChild) {
    return receiver.insertBefore(newChild, refChild);
  },
  _replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  },
  $isNode: true,
  "%": "Entity|Notation;Node"
},

NodeList: {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $asIterable: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "NodeList|RadioNodeList"
},

OListElement: {"": "HtmlElement;reversed=,type%", "%": "HTMLOListElement"},

ObjectElement: {"": "HtmlElement;form=,name%,type%", "%": "HTMLObjectElement"},

OptionElement: {"": "HtmlElement;form=,index=,value%", $isOptionElement: true, "%": "HTMLOptionElement"},

OutputElement: {"": "HtmlElement;defaultValue%,form=,name%,type=,value%", "%": "HTMLOutputElement"},

ParagraphElement: {"": "HtmlElement;", $isParagraphElement: true, "%": "HTMLParagraphElement"},

ParamElement: {"": "HtmlElement;name%,value%", "%": "HTMLParamElement"},

PositionError: {"": "Interceptor;message=", "%": "PositionError"},

ProcessingInstruction: {"": "CharacterData;target=", "%": "ProcessingInstruction"},

ProgressElement: {"": "HtmlElement;position=,value%", "%": "HTMLProgressElement"},

ProgressEvent: {"": "Event;", $isProgressEvent: true, "%": "XMLHttpRequestProgressEvent;ProgressEvent"},

Range: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "+toString:0:0": 0,
  "%": "Range"
},

ResourceProgressEvent: {"": "ProgressEvent;url=", "%": "ResourceProgressEvent"},

ScriptElement: {"": "HtmlElement;src=,type%", $isScriptElement: true, "%": "HTMLScriptElement"},

SelectElement: {"": "HtmlElement;form=,length%,name%,required=,selectedIndex%,type=,value%",
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  "+item:1:0": 0,
  get$item: function(_receiver) {
    return new W.BoundClosure$i1(this, W.SelectElement.prototype.item$1, _receiver, "item$1");
  },
  $isSelectElement: true,
  "%": "HTMLSelectElement"
},

ShadowRoot: {"": "DocumentFragment;applyAuthorStyles=",
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  },
  getElementById$1: function(receiver, elementId) {
    return receiver.getElementById(elementId);
  },
  $isShadowRoot: true,
  "%": "ShadowRoot"
},

SourceElement: {"": "HtmlElement;src=,type%", "%": "HTMLSourceElement"},

SpeechInputEvent: {"": "Event;results=", "%": "SpeechInputEvent"},

SpeechInputResult: {"": "Interceptor;", "%": "SpeechInputResult"},

SpeechRecognitionAlternative: {"": "Interceptor;", "%": "SpeechRecognitionAlternative"},

SpeechRecognitionError: {"": "Event;error=,message=", "%": "SpeechRecognitionError"},

SpeechRecognitionEvent: {"": "Event;results=", "%": "SpeechRecognitionEvent"},

SpeechRecognitionResult: {"": "Interceptor;isFinal=,length=",
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  "+item:1:0": 0,
  get$item: function(_receiver) {
    return new W.BoundClosure$i1(this, W.SpeechRecognitionResult.prototype.item$1, _receiver, "item$1");
  },
  "%": "SpeechRecognitionResult"
},

SpeechSynthesisEvent: {"": "Event;name=", "%": "SpeechSynthesisEvent"},

StorageEvent: {"": "Event;key=,newValue=,oldValue=,url=", "%": "StorageEvent"},

StyleElement: {"": "HtmlElement;type%", "%": "HTMLStyleElement"},

TableElement: {"": "HtmlElement;",
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var table, fragment, t1;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    table = W.Element_Element$html("<table>" + H.S(html) + "</table>", treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    t1.addAll$1(t1, J.get$nodes$x(table));
    return fragment;
  },
  createFragment$2$validator: function($receiver, html, validator) {
    return this.createFragment$3$treeSanitizer$validator($receiver, html, null, validator);
  },
  createFragment$1: function($receiver, html) {
    return this.createFragment$3$treeSanitizer$validator($receiver, html, null, null);
  },
  "%": "HTMLTableElement"
},

TableRowElement: {"": "HtmlElement;",
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment, t1, section, row;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
    t1.toString;
    t1 = new W._ChildNodeListLazy(t1);
    section = t1.get$single(t1);
    section.toString;
    t1 = new W._ChildNodeListLazy(section);
    row = t1.get$single(t1);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    row.toString;
    t1.addAll$1(t1, new W._ChildNodeListLazy(row));
    return fragment;
  },
  createFragment$2$validator: function($receiver, html, validator) {
    return this.createFragment$3$treeSanitizer$validator($receiver, html, null, validator);
  },
  createFragment$1: function($receiver, html) {
    return this.createFragment$3$treeSanitizer$validator($receiver, html, null, null);
  },
  "%": "HTMLTableRowElement"
},

TableSectionElement: {"": "HtmlElement;",
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment, t1, section;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
    t1.toString;
    t1 = new W._ChildNodeListLazy(t1);
    section = t1.get$single(t1);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    section.toString;
    t1.addAll$1(t1, new W._ChildNodeListLazy(section));
    return fragment;
  },
  createFragment$2$validator: function($receiver, html, validator) {
    return this.createFragment$3$treeSanitizer$validator($receiver, html, null, validator);
  },
  createFragment$1: function($receiver, html) {
    return this.createFragment$3$treeSanitizer$validator($receiver, html, null, null);
  },
  "%": "HTMLTableSectionElement"
},

TemplateElement: {"": "HtmlElement;content=", $isTemplateElement: true, "%": "HTMLTemplateElement"},

Text: {"": "CharacterData;", $isText: true, "%": "CDATASection|Text"},

TextAreaElement: {"": "HtmlElement;defaultValue%,form=,name%,required=,type=,value%", $isTextAreaElement: true, "%": "HTMLTextAreaElement"},

TouchEvent: {"": "UIEvent;ctrlKey=", "%": "TouchEvent"},

TrackElement: {"": "HtmlElement;defaultValue:default%,kind=,src=", "%": "HTMLTrackElement"},

TransitionEvent: {"": "Event;", $isTransitionEvent: true, "%": "TransitionEvent|WebKitTransitionEvent"},

UIEvent: {"": "Event;",
  get$page: function(receiver) {
    var t1 = new P.Point(receiver.pageX, receiver.pageY);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+page": 0,
  "%": "CompositionEvent|FocusEvent|SVGZoomEvent|TextEvent;UIEvent"
},

Window: {"": "EventTarget;name%",
  get$location: function(receiver) {
    var result = receiver.location;
    if (W.Window__isDartLocation(result) === true)
      return result;
    if (null == receiver._location_wrapper)
      receiver._location_wrapper = new W._LocationWrapper(result);
    return receiver._location_wrapper;
  },
  "+location": 0,
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  get$parent: function(receiver) {
    return W._convertNativeToDart_Window(receiver.parent);
  },
  close$0: function(receiver) {
    return receiver.close();
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "+toString:0:0": 0,
  get$onChange: function(receiver) {
    return C.EventStreamProvider_change.forTarget$1(receiver);
  },
  get$onClick: function(receiver) {
    return C.EventStreamProvider_click.forTarget$1(receiver);
  },
  get$onInput: function(receiver) {
    return C.EventStreamProvider_input.forTarget$1(receiver);
  },
  $isWindow: true,
  $isInterceptor: true,
  $isEventTarget: true,
  "%": "DOMWindow|Window"
},

_Attr: {"": "Node;name=,value%", "%": "Attr"},

_NamedNodeMap: {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  "+item:1:0": 0,
  get$item: function(_receiver) {
    return new W.BoundClosure$i1(this, W._NamedNodeMap.prototype.item$1, _receiver, "item$1");
  },
  $asList: function() {
    return [W.Node];
  },
  $asIterable: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "MozNamedAttrMap|NamedNodeMap"
},

_SpeechInputResultList: {"": "Interceptor_ListMixin_ImmutableListMixin2;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  "+item:1:0": 0,
  get$item: function(_receiver) {
    return new W.BoundClosure$i1(this, W._SpeechInputResultList.prototype.item$1, _receiver, "item$1");
  },
  $asList: function() {
    return [W.SpeechInputResult];
  },
  $asIterable: function() {
    return [W.SpeechInputResult];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "SpeechInputResultList"
},

_SpeechRecognitionResultList: {"": "Interceptor_ListMixin_ImmutableListMixin3;",
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  "+[]=:2:0": 0,
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  "+length=": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(new P.StateError("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  "+item:1:0": 0,
  get$item: function(_receiver) {
    return new W.BoundClosure$i1(this, W._SpeechRecognitionResultList.prototype.item$1, _receiver, "item$1");
  },
  $asList: function() {
    return [W.SpeechRecognitionResult];
  },
  $asIterable: function() {
    return [W.SpeechRecognitionResult];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "SpeechRecognitionResultList"
},

Console: {"": "Object;",
  error$1: function(_, arg) {
    return typeof console != "undefined" ? console.error(arg) : null;
  },
  get$error: function(_receiver) {
    return new W.BoundClosure$i1(this, W.Console.prototype.error$1, _receiver, "error$1");
  },
  info$1: function(arg) {
    return typeof console != "undefined" ? console.info(arg) : null;
  },
  timeStamp$1: function(_, arg) {
    return typeof console != "undefined" ? console.timeStamp(arg) : null;
  },
  get$timeStamp: function(_receiver) {
    return new W.BoundClosure$i1(this, W.Console.prototype.timeStamp$1, _receiver, "timeStamp$1");
  },
  static: {
"": "Console__safeConsole",
}

},

Interceptor_CssStyleDeclarationBase: {"": "Interceptor+CssStyleDeclarationBase;"},

CssStyleDeclarationBase: {"": "Object;",
  get$clear: function(receiver) {
    return this.getPropertyValue$1(receiver, "clear");
  },
  clear$0: function($receiver) {
    return this.get$clear($receiver).call$0();
  },
  get$content: function(receiver) {
    return this.getPropertyValue$1(receiver, "content");
  },
  "+content": 0,
  set$content: function(receiver, value) {
    this.setProperty$3(receiver, "content", value, "");
  },
  "+content=": 0,
  set$height: function(receiver, value) {
    this.setProperty$3(receiver, "height", value, "");
  },
  get$left: function(receiver) {
    return this.getPropertyValue$1(receiver, "left");
  },
  get$page: function(receiver) {
    return this.getPropertyValue$1(receiver, "page");
  },
  "+page": 0,
  get$position: function(receiver) {
    return this.getPropertyValue$1(receiver, "position");
  },
  "+position": 0,
  set$position: function(receiver, value) {
    this.setProperty$3(receiver, "position", value, "");
  },
  "+position=": 0,
  get$right: function(receiver) {
    return this.getPropertyValue$1(receiver, "right");
  },
  get$src: function(receiver) {
    return this.getPropertyValue$1(receiver, "src");
  }
},

_ChildrenElementList: {"": "ListBase;_element,_childElements",
  contains$1: function(_, element) {
    return J.contains$1$asx(this._childElements, element);
  },
  get$isEmpty: function(_) {
    return this._element.firstElementChild == null;
  },
  "+isEmpty": 0,
  get$length: function(_) {
    return this._childElements.length;
  },
  "+length": 0,
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    this._element.replaceChild(value, t1[index]);
  },
  "+[]=:2:0": 0,
  set$length: function(_, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
  },
  "+length=": 0,
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this.toList$0(this);
    t2 = new H.ListIterator(t1, t1.length, 0, null);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]);
    return t2;
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    t1 = J.getInterceptor(iterable);
    for (t1 = J.get$iterator$ax(typeof iterable === "object" && iterable !== null && !!t1.$is_ChildNodeListLazy ? P.List_List$from(iterable, true, null) : iterable), t2 = this._element; t1.moveNext$0();)
      t2.appendChild(t1.get$current());
  },
  sort$1: function(_, compare) {
    throw H.wrapException(P.UnsupportedError$("Cannot sort element lists"));
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnimplementedError$(null));
  },
  remove$1: function(_, object) {
    var t1 = J.getInterceptor(object);
    if (typeof object === "object" && object !== null && !!t1.$isElement) {
      t1 = this._element;
      if (object.parentNode === t1) {
        t1.removeChild(object);
        return true;
      }
    }
    return false;
  },
  insert$2: function(_, index, element) {
    var t1, t2, t3;
    if (index < 0 || index > this._childElements.length)
      throw H.wrapException(P.RangeError$range(index, 0, this._childElements.length));
    t1 = this._childElements;
    t2 = t1.length;
    t3 = this._element;
    if (index === t2)
      t3.appendChild(element);
    else {
      if (index < 0 || index >= t2)
        throw H.ioore(t1, index);
      t3.insertBefore(element, t1[index]);
    }
  },
  clear$0: function(_) {
    this._element.textContent = "";
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._element.removeChild(result);
    return result;
  },
  get$first: function(_) {
    var result = this._element.firstElementChild;
    if (result == null)
      throw H.wrapException(new P.StateError("No elements"));
    return result;
  },
  get$last: function(_) {
    var result = this._element.lastElementChild;
    if (result == null)
      throw H.wrapException(new P.StateError("No elements"));
    return result;
  },
  $asListBase: function() {
    return [W.Element];
  },
  $asList: function() {
    return [W.Element];
  },
  $asIterable: function() {
    return [W.Element];
  }
},

_FrozenElementList: {"": "ListBase;_nodeList,_elementList",
  get$length: function(_) {
    return this._nodeList.length;
  },
  "+length": 0,
  $index: function(_, index) {
    var t1 = this._nodeList;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(_, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
  },
  "+[]=:2:0": 0,
  set$length: function(_, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
  },
  "+length=": 0,
  sort$1: function(_, compare) {
    throw H.wrapException(P.UnsupportedError$("Cannot sort list"));
  },
  get$first: function(_) {
    return C.NodeList_methods.get$first(this._nodeList);
  },
  get$last: function(_) {
    return C.NodeList_methods.get$last(this._nodeList);
  },
  get$classes: function(_) {
    return W._MultiElementCssClassSet$(this._elementList);
  },
  "+classes": 0,
  set$classes: function(_, value) {
    H.IterableMixinWorkaround_forEach(this._elementList, new W._FrozenElementList_classes_closure(value));
  },
  "+classes=": 0,
  get$onChange: function(_) {
    return C.EventStreamProvider_change._forElementList$1(this);
  },
  get$onClick: function(_) {
    return C.EventStreamProvider_click._forElementList$1(this);
  },
  get$onInput: function(_) {
    return C.EventStreamProvider_input._forElementList$1(this);
  },
  _html$_FrozenElementList$_wrap$1: function(_nodeList, $T) {
    var t1 = C.NodeList_methods.where$1(this._nodeList, new W._FrozenElementList$_wrap_closure());
    this._elementList = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
  },
  $asListBase: null,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  static: {
_FrozenElementList$_wrap: function(_nodeList, $T) {
  var t1 = new W._FrozenElementList(_nodeList, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._html$_FrozenElementList$_wrap$1(_nodeList, $T);
  return t1;
}}

},

_FrozenElementList$_wrap_closure: {"": "Closure;",
  call$1: function(e) {
    var t1 = J.getInterceptor(e);
    return typeof e === "object" && e !== null && !!t1.$isElement;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_FrozenElementList_classes_closure: {"": "Closure;value_0",
  call$1: function(e) {
    var t1 = this.value_0;
    J.set$classes$x(e, t1);
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Element_Element$html_closure: {"": "Closure;",
  call$1: function(e) {
    var t1 = J.getInterceptor(e);
    return typeof e === "object" && e !== null && !!t1.$isElement;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

ScrollAlignment: {"": "Object;_html$_value",
  toString$0: function(_) {
    return "ScrollAlignment." + this._html$_value;
  },
  "+toString:0:0": 0,
  static: {
"": "ScrollAlignment_TOP0,ScrollAlignment_CENTER0,ScrollAlignment_BOTTOM0",
}

},

Entry: {"": "Interceptor;"},

Events: {"": "Object;_ptr<",
  $index: function(_, type) {
    var t1 = new W._EventStream(this.get$_ptr(), type, false);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  "+[]:1:0": 0
},

ElementEvents: {"": "Events;_ptr<,html$Events$_ptr",
  $index: function(_, type) {
    var t1, t2;
    t1 = J.getInterceptor$s(type);
    if ($.get$ElementEvents_webkitEvents().get$keys()._collection$_map.containsKey$1(t1.toLowerCase$0(type))) {
      if ($.Device__isWebKit == null) {
        if ($.Device__isOpera == null) {
          t2 = window.navigator.userAgent;
          t2.toString;
          t2.length;
          $.Device__isOpera = H.stringContainsUnchecked(t2, "Opera", 0);
        }
        if ($.Device__isOpera !== true) {
          t2 = window.navigator.userAgent;
          t2.toString;
          t2.length;
          t2 = H.stringContainsUnchecked(t2, "WebKit", 0);
        } else
          t2 = false;
        $.Device__isWebKit = t2;
      }
      if ($.Device__isWebKit === true) {
        t2 = $.get$ElementEvents_webkitEvents();
        t1 = new W._ElementEventStreamImpl(this._ptr, t2.$index(t2, t1.toLowerCase$0(type)), false);
        t1.$builtinTypeInfo = [null];
        return t1;
      }
    }
    t1 = new W._ElementEventStreamImpl(this._ptr, type, false);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  "+[]:1:0": 0,
  static: {
"": "ElementEvents_webkitEvents",
}

},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

HttpRequest_getString_closure: {"": "Closure;",
  call$1: function(xhr) {
    return J.get$responseText$x(xhr);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

HttpRequest_request_closure0: {"": "Closure;xhr_0",
  call$2: function(header, value) {
    this.xhr_0.setRequestHeader(header, value);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

HttpRequest_request_closure: {"": "Closure;completer_1,xhr_2",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.xhr_2;
    t2 = t1.status;
    if (typeof t2 !== "number")
      throw t2.$ge();
    t2 = t2 >= 200 && t2 < 300 || t2 === 0 || t2 === 304;
    t3 = this.completer_1;
    if (t2) {
      t2 = t3.future;
      if (t2._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t2._asyncComplete$1(t1);
    } else
      t3.completeError$1(e);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_ChildNodeListLazy: {"": "ListBase;_this",
  get$first: function(_) {
    var result = this._this.firstChild;
    if (result == null)
      throw H.wrapException(new P.StateError("No elements"));
    return result;
  },
  get$last: function(_) {
    var result = this._this.lastChild;
    if (result == null)
      throw H.wrapException(new P.StateError("No elements"));
    return result;
  },
  get$single: function(_) {
    var t1, l;
    t1 = this._this;
    l = t1.childNodes.length;
    if (l === 0)
      throw H.wrapException(new P.StateError("No elements"));
    if (l > 1)
      throw H.wrapException(new P.StateError("More than one element"));
    return t1.firstChild;
  },
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2, len, i;
    t1 = J.getInterceptor$ax(iterable);
    if (typeof iterable === "object" && iterable !== null && !!t1.$is_ChildNodeListLazy) {
      t1 = iterable._this;
      t2 = this._this;
      if (t1 !== t2)
        for (len = t1.childNodes.length, i = 0; i < len; ++i)
          t2.appendChild(t1.firstChild);
      return;
    }
    for (t1 = t1.get$iterator(iterable), t2 = this._this; t1.moveNext$0();)
      t2.appendChild(t1.get$current());
  },
  insert$2: function(_, index, node) {
    var t1, t2, t3;
    if (index < 0 || index > this._this.childNodes.length)
      throw H.wrapException(P.RangeError$range(index, 0, this._this.childNodes.length));
    t1 = this._this;
    t2 = t1.childNodes;
    t3 = t2.length;
    if (index === t3)
      t1.appendChild(node);
    else {
      if (index < 0 || index >= t3)
        throw H.ioore(t2, index);
      t1.insertBefore(node, t2[index]);
    }
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._this.removeChild(result);
    return result;
  },
  remove$1: function(_, object) {
    var t1 = J.getInterceptor(object);
    if (typeof object !== "object" || object === null || !t1.$isNode)
      return false;
    t1 = this._this;
    if (t1 !== object.parentNode)
      return false;
    t1.removeChild(object);
    return true;
  },
  clear$0: function(_) {
    this._this.textContent = "";
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw H.ioore(t2, index);
    t1.replaceChild(value, t2[index]);
  },
  "+[]=:2:0": 0,
  get$iterator: function(_) {
    return C.NodeList_methods.get$iterator(this._this.childNodes);
  },
  sort$1: function(_, compare) {
    throw H.wrapException(P.UnsupportedError$("Cannot sort Node list"));
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnsupportedError$("Cannot setRange on Node list"));
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  "+length": 0,
  set$length: function(_, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
  },
  "+length=": 0,
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  "+[]:1:0": 0,
  $is_ChildNodeListLazy: true,
  $asListBase: function() {
    return [W.Node];
  },
  $asList: function() {
    return [W.Node];
  },
  $asIterable: function() {
    return [W.Node];
  }
},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin1: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin1: {"": "Interceptor_ListMixin1+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin2: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin2: {"": "Interceptor_ListMixin2+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

Interceptor_ListMixin3: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

Interceptor_ListMixin_ImmutableListMixin3: {"": "Interceptor_ListMixin3+ImmutableListMixin;", $asList: null, $asIterable: null, $isList: true, $isEfficientLength: true, $isIterable: true},

_AttributeMap: {"": "Object;",
  containsValue$1: function(value) {
    var t1, t2;
    for (t1 = this.get$values(this), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();)
      ;
    return false;
  },
  "+containsValue:1:0": 0,
  putIfAbsent$2: function(key, ifAbsent) {
    if (this.containsKey$1(key) !== true)
      this.$indexSet(this, key, ifAbsent.call$0());
    return this.$index(this, key);
  },
  clear$0: function(_) {
    var t1, t2;
    for (t1 = this.get$keys(), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();)
      this.remove$1(this, t2._current);
  },
  forEach$1: function(_, f) {
    var t1, t2, key;
    for (t1 = this.get$keys(), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      key = t2._current;
      f.call$2(key, this.$index(this, key));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i;
    attributes = this._element.attributes;
    keys = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(keys, [J.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw H.ioore(attributes, i);
      if (this._matches$1(attributes[i])) {
        if (i >= attributes.length)
          throw H.ioore(attributes, i);
        keys.push(J.get$name$x(attributes[i]));
      }
    }
    return keys;
  },
  "+keys": 0,
  get$values: function(_) {
    var attributes, values, len, i;
    attributes = this._element.attributes;
    values = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(values, [J.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw H.ioore(attributes, i);
      if (this._matches$1(attributes[i])) {
        if (i >= attributes.length)
          throw H.ioore(attributes, i);
        values.push(J.get$value$x(attributes[i]));
      }
    }
    return values;
  },
  "+values": 0,
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this.get$length(this) !== 0;
  },
  "+isNotEmpty": 0,
  $isMap: true,
  $asMap: function() {
    return [J.JSString, J.JSString];
  }
},

_ElementAttributeMap: {"": "_AttributeMap;_element",
  containsKey$1: function(key) {
    return this._element.hasAttribute(key);
  },
  "+containsKey:1:0": 0,
  $index: function(_, key) {
    return this._element.getAttribute(key);
  },
  "+[]:1:0": 0,
  $indexSet: function(_, key, value) {
    this._element.setAttribute(key, value);
  },
  "+[]=:2:0": 0,
  remove$1: function(_, key) {
    var t1, value;
    t1 = this._element;
    value = t1.getAttribute(key);
    t1.removeAttribute(key);
    return value;
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  "+length": 0,
  _matches$1: function(node) {
    return node.namespaceURI == null;
  }
},

_DataAttributeMap: {"": "Object;_attributes",
  containsValue$1: function(value) {
    return H.IterableMixinWorkaround_any(this.get$values(this), new W._DataAttributeMap_containsValue_closure(value));
  },
  "+containsValue:1:0": 0,
  containsKey$1: function(key) {
    return this._attributes._element.hasAttribute("data-" + this._toHyphenedName$1(key));
  },
  "+containsKey:1:0": 0,
  $index: function(_, key) {
    return this._attributes._element.getAttribute("data-" + this._toHyphenedName$1(key));
  },
  "+[]:1:0": 0,
  $indexSet: function(_, key, value) {
    this._attributes._element.setAttribute("data-" + this._toHyphenedName$1(key), value);
  },
  "+[]=:2:0": 0,
  putIfAbsent$2: function(key, ifAbsent) {
    return this._attributes.putIfAbsent$2("data-" + this._toHyphenedName$1(key), ifAbsent);
  },
  remove$1: function(_, key) {
    var t1, t2, value;
    t1 = "data-" + this._toHyphenedName$1(key);
    t2 = this._attributes._element;
    value = t2.getAttribute(t1);
    t2.removeAttribute(t1);
    return value;
  },
  clear$0: function(_) {
    var t1, t2, t3;
    for (t1 = this.get$keys(), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = this._attributes._element; t2.moveNext$0();) {
      t3 = "data-" + this._toHyphenedName$1(t2._current);
      t1.getAttribute(t3);
      t1.removeAttribute(t3);
    }
  },
  forEach$1: function(_, f) {
    var t1 = this._attributes;
    t1.forEach$1(t1, new W._DataAttributeMap_forEach_closure(this, f));
  },
  get$keys: function() {
    var keys, t1;
    keys = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(keys, [J.JSString]);
    t1 = this._attributes;
    t1.forEach$1(t1, new W._DataAttributeMap_keys_closure(this, keys));
    return keys;
  },
  "+keys": 0,
  get$values: function(_) {
    var values, t1;
    values = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(values, [J.JSString]);
    t1 = this._attributes;
    t1.forEach$1(t1, new W._DataAttributeMap_values_closure(this, values));
    return values;
  },
  "+values": 0,
  get$length: function(_) {
    return this.get$keys().length;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return this.get$keys().length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this.get$keys().length !== 0;
  },
  "+isNotEmpty": 0,
  _toCamelCase$2$startUppercase: function(hyphenedName, startUppercase) {
    var segments, start, i, segment, t1;
    segments = hyphenedName.split("-");
    start = startUppercase ? 0 : 1;
    for (i = start; i < segments.length; ++i) {
      segment = segments[i];
      t1 = J.getInterceptor$asx(segment);
      if (J.$gt$n(t1.get$length(segment), 0)) {
        t1 = J.toUpperCase$0$s(t1.$index(segment, 0)) + t1.substring$1(segment, 1);
        if (i >= segments.length)
          throw H.ioore(segments, i);
        segments[i] = t1;
      }
    }
    return C.JSArray_methods.join$1(segments, "");
  },
  _toCamelCase$1: function(hyphenedName) {
    return this._toCamelCase$2$startUppercase(hyphenedName, false);
  },
  _toHyphenedName$1: function(word) {
    var sb, t1, i, t2, lower;
    sb = P.StringBuffer$("");
    t1 = J.getInterceptor$asx(word);
    i = 0;
    while (true) {
      t2 = t1.get$length(word);
      if (typeof t2 !== "number")
        throw H.iae(t2);
      if (!(i < t2))
        break;
      lower = J.toLowerCase$0$s(t1.$index(word, i));
      if (J.$eq(t1.$index(word, i), lower) !== true && i > 0)
        sb._contents = sb._contents + "-";
      sb._contents = sb._contents + lower;
      ++i;
    }
    return sb._contents;
  },
  $isMap: true,
  $asMap: function() {
    return [J.JSString, J.JSString];
  }
},

_DataAttributeMap_containsValue_closure: {"": "Closure;value_0",
  call$1: function(v) {
    return J.$eq(v, this.value_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_DataAttributeMap_forEach_closure: {"": "Closure;this_0,f_1",
  call$2: function(key, value) {
    var t1 = J.getInterceptor$s(key);
    if (t1.startsWith$1(key, "data-"))
      this.f_1.call$2(this.this_0._toCamelCase$1(t1.substring$1(key, 5)), value);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_DataAttributeMap_keys_closure: {"": "Closure;this_0,keys_1",
  call$2: function(key, value) {
    var t1 = J.getInterceptor$s(key);
    if (t1.startsWith$1(key, "data-"))
      this.keys_1.push(this.this_0._toCamelCase$1(t1.substring$1(key, 5)));
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_DataAttributeMap_values_closure: {"": "Closure;this_0,values_1",
  call$2: function(key, value) {
    if (J.startsWith$1$s(key, "data-"))
      this.values_1.push(value);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_MultiElementCssClassSet: {"": "CssClassSetImpl;_elementIterable,_elementCssClassSetIterable",
  readClasses$0: function() {
    var s, t1;
    s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
    t1 = this._elementCssClassSetIterable;
    t1.forEach$1(t1, new W._MultiElementCssClassSet_readClasses_closure(s));
    return s;
  },
  writeClasses$1: function(s) {
    var classes, t1, t2;
    classes = C.JSArray_methods.join$1(P.List_List$from(s, true, null), " ");
    for (t1 = this._elementIterable, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();)
      J.set$className$x(t2._current, classes);
  },
  modify$1: function(f) {
    var t1 = this._elementCssClassSetIterable;
    t1.forEach$1(t1, new W._MultiElementCssClassSet_modify_closure(f));
  },
  remove$1: function(_, value) {
    return this._modifyWithReturnValue$1(new W._MultiElementCssClassSet_remove_closure(value));
  },
  _modifyWithReturnValue$1: function(f) {
    var t1 = this._elementCssClassSetIterable;
    return t1.fold$2(t1, false, new W._MultiElementCssClassSet__modifyWithReturnValue_closure(f));
  },
  _MultiElementCssClassSet$1: function(_elementIterable) {
    var t1 = new H.MappedListIterable(P.List_List$from(this._elementIterable, true, null), new W._MultiElementCssClassSet_closure());
    H.setRuntimeTypeInfo(t1, [null, null]);
    this._elementCssClassSetIterable = t1;
  },
  static: {
_MultiElementCssClassSet$: function(_elementIterable) {
  var t1 = new W._MultiElementCssClassSet(_elementIterable, null);
  t1._MultiElementCssClassSet$1(_elementIterable);
  return t1;
}}

},

_MultiElementCssClassSet_closure: {"": "Closure;",
  call$1: function(e) {
    return new W._ElementCssClassSet(e);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_MultiElementCssClassSet_readClasses_closure: {"": "Closure;s_0",
  call$1: function(e) {
    var t1 = this.s_0;
    return t1.addAll$1(t1, e.readClasses$0());
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_MultiElementCssClassSet_modify_closure: {"": "Closure;f_0",
  call$1: function(e) {
    return e.modify$1(this.f_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_MultiElementCssClassSet_remove_closure: {"": "Closure;value_0",
  call$1: function(e) {
    return J.remove$1$ax(e, this.value_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_MultiElementCssClassSet__modifyWithReturnValue_closure: {"": "Closure;f_0",
  call$2: function(prevValue, element) {
    return this.f_0.call$1(element) === true || prevValue === true;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_ElementCssClassSet: {"": "CssClassSetImpl;_element",
  readClasses$0: function() {
    var s, t1, t2, trimmed;
    s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
    for (t1 = J.split$1$s(J.get$className$x(this._element), " "), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      trimmed = J.trim$0$s(t2._current);
      if (trimmed.length !== 0)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    P.List_List$from(s, true, null);
    J.set$className$x(this._element, s.join$1(s, " "));
  }
},

EventStreamProvider: {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    var t1 = new W._EventStream(e, this._eventType, useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  },
  forElement$2$useCapture: function(e, useCapture) {
    var t1 = new W._ElementEventStreamImpl(e, this._eventType, useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forElement$1: function(e) {
    return this.forElement$2$useCapture(e, false);
  },
  _forElementList$2$useCapture: function(e, useCapture) {
    var t1 = new W._ElementListEventStreamImpl(e, useCapture, this._eventType);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  _forElementList$1: function(e) {
    return this._forElementList$2$useCapture(e, false);
  }
},

_EventStream: {"": "Stream;_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), this._useCapture);
    t1.$builtinTypeInfo = this.$builtinTypeInfo;
    t1._tryResume$0();
    return t1;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  $asStream: null
},

_ElementEventStreamImpl: {"": "_EventStream;_target,_eventType,_useCapture",
  matches$1: function(_, selector) {
    var t1, t2;
    t1 = new P._WhereStream(new W._ElementEventStreamImpl_matches_closure(selector), this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
    t2 = new P._MapStream(new W._ElementEventStreamImpl_matches_closure0(selector), t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "Stream", 0), null]);
    return t2;
  },
  $as_EventStream: null,
  $asStream: null,
  $isStream: true
},

_ElementEventStreamImpl_matches_closure: {"": "Closure;selector_0",
  call$1: function($event) {
    return J.matchesWithAncestors$1$x(J.get$target$x($event), this.selector_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_ElementEventStreamImpl_matches_closure0: {"": "Closure;selector_1",
  call$1: function(e) {
    J.set$_selector$x(e, this.selector_1);
    return e;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_ElementListEventStreamImpl: {"": "Stream;_targetList,_useCapture,_eventType",
  matches$1: function(_, selector) {
    var t1, t2;
    t1 = new P._WhereStream(new W._ElementListEventStreamImpl_matches_closure(selector), this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
    t2 = new P._MapStream(new W._ElementListEventStreamImpl_matches_closure0(selector), t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "Stream", 0), null]);
    return t2;
  },
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var pool, t1, t2, t3, t4;
    pool = W._StreamPool$broadcast(null);
    for (t1 = this._targetList, t1 = t1.get$iterator(t1), t2 = this._eventType, t3 = this._useCapture; t1.moveNext$0();) {
      t4 = new W._EventStream(t1._current, t2, t3);
      t4.$builtinTypeInfo = [null];
      pool.add$1(pool, t4);
    }
    t1 = pool._html$_controller;
    t1.toString;
    t2 = new P._BroadcastStream(t1);
    H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
    return t2.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  $asStream: null,
  $isStream: true
},

_ElementListEventStreamImpl_matches_closure: {"": "Closure;selector_0",
  call$1: function($event) {
    return J.matchesWithAncestors$1$x(J.get$target$x($event), this.selector_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_ElementListEventStreamImpl_matches_closure0: {"": "Closure;selector_1",
  call$1: function(e) {
    J.set$_selector$x(e, this.selector_1);
    return e;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this._target == null)
      return;
    this._unlisten$0();
    this._target = null;
    this._onData = null;
  },
  pause$1: function(_, resumeSignal) {
    if (this._target == null)
      return;
    this._pauseCount = this._pauseCount + 1;
    this._unlisten$0();
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    if (this._target == null || this._pauseCount <= 0)
      return;
    this._pauseCount = this._pauseCount - 1;
    this._tryResume$0();
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      J.addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  _unlisten$0: function() {
    var t1 = this._onData;
    if (t1 != null)
      J.removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  $asStreamSubscription: null
},

_StreamPool: {"": "Object;_html$_controller,_subscriptions",
  add$1: function(_, stream) {
    var t1, t2;
    t1 = this._subscriptions;
    if (t1.containsKey$1(stream))
      return;
    t2 = this._html$_controller;
    t1.$indexSet(t1, stream, stream.listen$3$onDone$onError(t2.get$add(t2), new W._StreamPool_add_closure(this, stream), this._html$_controller.get$addError()));
  },
  remove$1: function(_, stream) {
    var t1, subscription;
    t1 = this._subscriptions;
    subscription = t1.remove$1(t1, stream);
    if (subscription != null)
      subscription.cancel$0();
  },
  close$0: function(_) {
    var t1, t2, t3;
    for (t1 = this._subscriptions, t2 = t1.get$values(t1), t3 = new H.MappedIterator(null, J.get$iterator$ax(t2._iterable), t2._f), H.setRuntimeTypeInfo(t3, [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t3.moveNext$0();)
      t3._current.cancel$0();
    t1.clear$0(t1);
    t1 = this._html$_controller;
    t1.close$0(t1);
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, W._StreamPool.prototype.close$0, _receiver, "close$0");
  },
  _html$_StreamPool$broadcast$0: function($T) {
    this._html$_controller = P.StreamController_StreamController$broadcast(this.get$close(this), null, true, $T);
  },
  static: {
_StreamPool$broadcast: function($T) {
  var t1 = new W._StreamPool(null, P.LinkedHashMap_LinkedHashMap(null, null, null, [P.Stream, $T], [P.StreamSubscription, $T]));
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._html$_StreamPool$broadcast$0($T);
  return t1;
}}

},

_StreamPool_add_closure: {"": "Closure;this_0,stream_1",
  call$0: function() {
    var t1 = this.this_0;
    return t1.remove$1(t1, this.stream_1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_CustomEventStreamProvider: {"": "Object;_eventTypeGetter",
  _eventTypeGetter$1: function(arg0) {
    return this._eventTypeGetter.call$1(arg0);
  },
  forTarget$2$useCapture: function(e, useCapture) {
    var t1 = new W._EventStream(e, this._eventTypeGetter$1(e), useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  },
  forElement$2$useCapture: function(e, useCapture) {
    var t1 = new W._ElementEventStreamImpl(e, this._eventTypeGetter$1(e), useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forElement$1: function(e) {
    return this.forElement$2$useCapture(e, false);
  },
  _forElementList$2$useCapture: function(e, useCapture) {
    var t1 = new W._ElementListEventStreamImpl(e, useCapture, this._eventTypeGetter$1(e));
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  _forElementList$1: function(e) {
    return this._forElementList$2$useCapture(e, false);
  }
},

_Html5NodeValidator: {"": "Object;uriPolicy<",
  allowsElement$1: function(element) {
    var t1 = $.get$_Html5NodeValidator__allowedElements();
    return t1.contains$1(t1, J.get$tagName$x(element));
  },
  allowsAttribute$3: function(element, attributeName, value) {
    var tagName, t1, validator;
    tagName = J.get$tagName$x(element);
    t1 = $.get$_Html5NodeValidator__attributeValidators();
    validator = t1.$index(t1, tagName + "::" + attributeName);
    if (validator == null) {
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      validator = t1.$index(t1, "*::" + attributeName);
    }
    if (validator == null)
      return false;
    return validator.call$4(element, attributeName, value, this);
  },
  _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
    var t1, attr, t2;
    t1 = $.get$_Html5NodeValidator__attributeValidators();
    if (t1.get$isEmpty(t1)) {
      for (t1 = new H.ListIterator(C.List_1GN, 261, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(C.List_1GN, "JSArray", 0)]); t1.moveNext$0();) {
        attr = t1._current;
        t2 = $.get$_Html5NodeValidator__attributeValidators();
        t2.$indexSet(t2, attr, W._Html5NodeValidator__standardAttributeValidator$closure);
      }
      for (t1 = new H.ListIterator(C.List_yrN, 12, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(C.List_yrN, "JSArray", 0)]); t1.moveNext$0();) {
        attr = t1._current;
        t2 = $.get$_Html5NodeValidator__attributeValidators();
        t2.$indexSet(t2, attr, W._Html5NodeValidator__uriAttributeValidator$closure);
      }
    }
  },
  $isNodeValidator: true,
  static: {
"": "_Html5NodeValidator__allowedElements,_Html5NodeValidator__standardAttributes,_Html5NodeValidator__uriAttributes,_Html5NodeValidator__attributeValidators",
_Html5NodeValidator$: function(uriPolicy) {
  var t1 = uriPolicy != null ? uriPolicy : new W._SameOriginUriPolicy(W.AnchorElement_AnchorElement(null), C.Window_methods.get$location(window));
  t1 = new W._Html5NodeValidator(t1);
  t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
  return t1;
},

_Html5NodeValidator__standardAttributeValidator: function(element, attributeName, value, context) {
  return true;
},

_Html5NodeValidator__uriAttributeValidator: function(element, attributeName, value, context) {
  return context.get$uriPolicy().allowsUri$1(value);
}}

},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return W.FixedSizeListIterator$(receiver, H.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0));
  },
  add$1: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw H.wrapException(P.UnsupportedError$("Cannot sort immutable List."));
  },
  insert$2: function(receiver, index, element) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true,
  $isIterable: true,
  $asIterable: null
},

NodeValidatorBuilder: {"": "Object;_validators",
  allowCustomElement$4$attributes$uriAttributes$uriPolicy: function(tagName, attributes, uriAttributes, uriPolicy) {
    var tagNameUpper, attrs;
    tagNameUpper = tagName.toUpperCase();
    attrs = new H.MappedListIterable(attributes, new W.NodeValidatorBuilder_allowCustomElement_closure(tagNameUpper));
    H.setRuntimeTypeInfo(attrs, [null, null]);
    uriPolicy = new W._SameOriginUriPolicy(W.AnchorElement_AnchorElement(null), C.Window_methods.get$location(window));
    this._validators.push(W._CustomElementNodeValidator$(uriPolicy, [tagNameUpper], attrs, null, false, true));
  },
  allowCustomElement$2$attributes: function(tagName, attributes) {
    return this.allowCustomElement$4$attributes$uriAttributes$uriPolicy(tagName, attributes, null, null);
  },
  allowTagExtension$5$attributes$uriAttributes$uriPolicy: function(tagName, baseName, attributes, uriAttributes, uriPolicy) {
    var baseNameUpper, tagNameUpper, attrs;
    baseNameUpper = baseName.toUpperCase();
    tagNameUpper = tagName.toUpperCase();
    attrs = new H.MappedListIterable(attributes, new W.NodeValidatorBuilder_allowTagExtension_closure(baseNameUpper));
    H.setRuntimeTypeInfo(attrs, [null, null]);
    uriPolicy = new W._SameOriginUriPolicy(W.AnchorElement_AnchorElement(null), C.Window_methods.get$location(window));
    this._validators.push(W._CustomElementNodeValidator$(uriPolicy, [tagNameUpper, baseNameUpper], attrs, null, true, false));
  },
  allowTagExtension$3$attributes: function(tagName, baseName, attributes) {
    return this.allowTagExtension$5$attributes$uriAttributes$uriPolicy(tagName, baseName, attributes, null, null);
  },
  add$1: function(_, validator) {
    this._validators.push(validator);
  },
  allowsElement$1: function(element) {
    return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
  },
  allowsAttribute$3: function(element, attributeName, value) {
    return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
  },
  $isNodeValidator: true
},

NodeValidatorBuilder_allowCustomElement_closure: {"": "Closure;tagNameUpper_0",
  call$1: function($name) {
    return this.tagNameUpper_0 + "::" + J.toLowerCase$0$s($name);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

NodeValidatorBuilder_allowCustomElement_closure0: {"": "Closure;tagNameUpper_1",
  call$1: function($name) {
    return this.tagNameUpper_1 + "::" + J.toLowerCase$0$s($name);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

NodeValidatorBuilder_allowTagExtension_closure: {"": "Closure;baseNameUpper_0",
  call$1: function($name) {
    return this.baseNameUpper_0 + "::" + J.toLowerCase$0$s($name);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

NodeValidatorBuilder_allowTagExtension_closure0: {"": "Closure;baseNameUpper_1",
  call$1: function($name) {
    return this.baseNameUpper_1 + "::" + J.toLowerCase$0$s($name);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

NodeValidatorBuilder_allowsElement_closure: {"": "Closure;element_0",
  call$1: function(v) {
    return v.allowsElement$1(this.element_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

NodeValidatorBuilder_allowsAttribute_closure: {"": "Closure;element_0,attributeName_1,value_2",
  call$1: function(v) {
    return v.allowsAttribute$3(this.element_0, this.attributeName_1, this.value_2);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_SimpleNodeValidator: {"": "Object;uriPolicy<",
  allowsElement$1: function(element) {
    var t1 = this.allowedElements;
    return t1.contains$1(t1, J.get$tagName$x(element));
  },
  allowsAttribute$3: function(element, attributeName, value) {
    var tagName, t1;
    tagName = J.get$tagName$x(element);
    t1 = this.allowedUriAttributes;
    if (t1.contains$1(t1, tagName + "::" + attributeName))
      return this.uriPolicy.allowsUri$1(value);
    else if (t1.contains$1(t1, "*::" + attributeName))
      return this.uriPolicy.allowsUri$1(value);
    else {
      t1 = this.allowedAttributes;
      if (t1.contains$1(t1, tagName + "::" + attributeName))
        return true;
      else if (t1.contains$1(t1, "*::" + attributeName))
        return true;
      else if (t1.contains$1(t1, tagName + "::*"))
        return true;
      else if (t1.contains$1(t1, "*::*"))
        return true;
    }
    return false;
  },
  $isNodeValidator: true
},

_CustomElementNodeValidator: {"": "_SimpleNodeValidator;allowTypeExtension,allowCustomTag,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
  allowsElement$1: function(element) {
    var t1, isAttr, t2;
    if (this.allowTypeExtension) {
      t1 = J.getInterceptor$x(element);
      isAttr = t1.get$attributes(element)._element.getAttribute("is");
      if (isAttr != null) {
        t2 = this.allowedElements;
        isAttr.toString;
        return t2.contains$1(t2, isAttr.toUpperCase()) && t2.contains$1(t2, t1.get$tagName(element));
      }
    }
    if (this.allowCustomTag) {
      t1 = this.allowedElements;
      t1 = t1.contains$1(t1, J.get$tagName$x(element));
    } else
      t1 = false;
    return t1;
  },
  allowsAttribute$3: function(element, attributeName, value) {
    var t1;
    if (this.allowsElement$1(element)) {
      if (this.allowTypeExtension)
        if (attributeName === "is") {
          t1 = this.allowedElements;
          value.toString;
          t1 = t1.contains$1(t1, value.toUpperCase());
        } else
          t1 = false;
      else
        t1 = false;
      if (t1)
        return true;
      return W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value);
    }
    return false;
  },
  static: {
_CustomElementNodeValidator$: function(uriPolicy, allowedElements, allowedAttributes, allowedUriAttributes, allowTypeExtension, allowCustomTag) {
  var t1, t2, t3;
  t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t1.addAll$1(t1, allowedElements);
  if (allowedAttributes != null) {
    t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
    t2.addAll$1(t2, allowedAttributes);
  } else
    t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  return new W._CustomElementNodeValidator(allowTypeExtension, allowCustomTag, t1, t2, t3, uriPolicy);
}}

},

_TemplatingNodeValidator: {"": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
  allowsAttribute$3: function(element, attributeName, value) {
    var t1;
    if (W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value))
      return true;
    if (attributeName === "template" && value === "")
      return true;
    if (J.get$attributes$x(element)._element.getAttribute("template") === "") {
      t1 = this._templateAttrs;
      return t1.contains$1(t1, attributeName);
    }
    return false;
  },
  static: {
"": "_TemplatingNodeValidator__TEMPLATE_ATTRS",
_TemplatingNodeValidator$: function() {
  var t1, t2, t3, t4;
  t1 = new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure());
  H.setRuntimeTypeInfo(t1, [null, null]);
  t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t2.addAll$1(t2, ["TEMPLATE"]);
  t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t3.addAll$1(t3, t1);
  t1 = t3;
  t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
  t4.addAll$1(t4, C.List_wSV);
  return new W._TemplatingNodeValidator(t4, t2, t1, t3, null);
}}

},

_TemplatingNodeValidator_closure: {"": "Closure;",
  call$1: function(attr) {
    return "TEMPLATE::" + H.S(attr);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_SvgNodeValidator: {"": "Object;",
  allowsElement$1: function(element) {
    var t1 = J.getInterceptor(element);
    if (typeof element === "object" && element !== null && !!t1.$isScriptElement0)
      return false;
    if (typeof element === "object" && element !== null && !!t1.$isSvgElement)
      return true;
    return false;
  },
  allowsAttribute$3: function(element, attributeName, value) {
    if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
      return false;
    return this.allowsElement$1(element);
  },
  $isNodeValidator: true
},

FixedSizeListIterator: {"": "Object;_array,_html$_length,_position,_html$_current",
  moveNext$0: function() {
    var nextPosition, t1;
    nextPosition = this._position + 1;
    t1 = this._html$_length;
    if (nextPosition < t1) {
      this._html$_current = J.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._html$_current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._html$_current;
  },
  "+current": 0,
  static: {
FixedSizeListIterator$: function(array, $T) {
  var t1 = new W.FixedSizeListIterator(array, J.get$length$asx(array), -1, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
}}

},

_callConstructor_closure: {"": "Closure;constructor_0,interceptor_1",
  call$1: function(receiver) {
    var t1 = H.makeLeafDispatchRecord(this.interceptor_1);
    Object.defineProperty(receiver, init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return this.constructor_0(receiver);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_DOMWindowCrossFrame: {"": "Object;_window",
  get$location: function(_) {
    return W._LocationCrossFrame__createSafe(this._window.location);
  },
  "+location": 0,
  get$parent: function(_) {
    return W._DOMWindowCrossFrame__createSafe(this._window.parent);
  },
  close$0: function(_) {
    return this._window.close();
  },
  $isEventTarget: true,
  $isInterceptor: true,
  static: {
_DOMWindowCrossFrame__createSafe: function(w) {
  if (w === window)
    return w;
  else
    return new W._DOMWindowCrossFrame(w);
}}

},

_LocationCrossFrame: {"": "Object;_location",
  set$href: function(_, val) {
    this._location.href = val;
    return;
  },
  static: {
_LocationCrossFrame__createSafe: function($location) {
  if ($location === C.Window_methods.get$location(window))
    return $location;
  else
    return new W._LocationCrossFrame($location);
}}

},

_LocationWrapper: {"": "Object;_ptr",
  get$hash: function(_) {
    return this._ptr.hash;
  },
  "+hash": 0,
  set$hash: function(_, value) {
    this._ptr.hash = value;
  },
  "+hash=": 0,
  get$host: function(_) {
    return this._ptr.host;
  },
  get$hostname: function(_) {
    return this._ptr.hostname;
  },
  get$href: function(_) {
    return this._ptr.href;
  },
  set$href: function(_, value) {
    this._ptr.href = value;
  },
  get$pathname: function(_) {
    return this._ptr.pathname;
  },
  get$port: function(_) {
    return this._ptr.port;
  },
  get$protocol: function(_) {
    return this._ptr.protocol;
  },
  toString$0: function(_) {
    return this._ptr.toString();
  },
  "+toString:0:0": 0,
  $isLocation: true,
  $isInterceptor: true
},

NodeValidator: {"": "Object;", $isNodeValidator: true},

_SameOriginUriPolicy: {"": "Object;_hiddenAnchor,_loc",
  allowsUri$1: function(uri) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this._hiddenAnchor;
    t2 = J.getInterceptor$x(t1);
    t2.set$href(t1, uri);
    t3 = t2.get$hostname(t1);
    t4 = this._loc;
    t5 = J.getInterceptor$x(t4);
    t6 = t5.get$hostname(t4);
    if (t3 == null ? t6 == null : t3 === t6) {
      t3 = t2.get$port(t1);
      t6 = t5.get$port(t4);
      if (t3 == null ? t6 == null : t3 === t6) {
        t3 = t2.get$protocol(t1);
        t4 = t5.get$protocol(t4);
        t4 = t3 == null ? t4 == null : t3 === t4;
        t3 = t4;
      } else
        t3 = false;
    } else
      t3 = false;
    if (!t3)
      t1 = t2.get$hostname(t1) === "" && t2.get$port(t1) === "" && t2.get$protocol(t1) === ":";
    else
      t1 = true;
    return t1;
  }
},

_ValidatingTreeSanitizer: {"": "Object;validator*",
  sanitizeTree$1: function(node) {
    new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$1(node);
  },
  sanitizeNode$1: function(node) {
    var t1, attrs, t2, t3, isAttr, keys, i, $name, t4;
    t1 = J.getInterceptor$x(node);
    switch (t1.get$nodeType(node)) {
      case 1:
        attrs = t1.get$attributes(node);
        if (!this.validator.allowsElement$1(node)) {
          window;
          t2 = $.get$Console__safeConsole();
          t3 = "Removing disallowed element <" + t1.get$tagName(node) + ">";
          t2.toString;
          if (typeof console != "undefined")
            console.warn(t3);
          t1.remove$0(node);
          break;
        }
        t2 = attrs._element;
        isAttr = t2.getAttribute("is");
        if (isAttr != null)
          if (!this.validator.allowsAttribute$3(node, "is", isAttr)) {
            window;
            t2 = $.get$Console__safeConsole();
            t3 = "Removing disallowed type extension <" + t1.get$tagName(node) + " is=\"" + isAttr + "\">";
            t2.toString;
            if (typeof console != "undefined")
              console.warn(t3);
            t1.remove$0(node);
            break;
          }
        t3 = attrs.get$keys();
        keys = P.List_List$from(t3, true, H.getRuntimeTypeArgument(t3, "JSArray", 0));
        for (i = attrs.get$keys().length - 1; i >= 0; --i) {
          if (i >= keys.length)
            throw H.ioore(keys, i);
          $name = keys[i];
          if (!this.validator.allowsAttribute$3(node, J.toLowerCase$0$s($name), t2.getAttribute($name))) {
            window;
            t3 = $.get$Console__safeConsole();
            t4 = "Removing disallowed attribute <" + t1.get$tagName(node) + " " + H.S($name) + "=\"" + t2.getAttribute($name) + "\">";
            t3.toString;
            if (typeof console != "undefined")
              console.warn(t4);
            t2.getAttribute($name);
            t2.removeAttribute($name);
          }
        }
        if (typeof node === "object" && node !== null && !!t1.$isTemplateElement)
          this.sanitizeTree$1(node.content);
        break;
      case 8:
      case 11:
      case 3:
      case 4:
        break;
      default:
        t1.remove$0(node);
    }
  }
},

_ValidatingTreeSanitizer_sanitizeTree_walk: {"": "Closure;this_0",
  call$1: function(node) {
    var child, nextChild;
    this.this_0.sanitizeNode$1(node);
    child = J.get$lastChild$x(node);
    for (; child != null; child = nextChild) {
      nextChild = child.previousSibling;
      this.call$1(child);
    }
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["dart.dom.indexed_db", "dart:indexed_db", , P, {
KeyRange: {"": "Interceptor;", $isKeyRange: true, "%": "IDBKeyRange"}}],
["dart.dom.svg", "dart:svg", , P, {
AElement: {"": "GraphicsElement;target=,href=", $isInterceptor: true, "%": "SVGAElement"},

AltGlyphElement: {"": "TextPositioningElement;href=", $isInterceptor: true, "%": "SVGAltGlyphElement"},

AnimationElement: {"": "SvgElement;", $isInterceptor: true, "%": "SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGSetElement"},

CircleElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGCircleElement"},

ClipPathElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGClipPathElement"},

DefsElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGDefsElement"},

EllipseElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGEllipseElement"},

FEBlendElement: {"": "SvgElement;x=,y=", $isInterceptor: true, "%": "SVGFEBlendElement"},

FEColorMatrixElement: {"": "SvgElement;type=,values=,x=,y=", $isInterceptor: true, "%": "SVGFEColorMatrixElement"},

FEComponentTransferElement: {"": "SvgElement;x=,y=", $isInterceptor: true, "%": "SVGFEComponentTransferElement"},

FECompositeElement: {"": "SvgElement;operator=,x=,y=", $isInterceptor: true, "%": "SVGFECompositeElement"},

FEConvolveMatrixElement: {"": "SvgElement;x=,y=", $isInterceptor: true, "%": "SVGFEConvolveMatrixElement"},

FEDiffuseLightingElement: {"": "SvgElement;x=,y=", $isInterceptor: true, "%": "SVGFEDiffuseLightingElement"},

FEDisplacementMapElement: {"": "SvgElement;x=,y=", $isInterceptor: true, "%": "SVGFEDisplacementMapElement"},

FEFloodElement: {"": "SvgElement;x=,y=", $isInterceptor: true, "%": "SVGFEFloodElement"},

FEGaussianBlurElement: {"": "SvgElement;x=,y=", $isInterceptor: true, "%": "SVGFEGaussianBlurElement"},

FEImageElement: {"": "SvgElement;x=,y=,href=", $isInterceptor: true, "%": "SVGFEImageElement"},

FEMergeElement: {"": "SvgElement;x=,y=", $isInterceptor: true, "%": "SVGFEMergeElement"},

FEMorphologyElement: {"": "SvgElement;operator=,x=,y=", $isInterceptor: true, "%": "SVGFEMorphologyElement"},

FEOffsetElement: {"": "SvgElement;x=,y=", $isInterceptor: true, "%": "SVGFEOffsetElement"},

FEPointLightElement: {"": "SvgElement;x=,y=", "%": "SVGFEPointLightElement"},

FESpecularLightingElement: {"": "SvgElement;x=,y=", $isInterceptor: true, "%": "SVGFESpecularLightingElement"},

FESpotLightElement: {"": "SvgElement;x=,y=", "%": "SVGFESpotLightElement"},

FETileElement: {"": "SvgElement;x=,y=", $isInterceptor: true, "%": "SVGFETileElement"},

FETurbulenceElement: {"": "SvgElement;type=,x=,y=", $isInterceptor: true, "%": "SVGFETurbulenceElement"},

FilterElement: {"": "SvgElement;x=,y=,href=", $isInterceptor: true, "%": "SVGFilterElement"},

ForeignObjectElement: {"": "GraphicsElement;x=,y=", $isInterceptor: true, "%": "SVGForeignObjectElement"},

GElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGGElement"},

GraphicsElement: {"": "SvgElement;", $isInterceptor: true, "%": ";SVGGraphicsElement"},

ImageElement0: {"": "GraphicsElement;x=,y=,href=", $isInterceptor: true, "%": "SVGImageElement"},

LineElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGLineElement"},

MarkerElement: {"": "SvgElement;", $isInterceptor: true, "%": "SVGMarkerElement"},

MaskElement: {"": "SvgElement;x=,y=", $isInterceptor: true, "%": "SVGMaskElement"},

PathElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGPathElement"},

PatternElement: {"": "SvgElement;x=,y=,href=", $isInterceptor: true, "%": "SVGPatternElement"},

PolygonElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGPolygonElement"},

PolylineElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGPolylineElement"},

RectElement: {"": "GraphicsElement;x=,y=", $isInterceptor: true, "%": "SVGRectElement"},

ScriptElement0: {"": "SvgElement;type%,href=", $isScriptElement0: true, $isInterceptor: true, "%": "SVGScriptElement"},

StyleElement0: {"": "SvgElement;type%",
  get$title: function(receiver) {
    return receiver.title;
  },
  "+title": 0,
  "%": "SVGStyleElement"
},

SvgElement: {"": "Element;",
  get$classes: function(receiver) {
    if (receiver._cssClassSet == null)
      receiver._cssClassSet = new P._AttributeClassSet(receiver);
    return receiver._cssClassSet;
  },
  "+classes": 0,
  get$children: function(receiver) {
    var t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
    H.setRuntimeTypeInfo(t1, [W.Element]);
    return t1;
  },
  createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
    var t1, html, fragment, svgFragment, root;
    if (validator == null) {
      t1 = [];
      H.setRuntimeTypeInfo(t1, [W.NodeValidator]);
      validator = new W.NodeValidatorBuilder(t1);
      t1.push(W._Html5NodeValidator$(null));
      t1.push(W._TemplatingNodeValidator$());
      t1.push(new W._SvgNodeValidator());
    }
    treeSanitizer = new W._ValidatingTreeSanitizer(validator);
    html = "<svg version=\"1.1\">" + H.S(svg) + "</svg>";
    fragment = J.createFragment$2$treeSanitizer$x(document.body, html, treeSanitizer);
    svgFragment = document.createDocumentFragment();
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    root = t1.get$single(t1);
    for (; t1 = root.firstChild, t1 != null;)
      svgFragment.appendChild(t1);
    return svgFragment;
  },
  createFragment$2$validator: function($receiver, svg, validator) {
    return this.createFragment$3$treeSanitizer$validator($receiver, svg, null, validator);
  },
  createFragment$1: function($receiver, svg) {
    return this.createFragment$3$treeSanitizer$validator($receiver, svg, null, null);
  },
  insertAdjacentText$2: function(receiver, where, text) {
    throw H.wrapException(P.UnsupportedError$("Cannot invoke insertAdjacentText on SVG."));
  },
  $isSvgElement: true,
  "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGComponentTransferFunctionElement|SVGDescElement|SVGFEDistantLightElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGHKernElement|SVGMetadataElement|SVGMissingGlyphElement|SVGStopElement|SVGTitleElement|SVGVKernElement;SVGElement"
},

SvgSvgElement: {"": "GraphicsElement;x=,y=",
  getElementById$1: function(receiver, elementId) {
    return receiver.getElementById(elementId);
  },
  $isSvgSvgElement: true,
  $isInterceptor: true,
  "%": "SVGSVGElement"
},

SwitchElement: {"": "GraphicsElement;", $isInterceptor: true, "%": "SVGSwitchElement"},

SymbolElement: {"": "SvgElement;", $isInterceptor: true, "%": "SVGSymbolElement"},

TextContentElement: {"": "GraphicsElement;", $isInterceptor: true, "%": ";SVGTextContentElement"},

TextPathElement: {"": "TextContentElement;method=,href=", $isInterceptor: true, "%": "SVGTextPathElement"},

TextPositioningElement: {"": "TextContentElement;x=,y=", "%": "SVGTSpanElement|SVGTextElement;SVGTextPositioningElement"},

UseElement: {"": "GraphicsElement;x=,y=,href=", $isInterceptor: true, "%": "SVGUseElement"},

ViewElement: {"": "SvgElement;", $isInterceptor: true, "%": "SVGViewElement"},

_GradientElement: {"": "SvgElement;href=", $isInterceptor: true, "%": "SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement"},

_SVGCursorElement: {"": "SvgElement;", $isInterceptor: true, "%": "SVGCursorElement"},

_SVGFEDropShadowElement: {"": "SvgElement;", $isInterceptor: true, "%": "SVGFEDropShadowElement"},

_SVGGlyphRefElement: {"": "SvgElement;", $isInterceptor: true, "%": "SVGGlyphRefElement"},

_SVGMPathElement: {"": "SvgElement;", $isInterceptor: true, "%": "SVGMPathElement"},

_AttributeClassSet: {"": "CssClassSetImpl;_svg$_element",
  readClasses$0: function() {
    var classname, s, t1, t2, trimmed;
    classname = this._svg$_element.getAttribute("class");
    s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
    if (classname == null)
      return s;
    for (t1 = classname.split(" "), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      trimmed = J.trim$0$s(t2._current);
      if (trimmed.length !== 0)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    this._svg$_element.setAttribute("class", s.join$1(s, " "));
  }
}}],
["dart.dom.web_sql", "dart:web_sql", , P, {
SqlError: {"": "Interceptor;message=", "%": "SQLError"}}],
["dart.isolate", "dart:isolate", , P, {
ReceivePort: {"": "Object;", $isReceivePort: true, $isStream: true,
  $asStream: function() {
    return [null];
  }
}}],
["dart.js", "dart:js", , P, {
_convertDartFunction: function(f, captureThis) {
  return function(_call, f, captureThis) {return function() {return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));}}(P._callDartFunction$closure.call$4, f, captureThis);
},

_callDartFunction: function(callback, captureThis, $self, $arguments) {
  var arguments0;
  if (captureThis === true) {
    arguments0 = [$self];
    C.JSArray_methods.addAll$1(arguments0, $arguments);
    $arguments = arguments0;
  }
  return P._convertToJS(H.Primitives_applyFunction(callback, P.List_List$from(J.map$1$ax($arguments, P._convertToDart$closure), true, null), P.Function__toMangledNames(null)));
},

_defineProperty: function(o, $name, value) {
  var exception;
  if (Object.isExtensible(o))
    try {
      Object.defineProperty(o, $name, { value: value});
      return true;
    } catch (exception) {
      H.unwrapException(exception);
    }

  return false;
},

_convertToJS: function(o) {
  var t1;
  if (o == null)
    return;
  else {
    if (typeof o !== "string")
      if (typeof o !== "number")
        if (typeof o !== "boolean") {
          t1 = J.getInterceptor(o);
          t1 = typeof o === "object" && o !== null && !!t1.$isBlob || typeof o === "object" && o !== null && !!t1.$isEvent || typeof o === "object" && o !== null && !!t1.$isKeyRange || typeof o === "object" && o !== null && !!t1.$isImageData || typeof o === "object" && o !== null && !!t1.$isNode || typeof o === "object" && o !== null && !!t1.$isTypedData || typeof o === "object" && o !== null && !!t1.$isWindow;
        } else
          t1 = true;
      else
        t1 = true;
    else
      t1 = true;
    if (t1)
      return o;
    else {
      t1 = J.getInterceptor(o);
      if (typeof o === "object" && o !== null && !!t1.$isDateTime)
        return H.Primitives_lazyAsJsDate(o);
      else if (typeof o === "object" && o !== null && !!t1.$isJsObject)
        return o._jsObject;
      else if (typeof o === "object" && o !== null && !!t1.$isFunction)
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      else
        return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0());
    }
  }
},

_getJsProxy: function(o, propertyName, createProxy) {
  var jsProxy = o[propertyName];
  if (jsProxy == null) {
    jsProxy = createProxy.call$1(o);
    P._defineProperty(o, propertyName, jsProxy);
  }
  return jsProxy;
},

_convertToDart: function(o) {
  var t1;
  if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
    return o;
  else {
    if (o instanceof Object) {
      t1 = J.getInterceptor(o);
      t1 = typeof o === "object" && o !== null && !!t1.$isBlob || typeof o === "object" && o !== null && !!t1.$isEvent || typeof o === "object" && o !== null && !!t1.$isKeyRange || typeof o === "object" && o !== null && !!t1.$isImageData || typeof o === "object" && o !== null && !!t1.$isNode || typeof o === "object" && o !== null && !!t1.$isTypedData || typeof o === "object" && o !== null && !!t1.$isWindow;
    } else
      t1 = false;
    if (t1)
      return o;
    else if (o instanceof Date)
      return P.DateTime$fromMillisecondsSinceEpoch(o.getMilliseconds(), false);
    else if (o.constructor === DartObject)
      return o.o;
    else
      return P._wrapToDart(o);
  }
},

_wrapToDart: function(o) {
  if (typeof o == "function")
    return P._getDartProxy(o, "_$dart_dartClosure", new P._wrapToDart_closure());
  else if (o instanceof Array)
    return P._getDartProxy(o, "_$dart_dartObject", new P._wrapToDart_closure0());
  else
    return P._getDartProxy(o, "_$dart_dartObject", new P._wrapToDart_closure1());
},

_getDartProxy: function(o, propertyName, createProxy) {
  var dartProxy = o[propertyName];
  if (dartProxy == null) {
    dartProxy = createProxy.call$1(o);
    P._defineProperty(o, propertyName, dartProxy);
  }
  return dartProxy;
},

JsObject: {"": "Object;_jsObject",
  $index: function(_, property) {
    if (typeof property !== "string" && typeof property !== "number")
      throw H.wrapException(new P.ArgumentError("property is not a String or num"));
    return P._convertToDart(this._jsObject[property]);
  },
  "+[]:1:0": 0,
  $indexSet: function(_, property, value) {
    if (typeof property !== "string" && typeof property !== "number")
      throw H.wrapException(new P.ArgumentError("property is not a String or num"));
    this._jsObject[property] = P._convertToJS(value);
  },
  "+[]=:2:0": 0,
  get$hashCode: function(_) {
    return 0;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isJsObject && this._jsObject === other._jsObject;
  },
  hasProperty$1: function(property) {
    return property in this._jsObject;
  },
  toString$0: function(_) {
    var t1, exception;
    try {
      t1 = String(this._jsObject);
      return t1;
    } catch (exception) {
      H.unwrapException(exception);
      return P.Object.prototype.toString$0.call(this, this);
    }

  },
  "+toString:0:0": 0,
  callMethod$2: function(method, args) {
    var t1, t2;
    t1 = this._jsObject;
    t2 = args == null ? null : P.List_List$from(J.map$1$ax(args, P._convertToJS$closure), true, null);
    return P._convertToDart(t1[method].apply(t1, t2));
  },
  callMethod$1: function(method) {
    return this.callMethod$2(method, null);
  },
  $isJsObject: true,
  static: {
JsObject_JsObject$fromBrowserObject: function(object) {
  if (typeof object === "number" || typeof object === "string" || typeof object === "boolean" || object == null)
    throw H.wrapException(new P.ArgumentError("object cannot be a num, string, bool, or null"));
  return P._wrapToDart(P._convertToJS(object));
}}

},

JsFunction: {"": "JsObject;_jsObject"},

JsArray: {"": "JsObject_ListMixin;_jsObject",
  _checkInsertIndex$1: function(index) {
    var t1;
    if (index >= 0) {
      t1 = J.$add$ns(P.JsObject.prototype.$index.call(this, this, "length"), 1);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = index >= t1;
    } else
      t1 = true;
    if (t1)
      throw H.wrapException(P.RangeError$range(index, 0, P.JsObject.prototype.$index.call(this, this, "length")));
  },
  $index: function(_, index) {
    var t1;
    if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
      if (typeof index === "number" && Math.floor(index) === index)
        if (!(index < 0)) {
          t1 = P.JsObject.prototype.$index.call(this, this, "length");
          if (typeof t1 !== "number")
            throw H.iae(t1);
          t1 = index >= t1;
        } else
          t1 = true;
      else
        t1 = false;
      if (t1)
        H.throwExpression(P.RangeError$range(index, 0, P.JsObject.prototype.$index.call(this, this, "length")));
    }
    return P.JsObject.prototype.$index.call(this, this, index);
  },
  "+[]:1:0": 0,
  $indexSet: function(_, index, value) {
    var t1;
    if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
      if (typeof index === "number" && Math.floor(index) === index)
        if (!(index < 0)) {
          t1 = P.JsObject.prototype.$index.call(this, this, "length");
          if (typeof t1 !== "number")
            throw H.iae(t1);
          t1 = index >= t1;
        } else
          t1 = true;
      else
        t1 = false;
      if (t1)
        H.throwExpression(P.RangeError$range(index, 0, P.JsObject.prototype.$index.call(this, this, "length")));
    }
    P.JsObject.prototype.$indexSet.call(this, this, index, value);
  },
  "+[]=:2:0": 0,
  get$length: function(_) {
    return P.JsObject.prototype.$index.call(this, this, "length");
  },
  "+length": 0,
  set$length: function(_, $length) {
    P.JsObject.prototype.$indexSet.call(this, this, "length", $length);
  },
  "+length=": 0,
  add$1: function(_, value) {
    this.callMethod$2("push", [value]);
  },
  addAll$1: function(_, iterable) {
    this.callMethod$2("push", iterable instanceof Array ? iterable : P.List_List$from(iterable, true, null));
  },
  insert$2: function(_, index, element) {
    this._checkInsertIndex$1(index);
    this.callMethod$2("splice", [index, 0, element]);
  },
  removeLast$0: function(_) {
    if (J.$eq(P.JsObject.prototype.$index.call(this, this, "length"), 0) === true)
      throw H.wrapException(P.RangeError$(-1));
    return this.callMethod$1("pop");
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    var t1, $length, args, t2, t3, t4;
    if (start >= 0) {
      t1 = P.JsObject.prototype.$index.call(this, this, "length");
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = start > t1;
    } else
      t1 = true;
    if (t1)
      H.throwExpression(P.RangeError$range(start, 0, P.JsObject.prototype.$index.call(this, this, "length")));
    t1 = J.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, P.JsObject.prototype.$index.call(this, this, "length")))
      H.throwExpression(P.RangeError$range(end, start, P.JsObject.prototype.$index.call(this, this, "length")));
    $length = t1.$sub(end, start);
    if (J.$eq($length, 0))
      return;
    if (skipCount < 0)
      throw H.wrapException(new P.ArgumentError(skipCount));
    args = [start, $length];
    t1 = new H.SubListIterable(iterable, skipCount, null);
    t1.$builtinTypeInfo = [null];
    t2 = t1._start;
    t3 = J.getInterceptor$n(t2);
    if (t3.$lt(t2, 0))
      H.throwExpression(P.RangeError$value(t2));
    t4 = t1._endOrLength;
    if (t4 != null) {
      if (J.$lt$n(t4, 0))
        H.throwExpression(P.RangeError$value(t4));
      if (t3.$gt(t2, t4))
        H.throwExpression(P.RangeError$range(t2, 0, t4));
    }
    C.JSArray_methods.addAll$1(args, t1.take$1(t1, $length));
    this.callMethod$2("splice", args);
  },
  sort$1: function(_, compare) {
    this.callMethod$2("sort", [compare]);
  },
  $asList: null,
  $asIterable: null
},

JsObject_ListMixin: {"": "JsObject+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

_convertToJS_closure: {"": "Closure;",
  call$1: function(o) {
    var jsFunction = P._convertDartFunction(o, false);
    P._defineProperty(jsFunction, "_$dart_dartClosure", o);
    return jsFunction;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_convertToJS_closure0: {"": "Closure;",
  call$1: function(o) {
    return new DartObject(o);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_wrapToDart_closure: {"": "Closure;",
  call$1: function(o) {
    return new P.JsFunction(o);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_wrapToDart_closure0: {"": "Closure;",
  call$1: function(o) {
    var t1 = new P.JsArray(o);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_wrapToDart_closure1: {"": "Closure;",
  call$1: function(o) {
    return new P.JsObject(o);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["dart.math", "dart:math", , P, {
_JenkinsSmiHash_combine0: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish0: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

min: function(a, b) {
  if (typeof a !== "number")
    throw H.wrapException(new P.ArgumentError(a));
  if (typeof b !== "number")
    throw H.wrapException(new P.ArgumentError(b));
  if (a > b)
    return b;
  if (a < b)
    return a;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return (a + b) * a * b;
    if (a === 0 && C.JSDouble_methods.get$isNegative(b) || C.JSDouble_methods.get$isNaN(b))
      return b;
    return a;
  }
  return a;
},

Point: {"": "Object;x>,y>",
  toString$0: function(_) {
    return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
  },
  "+toString:0:0": 0,
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isPoint)
      return false;
    t1 = this.x;
    t2 = other.x;
    if (t1 == null ? t2 == null : t1 === t2) {
      t1 = this.y;
      t2 = other.y;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = J.get$hashCode$(this.x);
    t2 = J.get$hashCode$(this.y);
    return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
  },
  $add: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$add();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this.y;
    t2 = t2.get$y(other);
    if (typeof t4 !== "number")
      throw t4.$add();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = new P.Point(t1 + t3, t4 + t2);
    t2.$builtinTypeInfo = this.$builtinTypeInfo;
    return t2;
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$sub();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this.y;
    t2 = t2.get$y(other);
    if (typeof t4 !== "number")
      throw t4.$sub();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = new P.Point(t1 - t3, t4 - t2);
    t2.$builtinTypeInfo = this.$builtinTypeInfo;
    return t2;
  },
  $mul: function(_, factor) {
    var t1, t2;
    t1 = this.x;
    if (typeof t1 !== "number")
      throw t1.$mul();
    if (typeof factor !== "number")
      throw H.iae(factor);
    t2 = this.y;
    if (typeof t2 !== "number")
      throw t2.$mul();
    t2 = new P.Point(t1 * factor, t2 * factor);
    t2.$builtinTypeInfo = this.$builtinTypeInfo;
    return t2;
  },
  $isPoint: true
}}],
["dart.mirrors", "dart:mirrors", , P, {
reflectClass: function(key) {
  var t1, tm;
  t1 = J.getInterceptor(key);
  if (typeof key !== "object" || key === null || !t1.$isType || t1.$eq(key, C.Type_e5Z))
    throw H.wrapException(new P.ArgumentError(H.S(key) + " does not denote a class"));
  tm = P.reflectType(key);
  t1 = J.getInterceptor(tm);
  if (typeof tm !== "object" || tm === null || !t1.$isClassMirror)
    throw H.wrapException(new P.ArgumentError(H.S(key) + " does not denote a class"));
  return tm.get$originalDeclaration();
},

reflectType: function(key) {
  if (J.$eq(key, C.Type_e5Z) === true) {
    $.get$currentJsMirrorSystem().toString;
    return $.get$JsMirrorSystem__dynamicType();
  }
  return H.reflectClassByMangledName(key.get$_typeName());
},

Mirror: {"": "Object;", $isMirror: true},

DeclarationMirror: {"": "Object;", $isDeclarationMirror: true, $isMirror: true},

InstanceMirror: {"": "Object;", $isInstanceMirror: true, $isMirror: true},

LibraryMirror: {"": "Object;", $isLibraryMirror: true, $isMirror: true, $isDeclarationMirror: true},

TypeMirror: {"": "Object;", $isTypeMirror: true, $isDeclarationMirror: true, $isMirror: true},

ClassMirror: {"": "Object;", $isClassMirror: true, $isMirror: true, $isTypeMirror: true, $isDeclarationMirror: true},

TypeVariableMirror: {"": "TypeMirror;", $isTypeVariableMirror: true},

MethodMirror: {"": "Object;", $isMethodMirror: true, $isDeclarationMirror: true, $isMirror: true},

VariableMirror: {"": "Object;", $isVariableMirror: true, $isDeclarationMirror: true, $isMirror: true},

ParameterMirror: {"": "Object;", $isParameterMirror: true, $isVariableMirror: true, $isDeclarationMirror: true, $isMirror: true},

MirrorsUsed: {"": "Object;symbols,targets,metaTargets,override"}}],
["dart.typed_data", "dart:typed_data", , P, {
TypedData: {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = J.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$ge(index, $length))
      throw H.wrapException(P.RangeError$range(index, 0, $length));
    else
      throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
  },
  _checkIndex$2: function(receiver, index, $length) {
    if (index >>> 0 != index || J.$ge$n(index, $length))
      this._invalidIndex$2(receiver, index, $length);
  },
  _checkSublistArguments$3: function(receiver, start, end, $length) {
    this._checkIndex$2(receiver, start, $length + 1);
    return $length;
  },
  $isTypedData: true,
  "%": "DataView;ArrayBufferView;TypedData_ListMixin|TypedData_ListMixin_FixedLengthListMixin|TypedData_ListMixin0|TypedData_ListMixin_FixedLengthListMixin0|TypedData_ListMixin1|TypedData_ListMixin_FixedLengthListMixin1|TypedData_ListMixin2|TypedData_ListMixin_FixedLengthListMixin2|TypedData_ListMixin3|TypedData_ListMixin_FixedLengthListMixin3|TypedData_ListMixin4|TypedData_ListMixin_FixedLengthListMixin4|TypedData_ListMixin5|TypedData_ListMixin_FixedLengthListMixin5|TypedData_ListMixin6|TypedData_ListMixin_FixedLengthListMixin6|TypedData_ListMixin7|TypedData_ListMixin_FixedLengthListMixin7|Int64List|Uint64List"
},

Float32List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Float32Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $asList: function() {
    return [J.JSDouble];
  },
  $asIterable: function() {
    return [J.JSDouble];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Float32Array"
},

Float64List: {"": "TypedData_ListMixin_FixedLengthListMixin0;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Float64Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $asList: function() {
    return [J.JSDouble];
  },
  $asIterable: function() {
    return [J.JSDouble];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Float64Array"
},

Int16List: {"": "TypedData_ListMixin_FixedLengthListMixin1;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Int16Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int16Array"
},

Int32List: {"": "TypedData_ListMixin_FixedLengthListMixin2;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Int32Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int32Array"
},

Int8List: {"": "TypedData_ListMixin_FixedLengthListMixin3;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Int8Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int8Array"
},

Uint16List: {"": "TypedData_ListMixin_FixedLengthListMixin4;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Uint16Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Uint16Array"
},

Uint32List: {"": "TypedData_ListMixin_FixedLengthListMixin5;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Uint32Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Uint32Array"
},

Uint8ClampedList: {"": "TypedData_ListMixin_FixedLengthListMixin6;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Uint8ClampedArray(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "CanvasPixelArray|Uint8ClampedArray"
},

Uint8List: {"": "TypedData_ListMixin_FixedLengthListMixin7;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  "+length": 0,
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  sublist$2: function(receiver, start, end) {
    var source, t1;
    source = receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, C.JS_CONST_ZYJ(receiver)));
    source.$dartCachedLength = source.length;
    t1 = new Uint8Array(source);
    t1.$dartCachedLength = t1.length;
    return t1;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asIterable: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isIterable: true,
  $isJavaScriptIndexingBehavior: true,
  "%": ";Uint8Array"
},

TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin0: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin0: {"": "TypedData_ListMixin0+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin1: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin1: {"": "TypedData_ListMixin1+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin2: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin2: {"": "TypedData_ListMixin2+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin3: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin3: {"": "TypedData_ListMixin3+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin4: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin4: {"": "TypedData_ListMixin4+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin5: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin5: {"": "TypedData_ListMixin5+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin6: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin6: {"": "TypedData_ListMixin6+FixedLengthListMixin;", $asList: null, $asIterable: null},

TypedData_ListMixin7: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true, $isIterable: true, $asIterable: null},

TypedData_ListMixin_FixedLengthListMixin7: {"": "TypedData_ListMixin7+FixedLengthListMixin;", $asList: null, $asIterable: null},

Int64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isEfficientLength: true,
  $isIterable: true,
  $asIterable: function() {
    return [J.JSInt];
  },
  $isJavaScriptIndexingBehavior: true,
  static: {
"": "Int64List_BYTES_PER_ELEMENT",
}

},

Uint64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isEfficientLength: true,
  $isIterable: true,
  $asIterable: function() {
    return [J.JSInt];
  },
  $isJavaScriptIndexingBehavior: true,
  static: {
"": "Uint64List_BYTES_PER_ELEMENT",
}

}}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
printString: function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof console == "object" && typeof console.log == "function") {
    console.log(string);
    return;
  }
  if (typeof window == "object")
    return;
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
}}],
["dartdoc_viewer", "app.dart", , N, {
startHistory: function() {
  var t1, t2;
  $.location = J.replaceFirst$2$s(J.get$hash$x(C.Window_methods.get$location(window)), "#", "");
  t1 = C.EventStreamProvider_hashchange.forTarget$1(window);
  t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(N.navigate$closure), t1._useCapture);
  H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
  t2._tryResume$0();
},

navigate: function($event) {
  var newLocation = J.replaceFirst$2$s(J.get$hash$x(C.Window_methods.get$location(window)), "#", "");
  if ($.get$viewer()._dartdoc_viewer$__$homePage != null)
    $.get$viewer().handleLink$1(newLocation);
},

_init: function() {
  var t1, t2;
  t1 = C.EventStreamProvider_resize.forTarget$1(window);
  t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new N._init_closure()), t1._useCapture);
  H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
  t2._tryResume$0();
  N.startHistory();
  $.get$viewer().finished.then$1(new N._init_closure0());
  "12,61";
},

"+_init:0:0": 1,

concat: function(list1, list2) {
  var t1 = new H.ExpandIterable([list1, list2], new N.concat_closure());
  H.setRuntimeTypeInfo(t1, [null, null]);
  return t1;
},

"+concat:2:0": 0,

Viewer: {"": "ChangeNotifier;_dartdoc_viewer$__$isDesktop,finished,_dartdoc_viewer$__$homePage,_showPkgLibraries,_currentPage,_isPanel,_isMinimap,_dartdoc_viewer$__$isInherited,_hash,_changes,_records",
  get$isDesktop: function() {
    return this._dartdoc_viewer$__$isDesktop;
    "18,13,101";
  },
  "+isDesktop": 1,
  set$isDesktop: function(value) {
    this._dartdoc_viewer$__$isDesktop = F.notifyPropertyChangeHelper(this, C.Symbol_isDesktop, this._dartdoc_viewer$__$isDesktop, value);
    "12,82,18,13";
  },
  "+isDesktop=": 1,
  get$homePage: function(_) {
    return this._dartdoc_viewer$__$homePage;
    "35,13,101";
  },
  "+homePage": 1,
  set$homePage: function(_, value) {
    this._dartdoc_viewer$__$homePage = F.notifyPropertyChangeHelper(this, C.Symbol_homePage, this._dartdoc_viewer$__$homePage, value);
    "12,82,35,13";
  },
  "+homePage=": 1,
  get$showPkgLibraries: function() {
    return this._showPkgLibraries;
    "18,101";
  },
  "+showPkgLibraries": 1,
  set$showPkgLibraries: function(newValue) {
    var oldValue = this._showPkgLibraries;
    this._showPkgLibraries = newValue;
    F.notifyPropertyChangeHelper(this, C.Symbol_showPkgLibraries, oldValue, newValue);
    F.notifyPropertyChangeHelper(this, C.Symbol_libraries, null, []);
    "12,166,12,101";
  },
  "+showPkgLibraries=": 1,
  get$libraries: function(_) {
    var t1, t2;
    t1 = this._currentPage;
    if (t1 == null)
      return [];
    t2 = J.getInterceptor$x(t1);
    if (this._showPkgLibraries === true)
      return J.get$libraries$x(t2.get$home(t1));
    else {
      t1 = J.where$1$ax(J.get$libraries$x(t2.get$home(t1)), new N.Viewer_libraries_closure());
      return t1.toList$0(t1);
    }
    "12,101";
  },
  "+libraries": 1,
  get$currentPage: function(_) {
    return this._currentPage;
    "12,101";
  },
  "+currentPage": 1,
  set$currentPage: function(_, newPage) {
    var oldPage, oldLibraries;
    oldPage = this._currentPage;
    oldLibraries = this.get$libraries(this);
    this._currentPage = newPage;
    F.notifyPropertyChangeHelper(this, C.Symbol_breadcrumbs, null, this.get$breadcrumbs(this));
    F.notifyPropertyChangeHelper(this, C.Symbol_currentPage, oldPage, newPage);
    F.notifyPropertyChangeHelper(this, C.Symbol_libraries, oldLibraries, this.get$libraries(this));
  },
  "+currentPage=": 0,
  get$isPanel: function() {
    return this._dartdoc_viewer$__$isDesktop === true && this._isPanel;
    "18,101";
  },
  "+isPanel": 1,
  get$isMinimap: function() {
    return this._dartdoc_viewer$__$isDesktop === true && this._isMinimap;
    "18,101";
  },
  "+isMinimap": 1,
  get$isInherited: function(_) {
    return this._dartdoc_viewer$__$isInherited;
    "18,13,101";
  },
  "+isInherited": 1,
  set$isInherited: function(_, value) {
    this._dartdoc_viewer$__$isInherited = F.notifyPropertyChangeHelper(this, C.Symbol_isInherited, this._dartdoc_viewer$__$isInherited, value);
    "12,82,18,13";
  },
  "+isInherited=": 1,
  get$title: function(_) {
    var t1 = this._currentPage;
    return t1 == null ? "" : J.get$decoratedName$x(t1);
  },
  "+title": 0,
  get$breadcrumbs: function(_) {
    var items, current, t1;
    if ($.get$viewer()._dartdoc_viewer$__$homePage == null)
      return [];
    items = [];
    current = $.get$viewer()._currentPage;
    for (; current != null;) {
      items.push(current);
      current = current.get$owner();
    }
    t1 = new H.ReversedListIterable(items);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1.toList$0(t1);
    "167,101";
  },
  "+breadcrumbs": 1,
  _scrollScreen$1: function(hash) {
    var t1 = {};
    t1.hash_0 = hash;
    if (t1.hash_0 === "")
      P.Timer_Timer(C.Duration_0, new N.Viewer__scrollScreen_closure());
    else
      P.Timer_Timer(C.Duration_0, new N.Viewer__scrollScreen_closure0(t1, this));
  },
  queryEverywhere$2: function($parent, id) {
    var t1, t2, t3, shadowChildren, allChildren, rti, found;
    t1 = J.getInterceptor$x($parent);
    if (t1.get$id($parent) === id)
      return $parent;
    if (t1.get$shadowRoot($parent) != null) {
      t2 = t1.get$shadowRoot($parent);
      if (t2._children == null) {
        t3 = new P.FilteredElementList(t2, new W._ChildNodeListLazy(t2));
        t3.$builtinTypeInfo = [null];
        t2._children = t3;
      }
      shadowChildren = t2._children;
    } else
      shadowChildren = C.List_empty;
    allChildren = new H.ExpandIterable([t1.get$children($parent), shadowChildren], new N.Viewer_queryEverywhere_closure());
    allChildren.$builtinTypeInfo = [null, null];
    t1 = J.get$iterator$ax(allChildren._iterable);
    rti = H.getRuntimeTypeInfo(allChildren);
    t2 = rti == null ? null : rti[0];
    rti = H.getRuntimeTypeInfo(allChildren);
    t3 = rti == null ? null : rti[1];
    t1 = new H.ExpandIterator(t1, allChildren._f, C.C_EmptyIterator, null);
    t1.$builtinTypeInfo = [t2, t3];
    for (; t1.moveNext$0();) {
      found = this.queryEverywhere$2(t1._current, id);
      if (found != null)
        return found;
    }
    return;
  },
  _updatePage$2: function(page, $location) {
    var t1;
    if (page != null) {
      if (J.$eq(page, this._currentPage) !== true)
        this.set$currentPage(this, page);
      t1 = $location.anchor;
      this._hash = t1 == null ? "" : "@" + H.S(t1);
      t1 = $location.anchor;
      this._scrollScreen$1(t1 == null ? "" : "@" + H.S(t1));
    }
    return P._Future$immediate(true, null);
  },
  _loadAndUpdatePage$1: function($location) {
    var t1, t2, t3, t4, t5, destination, newLocation, encoded;
    t1 = $.get$pageIndex();
    t2 = $location.get$packagePlus();
    t3 = $location.libraryName;
    if (t3 == null)
      t3 = "";
    t4 = $location.memberName;
    t4 = t4 == null ? "" : "." + H.S(t4);
    t5 = $location.subMemberName;
    destination = t1.$index(t1, C.JSArray_methods.join$1([t2, t3, t4, t5 == null ? "" : "." + H.S(t5)], ""));
    if (destination == null) {
      if ($location.subMemberName != null) {
        t1 = $location.get$componentNames();
        if (0 >= t1.length)
          throw H.ioore(t1, 0);
        t1.pop();
        t1 = Y.DocsLocation$fromList(t1);
        t2 = t1.get$packagePlus();
        t3 = t1.libraryName;
        if (t3 == null)
          t3 = "";
        t4 = t1.memberName;
        t4 = t4 == null ? "" : "." + H.S(t4);
        t1 = t1.subMemberName;
        newLocation = new Y.DocsLocation(null, null, null, null, null);
        newLocation._extractPieces$1(C.JSArray_methods.join$1([t2, t3, t4, t1 == null ? "" : "." + H.S(t1)], ""));
        newLocation.anchor = C.JSString_methods.$add("id_", $location.subMemberName);
        t1 = newLocation.get$packagePlus();
        t2 = newLocation.libraryName;
        if (t2 == null)
          t2 = "";
        t3 = newLocation.memberName;
        t3 = t3 == null ? "" : "." + H.S(t3);
        t4 = newLocation.subMemberName;
        t1 = C.JSArray_methods.join$1([t1, t2, t3, t4 == null ? "" : "." + H.S(t4)], "");
        t2 = newLocation.anchor;
        encoded = P.Uri__uriEncode(C.List_CVk, t1 + (t2 == null ? "" : "@" + H.S(t2)), false);
        t1 = window.history;
        t2 = "#" + encoded;
        t3 = $.get$viewer()._currentPage;
        t3 = t3 == null ? "" : J.get$decoratedName$x(t3);
        t1.pushState(t2, t3, "#" + encoded);
        return this.handleLink$1(encoded);
      }
      return this.getItem$1($location).then$1(new N.Viewer__loadAndUpdatePage_closure(this, $location));
    } else
      return J.load$0$x(destination).then$1(new N.Viewer__loadAndUpdatePage_closure0(this, $location, destination));
  },
  getItem$1: function($location) {
    return this.getLibrary$1($location).then$1(new N.Viewer_getItem_closure(this, $location)).then$1(new N.Viewer_getItem_closure0(this, $location));
  },
  getLibrary$1: function($location) {
    var t1, t2, t3, lib;
    t1 = $.get$pageIndex();
    t2 = H.S($location.get$packagePlus());
    t3 = $location.libraryName;
    lib = t1.$index(t1, t2 + H.S(t3 == null ? "" : t3));
    if (lib == null)
      lib = $.get$viewer()._dartdoc_viewer$__$homePage.memberNamed$1($location.libraryName);
    if (lib == null)
      return P._Future$immediate(false, null);
    return J.load$0$x(lib);
  },
  getMember$2: function(lib, $location) {
    var member = lib.memberNamed$1($location.memberName);
    if (member == null)
      return P._Future$immediate([lib, null], null);
    return J.load$0$x(member).then$1(new N.Viewer_getMember_closure(lib, member));
  },
  getSubMember$2: function(libWithMember, $location) {
    var t1 = J.getInterceptor$ax(libWithMember);
    if (t1.get$last(libWithMember) == null)
      return P._Future$immediate([t1.get$first(libWithMember)], null);
    return P._Future$immediate(N.concat(libWithMember, [t1.get$last(libWithMember).memberNamed$1($location.subMemberName)]), null);
  },
  handleLink$1: function(uri) {
    var $location = new Y.DocsLocation(null, null, null, null, null);
    $location._extractPieces$1(P.Uri__uriDecode(uri, C.Utf8Codec_false, false));
    if (J.$eq($location.libraryName, "home") === true) {
      this._updatePage$2($.get$viewer()._dartdoc_viewer$__$homePage, $location);
      return P._Future$immediate(true, null);
    }
    return this._loadAndUpdatePage$1($location);
  },
  togglePanel$0: function(_) {
    var t1, t2;
    t1 = this._isPanel;
    t2 = !t1;
    this._isPanel = t2;
    F.notifyPropertyChangeHelper(this, C.Symbol_isPanel, t1, t2);
  },
  "+togglePanel:0:0": 0,
  toggleMinimap$0: function(_) {
    var t1, t2;
    t1 = this._isMinimap;
    t2 = !t1;
    this._isMinimap = t2;
    F.notifyPropertyChangeHelper(this, C.Symbol_isMinimap, t1, t2);
  },
  "+toggleMinimap:0:0": 0,
  Viewer$_$0: function() {
    this.finished = W.HttpRequest_getString(P.Uri__uriEncode(C.List_CVk, $.sourcePath, false), null, null).then$1(new N.Viewer$__closure(this));
    L.PathObserver$(this, "isDesktop", null).bindSync$1(new N.Viewer$__closure0(this));
  },
  static: {
Viewer$_: function() {
  var t1 = window.innerWidth;
  if (typeof t1 !== "number")
    throw t1.$gt();
  t1 = new N.Viewer(t1 > 1006, null, null, false, null, true, true, false, null, null, null);
  t1.Viewer$_$0();
  return t1;
}}

},

Viewer_libraries_closure: {"": "Closure;",
  call$1: function(each) {
    var t1 = J.getInterceptor(each);
    return typeof each === "object" && each !== null && !!t1.$isLibrary;
    "12,110,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Viewer_libraries_closure": [100],

Viewer$__closure: {"": "Closure;this_0",
  call$1: function(response) {
    var libraries, t1, t2;
    libraries = C.C_JsonCodec.decode$1(response);
    $.isYaml = J.$eq(J.$index$asx(libraries, "filetype"), "yaml");
    t1 = this.this_0;
    t2 = E.Home$(libraries);
    t1._dartdoc_viewer$__$homePage = F.notifyPropertyChangeHelper(t1, C.Symbol_homePage, t1._dartdoc_viewer$__$homePage, t2);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Viewer$__closure0: {"": "Closure;this_1",
  call$1: function(_) {
    var t1 = this.this_1;
    F.notifyPropertyChangeHelper(t1, C.Symbol_isMinimap, null, t1._dartdoc_viewer$__$isDesktop === true && t1._isMinimap);
    F.notifyPropertyChangeHelper(t1, C.Symbol_isPanel, null, t1._dartdoc_viewer$__$isDesktop === true && t1._isPanel);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Viewer__scrollScreen_closure: {"": "Closure;",
  call$0: function() {
    window.scrollTo(0, 0);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Viewer__scrollScreen_closure0: {"": "Closure;box_0,this_1",
  call$0: function() {
    var t1, t2, e;
    t1 = this.box_0;
    t2 = t1.hash_0;
    t1.hash_0 = C.JSString_methods.substring$2(t2, 1, t2.length);
    e = this.this_1.queryEverywhere$2($.get$dartdocMain(), t1.hash_0);
    if (e != null) {
      t1 = J.getInterceptor$x(e);
      t1.scrollIntoView$1(e, C.ScrollAlignment_TOP);
      window.scrollBy(0, -60);
      t1.focus$0(e);
    }
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Viewer_queryEverywhere_closure: {"": "Closure;",
  call$1: function(x) {
    return x;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Viewer__loadAndUpdatePage_closure: {"": "Closure;this_0,location_1",
  call$1: function(items) {
    var t1 = this.location_1;
    return this.this_0._updatePage$2(t1.itemFromList$1(J.toList$0$ax(items)), t1);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Viewer__loadAndUpdatePage_closure0: {"": "Closure;this_2,location_3,destination_4",
  call$1: function(_) {
    return this.this_2._updatePage$2(this.destination_4, this.location_3);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Viewer_getItem_closure: {"": "Closure;this_0,location_1",
  call$1: function(lib) {
    return this.this_0.getMember$2(lib, this.location_1);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Viewer_getItem_closure0: {"": "Closure;this_2,location_3",
  call$1: function(libWithMember) {
    return this.this_2.getSubMember$2(libWithMember, this.location_3);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Viewer_getMember_closure: {"": "Closure;lib_0,member_1",
  call$1: function(mem) {
    return P._Future$immediate([this.lib_0, this.member_1], null);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_init_closure: {"": "Closure;",
  call$1: function($event) {
    var t1, t2;
    t1 = $.get$viewer();
    t2 = window.innerWidth;
    if (typeof t2 !== "number")
      throw t2.$gt();
    t1._dartdoc_viewer$__$isDesktop = F.notifyPropertyChangeHelper(t1, C.Symbol_isDesktop, t1._dartdoc_viewer$__$isDesktop, t2 > 1006);
    "12,104,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+_init_closure": [100],

_init_closure0: {"": "Closure;",
  call$1: function(_) {
    var t1 = $.location;
    if (t1 != null && t1 !== "")
      $.get$viewer().handleLink$1($.location);
    else {
      t1 = $.get$viewer();
      t1.set$currentPage(t1, $.get$viewer()._dartdoc_viewer$__$homePage);
    }
    W.HttpRequest_getString(P.Uri__uriEncode(C.List_CVk, "docs/index.json", false), null, null).then$1(new N._init__closure());
    "12,134,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+_init_closure": [100],

_init__closure: {"": "Closure;",
  call$1: function(json) {
    $.index = C.C_JsonCodec.decode$1(json);
    "12,168,7";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+_init__closure": [100],

concat_closure: {"": "Closure;",
  call$1: function(x) {
    return x;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},
"": "location<,viewer<"}],
["deep_equals", "package:yaml/src/deep_equals.dart", , G, {
deepEquals: function(obj1, obj2, parents1, parents2) {
  var t1, t2, i, loop1, loop2;
  t1 = obj1;
  t2 = obj2;
  if (t1 == null ? t2 == null : t1 === t2)
    return true;
  if (parents1 == null) {
    parents1 = [];
    parents2 = [];
  }
  i = 0;
  while (true) {
    t1 = J.get$length$asx(parents1);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (!(i < t1))
      break;
    t1 = obj1;
    t2 = J.$index$asx(parents1, i);
    loop1 = t1 == null ? t2 == null : t1 === t2;
    t2 = obj2;
    t1 = J.$index$asx(parents2, i);
    loop2 = t2 == null ? t1 == null : t2 === t1;
    if (loop1 && loop2)
      return true;
    if (loop1 || loop2)
      return false;
    ++i;
  }
  J.add$1$ax(parents1, obj1);
  J.add$1$ax(parents2, obj2);
  try {
    t1 = obj1;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!t2.$isList)) {
      t1 = obj2;
      t2 = J.getInterceptor(t1);
      t2 = typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!t2.$isList);
      t1 = t2;
    } else
      t1 = false;
    if (t1) {
      t1 = G._listEquals0(obj1, obj2, parents1, parents2);
      return t1;
    } else {
      t1 = obj1;
      t2 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t2.$isMap) {
        t1 = obj2;
        t2 = J.getInterceptor(t1);
        t2 = typeof t1 === "object" && t1 !== null && !!t2.$isMap;
        t1 = t2;
      } else
        t1 = false;
      if (t1) {
        t1 = G._mapEquals(obj1, obj2, parents1, parents2);
        return t1;
      } else {
        t1 = obj1;
        if (typeof t1 === "number") {
          t1 = obj2;
          t1 = typeof t1 === "number";
        } else
          t1 = false;
        if (t1) {
          t1 = G._doubleEquals(obj1, obj2);
          return t1;
        } else {
          t1 = J.$eq(obj1, obj2);
          return t1;
        }
      }
    }
  } finally {
    J.removeLast$0$ax(parents1);
    J.removeLast$0$ax(parents2);
  }
},

_listEquals0: function(list1, list2, parents1, parents2) {
  var t1, t2, i, t3;
  t1 = J.getInterceptor$asx(list1);
  t2 = J.getInterceptor$asx(list2);
  if (J.$eq(t1.get$length(list1), t2.get$length(list2)) !== true)
    return false;
  i = 0;
  while (true) {
    t3 = t1.get$length(list1);
    if (typeof t3 !== "number")
      throw H.iae(t3);
    if (!(i < t3))
      break;
    if (G.deepEquals(t1.$index(list1, i), t2.$index(list2, i), parents1, parents2) !== true)
      return false;
    ++i;
  }
  return true;
},

_mapEquals: function(map1, map2, parents1, parents2) {
  var t1, key;
  if (J.$eq(map1.get$length(map1), map2.get$length(map2)) !== true)
    return false;
  for (t1 = J.get$iterator$ax(map1.get$keys()); t1.moveNext$0();) {
    key = t1.get$current();
    if (map2.containsKey$1(key) !== true)
      return false;
    if (G.deepEquals(map1.$index(map1, key), map2.$index(map2, key), parents1, parents2) !== true)
      return false;
  }
  return true;
},

_doubleEquals: function(d1, d2) {
  if (C.JSDouble_methods.get$isNaN(d1) && C.JSDouble_methods.get$isNaN(d2))
    return true;
  return d1 === d2;
}}],
["homepage", "homepage.dart", , A, {
HomeElement: {"": ["MemberElement;_item-,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$defaultItem: function(receiver) {
    return;
    "12";
  },
  "+defaultItem": 1,
  get$observables: function(receiver) {
    return this.concat$2(receiver, E.MemberElement.prototype.get$observables.call(this, receiver), C.List_od9);
    "12";
  },
  "+observables": 1,
  wrongClass$1: function(receiver, newItem) {
    var t1 = J.getInterceptor(newItem);
    return typeof newItem !== "object" || newItem === null || !t1.$isHome;
    "12,132,12";
  },
  "+wrongClass:1:0": 1,
  get$item: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver);
    "12";
  },
  "+item": 1,
  set$item: function(receiver, newItem) {
    E.MemberElement.prototype.set$item.call(this, receiver, newItem);
    return newItem;
    "12,132,12";
  },
  "+item=": 1,
  get$libraries: function(receiver) {
    var t1;
    if (E.MemberElement.prototype.get$item.call(this, receiver) == null)
      t1 = [];
    else {
      t1 = $.get$viewer();
      t1 = t1.get$libraries(t1);
    }
    return t1;
    "12,101";
  },
  "+libraries": 1,
  enteredView$0: function(receiver) {
    E.DartdocElement.prototype.enteredView$0.call(this, receiver);
    this.get$addChildren(receiver);
    "12";
  },
  "+enteredView:0:0": 1,
  get$addChildren: function(receiver) {
    var elements, t1, library, newItem, t2, root;
    if ((receiver.shadowRoot || receiver.webkitShadowRoot) == null)
      return;
    elements = [];
    if (E.MemberElement.prototype.get$item.call(this, receiver) == null)
      t1 = [];
    else {
      t1 = $.get$viewer();
      t1 = t1.get$libraries(t1);
    }
    t1 = J.get$iterator$ax(t1);
    for (; t1.moveNext$0();) {
      library = t1.get$current();
      newItem = document.createElement("dartdoc-item", null);
      t2 = J.getInterceptor$x(newItem);
      t2.set$item(newItem, library);
      J.add$1$ax(t2.get$classes(newItem), "panel");
      elements.push(newItem);
    }
    root = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#librariesGoHere");
    if (root == null)
      return;
    t1 = J.getInterceptor$x(root);
    t2 = t1.get$children(root);
    t2.clear$0(t2);
    t1 = t1.get$children(root);
    t1.addAll$1(t1, elements);
    "12,101";
  },
  "+addChildren": 1,
  addChildren$0: function($receiver) {
    return this.get$addChildren($receiver).call$0();
  },
  HomeElement$created$0: function(receiver) {
    L.PathObserver$(receiver, "viewer.libraries", null).bindSync$1(new A.HomeElement$created_closure(receiver));
    "12";
  },
  "@": function() {
    return [C.CustomTag_VO9];
  },
  static: {
HomeElement$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.HomeElement_methods.Element$created$0(receiver);
  C.HomeElement_methods.PolymerElement$created$0(receiver);
  C.HomeElement_methods.MemberElement$created$0(receiver);
  C.HomeElement_methods.HomeElement$created$0(receiver);
  return receiver;
  "62";
},

"+new HomeElement$created:0:0": 1}

},

"+HomeElement": [68],

HomeElement$created_closure: {"": "Closure;this_0-",
  call$1: function(_) {
    return J.get$addChildren$x(this.this_0);
    "12,134,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+HomeElement$created_closure": [100]}],
["html_common", "dart:html_common", , P, {
convertNativeToDart_DateTime: function(date) {
  return P.DateTime$fromMillisecondsSinceEpoch(date.getTime(), true);
},

convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
  var copies = [];
  return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
},

Device_isOpera: function() {
  if ($.Device__isOpera == null)
    $.Device__isOpera = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
  return $.Device__isOpera;
},

Device_isWebKit: function() {
  if ($.Device__isWebKit == null)
    $.Device__isWebKit = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
  return $.Device__isWebKit;
},

convertNativeToDart_AcceptStructuredClone_findSlot: {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_1.push(null);
    return $length;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

convertNativeToDart_AcceptStructuredClone_readSlot: {"": "Closure;copies_2",
  call$1: function(i) {
    var t1 = this.copies_2;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    return t1[i];
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

convertNativeToDart_AcceptStructuredClone_writeSlot: {"": "Closure;copies_3",
  call$2: function(i, x) {
    var t1 = this.copies_3;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    t1[i] = x;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

convertNativeToDart_AcceptStructuredClone_walk: {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, t2, key, $length, i;
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (e instanceof Date)
      return P.convertNativeToDart_DateTime(e);
    if (e instanceof RegExp)
      throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = Object.keys(e), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
        key = t2._current;
        copy.$indexSet(copy, key, this.call$1(e[key]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(e);
      $length = t1.get$length(e);
      copy = this.mustCopy_4 ? new Array($length) : e;
      this.writeSlot_7.call$2(slot, copy);
      if (typeof $length !== "number")
        throw H.iae($length);
      t2 = J.getInterceptor$ax(copy);
      i = 0;
      for (; i < $length; ++i)
        t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
      return copy;
    }
    return e;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

CssClassSetImpl: {"": "Object;",
  toString$0: function(_) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, " ");
  },
  "+toString:0:0": 0,
  get$iterator: function(_) {
    var t1, t2;
    t1 = this.readClasses$0();
    t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null);
    H.setRuntimeTypeInfo(t2, [null]);
    t2._cell = t1._first;
    return t2;
  },
  forEach$1: function(_, f) {
    var t1 = this.readClasses$0();
    t1.forEach$1(t1, f);
  },
  join$1: function(_, separator) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, separator);
  },
  map$1: function(_, f) {
    var t1 = this.readClasses$0();
    return H.MappedIterable_MappedIterable(t1, f, H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  where$1: function(_, f) {
    var t1, t2;
    t1 = this.readClasses$0();
    t2 = new H.WhereIterable(t1, f);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "IterableBase", 0)]);
    return t2;
  },
  any$1: function(_, f) {
    var t1 = this.readClasses$0();
    return t1.any$1(t1, f);
  },
  get$isEmpty: function(_) {
    return this.readClasses$0()._collection$_length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this.readClasses$0()._collection$_length !== 0;
  },
  "+isNotEmpty": 0,
  get$length: function(_) {
    return this.readClasses$0()._collection$_length;
  },
  "+length": 0,
  contains$1: function(_, value) {
    var t1 = this.readClasses$0();
    return t1.contains$1(t1, value);
  },
  lookup$1: function(value) {
    var t1 = this.readClasses$0();
    return t1.contains$1(t1, value) ? value : null;
  },
  add$1: function(_, value) {
    return this.modify$1(new P.CssClassSetImpl_add_closure(value));
  },
  remove$1: function(_, value) {
    var s, result;
    if (typeof value !== "string")
      return false;
    s = this.readClasses$0();
    result = s.remove$1(s, value);
    this.writeClasses$1(s);
    return result;
  },
  addAll$1: function(_, iterable) {
    this.modify$1(new P.CssClassSetImpl_addAll_closure(iterable));
  },
  get$first: function(_) {
    var t1 = this.readClasses$0()._first;
    if (t1 == null)
      H.throwExpression(new P.StateError("No elements"));
    return t1.get$_collection$_element();
  },
  get$last: function(_) {
    var t1 = this.readClasses$0()._last;
    if (t1 == null)
      H.throwExpression(new P.StateError("No elements"));
    return t1.get$_collection$_element();
  },
  toList$1$growable: function(_, growable) {
    var t1 = this.readClasses$0();
    return t1.toList$1$growable(t1, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  take$1: function(_, n) {
    var t1 = this.readClasses$0();
    return H.TakeIterable_TakeIterable(t1, n, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
  },
  skip$1: function(_, n) {
    var t1 = this.readClasses$0();
    return H.SkipIterable_SkipIterable(t1, n, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
  },
  firstWhere$2$orElse: function(_, test, orElse) {
    var t1 = this.readClasses$0();
    return t1.firstWhere$2$orElse(t1, test, orElse);
  },
  firstWhere$1: function($receiver, test) {
    return this.firstWhere$2$orElse($receiver, test, null);
  },
  elementAt$1: function(_, index) {
    var t1 = this.readClasses$0();
    return t1.elementAt$1(t1, index);
  },
  clear$0: function(_) {
    this.modify$1(new P.CssClassSetImpl_clear_closure());
  },
  modify$1: function(f) {
    var s, ret;
    s = this.readClasses$0();
    ret = f.call$1(s);
    this.writeClasses$1(s);
    return ret;
  },
  $isEfficientLength: true,
  $isIterable: true,
  $asIterable: function() {
    return [J.JSString];
  }
},

CssClassSetImpl_add_closure: {"": "Closure;value_0",
  call$1: function(s) {
    return J.add$1$ax(s, this.value_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

CssClassSetImpl_addAll_closure: {"": "Closure;iterable_0",
  call$1: function(s) {
    return J.addAll$1$ax(s, this.iterable_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

CssClassSetImpl_clear_closure: {"": "Closure;",
  call$1: function(s) {
    return J.clear$0$ax(s);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

FilteredElementList: {"": "ListBase;_html_common$_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element);
  },
  forEach$1: function(_, f) {
    H.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    J.replaceWith$1$x(t1[index], value);
  },
  "+[]=:2:0": 0,
  set$length: function(_, newLength) {
    var len, t1;
    len = this.get$_filtered().length;
    t1 = J.getInterceptor$n(newLength);
    if (t1.$ge(newLength, len))
      return;
    else if (t1.$lt(newLength, 0))
      throw H.wrapException(new P.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  "+length=": 0,
  add$1: function(_, value) {
    this._childNodes._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = J.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0();)
      t2.appendChild(t1.get$current());
  },
  contains$1: function(_, needle) {
    var t1 = J.getInterceptor(needle);
    if (typeof needle !== "object" || needle === null || !t1.$isElement)
      return false;
    return needle.parentNode === this._html_common$_node;
  },
  get$reversed: function(_) {
    var t1 = new H.ReversedListIterable(this.get$_filtered());
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  sort$1: function(_, compare) {
    throw H.wrapException(P.UnsupportedError$("Cannot sort filtered list"));
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnsupportedError$("Cannot setRange on filtered list"));
  },
  removeRange$2: function(_, start, end) {
    H.IterableMixinWorkaround_forEach(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
  },
  clear$0: function(_) {
    this._childNodes._this.textContent = "";
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      J.remove$0$ax(result);
    return result;
  },
  insert$2: function(_, index, value) {
    var t1 = this._childNodes;
    t1.insert$2(t1, index, value);
  },
  remove$1: function(_, element) {
    var t1, i, indexElement;
    t1 = J.getInterceptor(element);
    if (typeof element !== "object" || element === null || !t1.$isElement)
      return false;
    for (i = 0; i < this.get$_filtered().length; ++i) {
      t1 = this.get$_filtered();
      if (i >= t1.length)
        throw H.ioore(t1, i);
      indexElement = t1[i];
      if (indexElement == null ? element == null : indexElement === element) {
        J.remove$0$ax(indexElement);
        return true;
      }
    }
    return false;
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  "+length": 0,
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  "+[]:1:0": 0,
  get$iterator: function(_) {
    var t1, t2;
    t1 = this.get$_filtered();
    t2 = new H.ListIterator(t1, t1.length, 0, null);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]);
    return t2;
  },
  $asListBase: null,
  $asList: null,
  $asIterable: null
},

FilteredElementList__filtered_closure: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor(n);
    return typeof n === "object" && n !== null && !!t1.$isElement;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

FilteredElementList_removeRange_closure: {"": "Closure;",
  call$1: function(el) {
    return J.remove$0$ax(el);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["index", "main.dart", , B, {
IndexElement: {"": ["DartdocElement;_openedAt%-,_buildIdentifier%-,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  enteredView$0: function(receiver) {
    var t1, t2;
    E.DartdocElement.prototype.enteredView$0.call(this, receiver);
    L.PathObserver$(receiver, "viewer.currentPage", null).bindSync$1(new B.IndexElement_enteredView_closure(receiver));
    t1 = L.PathObserver$(receiver, "viewer.isMinimap", null);
    t1.get$changes(t1).listen$1(new B.IndexElement_enteredView_closure0(receiver));
    L.PathObserver$(receiver, "viewer.isPanel", null).bindSync$1(new B.IndexElement_enteredView_closure1(receiver));
    t1 = C.EventStreamProvider_click.forElement$1(receiver);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(this.get$hideOptionsMenuWhenClickedOutside(receiver)), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
    t2._tryResume$0();
    "12";
  },
  "+enteredView:0:0": 1,
  get$pageContentClass: function(receiver) {
    var t1, left;
    if (E.DartdocElement.prototype.get$viewer.call(this, receiver)._dartdoc_viewer$__$isDesktop !== true)
      return "";
    t1 = E.DartdocElement.prototype.get$viewer.call(this, receiver);
    left = t1._dartdoc_viewer$__$isDesktop === true && t1._isPanel ? "margin-left " : "";
    t1 = E.DartdocElement.prototype.get$viewer.call(this, receiver);
    return left + (t1._dartdoc_viewer$__$isDesktop === true && t1._isMinimap ? "margin-right" : "");
    "12,101";
  },
  "+pageContentClass": 1,
  query$1: function(receiver, selectors) {
    return (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector(selectors);
    "12,169,7";
  },
  "+query:1:0": 1,
  searchSubmitted$0: function(receiver) {
    J.add$1$ax(J.get$classes$x((receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#nav-collapse-button")), "collapsed");
    J.remove$1$ax(J.get$classes$x((receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#nav-collapse-content")), "in");
    J.add$1$ax(J.get$classes$x((receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#nav-collapse-content")), "collapse");
    "12";
  },
  "+searchSubmitted:0:0": 1,
  get$item: function(receiver) {
    return J.get$item$x(E.DartdocElement.prototype.get$viewer.call(this, receiver)._currentPage);
    "12,101";
  },
  "+item": 1,
  get$pageNameSeparator: function(receiver) {
    return J.$eq(E.DartdocElement.prototype.get$viewer.call(this, receiver)._currentPage == null ? "" : J.get$decoratedName$x(E.DartdocElement.prototype.get$viewer.call(this, receiver)._currentPage), "") === true ? "" : " - ";
    "12,101";
  },
  "+pageNameSeparator": 1,
  get$decoratedName: function(receiver) {
    return E.DartdocElement.prototype.get$viewer.call(this, receiver)._currentPage == null ? "" : J.get$decoratedName$x(E.DartdocElement.prototype.get$viewer.call(this, receiver)._currentPage);
    "12,101";
  },
  "+decoratedName": 1,
  decoratedName$1: function($receiver, arg0) {
    return this.get$decoratedName($receiver).call$1(arg0);
  },
  togglePanel$3: function(receiver, $event, detail, target) {
    var t1 = E.DartdocElement.prototype.get$viewer.call(this, receiver);
    return t1.togglePanel$0(t1);
    "12,104,12,105,12,106,12";
  },
  "+togglePanel:3:0": 1,
  toggleInherited$3: function(receiver, $event, detail, target) {
    var t1, t2;
    t1 = E.DartdocElement.prototype.get$viewer.call(this, receiver);
    t2 = t1._dartdoc_viewer$__$isInherited;
    t1._dartdoc_viewer$__$isInherited = F.notifyPropertyChangeHelper(t1, C.Symbol_isInherited, t2, t2 !== true);
    return;
    "12,104,12,105,12,106,12";
  },
  "+toggleInherited:3:0": 1,
  toggleMinimap$3: function(receiver, $event, detail, target) {
    var t1 = E.DartdocElement.prototype.get$viewer.call(this, receiver);
    return t1.toggleMinimap$0(t1);
    "12,104,12,105,12,106,12";
  },
  "+toggleMinimap:3:0": 1,
  togglePkg$3: function(receiver, $event, detail, target) {
    var t1 = E.DartdocElement.prototype.get$viewer.call(this, receiver);
    t1.set$showPkgLibraries(t1._showPkgLibraries !== true);
    return;
    "12,104,12,105,12,106,12";
  },
  "+togglePkg:3:0": 1,
  get$shouldShowLibraryMinimap: function(receiver) {
    var t1, t2, t3;
    t1 = E.DartdocElement.prototype.get$viewer.call(this, receiver);
    t1 = t1._dartdoc_viewer$__$isDesktop === true && t1._isMinimap;
    t2 = E.DartdocElement.prototype.get$viewer.call(this, receiver)._currentPage;
    t3 = J.getInterceptor(t2);
    return typeof t2 === "object" && t2 !== null && !!t3.$isLibrary && t1;
    "12,101";
  },
  "+shouldShowLibraryMinimap": 1,
  shouldShowLibraryMinimapFor$1: function(receiver, isMinimap) {
    var t1, t2;
    t1 = E.DartdocElement.prototype.get$viewer.call(this, receiver)._currentPage;
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isLibrary && isMinimap === true;
    "12,170,12";
  },
  "+shouldShowLibraryMinimapFor:1:0": 1,
  get$shouldShowClassMinimap: function(receiver) {
    var t1, t2, t3;
    t1 = E.DartdocElement.prototype.get$viewer.call(this, receiver);
    t1 = t1._dartdoc_viewer$__$isDesktop === true && t1._isMinimap;
    t2 = E.DartdocElement.prototype.get$viewer.call(this, receiver)._currentPage;
    t3 = J.getInterceptor(t2);
    return typeof t2 === "object" && t2 !== null && !!t3.$isClass && t1;
    "12,101";
  },
  "+shouldShowClassMinimap": 1,
  shouldShowClassMinimapFor$1: function(receiver, isMinimap) {
    var t1, t2;
    t1 = E.DartdocElement.prototype.get$viewer.call(this, receiver)._currentPage;
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isClass && isMinimap === true;
    "12,170,12,101";
  },
  "+shouldShowClassMinimapFor:1:0": 1,
  get$homePage: function(receiver) {
    return E.DartdocElement.prototype.get$viewer.call(this, receiver)._dartdoc_viewer$__$homePage;
    "12,101";
  },
  "+homePage": 1,
  set$homePage: function(receiver, x) {
    "12,116,12";
  },
  "+homePage=": 1,
  get$viewer: function(receiver) {
    return E.DartdocElement.prototype.get$viewer.call(this, receiver);
    "12,101";
  },
  "+viewer": 1,
  get$breadcrumbs: function(receiver) {
    var t1 = E.DartdocElement.prototype.get$viewer.call(this, receiver);
    return t1.get$breadcrumbs(t1);
    "12";
  },
  "+breadcrumbs": 1,
  crumbs$0: function(receiver) {
    var root, t1, last;
    root = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#navbar");
    if (root == null)
      return;
    t1 = J.get$children$x(root);
    t1.clear$0(t1);
    t1 = E.DartdocElement.prototype.get$viewer.call(this, receiver);
    if (t1.get$breadcrumbs(t1).length < 2)
      return;
    t1 = E.DartdocElement.prototype.get$viewer.call(this, receiver);
    t1 = t1.get$breadcrumbs(t1);
    last = C.JSArray_methods.removeLast$0(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "JSArray", 0)));
    t1 = E.DartdocElement.prototype.get$viewer.call(this, receiver);
    t1 = H.SubListIterable$(t1.get$breadcrumbs(t1), 1, null, null);
    t1 = P.IterableBase.prototype.takeWhile$1.call(t1, t1, new B.IndexElement_crumbs_closure(last));
    t1.forEach$1(t1, new B.IndexElement_crumbs_closure0(receiver, root));
    root.appendChild(W.Element_Element$html("<li class=\"active\"><a class=\"btn-link\">" + H.S(J.get$decoratedName$x(last)) + "</a></li>", null, $.get$validator()));
    "12,101";
  },
  "+crumbs:0:0": 1,
  normalCrumb$1: function(receiver, item) {
    var t1 = J.getInterceptor$x(item);
    return W.Element_Element$html("<li><a class=\"btn-link\" href=\"#" + H.S(t1.get$linkHref(item)) + "\">" + H.S(t1.get$decoratedName(item)) + "</a></li>", null, $.get$validator());
    "12,115,12";
  },
  "+normalCrumb:1:0": 1,
  finalCrumb$1: function(receiver, item) {
    return W.Element_Element$html("<li class=\"active\"><a class=\"btn-link\">" + H.S(J.get$decoratedName$x(item)) + "</a></li>", null, $.get$validator());
    "12,115,12";
  },
  "+finalCrumb:1:0": 1,
  toggleOptionsMenu$3: function(receiver, $event, detail, target) {
    var list, t1;
    list = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector(".dropdown-menu").parentElement;
    t1 = J.getInterceptor$x(list);
    if (J.contains$1$asx(t1.get$classes(list), "open") === true)
      J.remove$1$ax(t1.get$classes(list), "open");
    else {
      receiver._openedAt = J.get$timeStamp$x($event);
      J.add$1$ax(t1.get$classes(list), "open");
    }
    "12,104,171,105,12,106,12";
  },
  "+toggleOptionsMenu:3:0": 1,
  hideOptionsMenuWhenClickedOutside$1: function(receiver, e) {
    var t1 = receiver._openedAt;
    if (t1 != null && J.$eq(t1, J.get$timeStamp$x(e)) === true)
      return;
    this.hideOptionsMenu$0(receiver);
    "12,172,171";
  },
  "+hideOptionsMenuWhenClickedOutside:1:0": 1,
  get$hideOptionsMenuWhenClickedOutside: function(_receiver) {
    return new W.BoundClosure$i1(this, B.IndexElement.prototype.hideOptionsMenuWhenClickedOutside$1, _receiver, "hideOptionsMenuWhenClickedOutside$1");
  },
  hideOptionsMenu$0: function(receiver) {
    J.remove$1$ax(J.get$classes$x((receiver.shadowRoot || receiver.webkitShadowRoot).querySelector(".dropdown-menu").parentElement), "open");
    "12";
  },
  "+hideOptionsMenu:0:0": 1,
  get$buildIdentifier: function(receiver) {
    var t1 = receiver._buildIdentifier;
    if (t1 == null) {
      receiver._buildIdentifier = "";
      W.HttpRequest_getString(P.Uri__uriEncode(C.List_CVk, "docs/VERSION", false), null, null).then$1(new B.IndexElement_buildIdentifier_closure(receiver)).catchError$1(new B.IndexElement_buildIdentifier_closure0());
      return "";
    } else
      return t1;
    "12,101";
  },
  "+buildIdentifier": 1,
  navHideShow$3: function(receiver, $event, detail, target) {
    var nav, t1;
    nav = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#nav-collapse-content");
    t1 = J.getInterceptor$x(nav);
    if (J.contains$1$asx(t1.get$classes(nav), "in") === true)
      J.remove$1$ax(t1.get$classes(nav), "in");
    else
      J.add$1$ax(t1.get$classes(nav), "in");
    "12,104,12,105,12,106,12,101";
  },
  "+navHideShow:3:0": 1,
  "@": function() {
    return [C.CustomTag_qRa];
  },
  static: {
IndexElement$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.IndexElement_methods.Element$created$0(receiver);
  C.IndexElement_methods.PolymerElement$created$0(receiver);
  return receiver;
  "63";
},

"+new IndexElement$created:0:0": 1}

},

"+IndexElement": [67],

IndexElement_enteredView_closure: {"": "Closure;this_0-",
  call$1: function(_) {
    var t1, t2, t3, t4, t5;
    t1 = this.this_0;
    t2 = J.getInterceptor$x(t1);
    t3 = E.DartdocElement.prototype.get$viewer.call(t2, t1);
    t3 = t3._dartdoc_viewer$__$isDesktop === true && t3._isMinimap;
    t4 = E.DartdocElement.prototype.get$viewer.call(t2, t1)._currentPage;
    t5 = J.getInterceptor(t4);
    t2.notifyPropertyChange$3(t1, C.Symbol_shouldShowLibraryMinimap, null, typeof t4 === "object" && t4 !== null && !!t5.$isLibrary && t3);
    t3 = E.DartdocElement.prototype.get$viewer.call(t2, t1);
    t3 = t3._dartdoc_viewer$__$isDesktop === true && t3._isMinimap;
    t4 = E.DartdocElement.prototype.get$viewer.call(t2, t1)._currentPage;
    t5 = J.getInterceptor(t4);
    t2.notifyPropertyChange$3(t1, C.Symbol_shouldShowClassMinimap, null, typeof t4 === "object" && t4 !== null && !!t5.$isClass && t3);
    t2.notifyPropertyChange$3(t1, C.Symbol_crumbs, null, "some value");
    t2.notifyPropertyChange$3(t1, C.Symbol_pageContentClass, null, t2.get$pageContentClass(t1));
    "12,134,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+IndexElement_enteredView_closure": [100],

IndexElement_enteredView_closure0: {"": "Closure;this_1-",
  call$1: function(changes) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.this_1;
    t2 = J.getInterceptor$ax(changes);
    t3 = J.get$oldValue$x(t2.get$first(changes));
    t4 = J.getInterceptor$x(t1);
    t5 = E.DartdocElement.prototype.get$viewer.call(t4, t1)._currentPage;
    t6 = J.getInterceptor(t5);
    t3 = typeof t5 === "object" && t5 !== null && !!t6.$isLibrary && t3 === true;
    t5 = E.DartdocElement.prototype.get$viewer.call(t4, t1);
    t5 = t5._dartdoc_viewer$__$isDesktop === true && t5._isMinimap;
    t6 = E.DartdocElement.prototype.get$viewer.call(t4, t1)._currentPage;
    t7 = J.getInterceptor(t6);
    t4.notifyPropertyChange$3(t1, C.Symbol_shouldShowLibraryMinimap, t3, typeof t6 === "object" && t6 !== null && !!t7.$isLibrary && t5);
    t2 = J.get$oldValue$x(t2.get$first(changes));
    t3 = E.DartdocElement.prototype.get$viewer.call(t4, t1)._currentPage;
    t5 = J.getInterceptor(t3);
    t2 = typeof t3 === "object" && t3 !== null && !!t5.$isClass && t2 === true;
    t3 = E.DartdocElement.prototype.get$viewer.call(t4, t1);
    t3 = t3._dartdoc_viewer$__$isDesktop === true && t3._isMinimap;
    t5 = E.DartdocElement.prototype.get$viewer.call(t4, t1)._currentPage;
    t6 = J.getInterceptor(t5);
    t4.notifyPropertyChange$3(t1, C.Symbol_shouldShowClassMinimap, t2, typeof t5 === "object" && t5 !== null && !!t6.$isClass && t3);
    t4.notifyPropertyChange$3(t1, C.Symbol_pageContentClass, null, t4.get$pageContentClass(t1));
    "12,108,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+IndexElement_enteredView_closure": [100],

IndexElement_enteredView_closure1: {"": "Closure;this_2-",
  call$1: function(_) {
    var t1, t2;
    t1 = this.this_2;
    t2 = J.getInterceptor$x(t1);
    t2.notifyPropertyChange$3(t1, C.Symbol_pageContentClass, null, t2.get$pageContentClass(t1));
    "12,134,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+IndexElement_enteredView_closure": [100],

IndexElement_crumbs_closure: {"": "Closure;last_0-",
  call$1: function(x) {
    return J.$eq(x, this.last_0) !== true;
    "12,116,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+IndexElement_crumbs_closure": [100],

IndexElement_crumbs_closure0: {"": "Closure;this_1-,root_2-",
  call$1: function(x) {
    return J.append$1$x(this.root_2, J.normalCrumb$1$x(this.this_1, x));
    "12,116,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+IndexElement_crumbs_closure": [100],

IndexElement_buildIdentifier_closure: {"": "Closure;this_0-",
  call$1: function(version) {
    var t1, t2;
    t1 = this.this_0;
    t2 = J.getInterceptor$x(t1);
    t2.set$_buildIdentifier(t1, "r " + H.S(version));
    t2.notifyPropertyChange$3(t1, C.Symbol_buildIdentifier, null, t2.get$_buildIdentifier(t1));
    "12,173,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+IndexElement_buildIdentifier_closure": [100],

IndexElement_buildIdentifier_closure0: {"": "Closure;",
  call$1: function(_) {
    return;
    "12,134,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+IndexElement_buildIdentifier_closure": [100]}],
["item", "item.dart", , A, {
ItemElement: {"": ["MemberElement;_item-,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$observables: function(receiver) {
    return this.concat$2(receiver, E.MemberElement.prototype.get$observables.call(this, receiver), C.List_sAO);
    "12";
  },
  "+observables": 1,
  get$methodsToCall: function(receiver) {
    return this.concat$2(receiver, E.DartdocElement.prototype.get$methodsToCall.call(this, receiver), C.List_Symbol_addChildren);
    "12";
  },
  "+methodsToCall": 1,
  wrongClass$1: function(receiver, newItem) {
    var t1 = J.getInterceptor(newItem);
    return typeof newItem !== "object" || newItem === null || !t1.$isItem;
    "12,132,12";
  },
  "+wrongClass:1:0": 1,
  get$defaultItem: function(receiver) {
    return E.Class$forPlaceholder("loading.loading", "loading");
    "12";
  },
  "+defaultItem": 1,
  get$item: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver);
    "12";
  },
  "+item": 1,
  set$item: function(receiver, newItem) {
    E.MemberElement.prototype.set$item.call(this, receiver, newItem);
    return newItem;
    "12,132,12";
  },
  "+item=": 1,
  get$linkHref: function(receiver) {
    return J.get$linkHref$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "12,101";
  },
  "+linkHref": 1,
  linkHref$1: function($receiver, arg0) {
    return this.get$linkHref($receiver).call$1(arg0);
  },
  get$title: function(receiver) {
    return J.get$decoratedName$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "7,101";
  },
  "+title": 1,
  get$parameters: function(receiver) {
    var t1, t2;
    t1 = E.MemberElement.prototype.get$item.call(this, receiver);
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isMethod ? J.get$parameters$x(E.MemberElement.prototype.get$item.call(this, receiver)) : [];
    "12,101";
  },
  "+parameters": 1,
  get$type: function(receiver) {
    var t1, t2;
    t1 = E.MemberElement.prototype.get$item.call(this, receiver);
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isMethod ? J.get$type$x(E.MemberElement.prototype.get$item.call(this, receiver)) : null;
    "12,101";
  },
  "+type": 1,
  get$isMethod: function(receiver) {
    var t1, t2;
    t1 = E.MemberElement.prototype.get$item.call(this, receiver);
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isMethod;
    "12,101";
  },
  "+isMethod": 1,
  get$isConstructor: function(receiver) {
    var t1, t2;
    t1 = E.MemberElement.prototype.get$item.call(this, receiver);
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isMethod && J.get$isConstructor$x(E.MemberElement.prototype.get$item.call(this, receiver)) === true;
    "12,101";
  },
  "+isConstructor": 1,
  get$modifiers: function(receiver) {
    var t1, t2;
    t1 = E.MemberElement.prototype.get$item.call(this, receiver);
    t2 = J.getInterceptor(t1);
    if (typeof t1 !== "object" || t1 === null || !t2.$isMethod)
      return "";
    t1 = E.MemberElement.prototype.get$item.call(this, receiver).get$isConstant() === true ? "const" : "";
    t1 += E.MemberElement.prototype.get$item.call(this, receiver).get$isAbstract() === true ? "abstract" : "";
    return t1 + (E.MemberElement.prototype.get$item.call(this, receiver).get$isStatic() === true ? "static" : "");
    "7,101";
  },
  "+modifiers": 1,
  get$constantModifier: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver).get$isConstant() === true ? "const" : "";
    "12,101";
  },
  "+constantModifier": 1,
  get$abstractModifier: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver).get$isAbstract() === true ? "abstract" : "";
    "12,101";
  },
  "+abstractModifier": 1,
  get$staticModifier: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver).get$isStatic() === true ? "static" : "";
    "12,101";
  },
  "+staticModifier": 1,
  get$shouldShowClassOrLibraryComment: function(receiver) {
    var t1, t2;
    t1 = E.MemberElement.prototype.get$item.call(this, receiver);
    t2 = J.getInterceptor(t1);
    if (typeof t1 !== "object" || t1 === null || !t2.$isClass) {
      t1 = E.MemberElement.prototype.get$item.call(this, receiver);
      t2 = J.getInterceptor(t1);
      t2 = typeof t1 === "object" && t1 !== null && !!t2.$isLibrary;
      t1 = t2;
    } else
      t1 = true;
    return t1 && E.MemberElement.prototype.get$item.call(this, receiver).get$previewComment() != null;
    "12,101";
  },
  "+shouldShowClassOrLibraryComment": 1,
  get$shouldShowMethodComment: function(receiver) {
    var t1, t2;
    t1 = E.MemberElement.prototype.get$item.call(this, receiver);
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isMethod && J.$eq(E.MemberElement.prototype.get$item.call(this, receiver).get$comment(), "<span></span>") !== true;
    "12,101";
  },
  "+shouldShowMethodComment": 1,
  enteredView$0: function(receiver) {
    E.DartdocElement.prototype.enteredView$0.call(this, receiver);
    this.addChildren$0(receiver);
    "12";
  },
  "+enteredView:0:0": 1,
  addChildren$0: function(receiver) {
    var mainAnchor, t1, t2, t3, returnType, signature, params, root, commentary;
    P.StringBuffer$("");
    mainAnchor = W.AnchorElement_AnchorElement(null);
    t1 = J.getInterceptor$x(mainAnchor);
    t1.set$href(mainAnchor, "#" + H.S(J.get$linkHref$x(E.MemberElement.prototype.get$item.call(this, receiver))));
    mainAnchor.id = this.get$idName(receiver);
    t2 = E.MemberElement.prototype.get$item.call(this, receiver);
    t3 = J.getInterceptor(t2);
    if (typeof t2 !== "object" || t2 === null || !t3.$isMethod)
      t1.insertAdjacentText$2(mainAnchor, "beforeend", J.get$decoratedName$x(E.MemberElement.prototype.get$item.call(this, receiver)));
    else {
      t1 = E.MemberElement.prototype.get$item.call(this, receiver);
      t2 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t2.$isMethod) {
        t1 = E.MemberElement.prototype.get$item.call(this, receiver);
        t2 = J.getInterceptor(t1);
        t3 = !(typeof t1 === "object" && t1 !== null && !!t2.$isMethod && J.get$isConstructor$x(E.MemberElement.prototype.get$item.call(this, receiver)) === true);
        t1 = t3;
      } else
        t1 = false;
      if (t1) {
        if (J.get$type$x(E.MemberElement.prototype.get$item.call(this, receiver)) != null && J.get$type$x(E.MemberElement.prototype.get$item.call(this, receiver)).get$isDynamic() !== true) {
          returnType = document.createElement("span", null);
          J.add$1$ax(J.get$classes$x(returnType), "type");
          returnType.appendChild(E.MemberElement_createInner(J.get$type$x(E.MemberElement.prototype.get$item.call(this, receiver))));
          mainAnchor.appendChild(returnType);
        }
        signature = document.createElement("span", null);
        J.insertAdjacentText$2$x(signature, "beforeend", this.get$modifiers(receiver));
        signature.appendChild(W.Element_Element$html("<b>" + H.S(J.get$decoratedName$x(E.MemberElement.prototype.get$item.call(this, receiver))) + "</b>", null, null));
        params = document.createElement("dartdoc-parameter", null);
        t1 = E.MemberElement.prototype.get$item.call(this, receiver);
        t2 = J.getInterceptor(t1);
        J.set$parameters$x(params, typeof t1 === "object" && t1 !== null && !!t2.$isMethod ? J.get$parameters$x(E.MemberElement.prototype.get$item.call(this, receiver)) : []);
        signature.appendChild(params);
        mainAnchor.appendChild(signature);
      }
    }
    root = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#nameGoesHere");
    t1 = J.getInterceptor$x(root);
    t2 = t1.get$children(root);
    t2.clear$0(t2);
    root.appendChild(mainAnchor);
    if (this.get$shouldShowClassOrLibraryComment(receiver)) {
      commentary = [W.Element_Element$html("<hr/>", null, null)];
      commentary.push(W.Element_Element$html("<div class=\"description\"></div>", null, null));
      this.addComment$3(receiver, "dartdoc-item", true, C.JSArray_methods.get$last(commentary));
      t2 = t1.get$children(root);
      t2.addAll$1(t2, commentary);
    }
    t2 = E.MemberElement.prototype.get$item.call(this, receiver);
    t3 = J.getInterceptor(t2);
    if (typeof t2 === "object" && t2 !== null && !!t3.$isMethod && J.$eq(E.MemberElement.prototype.get$item.call(this, receiver).get$comment(), "<span></span>") !== true) {
      commentary = [W.Element_Element$html("<hr/>", null, null)];
      commentary.push(W.Element_Element$html("<div class=\"description\"></div>" + ("id=" + H.S(J.get$name$x(E.MemberElement.prototype.get$item.call(this, receiver))) + "-method-comment"), null, null));
      this.addComment$3(receiver, "dartdoc-item", true, C.JSArray_methods.get$last(commentary));
      t1 = t1.get$children(root);
      t1.addAll$1(t1, commentary);
    }
    "12";
  },
  "+addChildren:0:0": 1,
  get$addChildren: function(_receiver) {
    return new H.BoundClosure$i0(this, A.ItemElement.prototype.addChildren$0, _receiver, "addChildren$0");
  },
  ItemElement$created$0: function(receiver) {
    J.setProperty$2$x(receiver.style, "display", "block");
    "12";
  },
  "@": function() {
    return [C.CustomTag_h3l];
  },
  static: {
ItemElement$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.ItemElement_methods.Element$created$0(receiver);
  C.ItemElement_methods.PolymerElement$created$0(receiver);
  C.ItemElement_methods.MemberElement$created$0(receiver);
  C.ItemElement_methods.ItemElement$created$0(receiver);
  return receiver;
  "64";
},

"+new ItemElement$created:0:0": 1}

},

"+ItemElement": [68]}],
["library", "library.dart", , X, {
LibraryElement: {"": ["MemberElement;_item-,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$observables: function(receiver) {
    return N.concat(E.MemberElement.prototype.get$observables.call(this, receiver), C.List_kjl);
    "12";
  },
  "+observables": 1,
  wrongClass$1: function(receiver, newItem) {
    var t1 = J.getInterceptor(newItem);
    return typeof newItem !== "object" || newItem === null || !t1.$isLibrary;
    "12,132,12";
  },
  "+wrongClass:1:0": 1,
  get$item: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver);
    "12";
  },
  "+item": 1,
  set$item: function(receiver, newItem) {
    E.MemberElement.prototype.set$item.call(this, receiver, newItem);
    return newItem;
    "12,132,12";
  },
  "+item=": 1,
  get$operators: function(receiver) {
    return J.get$operators$x(E.MemberElement.prototype.get$item.call(this, receiver)) == null ? [] : J.get$content$x(J.get$operators$x(E.MemberElement.prototype.get$item.call(this, receiver)));
    "12,101";
  },
  "+operators": 1,
  get$variables: function(receiver) {
    return J.get$variables$x(E.MemberElement.prototype.get$item.call(this, receiver)) == null ? [] : J.get$content$x(J.get$variables$x(E.MemberElement.prototype.get$item.call(this, receiver)));
    "12,101";
  },
  "+variables": 1,
  get$functions: function(receiver) {
    return J.get$functions$x(E.MemberElement.prototype.get$item.call(this, receiver)) == null ? [] : J.get$content$x(J.get$functions$x(E.MemberElement.prototype.get$item.call(this, receiver)));
    "12,101";
  },
  "+functions": 1,
  get$classes: function(receiver) {
    return J.get$classes$x(E.MemberElement.prototype.get$item.call(this, receiver)) == null ? [] : J.get$content$x(J.get$classes$x(E.MemberElement.prototype.get$item.call(this, receiver)));
    "12,101";
  },
  "+classes": 1,
  get$typedefs: function(receiver) {
    return J.get$typedefs$x(E.MemberElement.prototype.get$item.call(this, receiver)) == null ? [] : J.get$content$x(J.get$typedefs$x(E.MemberElement.prototype.get$item.call(this, receiver)));
    "12,101";
  },
  "+typedefs": 1,
  get$errors: function(receiver) {
    return J.get$errors$x(E.MemberElement.prototype.get$item.call(this, receiver)) == null ? [] : J.get$content$x(J.get$errors$x(E.MemberElement.prototype.get$item.call(this, receiver)));
    "12,101";
  },
  "+errors": 1,
  get$operatorsIsNotEmpty: function(receiver) {
    return J.get$isNotEmpty$asx(J.get$operators$x(E.MemberElement.prototype.get$item.call(this, receiver)) == null ? [] : J.get$content$x(J.get$operators$x(E.MemberElement.prototype.get$item.call(this, receiver))));
    "12,101";
  },
  "+operatorsIsNotEmpty": 1,
  get$variablesIsNotEmpty: function(receiver) {
    return J.get$isNotEmpty$asx(J.get$variables$x(E.MemberElement.prototype.get$item.call(this, receiver)) == null ? [] : J.get$content$x(J.get$variables$x(E.MemberElement.prototype.get$item.call(this, receiver))));
    "12,101";
  },
  "+variablesIsNotEmpty": 1,
  get$functionsIsNotEmpty: function(receiver) {
    return J.get$isNotEmpty$asx(J.get$functions$x(E.MemberElement.prototype.get$item.call(this, receiver)) == null ? [] : J.get$content$x(J.get$functions$x(E.MemberElement.prototype.get$item.call(this, receiver))));
    "12,101";
  },
  "+functionsIsNotEmpty": 1,
  get$classesIsNotEmpty: function(receiver) {
    return J.get$isNotEmpty$asx(J.get$classes$x(E.MemberElement.prototype.get$item.call(this, receiver)) == null ? [] : J.get$content$x(J.get$classes$x(E.MemberElement.prototype.get$item.call(this, receiver))));
    "12,101";
  },
  "+classesIsNotEmpty": 1,
  get$typedefsIsNotEmpty: function(receiver) {
    return J.get$isNotEmpty$asx(J.get$typedefs$x(E.MemberElement.prototype.get$item.call(this, receiver)) == null ? [] : J.get$content$x(J.get$typedefs$x(E.MemberElement.prototype.get$item.call(this, receiver))));
    "12,101";
  },
  "+typedefsIsNotEmpty": 1,
  get$errorsIsNotEmpty: function(receiver) {
    return J.get$isNotEmpty$asx(J.get$errors$x(E.MemberElement.prototype.get$item.call(this, receiver)) == null ? [] : J.get$content$x(J.get$errors$x(E.MemberElement.prototype.get$item.call(this, receiver))));
    "12,101";
  },
  "+errorsIsNotEmpty": 1,
  get$defaultItem: function(receiver) {
    return E.Library$forPlaceholder(H.fillLiteralMap(["name", "loading", "preview", "loading"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    "12";
  },
  "+defaultItem": 1,
  "@": function() {
    return [C.CustomTag_KD4];
  },
  static: {
LibraryElement$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.LibraryElement_methods.Element$created$0(receiver);
  C.LibraryElement_methods.PolymerElement$created$0(receiver);
  C.LibraryElement_methods.MemberElement$created$0(receiver);
  return receiver;
  "65";
},

"+new LibraryElement$created:0:0": 1}

},

"+LibraryElement": [68]}],
["library_panel", "library-panel.dart", , Y, {
LibraryPanel: {"": ["DartdocElement;_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  enteredView$0: function(receiver) {
    E.DartdocElement.prototype.enteredView$0.call(this, receiver);
    this.createEntries$0(receiver);
    "12";
  },
  "+enteredView:0:0": 1,
  linkHref$1: function(receiver, library) {
    return library == null ? "" : J.get$linkHref$x(library);
    "12,41,12";
  },
  "+linkHref:1:0": 1,
  get$linkHref: function(_receiver) {
    return new W.BoundClosure$i1(this, Y.LibraryPanel.prototype.linkHref$1, _receiver, "linkHref$1");
  },
  createEntries$0: function(receiver) {
    var mainElement, t1, breadcrumbs, library;
    mainElement = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#library-panel");
    if (mainElement == null)
      return;
    t1 = J.get$children$x(mainElement);
    t1.clear$0(t1);
    t1 = $.get$viewer();
    breadcrumbs = t1.get$breadcrumbs(t1);
    for (t1 = $.get$viewer(), t1 = J.get$iterator$ax(t1.get$libraries(t1)); t1.moveNext$0();) {
      library = t1.get$current();
      mainElement.appendChild(J.$eq(J.get$decoratedName$x(library), J.get$decoratedName$x(C.JSArray_methods.get$first(breadcrumbs))) === true ? this.newElement$2(receiver, library, true) : this.newElement$2(receiver, library, false));
    }
    "12,101";
  },
  "+createEntries:0:0": 1,
  newElement$2: function(receiver, library, isActive) {
    var t1 = "<a href=\"#" + H.S(library == null ? "" : J.get$linkHref$x(library)) + "\" class=\"list-group-item";
    return W.Element_Element$html(t1 + (isActive === true ? " active" : "") + "\">" + H.S(J.get$decoratedName$x(library)) + "</a>", null, $.get$validator());
    "12,41,12,174,18";
  },
  "+newElement:2:0": 1,
  LibraryPanel$created$0: function(receiver) {
    L.PathObserver$(receiver, "viewer.libraries", null).bindSync$1(new Y.LibraryPanel$created_closure(receiver));
    "12";
  },
  "@": function() {
    return [C.CustomTag_QKd];
  },
  static: {
LibraryPanel$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.LibraryPanel_methods.Element$created$0(receiver);
  C.LibraryPanel_methods.PolymerElement$created$0(receiver);
  C.LibraryPanel_methods.LibraryPanel$created$0(receiver);
  return receiver;
  "66";
},

"+new LibraryPanel$created:0:0": 1}

},

"+LibraryPanel": [67],

LibraryPanel$created_closure: {"": "Closure;this_0-",
  call$1: function(_) {
    J.notifyPropertyChange$3$x(this.this_0, C.Symbol_createEntries, null, true);
    "12,134,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+LibraryPanel$created_closure": [100]}],
["location", "package:dartdoc_viewer/location.dart", , Y, {
DocsLocation: {"": "Object;packageName<,libraryName<,memberName<,subMemberName,anchor?",
  _extractPieces$1: function(uri) {
    var t1 = {};
    if (uri == null || J.$eq(J.get$length$asx(uri), 0) === true)
      return;
    t1.position_0 = J.$eq(J.$index$asx(uri, 0), "#") === true ? 1 : 0;
    t1 = new Y.DocsLocation__extractPieces__check(t1, uri);
    this.packageName = t1.call$1($.get$packageMatch());
    this.libraryName = t1.call$1($.get$libraryMatch());
    this.memberName = t1.call$1($.get$memberMatch());
    this.subMemberName = t1.call$1($.get$subMemberMatch());
    this.anchor = t1.call$1($.get$anchorMatch());
  },
  get$withAnchor: function() {
    var t1, t2, t3, t4;
    t1 = this.get$packagePlus();
    t2 = this.libraryName;
    if (t2 == null)
      t2 = "";
    t3 = this.memberName;
    t3 = t3 == null ? "" : "." + H.S(t3);
    t4 = this.subMemberName;
    t1 = C.JSArray_methods.join$1([t1, t2, t3, t4 == null ? "" : "." + H.S(t4)], "");
    t2 = this.anchor;
    return t1 + (t2 == null ? "" : "@" + H.S(t2));
  },
  get$packagePlus: function() {
    var t1 = this.packageName;
    if (t1 == null)
      t1 = "";
    else
      t1 = this.libraryName == null ? t1 : H.S(t1) + "/";
    return t1;
  },
  get$componentNames: function() {
    var t1, t2;
    t1 = [this.packageName];
    t2 = new H.WhereIterable([this.libraryName, this.memberName, this.subMemberName], new Y.DocsLocation_componentNames_closure());
    H.setRuntimeTypeInfo(t2, [null]);
    C.JSArray_methods.addAll$1(t1, t2);
    return t1;
  },
  get$name: function(_) {
    var t1 = this.anchor;
    if (t1 != null)
      return t1;
    t1 = this.subMemberName;
    if (t1 != null)
      return t1;
    t1 = this.memberName;
    if (t1 != null)
      return t1;
    t1 = this.libraryName;
    if (t1 != null)
      return t1;
    t1 = this.packageName;
    if (t1 != null)
      return t1;
    return "";
  },
  "+name": 0,
  items$1: function(_, root) {
    var items, t1, library;
    items = [];
    t1 = this.packageName;
    if (t1 == null)
      ;
    if (this.libraryName == null)
      return items;
    library = C.JSArray_methods.get$last(items).memberNamed$1(this.libraryName);
    items.push(library);
    t1 = this.memberName;
    if (t1 == null)
      ;
    return items;
  },
  "+items:1:0": 0,
  get$items: function(_receiver) {
    return new W.BoundClosure$i1(this, Y.DocsLocation.prototype.items$1, _receiver, "items$1");
  },
  itemFromList$1: function(items) {
    var t1 = J.get$reversed$ax(items);
    return t1.firstWhere$1(t1, new Y.DocsLocation_itemFromList_closure());
  },
  get$parentName: function() {
    var names, t1;
    names = this.get$componentNames();
    t1 = names.length;
    if (t1 < 2)
      return "";
    return names[t1 - 2];
  },
  get$isEmpty: function(_) {
    return this.packageName == null && this.libraryName == null && this.memberName == null && this.subMemberName == null && this.anchor == null;
  },
  "+isEmpty": 0,
  toString$0: function(_) {
    var t1, t2, t3, t4;
    t1 = this.get$packagePlus();
    t2 = this.libraryName;
    if (t2 == null)
      t2 = "";
    t3 = this.memberName;
    t3 = t3 == null ? "" : "." + H.S(t3);
    t4 = this.subMemberName;
    t1 = C.JSArray_methods.join$1([t1, t2, t3, t4 == null ? "" : "." + H.S(t4)], "");
    t2 = this.anchor;
    return "DocsLocation(" + (t1 + (t2 == null ? "" : "@" + H.S(t2))) + ")";
  },
  "+toString:0:0": 0,
  DocsLocation$fromList$1: function(components) {
    if (components.length > 0)
      this.packageName = components[0];
    if (components.length > 1)
      this.libraryName = components[1];
    if (components.length > 2)
      this.memberName = components[2];
    if (components.length > 3)
      this.subMemberName = components[3];
    if (components.length > 4)
      this.anchor = components[4];
  },
  static: {
DocsLocation$fromList: function(components) {
  var t1 = new Y.DocsLocation(null, null, null, null, null);
  t1.DocsLocation$fromList$1(components);
  return t1;
}}

},

DocsLocation__extractPieces__check: {"": "Closure;box_0,uri_1",
  call$1: function(regex) {
    var t1, match, matchedString, t2, t3;
    t1 = this.box_0;
    match = J.matchAsPrefix$2$s(regex, this.uri_1, t1.position_0);
    if (match != null) {
      matchedString = match.group$1(1);
      t2 = t1.position_0;
      t3 = J.get$length$asx(match.group$1(0));
      if (typeof t3 !== "number")
        throw H.iae(t3);
      t1.position_0 = t2 + t3;
      return matchedString;
    }
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

DocsLocation_componentNames_closure: {"": "Closure;",
  call$1: function(x) {
    return x != null;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

DocsLocation_itemFromList_closure: {"": "Closure;",
  call$1: function(x) {
    return x != null;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["logging", "package:logging/logging.dart", , N, {
Logger: {"": "Object;name>,parent>,_level,_children>,children>,_logging$_controller",
  get$fullName: function() {
    var t1, t2, t3;
    t1 = this.parent;
    t2 = t1 == null || J.$eq(J.get$name$x(t1), "") === true;
    t3 = this.name;
    return t2 ? t3 : t1.get$fullName() + "." + t3;
  },
  get$level: function() {
    if ($.hierarchicalLoggingEnabled) {
      var t1 = this.parent;
      if (t1 != null)
        return t1.get$level();
    }
    return $._rootLevel;
  },
  isLoggable$1: function(value) {
    return value.value >= this.get$level().value;
  },
  log$4: function(logLevel, message, error, stackTrace) {
    var t1, t2, t3, record, target;
    if (logLevel.value >= this.get$level().value) {
      t1 = this.get$fullName();
      t2 = P.DateTime$_now();
      t3 = $.LogRecord__nextNumber;
      $.LogRecord__nextNumber = t3 + 1;
      record = new N.LogRecord(logLevel, message, t1, t2, t3, error, stackTrace);
      if ($.hierarchicalLoggingEnabled)
        for (target = this; target != null;) {
          t1 = J.getInterceptor$x(target);
          t1._publish$1(target, record);
          target = t1.get$parent(target);
        }
      else
        J._publish$1$x(N.Logger_Logger(""), record);
    }
  },
  finer$3: function(message, error, stackTrace) {
    return this.log$4(C.Level_FINER_400, message, error, stackTrace);
  },
  finer$1: function(message) {
    return this.finer$3(message, null, null);
  },
  fine$3: function(message, error, stackTrace) {
    return this.log$4(C.Level_FINE_500, message, error, stackTrace);
  },
  fine$1: function(message) {
    return this.fine$3(message, null, null);
  },
  info$3: function(message, error, stackTrace) {
    return this.log$4(C.Level_INFO_800, message, error, stackTrace);
  },
  info$1: function(message) {
    return this.info$3(message, null, null);
  },
  warning$3: function(message, error, stackTrace) {
    return this.log$4(C.Level_WARNING_900, message, error, stackTrace);
  },
  warning$1: function(message) {
    return this.warning$3(message, null, null);
  },
  _publish$1: function(_, record) {
  },
  Logger$_internal$3: function($name, $parent, children) {
    var t1 = this.parent;
    if (t1 != null) {
      t1 = J.get$_children$x(t1);
      t1.$indexSet(t1, this.name, this);
    }
  },
  $isLogger: true,
  static: {
"": "Logger__loggers",
Logger_Logger: function($name) {
  return $.get$Logger__loggers().putIfAbsent$2($name, new N.Logger_Logger_closure($name));
},

Logger_Logger$_named: function($name) {
  var dot, $parent, thisName;
  if (C.JSString_methods.startsWith$1($name, "."))
    throw H.wrapException(new P.ArgumentError("name shouldn't start with a '.'"));
  dot = C.JSString_methods.lastIndexOf$1($name, ".");
  if (dot === -1) {
    $parent = $name !== "" ? N.Logger_Logger("") : null;
    thisName = $name;
  } else {
    $parent = N.Logger_Logger(C.JSString_methods.substring$2($name, 0, dot));
    thisName = C.JSString_methods.substring$1($name, dot + 1);
  }
  return N.Logger$_internal(thisName, $parent, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, N.Logger));
},

Logger$_internal: function($name, $parent, children) {
  var t1 = new F.UnmodifiableMapView0(children);
  H.setRuntimeTypeInfo(t1, [null, null]);
  t1 = new N.Logger($name, $parent, null, children, t1, null);
  t1.Logger$_internal$3($name, $parent, children);
  return t1;
}}

},

Logger_Logger_closure: {"": "Closure;name_0",
  call$0: function() {
    return N.Logger_Logger$_named(this.name_0);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Level: {"": "Object;name>,value>",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isLevel && this.value === other.value;
  },
  $lt: function(_, other) {
    var t1 = J.get$value$x(other);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this.value < t1;
  },
  $le: function(_, other) {
    var t1 = J.get$value$x(other);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this.value <= t1;
  },
  $gt: function(_, other) {
    var t1 = J.get$value$x(other);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this.value > t1;
  },
  $ge: function(_, other) {
    var t1 = J.get$value$x(other);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this.value >= t1;
  },
  compareTo$1: function(_, other) {
    var t1 = J.get$value$x(other);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this.value - t1;
  },
  "+compareTo:1:0": 0,
  get$hashCode: function(_) {
    return this.value;
  },
  toString$0: function(_) {
    return this.name;
  },
  "+toString:0:0": 0,
  $isLevel: true,
  static: {
"": "Level_ALL,Level_OFF,Level_FINEST,Level_FINER,Level_FINE,Level_CONFIG,Level_INFO,Level_WARNING,Level_SEVERE,Level_SHOUT",
}

},

LogRecord: {"": "Object;level<,message>,loggerName,time,sequenceNumber,error>,stackTrace<",
  toString$0: function(_) {
    return "[" + this.level.name + "] " + this.loggerName + ": " + this.message;
  },
  "+toString:0:0": 0,
  static: {
"": "LogRecord__nextNumber",
}

}}],
["member", "member.dart", , E, {
SameProtocolUriPolicy: {"": "Object;_member$_hiddenAnchor,_member$_loc",
  allowsUri$1: function(uri) {
    var t1, t2, older, newer;
    t1 = this._member$_hiddenAnchor;
    t2 = J.getInterceptor$x(t1);
    t2.set$href(t1, uri);
    older = t2.get$protocol(t1);
    newer = J.get$protocol$x(this._member$_loc);
    if (!(older === "http:" && J.$eq(newer, "https:") === true))
      t1 = older === "https:" && J.$eq(newer, "http:") === true;
    else
      t1 = true;
    if (t1)
      return true;
    return (older == null ? newer == null : older === newer) || older === ":";
  }
},

DartdocElement: {"": ["PolymerElement;_cachedMirror%-,_pathname%-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$applyAuthorStyles: function(receiver) {
    return true;
    "12";
  },
  "+applyAuthorStyles": 1,
  get$viewer: function(receiver) {
    return $.get$viewer();
    "12,101";
  },
  "+viewer": 1,
  notifyObservables$1: function(receiver, thingToDo) {
    var oldValues, newValues;
    oldValues = this.get$observableValues(receiver);
    thingToDo.call$0();
    newValues = this.get$observableValues(receiver);
    J.forEach$1$ax(this.get$observables(receiver), new E.DartdocElement_notifyObservables_closure(receiver, oldValues, newValues));
    J.forEach$1$ax(this.get$methodsToCall(receiver), new E.DartdocElement_notifyObservables_closure0(receiver));
    "12,175,93";
  },
  "+notifyObservables:1:0": 1,
  get$observables: function(receiver) {
    return C.List_empty;
    "176";
  },
  "+observables": 1,
  get$methodsToCall: function(receiver) {
    return C.List_Symbol_addComment;
    "176";
  },
  "+methodsToCall": 1,
  concat$2: function(receiver, list1, list2) {
    var t1 = new H.ExpandIterable([list1, list2], new E.DartdocElement_concat_closure());
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
    "136,177,136,178,136";
  },
  "+concat:2:0": 1,
  get$observableValues: function(receiver) {
    return P.LinkedHashMap_LinkedHashMap$fromIterables(this.get$observables(receiver), J.map$1$ax(this.get$observables(receiver), new E.DartdocElement_observableValues_closure(receiver)), null, null);
    "12";
  },
  "+observableValues": 1,
  get$mirror: function(receiver) {
    var t1 = receiver._cachedMirror;
    if (t1 == null) {
      t1 = H.reflect(receiver);
      receiver._cachedMirror = t1;
    }
    return t1;
    "12";
  },
  "+mirror": 1,
  enteredView$0: function(receiver) {
    var t1, t2;
    A.Polymer.prototype.enteredView$0.call(this, receiver);
    t1 = C.EventStreamProvider_click.forElement$1(receiver);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(this.get$handleClick(receiver)), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
    t2._tryResume$0();
    "12";
  },
  "+enteredView:0:0": 1,
  handleClick$1: function(receiver, e) {
    var t1, t2, t3, anchor, $location;
    t1 = J.getInterceptor$x(e);
    t2 = t1.get$target(e);
    t3 = J.getInterceptor(t2);
    if (typeof t2 === "object" && t2 !== null && !!t3.$isAnchorElement) {
      anchor = t1.get$target(e);
      t2 = J.getInterceptor$x(anchor);
      if (J.$eq(t2.get$host(anchor), J.get$host$x(C.Window_methods.get$location(window))) === true && J.$eq(t2.get$pathname(anchor), receiver._pathname) === true && t1.get$ctrlKey(e) !== true) {
        t1.preventDefault$0(e);
        $location = J.substring$2$s(t2.get$hash(anchor), 1, J.get$length$asx(t2.get$hash(anchor)));
        this.get$viewer(receiver).handleLink$1($location);
      }
    }
    "12,172,179";
  },
  "+handleClick:1:0": 1,
  get$handleClick: function(_receiver) {
    return new W.BoundClosure$i1(this, E.DartdocElement.prototype.handleClick$1, _receiver, "handleClick$1");
  },
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
DartdocElement$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.DartdocElement_methods.Element$created$0(receiver);
  C.DartdocElement_methods.PolymerElement$created$0(receiver);
  return receiver;
  "67";
},

"+new DartdocElement$created:0:0": 1}

},

"+DartdocElement": [180],

DartdocElement_notifyObservables_closure: {"": "Closure;this_0-,oldValues_1-,newValues_2-",
  call$1: function(symbol) {
    return J.notifyPropertyChange$3$x(this.this_0, symbol, J.$index$asx(this.oldValues_1, symbol), J.$index$asx(this.newValues_2, symbol));
    "12,181,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+DartdocElement_notifyObservables_closure": [100],

DartdocElement_notifyObservables_closure0: {"": "Closure;this_3-",
  call$1: function(symbol) {
    return J.notifyPropertyChange$3$x(this.this_3, symbol, null, "changeNoMatterWhat");
    "12,181,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+DartdocElement_notifyObservables_closure": [100],

DartdocElement_concat_closure: {"": "Closure;",
  call$1: function(x) {
    return x;
    "12,116,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+DartdocElement_concat_closure": [100],

DartdocElement_observableValues_closure: {"": "Closure;this_0-",
  call$1: function(symbol) {
    var t1, t2, t3;
    t1 = this.this_0;
    t2 = J.getInterceptor$x(t1);
    if (t2.get$_cachedMirror(t1) == null) {
      t3 = H.reflect(t1);
      t2.set$_cachedMirror(t1, t3);
      t1 = t3;
    } else
      t1 = t2.get$_cachedMirror(t1);
    return t1.getField$1(symbol).reflectee;
    "12,181,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+DartdocElement_observableValues_closure": [100],

MemberElement: {"": ["DartdocElement;_item%-,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$observables: function(receiver) {
    return this.concat$2(receiver, E.DartdocElement.prototype.get$observables.call(this, receiver), C.List_Symbol_item_Symbol_idName);
    "182";
  },
  "+observables": 1,
  set$item: function(receiver, newItem) {
    if (newItem == null || this.wrongClass$1(receiver, newItem))
      return;
    this.notifyObservables$1(receiver, new E.MemberElement_item_closure(receiver, newItem));
    "12,132,12,98";
  },
  "+item=": 1,
  get$item: function(receiver) {
    var t1 = receiver._item;
    if (t1 == null) {
      t1 = this.get$defaultItem(receiver);
      receiver._item = t1;
    }
    return t1;
    "12,98";
  },
  "+item": 1,
  get$idName: function(receiver) {
    var t1;
    if (this.get$item(receiver) == null)
      return "";
    t1 = this.get$item(receiver).get$anchorHrefLocation().anchor;
    return t1 == null ? "" : t1;
    "7,101";
  },
  "+idName": 1,
  addComment$3: function(receiver, elementName, preview, commentLocation) {
    var comment, t1, t2, commentElement, firstParagraph, links, link, t3, t4, index;
    if (this.get$item(receiver) == null)
      return;
    comment = this.get$item(receiver).get$comment();
    if (commentLocation == null)
      commentLocation = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector(".description");
    if (preview === true) {
      t1 = this.get$item(receiver);
      t2 = J.getInterceptor(t1);
      if (typeof t1 !== "object" || t1 === null || !t2.$isClass) {
        t1 = this.get$item(receiver);
        t2 = J.getInterceptor(t1);
        t2 = typeof t1 === "object" && t1 !== null && !!t2.$isLibrary;
        t1 = t2;
      } else
        t1 = true;
    } else
      t1 = false;
    if (t1)
      comment = this.get$item(receiver).get$previewComment();
    if (J.$eq(comment, "") !== true && comment != null) {
      if (commentLocation == null)
        commentLocation = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector(".description");
      if (commentLocation == null)
        return;
      t1 = J.getInterceptor$x(commentLocation);
      J.clear$0$ax(t1.get$children(commentLocation));
      commentElement = W.Element_Element$html(comment, null, $.get$validator());
      t2 = J.getInterceptor(commentElement);
      firstParagraph = typeof commentElement === "object" && commentElement !== null && !!t2.$isParagraphElement ? commentElement : t2.querySelector$1(commentElement, "p");
      if (firstParagraph != null)
        J.add$1$ax(J.get$classes$x(firstParagraph), "firstParagraph");
      links = t2.querySelectorAll$1(commentElement, "a");
      for (t2 = links.get$iterator(links); t2.moveNext$0();) {
        link = t2._current;
        t3 = J.getInterceptor$x(link);
        if (J.$eq(t3.get$href(link), "") === true) {
          t4 = t3.get$text(link);
          t4.toString;
          t4.length;
          if (H.stringContainsUnchecked(t4, "#", 0)) {
            index = J.indexOf$1$asx(t3.get$text(link), "#");
            t3.replaceWith$1(link, W.Element_Element$html("<i>" + J.substring$2$s(t3.get$text(link), index + 1, t3.get$text(link).length) + "</i>", null, $.get$validator()));
          } else if ($.get$index().containsKey$1(t3.get$text(link)) !== true)
            t3.replaceWith$1(link, W.Element_Element$html("<i>" + t3.get$text(link) + "</i>", null, $.get$validator()));
          else {
            t4 = new Y.DocsLocation(null, null, null, null, null);
            t4._extractPieces$1(t3.get$text(link));
            new E.LinkableType(null).loc = t4;
            t3.set$href(link, "#" + t4.get$withAnchor());
            t3.set$text(link, t4.get$name(t4));
          }
        }
      }
      J.add$1$ax(t1.get$children(commentLocation), commentElement);
    }
    "12,183,7,184,18,185,69";
  },
  "+addComment:3:0": 1,
  "*addComment": [19, 12],
  addComment$1: function($receiver, elementName) {
    return this.addComment$3($receiver, elementName, false, null);
  },
  "+addComment:1:0": 1,
  addComment$2: function($receiver, elementName, preview) {
    return this.addComment$3($receiver, elementName, preview, null);
  },
  "+addComment:2:0": 1,
  createType$3: function(receiver, type, memberName, className) {
    var $location, t1, t2;
    if (type == null)
      return;
    $location = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("." + H.S(className));
    if ($location == null)
      return;
    t1 = J.getInterceptor$x($location);
    t2 = t1.get$children($location);
    t2.clear$0(t2);
    if (type.get$isDynamic() !== true) {
      t1 = t1.get$children($location);
      t1.add$1(t1, E.MemberElement_createInner(type));
    }
    "12,58,56,154,7,28,7";
  },
  "+createType:3:0": 1,
  MemberElement$created$0: function(receiver) {
    receiver._item = this.get$defaultItem(receiver);
    "12";
  },
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
MemberElement$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.MemberElement_methods.Element$created$0(receiver);
  C.MemberElement_methods.PolymerElement$created$0(receiver);
  C.MemberElement_methods.MemberElement$created$0(receiver);
  return receiver;
  "68";
},

"+new MemberElement$created:0:0": 1,

MemberElement_createInner: function(type) {
  var span, outer, t1;
  span = document.createElement("span", null);
  if ($.get$index().containsKey$1(type.get$outer().get$qualifiedName()) === true) {
    outer = W.AnchorElement_AnchorElement(null);
    outer.textContent = J.get$simpleType$x(type.get$outer());
    J.set$href$x(outer, "#" + H.S(J.get$location$x(type.get$outer())));
    span.appendChild(outer);
  } else
    J.insertAdjacentText$2$x(span, "beforeend", J.get$simpleType$x(type.get$outer()));
  if (J.get$isNotEmpty$asx(type.get$inner())) {
    t1 = J.getInterceptor$x(span);
    t1.insertAdjacentText$2(span, "beforeend", "<");
    J.forEach$1$ax(type.get$inner(), new E.MemberElement_createInner_closure(type, span));
    t1.insertAdjacentText$2(span, "beforeend", ">");
  }
  return span;
  "69,58,56";
},

"+createInner:1:0": 1}

},

"+MemberElement": [67],

MemberElement_item_closure: {"": "Closure;this_0-,newItem_1-",
  call$0: function() {
    var t1 = this.newItem_1;
    J.set$_item$x(this.this_0, t1);
    return t1;
    "12";
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+MemberElement_item_closure": [100],

MemberElement_createInner_closure: {"": "Closure;type_0-,span_1-",
  call$1: function(element) {
    var t1, t2;
    t1 = this.span_1;
    t2 = J.getInterceptor$x(t1);
    t2.append$1(t1, E.MemberElement_createInner(element));
    if (J.$eq(element, J.get$last$ax(this.type_0.get$inner())) !== true)
      t2.insertAdjacentText$2(t1, "beforeend", ", ");
    "12,87,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+MemberElement_createInner_closure": [100],

InheritedElement: {"": ["MemberElement_ChangeNotifier;_member$__$inheritedFrom%-,_member$__$commentFrom%-,_changes,_records,_item-,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$inheritedFrom: function(receiver) {
    return receiver._member$__$inheritedFrom;
    "57,13,101";
  },
  "+inheritedFrom": 1,
  set$inheritedFrom: function(receiver, value) {
    receiver._member$__$inheritedFrom = this.notifyPropertyChange$3(receiver, C.Symbol_inheritedFrom, receiver._member$__$inheritedFrom, value);
    "12,82,57,13";
  },
  "+inheritedFrom=": 1,
  get$commentFrom: function(receiver) {
    return receiver._member$__$commentFrom;
    "57,13,101";
  },
  "+commentFrom": 1,
  set$commentFrom: function(receiver, value) {
    receiver._member$__$commentFrom = this.notifyPropertyChange$3(receiver, C.Symbol_commentFrom, receiver._member$__$commentFrom, value);
    "12,82,57,13";
  },
  "+commentFrom=": 1,
  get$observables: function(receiver) {
    return this.concat$2(receiver, E.MemberElement.prototype.get$observables.call(this, receiver), C.List_chs);
    "12";
  },
  "+observables": 1,
  enteredView$0: function(receiver) {
    var t1, t2, t3, t4, t5, t6;
    E.DartdocElement.prototype.enteredView$0.call(this, receiver);
    if (this.get$isInherited(receiver)) {
      t1 = new Y.DocsLocation(null, null, null, null, null);
      t1._extractPieces$1(J.get$inheritedFrom$x(this.get$item(receiver)));
      t1 = t1.get$componentNames();
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      t1.pop();
      t1 = Y.DocsLocation$fromList(t1);
      t2 = t1.get$packagePlus();
      t3 = t1.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = t1.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t1 = t1.subMemberName;
      t5 = new E.LinkableType(null);
      t6 = new Y.DocsLocation(null, null, null, null, null);
      t6._extractPieces$1(C.JSArray_methods.join$1([t2, t3, t4, t1 == null ? "" : "." + H.S(t1)], ""));
      t5.loc = t6;
      receiver._member$__$inheritedFrom = this.notifyPropertyChange$3(receiver, C.Symbol_inheritedFrom, receiver._member$__$inheritedFrom, t5);
    }
    if (this.get$hasInheritedComment(receiver)) {
      t1 = new Y.DocsLocation(null, null, null, null, null);
      t1._extractPieces$1(J.get$commentFrom$x(this.get$item(receiver)));
      t1 = t1.get$componentNames();
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      t1.pop();
      t1 = Y.DocsLocation$fromList(t1);
      t2 = t1.get$packagePlus();
      t3 = t1.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = t1.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t1 = t1.subMemberName;
      t5 = new E.LinkableType(null);
      t6 = new Y.DocsLocation(null, null, null, null, null);
      t6._extractPieces$1(C.JSArray_methods.join$1([t2, t3, t4, t1 == null ? "" : "." + H.S(t1)], ""));
      t5.loc = t6;
      receiver._member$__$commentFrom = this.notifyPropertyChange$3(receiver, C.Symbol_commentFrom, receiver._member$__$commentFrom, t5);
    }
    "12";
  },
  "+enteredView:0:0": 1,
  get$isInherited: function(receiver) {
    return this.get$item(receiver) != null && J.$eq(J.get$inheritedFrom$x(this.get$item(receiver)), "") !== true && J.get$inheritedFrom$x(this.get$item(receiver)) != null;
    "18,101";
  },
  "+isInherited": 1,
  get$hasInheritedComment: function(receiver) {
    return this.get$item(receiver) != null && J.$eq(J.get$commentFrom$x(this.get$item(receiver)), "") !== true && J.get$commentFrom$x(this.get$item(receiver)) != null;
    "18,101";
  },
  "+hasInheritedComment": 1,
  exists$1: function(receiver, $location) {
    if ($location == null)
      return false;
    return $.get$index().containsKey$1($location);
    "18,43,7,101";
  },
  "+exists:1:0": 1,
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
InheritedElement$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.InheritedElement_methods.Element$created$0(receiver);
  C.InheritedElement_methods.PolymerElement$created$0(receiver);
  C.InheritedElement_methods.MemberElement$created$0(receiver);
  return receiver;
  "70";
},

"+new InheritedElement$created:0:0": 1}

},

"+InheritedElement": [186],

MemberElement_ChangeNotifier: {"": "MemberElement+ChangeNotifier;", $isObservable: true},

MethodElement: {"": ["InheritedElement;_member$__$inheritedFrom-,_member$__$commentFrom-,_changes,_records,_item-,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  wrongClass$1: function(receiver, newItem) {
    var t1 = J.getInterceptor(newItem);
    return typeof newItem !== "object" || newItem === null || !t1.$isMethod;
    "18,132,12";
  },
  "+wrongClass:1:0": 1,
  get$defaultItem: function(receiver) {
    return E.Method$(H.fillLiteralMap(["name", "Loading", "qualifiedName", "Loading", "comment", "", "parameters", null, "return", [null]], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), "", "", "", true, false);
    "12";
  },
  "+defaultItem": 1,
  get$parameters: function(receiver) {
    return J.get$parameters$x(this.get$item(receiver));
    "129,101";
  },
  "+parameters": 1,
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
MethodElement$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.MethodElement_methods.Element$created$0(receiver);
  C.MethodElement_methods.PolymerElement$created$0(receiver);
  C.MethodElement_methods.MemberElement$created$0(receiver);
  return receiver;
  "71";
},

"+new MethodElement$created:0:0": 1}

},

"+MethodElement": [70],
"": "validator@"}],
["metadata", "../../../../../dart-git/dart/xcodebuild/ReleaseIA32/dart-sdk/lib/html/html_common/metadata.dart", , B, {
SupportedBrowser: {"": "Object;browserName,minimumVersion", static: {
"": "SupportedBrowser_CHROME,SupportedBrowser_FIREFOX,SupportedBrowser_IE,SupportedBrowser_OPERA,SupportedBrowser_SAFARI",
}
},

Experimental: {"": "Object;"},

DomName: {"": "Object;name>"},

DocsEditable: {"": "Object;"},

Unstable: {"": "Object;"}}],
["method", "method.dart", , N, {
DartdocMethod: {"": ["MethodElement;_member$__$inheritedFrom-,_member$__$commentFrom-,_changes,_records,_item-,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$observables: function(receiver) {
    return N.concat(E.InheritedElement.prototype.get$observables.call(this, receiver), C.List_nNJ);
    "12";
  },
  "+observables": 1,
  get$methodsToCall: function(receiver) {
    return N.concat(E.DartdocElement.prototype.get$methodsToCall.call(this, receiver), C.List_Symbol_createMethodType);
    "12";
  },
  "+methodsToCall": 1,
  get$item: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver);
    "12";
  },
  "+item": 1,
  set$item: function(receiver, x) {
    E.MemberElement.prototype.set$item.call(this, receiver, x);
    return x;
    "12,116,12";
  },
  "+item=": 1,
  createMethodType$0: function(receiver) {
    if (J.get$isConstructor$x(E.MemberElement.prototype.get$item.call(this, receiver)) !== true)
      this.createType$3(receiver, J.get$type$x(E.MemberElement.prototype.get$item.call(this, receiver)), "dartdoc-method", "type");
    "12";
  },
  "+createMethodType:0:0": 1,
  get$modifiers: function(receiver) {
    var t1 = E.MemberElement.prototype.get$item.call(this, receiver).get$isConstant() === true ? "const" : "";
    return t1 + (E.MemberElement.prototype.get$item.call(this, receiver).get$isStatic() === true ? "static" : "");
    "7,101";
  },
  "+modifiers": 1,
  get$constantModifier: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver).get$isConstant() === true ? "const" : "";
    "12";
  },
  "+constantModifier": 1,
  get$abstractModifier: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver).get$isAbstract() === true ? "abstract" : "";
    "12";
  },
  "+abstractModifier": 1,
  get$staticModifier: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver).get$isStatic() === true ? "static" : "";
    "12";
  },
  "+staticModifier": 1,
  get$annotations: function(receiver) {
    return J.get$annotations$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "12,101";
  },
  "+annotations": 1,
  get$shouldShowMethodComment: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver) != null && J.$eq(E.MemberElement.prototype.get$item.call(this, receiver).get$comment(), "<span></span>") !== true;
    "12,101";
  },
  "+shouldShowMethodComment": 1,
  "@": function() {
    return [C.CustomTag_iPa];
  },
  static: {
DartdocMethod$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.DartdocMethod_methods.Element$created$0(receiver);
  C.DartdocMethod_methods.PolymerElement$created$0(receiver);
  C.DartdocMethod_methods.MemberElement$created$0(receiver);
  return receiver;
  "72";
},

"+new DartdocMethod$created:0:0": 1}

},

"+DartdocMethod": [71]}],
["method_panel", "method-panel.dart", , D, {
MethodPanel: {"": ["MethodElement;_member$__$inheritedFrom-,_member$__$commentFrom-,_changes,_records,_item-,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$observables: function(receiver) {
    return N.concat(E.InheritedElement.prototype.get$observables.call(this, receiver), C.List_Rzl);
    "12";
  },
  "+observables": 1,
  get$methodsToCall: function(receiver) {
    return N.concat(E.DartdocElement.prototype.get$methodsToCall.call(this, receiver), C.List_Symbol_createType);
    "12";
  },
  "+methodsToCall": 1,
  wrongClass$1: function(receiver, newItem) {
    var t1 = J.getInterceptor(newItem);
    return typeof newItem !== "object" || newItem === null || !t1.$isMethod;
    "12,132,12";
  },
  "+wrongClass:1:0": 1,
  createType$3: function(receiver, type, memberName, className) {
    if (J.get$isConstructor$x(E.MemberElement.prototype.get$item.call(this, receiver)) !== true)
      E.MemberElement.prototype.createType$3.call(this, receiver, type, memberName, className);
    "12,58,56,154,7,28,7";
  },
  "+createType:3:0": 1,
  set$item: function(receiver, x) {
    E.MemberElement.prototype.set$item.call(this, receiver, x);
    return x;
    "12,116,12";
  },
  "+item=": 1,
  get$item: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver);
    "12";
  },
  "+item": 1,
  get$modifiers: function(receiver) {
    var t1 = E.MemberElement.prototype.get$item.call(this, receiver).get$isConstant() === true ? "const" : "";
    return t1 + (E.MemberElement.prototype.get$item.call(this, receiver).get$isStatic() === true ? "static" : "");
    "7,101";
  },
  "+modifiers": 1,
  get$constantModifier: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver).get$isConstant() === true ? "const" : "";
    "12,101";
  },
  "+constantModifier": 1,
  get$abstractModifier: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver).get$isAbstract() === true ? "abstract" : "";
    "12,101";
  },
  "+abstractModifier": 1,
  get$staticModifier: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver).get$isStatic() === true ? "static" : "";
    "12,101";
  },
  "+staticModifier": 1,
  get$annotations: function(receiver) {
    return J.get$annotations$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "12,101";
  },
  "+annotations": 1,
  get$shouldShowMethodComment: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver) != null && J.$eq(E.MemberElement.prototype.get$item.call(this, receiver).get$comment(), "<span></span>") !== true;
    "12,101";
  },
  "+shouldShowMethodComment": 1,
  MethodPanel$created$0: function(receiver) {
    J.setProperty$2$x(receiver.style, "display", "block");
    "12";
  },
  "@": function() {
    return [C.CustomTag_M4k];
  },
  static: {
MethodPanel$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.MethodPanel_methods.Element$created$0(receiver);
  C.MethodPanel_methods.PolymerElement$created$0(receiver);
  C.MethodPanel_methods.MemberElement$created$0(receiver);
  C.MethodPanel_methods.MethodPanel$created$0(receiver);
  return receiver;
  "73";
},

"+new MethodPanel$created:0:0": 1}

},

"+MethodPanel": [71]}],
["minimap_class", "minimap-class.dart", , M, {
MinimapElementClass: {"": ["MemberElement;_item-,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$observables: function(receiver) {
    return N.concat(E.MemberElement.prototype.get$observables.call(this, receiver), C.List_Om5);
    "12";
  },
  "+observables": 1,
  wrongClass$1: function(receiver, newItem) {
    var t1 = J.getInterceptor(newItem);
    return typeof newItem !== "object" || newItem === null || !t1.$isClass;
    "12,132,12";
  },
  "+wrongClass:1:0": 1,
  get$defaultItem: function(receiver) {
    return E.Class$forPlaceholder("loading.loading", "loading");
    "12";
  },
  "+defaultItem": 1,
  get$operatorItems: function(receiver) {
    return J.get$content$x(J.get$operators$x(E.MemberElement.prototype.get$item.call(this, receiver)));
    "12,101";
  },
  "+operatorItems": 1,
  get$variableItems: function(receiver) {
    return J.get$content$x(E.MemberElement.prototype.get$item.call(this, receiver).get$instanceVariables());
    "12,101";
  },
  "+variableItems": 1,
  get$staticVariableItems: function(receiver) {
    return J.get$content$x(J.get$staticVariables$x(E.MemberElement.prototype.get$item.call(this, receiver)));
    "12,101";
  },
  "+staticVariableItems": 1,
  get$constructorItems: function(receiver) {
    return J.get$content$x(E.MemberElement.prototype.get$item.call(this, receiver).get$constructs());
    "12,101";
  },
  "+constructorItems": 1,
  get$functionItems: function(receiver) {
    return J.get$content$x(E.MemberElement.prototype.get$item.call(this, receiver).get$instanceFunctions());
    "12,101";
  },
  "+functionItems": 1,
  get$staticFunctionItems: function(receiver) {
    return J.get$content$x(J.get$staticFunctions$x(E.MemberElement.prototype.get$item.call(this, receiver)));
    "12,101";
  },
  "+staticFunctionItems": 1,
  get$operators: function(receiver) {
    return J.get$operators$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "12,101";
  },
  "+operators": 1,
  get$variables: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver).get$instanceVariables();
    "12,101";
  },
  "+variables": 1,
  get$staticVariables: function(receiver) {
    return J.get$staticVariables$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "12,101";
  },
  "+staticVariables": 1,
  get$constructors: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver).get$constructs();
    "12,101";
  },
  "+constructors": 1,
  get$functions: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver).get$instanceFunctions();
    "12,101";
  },
  "+functions": 1,
  get$staticFunctions: function(receiver) {
    return J.get$staticFunctions$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "12,101";
  },
  "+staticFunctions": 1,
  get$operatorItemsIsNotEmpty: function(receiver) {
    return this._isNotEmpty$1(receiver, J.get$operators$x(E.MemberElement.prototype.get$item.call(this, receiver)));
    "12,101";
  },
  "+operatorItemsIsNotEmpty": 1,
  get$variableItemsIsNotEmpty: function(receiver) {
    return this._isNotEmpty$1(receiver, E.MemberElement.prototype.get$item.call(this, receiver).get$instanceVariables());
    "12,101";
  },
  "+variableItemsIsNotEmpty": 1,
  get$staticVariableItemsIsNotEmpty: function(receiver) {
    return this._isNotEmpty$1(receiver, J.get$staticVariables$x(E.MemberElement.prototype.get$item.call(this, receiver)));
    "12,101";
  },
  "+staticVariableItemsIsNotEmpty": 1,
  get$constructorItemsIsNotEmpty: function(receiver) {
    return this._isNotEmpty$1(receiver, E.MemberElement.prototype.get$item.call(this, receiver).get$constructs());
    "12,101";
  },
  "+constructorItemsIsNotEmpty": 1,
  get$functionItemsIsNotEmpty: function(receiver) {
    return this._isNotEmpty$1(receiver, E.MemberElement.prototype.get$item.call(this, receiver).get$instanceFunctions());
    "12,101";
  },
  "+functionItemsIsNotEmpty": 1,
  get$staticFunctionItemsIsNotEmpty: function(receiver) {
    return this._isNotEmpty$1(receiver, J.get$staticFunctions$x(E.MemberElement.prototype.get$item.call(this, receiver)));
    "12,101";
  },
  "+staticFunctionItemsIsNotEmpty": 1,
  _isNotEmpty$1: function(receiver, x) {
    var t1, t2;
    if (x != null) {
      t1 = E.MemberElement.prototype.get$item.call(this, receiver);
      t2 = J.getInterceptor(t1);
      t2 = typeof t1 !== "object" || t1 === null || !t2.$isClass;
      t1 = t2;
    } else
      t1 = true;
    return t1 ? false : J.get$isNotEmpty$asx(J.get$content$x(x));
    "12,116,12";
  },
  "+_isNotEmpty:1:0": 1,
  get$page: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver);
    "42,101";
  },
  "+page": 1,
  get$linkHref: function(receiver) {
    return J.get$linkHref$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "12,101";
  },
  "+linkHref": 1,
  linkHref$1: function($receiver, arg0) {
    return this.get$linkHref($receiver).call$1(arg0);
  },
  get$item: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver);
    "42";
  },
  "+item": 1,
  set$item: function(receiver, newItem) {
    E.MemberElement.prototype.set$item.call(this, receiver, newItem);
    return newItem;
    "12,132,12";
  },
  "+item=": 1,
  get$shouldShowConstructors: function(receiver) {
    return this.shouldShow$1(receiver, new M.MinimapElementClass_shouldShowConstructors_closure());
    "12,101";
  },
  "+shouldShowConstructors": 1,
  get$shouldShowFunctions: function(receiver) {
    return this.shouldShow$1(receiver, new M.MinimapElementClass_shouldShowFunctions_closure());
    "12,101";
  },
  "+shouldShowFunctions": 1,
  get$shouldShowVariables: function(receiver) {
    return this.shouldShow$1(receiver, new M.MinimapElementClass_shouldShowVariables_closure());
    "12,101";
  },
  "+shouldShowVariables": 1,
  get$shouldShowStaticFunctions: function(receiver) {
    return this.shouldShow$1(receiver, new M.MinimapElementClass_shouldShowStaticFunctions_closure());
    "12,101";
  },
  "+shouldShowStaticFunctions": 1,
  get$shouldShowStaticVariables: function(receiver) {
    return this.shouldShow$1(receiver, new M.MinimapElementClass_shouldShowStaticVariables_closure());
    "12,101";
  },
  "+shouldShowStaticVariables": 1,
  get$shouldShowOperators: function(receiver) {
    return this.shouldShow$1(receiver, new M.MinimapElementClass_shouldShowOperators_closure());
    "12,101";
  },
  "+shouldShowOperators": 1,
  shouldShow$1: function(receiver, f) {
    var t1, t2;
    t1 = E.MemberElement.prototype.get$item.call(this, receiver);
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isClass)
      t1 = f.call$1(E.MemberElement.prototype.get$item.call(this, receiver)).get$hasNonInherited() || $.get$viewer()._dartdoc_viewer$__$isInherited === true;
    else
      t1 = false;
    return t1;
    "12,187,93";
  },
  "+shouldShow:1:0": 1,
  get$name: function(receiver) {
    return J.get$decoratedName$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "12,101";
  },
  "+name": 1,
  get$currentLocation: function(receiver) {
    return J.toString$0(C.Window_methods.get$location(window));
    "12,101";
  },
  "+currentLocation": 1,
  hideShow$3: function(receiver, $event, detail, target) {
    var loc, list, t1;
    loc = new Y.DocsLocation(null, null, null, null, null);
    loc._extractPieces$1(J.get$hash$x(target));
    list = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector(C.JSString_methods.$add("#minimap-", loc.anchor));
    t1 = J.getInterceptor$x(list);
    if (J.contains$1$asx(t1.get$classes(list), "in") === true)
      J.remove$1$ax(t1.get$classes(list), "in");
    else
      J.add$1$ax(t1.get$classes(list), "in");
    "12,104,12,105,12,106,12";
  },
  "+hideShow:3:0": 1,
  MinimapElementClass$created$0: function(receiver) {
    L.PathObserver$(receiver, "viewer.isInherited", null).bindSync$1(new M.MinimapElementClass$created_closure(receiver));
    "12";
  },
  "@": function() {
    return [C.CustomTag_bh5];
  },
  static: {
MinimapElementClass$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.MinimapElementClass_methods.Element$created$0(receiver);
  C.MinimapElementClass_methods.PolymerElement$created$0(receiver);
  C.MinimapElementClass_methods.MemberElement$created$0(receiver);
  C.MinimapElementClass_methods.MinimapElementClass$created$0(receiver);
  return receiver;
  "74";
},

"+new MinimapElementClass$created:0:0": 1}

},

"+MinimapElementClass": [68],

MinimapElementClass$created_closure: {"": "Closure;this_0-",
  call$1: function(_) {
    var t1, t2;
    t1 = this.this_0;
    t2 = J.getInterceptor$x(t1);
    t2.notifyPropertyChange$3(t1, C.Symbol_shouldShowConstructors, null, t2.get$shouldShowConstructors(t1));
    t2.notifyPropertyChange$3(t1, C.Symbol_shouldShowOperators, null, t2.get$shouldShowConstructors(t1));
    t2.notifyPropertyChange$3(t1, C.Symbol_shouldShowFunctions, null, t2.get$shouldShowConstructors(t1));
    t2.notifyPropertyChange$3(t1, C.Symbol_shouldShowVariables, null, t2.get$shouldShowConstructors(t1));
    "12,134,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+MinimapElementClass$created_closure": [100],

MinimapElementClass_shouldShowConstructors_closure: {"": "Closure;",
  call$1: function(x) {
    return J.get$constructors$x(x);
    "12,116,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+MinimapElementClass_shouldShowConstructors_closure": [100],

MinimapElementClass_shouldShowFunctions_closure: {"": "Closure;",
  call$1: function(x) {
    return J.get$functions$x(x);
    "12,116,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+MinimapElementClass_shouldShowFunctions_closure": [100],

MinimapElementClass_shouldShowVariables_closure: {"": "Closure;",
  call$1: function(x) {
    return J.get$variables$x(x);
    "12,116,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+MinimapElementClass_shouldShowVariables_closure": [100],

MinimapElementClass_shouldShowStaticFunctions_closure: {"": "Closure;",
  call$1: function(x) {
    return J.get$staticFunctions$x(x);
    "12,116,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+MinimapElementClass_shouldShowStaticFunctions_closure": [100],

MinimapElementClass_shouldShowStaticVariables_closure: {"": "Closure;",
  call$1: function(x) {
    return J.get$staticVariables$x(x);
    "12,116,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+MinimapElementClass_shouldShowStaticVariables_closure": [100],

MinimapElementClass_shouldShowOperators_closure: {"": "Closure;",
  call$1: function(x) {
    return J.get$operators$x(x);
    "12,116,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+MinimapElementClass_shouldShowOperators_closure": [100]}],
["minimap_element", "minimap-element.dart", , A, {
MinimapElement: {"": ["DartdocElement;_items%-,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$items: function(receiver) {
    return receiver._items;
    "167,98";
  },
  "+items": 1,
  set$items: function(receiver, newItems) {
    this.notifyObservables$1(receiver, new A.MinimapElement_items_closure(receiver, newItems));
    "12,188,12,98";
  },
  "+items=": 1,
  get$observables: function(receiver) {
    return this.concat$2(receiver, E.DartdocElement.prototype.get$observables.call(this, receiver), C.List_Symbol_itemsToShow);
    "12";
  },
  "+observables": 1,
  get$itemsToShow: function(receiver) {
    return J.where$1$ax(receiver._items, new A.MinimapElement_itemsToShow_closure(receiver));
    "12,101";
  },
  "+itemsToShow": 1,
  link$1: function(receiver, linkItem) {
    return linkItem.get$anchorHref();
    "7,189,12,101";
  },
  "+link:1:0": 1,
  get$link: function(_receiver) {
    return new W.BoundClosure$i1(this, A.MinimapElement.prototype.link$1, _receiver, "link$1");
  },
  MinimapElement$created$0: function(receiver) {
    L.PathObserver$(receiver, "viewer.isInherited", null).bindSync$1(new A.MinimapElement$created_closure(receiver));
    "12";
  },
  "@": function() {
    return [C.CustomTag_UBp];
  },
  static: {
MinimapElement$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._items = [];
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.MinimapElement_methods.Element$created$0(receiver);
  C.MinimapElement_methods.PolymerElement$created$0(receiver);
  C.MinimapElement_methods.MinimapElement$created$0(receiver);
  return receiver;
  "75";
},

"+new MinimapElement$created:0:0": 1}

},

"+MinimapElement": [67],

MinimapElement$created_closure: {"": "Closure;this_0-",
  call$1: function(_) {
    var t1, t2;
    t1 = this.this_0;
    t2 = J.getInterceptor$x(t1);
    t2.notifyPropertyChange$3(t1, C.Symbol_itemsToShow, null, t2.get$itemsToShow(t1));
    "12,134,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+MinimapElement$created_closure": [100],

MinimapElement_items_closure: {"": "Closure;this_0-,newItems_1-",
  call$0: function() {
    var t1 = this.newItems_1;
    J.set$_items$x(this.this_0, t1);
    return t1;
    "12";
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+MinimapElement_items_closure": [100],

MinimapElement_itemsToShow_closure: {"": "Closure;this_0-",
  call$1: function(item) {
    return J.get$isInherited$x(item) !== true || $.get$viewer()._dartdoc_viewer$__$isInherited === true;
    "12,115,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+MinimapElement_itemsToShow_closure": [100]}],
["minimap_library", "minimap-library.dart", , B, {
MinimapElementLibrary: {"": ["MemberElement;_item-,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$observables: function(receiver) {
    return this.concat$2(receiver, E.MemberElement.prototype.get$observables.call(this, receiver), C.List_oSr);
    "12";
  },
  "+observables": 1,
  get$methodsToCall: function(receiver) {
    return this.concat$2(receiver, E.DartdocElement.prototype.get$methodsToCall.call(this, receiver), C.List_Symbol_decoratedName);
    "12";
  },
  "+methodsToCall": 1,
  wrongClass$1: function(receiver, newItem) {
    var t1 = J.getInterceptor(newItem);
    return typeof newItem !== "object" || newItem === null || !t1.$isLibrary;
    "12,132,12";
  },
  "+wrongClass:1:0": 1,
  get$defaultItem: function(receiver) {
    return E.Library$forPlaceholder(H.fillLiteralMap(["name", "loading", "qualifiedName", "loading", "preview", "loading"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    "12";
  },
  "+defaultItem": 1,
  get$operatorItems: function(receiver) {
    var t1 = J.get$operators$x(E.MemberElement.prototype.get$item.call(this, receiver));
    return t1 == null ? [] : J.get$content$x(t1);
    "12,101";
  },
  "+operatorItems": 1,
  get$variableItems: function(receiver) {
    var t1 = J.get$variables$x(E.MemberElement.prototype.get$item.call(this, receiver));
    return t1 == null ? [] : J.get$content$x(t1);
    "12,101";
  },
  "+variableItems": 1,
  get$functionItems: function(receiver) {
    var t1 = J.get$functions$x(E.MemberElement.prototype.get$item.call(this, receiver));
    return t1 == null ? [] : J.get$content$x(t1);
    "12,101";
  },
  "+functionItems": 1,
  get$classItems: function(receiver) {
    var t1 = J.get$classes$x(E.MemberElement.prototype.get$item.call(this, receiver));
    return t1 == null ? [] : J.get$content$x(t1);
    "12,101";
  },
  "+classItems": 1,
  get$typedefItems: function(receiver) {
    var t1 = J.get$typedefs$x(E.MemberElement.prototype.get$item.call(this, receiver));
    return t1 == null ? [] : J.get$content$x(t1);
    "12,101";
  },
  "+typedefItems": 1,
  get$errorItems: function(receiver) {
    var t1 = J.get$errors$x(E.MemberElement.prototype.get$item.call(this, receiver));
    return t1 == null ? [] : J.get$content$x(t1);
    "12,101";
  },
  "+errorItems": 1,
  get$operatorItemsIsNotEmpty: function(receiver) {
    var t1 = J.get$operators$x(E.MemberElement.prototype.get$item.call(this, receiver));
    return J.get$isNotEmpty$asx(t1 == null ? [] : J.get$content$x(t1));
    "12,101";
  },
  "+operatorItemsIsNotEmpty": 1,
  get$variableItemsIsNotEmpty: function(receiver) {
    var t1 = J.get$variables$x(E.MemberElement.prototype.get$item.call(this, receiver));
    return J.get$isNotEmpty$asx(t1 == null ? [] : J.get$content$x(t1));
    "12,101";
  },
  "+variableItemsIsNotEmpty": 1,
  get$functionItemsIsNotEmpty: function(receiver) {
    var t1 = J.get$functions$x(E.MemberElement.prototype.get$item.call(this, receiver));
    return J.get$isNotEmpty$asx(t1 == null ? [] : J.get$content$x(t1));
    "12,101";
  },
  "+functionItemsIsNotEmpty": 1,
  get$classItemsIsNotEmpty: function(receiver) {
    var t1 = J.get$classes$x(E.MemberElement.prototype.get$item.call(this, receiver));
    return J.get$isNotEmpty$asx(t1 == null ? [] : J.get$content$x(t1));
    "12,101";
  },
  "+classItemsIsNotEmpty": 1,
  get$typedefItemsIsNotEmpty: function(receiver) {
    var t1 = J.get$typedefs$x(E.MemberElement.prototype.get$item.call(this, receiver));
    return J.get$isNotEmpty$asx(t1 == null ? [] : J.get$content$x(t1));
    "12,101";
  },
  "+typedefItemsIsNotEmpty": 1,
  get$errorItemsIsNotEmpty: function(receiver) {
    var t1 = J.get$errors$x(E.MemberElement.prototype.get$item.call(this, receiver));
    return J.get$isNotEmpty$asx(t1 == null ? [] : J.get$content$x(t1));
    "12,101";
  },
  "+errorItemsIsNotEmpty": 1,
  contents$1: function(receiver, thing) {
    return thing == null ? [] : J.get$content$x(thing);
    "12,133,12";
  },
  "+contents:1:0": 1,
  get$linkHref: function(receiver) {
    return J.get$linkHref$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "12,101";
  },
  "+linkHref": 1,
  linkHref$1: function($receiver, arg0) {
    return this.get$linkHref($receiver).call$1(arg0);
  },
  get$name: function(receiver) {
    return J.get$decoratedName$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "12,101";
  },
  "+name": 1,
  get$currentLocation: function(receiver) {
    return J.toString$0(C.Window_methods.get$location(window));
    "12,101";
  },
  "+currentLocation": 1,
  get$item: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver);
    "12";
  },
  "+item": 1,
  set$item: function(receiver, newItem) {
    E.MemberElement.prototype.set$item.call(this, receiver, newItem);
    return newItem;
    "12,132,12";
  },
  "+item=": 1,
  decoratedName$1: function(receiver, thing) {
    return thing == null ? null : J.get$decoratedName$x(thing);
    "12,133,12,101";
  },
  "+decoratedName:1:0": 1,
  get$decoratedName: function(_receiver) {
    return new W.BoundClosure$i1(this, B.MinimapElementLibrary.prototype.decoratedName$1, _receiver, "decoratedName$1");
  },
  hideShow$3: function(receiver, $event, detail, target) {
    var loc, list, t1;
    loc = new Y.DocsLocation(null, null, null, null, null);
    loc._extractPieces$1(J.get$hash$x(target));
    list = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector(C.JSString_methods.$add("#minimap-", loc.anchor));
    t1 = J.getInterceptor$x(list);
    if (J.contains$1$asx(t1.get$classes(list), "in") === true)
      J.remove$1$ax(t1.get$classes(list), "in");
    else
      J.add$1$ax(t1.get$classes(list), "in");
    "12,104,12,105,12,106,12";
  },
  "+hideShow:3:0": 1,
  "@": function() {
    return [C.CustomTag_txY];
  },
  static: {
MinimapElementLibrary$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.MinimapElementLibrary_methods.Element$created$0(receiver);
  C.MinimapElementLibrary_methods.PolymerElement$created$0(receiver);
  C.MinimapElementLibrary_methods.MemberElement$created$0(receiver);
  return receiver;
  "76";
},

"+new MinimapElementLibrary$created:0:0": 1}

},

"+MinimapElementLibrary": [68]}],
["model", "package:yaml/src/model.dart", , R, {
Tag: {"": "Object;name>,kind>",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isTag)
      return false;
    return this.name === other.name;
  },
  toString$0: function(_) {
    var t1 = this.name;
    if (C.JSString_methods.startsWith$1(t1, "tag:yaml.org,2002:"))
      return "!!" + C.JSString_methods.substring$1(t1, 18);
    else
      return "!<" + t1 + ">";
  },
  "+toString:0:0": 0,
  get$hashCode: function(_) {
    return C.JSString_methods.get$hashCode(this.name);
  },
  $isTag: true,
  static: {
"": "Tag_SCALAR_KIND,Tag_SEQUENCE_KIND,Tag_MAPPING_KIND,Tag_YAML_URI_PREFIX",
}

},

Node0: {"": "Object;tag',anchor?",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isNode0)
      return false;
    return J.$eq(this.tag, other.tag);
  },
  get$hashCode: function(_) {
    return N.hashCodeFor([this.tag, this.anchor], null);
  },
  $isNode0: true
},

SequenceNode: {"": "Node0;content*,tag,anchor",
  $eq: function(_, other) {
    var t1, i, t2;
    if (other == null)
      return false;
    if (R.Node0.prototype.$eq.call(this, this, other) === true) {
      t1 = J.getInterceptor(other);
      t1 = typeof other !== "object" || other === null || !t1.$isSequenceNode;
    } else
      t1 = true;
    if (t1)
      return false;
    t1 = J.getInterceptor$x(other);
    if (J.$eq(J.get$length$asx(this.content), J.get$length$asx(t1.get$content(other))) !== true)
      return false;
    i = 0;
    while (true) {
      t2 = J.get$length$asx(this.content);
      if (typeof t2 !== "number")
        throw H.iae(t2);
      if (!(i < t2))
        break;
      if (J.$eq(J.$index$asx(this.content, i), J.$index$asx(t1.get$content(other), i)) !== true)
        return false;
      ++i;
    }
    return true;
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = H.S(this.tag) + " [";
    t2 = J.map$1$ax(this.content, new R.SequenceNode_toString_closure());
    return t1 + t2.join$1(t2, ", ") + "]";
  },
  "+toString:0:0": 0,
  get$hashCode: function(_) {
    var t1, t2;
    t1 = R.Node0.prototype.get$hashCode.call(this, this);
    t2 = N.hashCodeFor(this.content, null);
    if (typeof t1 !== "number")
      throw t1.$xor();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    return (t1 ^ t2) >>> 0;
  },
  visit$1: function(v) {
    return v.visitSequence$1(this);
  },
  $isSequenceNode: true
},

SequenceNode_toString_closure: {"": "Closure;",
  call$1: function(e) {
    return H.S(e);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

AliasNode: {"": "Node0;tag,anchor",
  visit$1: function(v) {
    return v.visitAlias$1(this);
  }
},

ScalarNode: {"": "Node0;_model$_content,value>,tag,anchor",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (R.Node0.prototype.$eq.call(this, this, other) === true) {
      t1 = J.getInterceptor(other);
      t1 = typeof other !== "object" || other === null || !t1.$isScalarNode;
    } else
      t1 = true;
    if (t1)
      return false;
    t1 = this._model$_content;
    t1 = t1 != null ? t1 : this.get$canonicalContent();
    return J.$eq(t1, J.get$content$x(other));
  },
  get$content: function(_) {
    var t1 = this._model$_content;
    return t1 != null ? t1 : this.get$canonicalContent();
  },
  "+content": 0,
  get$canonicalContent: function() {
    var t1, t2, escapedValue;
    t1 = this.value;
    if (t1 == null || typeof t1 === "boolean" || typeof t1 === "number" && Math.floor(t1) === t1)
      return H.S(t1);
    if (typeof t1 === "number") {
      t1 = J.toStringAsExponential$1$n(t1, 20);
      t2 = H.JSSyntaxRegExp_makeNative("0+e", false, true, false);
      return H.stringReplaceFirstUnchecked(t1, new H.JSSyntaxRegExp(t2, null, null), "e");
    }
    if (typeof t1 === "string") {
      t1 = J.get$codeUnits$s(t1);
      escapedValue = t1.map$1(t1, new R.ScalarNode_canonicalContent_closure(this));
      return "\"" + escapedValue.join$0(escapedValue) + "\"";
    }
    throw H.wrapException(K.YamlException$("unknown scalar value: " + H.S(t1)));
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = H.S(this.tag) + " \"";
    t2 = this._model$_content;
    return t1 + H.S(t2 != null ? t2 : this.get$canonicalContent()) + "\"";
  },
  "+toString:0:0": 0,
  zeroPad$2: function(str, $length) {
    return C.JSArray_methods.join$0(P.List_List$filled($length - str.length, "0", null)) + str;
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = R.Node0.prototype.get$hashCode.call(this, this);
    t2 = this._model$_content;
    t2 = J.get$hashCode$(t2 != null ? t2 : this.get$canonicalContent());
    if (typeof t1 !== "number")
      throw t1.$xor();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    return (t1 ^ t2) >>> 0;
  },
  visit$1: function(v) {
    return v.visitScalar$1(this);
  },
  $isScalarNode: true
},

ScalarNode_canonicalContent_closure: {"": "Closure;this_0",
  call$1: function(c) {
    var t1, t2;
    switch (c) {
      case 9:
        return "\\t";
      case 10:
        return "\\n";
      case 13:
        return "\\r";
      case 34:
        return "\\\"";
      case 0:
        return "\\0";
      case 7:
        return "\\a";
      case 8:
        return "\\b";
      case 11:
        return "\\v";
      case 12:
        return "\\f";
      case 27:
        return "\\e";
      case 92:
        return "\\\\";
      case 133:
        return "\\N";
      case 160:
        return "\\_";
      case 8232:
        return "\\L";
      case 8233:
        return "\\P";
      default:
        t1 = J.getInterceptor$n(c);
        if (!t1.$lt(c, 32))
          t2 = t1.$ge(c, 127) && t1.$lt(c, 256);
        else
          t2 = true;
        if (t2)
          return "\\x" + this.this_0.zeroPad$2(t1.toRadixString$1(c, 16).toUpperCase(), 2);
        else if (t1.$ge(c, 256) && t1.$lt(c, 65536))
          return "\\u" + this.this_0.zeroPad$2(t1.toRadixString$1(c, 16).toUpperCase(), 4);
        else if (t1.$ge(c, 65536))
          return "\\u" + this.this_0.zeroPad$2(t1.toRadixString$1(c, 16).toUpperCase(), 8);
        else
          return P.String_String$fromCharCodes([c]);
    }
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

MappingNode: {"": "Node0;content*,tag,anchor",
  $eq: function(_, other) {
    var t1, t2, key;
    if (other == null)
      return false;
    if (R.Node0.prototype.$eq.call(this, this, other) === true) {
      t1 = J.getInterceptor(other);
      t1 = typeof other !== "object" || other === null || !t1.$isMappingNode;
    } else
      t1 = true;
    if (t1)
      return false;
    t1 = J.getInterceptor$x(other);
    if (J.$eq(J.get$length$asx(this.content), J.get$length$asx(t1.get$content(other))) !== true)
      return false;
    for (t2 = J.get$iterator$ax(this.content.get$keys()); t2.moveNext$0();) {
      key = t2.get$current();
      if (t1.get$content(other).containsKey$1(key) !== true)
        return false;
      if (J.$eq(J.$index$asx(this.content, key), J.$index$asx(t1.get$content(other), key)) !== true)
        return false;
    }
    return true;
  },
  toString$0: function(_) {
    var t1, strContent;
    t1 = J.map$1$ax(this.content.get$keys(), new R.MappingNode_toString_closure(this));
    strContent = t1.join$1(t1, ", ");
    return H.S(this.tag) + " {" + strContent + "}";
  },
  "+toString:0:0": 0,
  get$hashCode: function(_) {
    var t1, t2;
    t1 = R.Node0.prototype.get$hashCode.call(this, this);
    t2 = N.hashCodeFor(this.content, null);
    if (typeof t1 !== "number")
      throw t1.$xor();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    return (t1 ^ t2) >>> 0;
  },
  visit$1: function(v) {
    return v.visitMapping$1(this);
  },
  $isMappingNode: true
},

MappingNode_toString_closure: {"": "Closure;this_0",
  call$1: function(k) {
    return H.S(k) + ": " + H.S(J.$index$asx(this.this_0.content, k));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["observe.src.change_notifier", "package:observe/src/change_notifier.dart", , O, {
ChangeNotifier: {"": "Object;",
  get$changes: function(receiver) {
    var t1, t2;
    if (receiver._changes == null) {
      t1 = this.get$observed(receiver);
      receiver._changes = P.StreamController_StreamController$broadcast(this.get$unobserved(receiver), t1, true, null);
    }
    t1 = receiver._changes;
    t1.toString;
    t2 = new P._BroadcastStream(t1);
    H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
    return t2;
  },
  observed$0: function(receiver) {
  },
  get$observed: function(_receiver) {
    return new H.BoundClosure$i0(this, O.ChangeNotifier.prototype.observed$0, _receiver, "observed$0");
  },
  unobserved$0: function(receiver) {
    receiver._changes = null;
  },
  get$unobserved: function(_receiver) {
    return new H.BoundClosure$i0(this, O.ChangeNotifier.prototype.unobserved$0, _receiver, "unobserved$0");
  },
  deliverChanges$0: function(receiver) {
    var records, t1, t2;
    records = receiver._records;
    receiver._records = null;
    t1 = receiver._changes;
    if (t1 != null) {
      t2 = t1._async$_next;
      t2 = t2 == null ? t1 != null : t2 !== t1;
    } else
      t2 = false;
    if (t2 && records != null) {
      t2 = new P.UnmodifiableListView(records);
      H.setRuntimeTypeInfo(t2, [T.ChangeRecord]);
      if (t1._state >= 4)
        H.throwExpression(t1._addEventError$0());
      t1._sendData$1(t2);
      return true;
    }
    return false;
  },
  get$deliverChanges: function(_receiver) {
    return new H.BoundClosure$i0(this, O.ChangeNotifier.prototype.deliverChanges$0, _receiver, "deliverChanges$0");
  },
  get$hasObservers: function(receiver) {
    var t1, t2;
    t1 = receiver._changes;
    if (t1 != null) {
      t2 = t1._async$_next;
      t1 = t2 == null ? t1 != null : t2 !== t1;
    } else
      t1 = false;
    return t1;
  },
  notifyPropertyChange$3: function(receiver, field, oldValue, newValue) {
    return F.notifyPropertyChangeHelper(receiver, field, oldValue, newValue);
  },
  notifyChange$1: function(receiver, record) {
    var t1, t2;
    t1 = receiver._changes;
    if (t1 != null) {
      t2 = t1._async$_next;
      t1 = t2 == null ? t1 != null : t2 !== t1;
    } else
      t1 = false;
    if (!t1)
      return;
    if (receiver._records == null) {
      receiver._records = [];
      P.scheduleMicrotask(this.get$deliverChanges(receiver));
    }
    receiver._records.push(record);
  },
  $isObservable: true
}}],
["observe.src.change_record", "package:observe/src/change_record.dart", , T, {
ChangeRecord: {"": "Object;", $isChangeRecord: true},

PropertyChangeRecord: {"": "ChangeRecord;object,name>,oldValue>,newValue>",
  toString$0: function(_) {
    return "#<PropertyChangeRecord " + H.S(this.name) + " from: " + H.S(this.oldValue) + " to: " + H.S(this.newValue) + ">";
  },
  "+toString:0:0": 0,
  $isPropertyChangeRecord: true
}}],
["observe.src.compound_path_observer", "package:observe/src/compound_path_observer.dart", , Y, {
CompoundPathObserver: {"": "ChangeNotifier;_compound_path_observer$_observers,_compound_path_observer$_subs,_compound_path_observer$_value,_compound_path_observer$_computeValue,_started,_scheduled,_changes,_records",
  _compound_path_observer$_computeValue$1: function(arg0) {
    return this._compound_path_observer$_computeValue.call$1(arg0);
  },
  get$length: function(_) {
    return this._compound_path_observer$_observers.length;
  },
  "+length": 0,
  get$value: function(_) {
    return this._compound_path_observer$_value;
    "12,13";
  },
  "+value": 1,
  start$0: function(_) {
    var scheduleResolve, t1, t2, subscription;
    if (this._started)
      return;
    this._started = true;
    scheduleResolve = this.get$_scheduleResolve();
    for (t1 = this._compound_path_observer$_observers, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = this._compound_path_observer$_subs; t2.moveNext$0();) {
      subscription = J.get$changes$x(t2._current)._createSubscription$1(false);
      subscription._async$_onData = $.Zone__current.registerUnaryCallback$1(scheduleResolve);
      subscription._onError = P._registerErrorHandler(P._nullErrorHandler$closure, $.Zone__current);
      subscription._onDone = $.Zone__current.registerCallback$1(P._nullDoneHandler$closure);
      t1.push(subscription);
    }
    this._resolve$0();
  },
  _scheduleResolve$1: function(_) {
    if (this._scheduled)
      return;
    this._scheduled = true;
    P.scheduleMicrotask(this.get$_resolve());
  },
  get$_scheduleResolve: function() {
    return new H.BoundClosure$1(this, Y.CompoundPathObserver.prototype._scheduleResolve$1, null, "_scheduleResolve$1");
  },
  _resolve$0: function() {
    var t1, newValue;
    this._scheduled = false;
    t1 = new H.MappedListIterable(this._compound_path_observer$_observers, new Y.CompoundPathObserver__resolve_closure());
    H.setRuntimeTypeInfo(t1, [null, null]);
    newValue = t1.toList$0(t1);
    if (this._compound_path_observer$_computeValue != null)
      newValue = this._compound_path_observer$_computeValue$1(newValue);
    this._compound_path_observer$_value = F.notifyPropertyChangeHelper(this, C.Symbol_value, this._compound_path_observer$_value, newValue);
  },
  get$_resolve: function() {
    return new P.BoundClosure$0(this, Y.CompoundPathObserver.prototype._resolve$0, null, "_resolve$0");
  },
  close$0: function(_) {
    var t1, t2, t3;
    t1 = this._compound_path_observer$_observers;
    if (t1.length === 0)
      return;
    if (this._started)
      for (t2 = this._compound_path_observer$_subs, t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]); t3.moveNext$0();)
        t3._current.cancel$0();
    C.JSArray_methods.set$length(t1, 0);
    C.JSArray_methods.set$length(this._compound_path_observer$_subs, 0);
    this._compound_path_observer$_value = null;
  },
  observed$0: function(_) {
    return this.start$0(this);
  },
  get$observed: function(_receiver) {
    return new H.BoundClosure$i0(this, Y.CompoundPathObserver.prototype.observed$0, _receiver, "observed$0");
  },
  unobserved$0: function(_) {
    return this.close$0(this);
  },
  get$unobserved: function(_receiver) {
    return new H.BoundClosure$i0(this, Y.CompoundPathObserver.prototype.unobserved$0, _receiver, "unobserved$0");
  },
  $isCompoundPathObserver: true
},

CompoundPathObserver__resolve_closure: {"": "Closure;",
  call$1: function(o) {
    return J.get$value$x(o);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["observe.src.dirty_check", "package:observe/src/dirty_check.dart", , O, {
dirtyCheckObservables: function() {
  var cycles, debugLoop, toCheck, t1, anyChanged, i, observer, t2, info;
  if ($._delivering)
    return;
  if ($._allObservables == null)
    return;
  $._delivering = true;
  cycles = 0;
  debugLoop = null;
  do {
    ++cycles;
    if (cycles === 1000)
      debugLoop = [];
    toCheck = $._allObservables;
    t1 = [];
    t1.$builtinTypeInfo = [F.Observable];
    $._allObservables = t1;
    for (t1 = debugLoop != null, anyChanged = false, i = 0; i < toCheck.length; ++i) {
      observer = toCheck[i];
      t2 = observer._observable$_changes;
      t2 = t2._async$_next !== t2;
      if (t2) {
        if (observer.deliverChanges$0(observer)) {
          if (t1)
            debugLoop.push([i, observer]);
          anyChanged = true;
        }
        $._allObservables.push(observer);
      }
    }
  } while (cycles < 1000 && anyChanged);
  if (t1 && anyChanged) {
    $.get$_logger0().warning$1("Possible loop in Observable.dirtyCheck, stopped checking.");
    for (debugLoop.toString, t1 = new H.ListIterator(debugLoop, debugLoop.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(debugLoop, "JSArray", 0)]); t1.moveNext$0();) {
      info = t1._current;
      t2 = J.getInterceptor$asx(info);
      $.get$_logger0().warning$1("In last iteration Observable changed at index " + H.S(t2.$index(info, 0)) + ", object: " + H.S(t2.$index(info, 1)) + ".");
    }
  }
  $._allObservablesCount = $._allObservables.length;
  $._delivering = false;
},

dirtyCheckZoneSpec: function() {
  var t1 = {};
  t1.pending_0 = false;
  t1 = new O.dirtyCheckZoneSpec_enqueueDirtyCheck(t1);
  return new P._ZoneSpecification(null, null, null, null, new O.dirtyCheckZoneSpec_wrapCallback(t1), new O.dirtyCheckZoneSpec_wrapUnaryCallback(t1), null, null, null, null, null, null);
},

dirtyCheckZoneSpec_enqueueDirtyCheck: {"": "Closure;box_0",
  call$2: function($parent, zone) {
    var t1 = this.box_0;
    if (t1.pending_0)
      return;
    t1.pending_0 = true;
    $parent.scheduleMicrotask$2(zone, new O.dirtyCheckZoneSpec_enqueueDirtyCheck_closure(t1));
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

dirtyCheckZoneSpec_enqueueDirtyCheck_closure: {"": "Closure;box_0",
  call$0: function() {
    this.box_0.pending_0 = false;
    O.dirtyCheckObservables();
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

dirtyCheckZoneSpec_wrapCallback: {"": "Closure;enqueueDirtyCheck_1",
  call$4: function($self, $parent, zone, f) {
    if (f == null)
      return f;
    return new O.dirtyCheckZoneSpec_wrapCallback_closure(this.enqueueDirtyCheck_1, $parent, zone, f);
  },
  "+call:4:0": 0,
  $isFunction: true
},

dirtyCheckZoneSpec_wrapCallback_closure: {"": "Closure;enqueueDirtyCheck_2,parent_3,zone_4,f_5",
  call$0: function() {
    this.enqueueDirtyCheck_2.call$2(this.parent_3, this.zone_4);
    return this.f_5.call$0();
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

dirtyCheckZoneSpec_wrapUnaryCallback: {"": "Closure;enqueueDirtyCheck_6",
  call$4: function($self, $parent, zone, f) {
    if (f == null)
      return f;
    return new O.dirtyCheckZoneSpec_wrapUnaryCallback_closure(this.enqueueDirtyCheck_6, $parent, zone, f);
  },
  "+call:4:0": 0,
  $isFunction: true
},

dirtyCheckZoneSpec_wrapUnaryCallback_closure: {"": "Closure;enqueueDirtyCheck_7,parent_8,zone_9,f_10",
  call$1: function(x) {
    this.enqueueDirtyCheck_7.call$2(this.parent_8, this.zone_9);
    return this.f_10.call$1(x);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["observe.src.list_diff", "package:observe/src/list_diff.dart", , G, {
_calcEditDistances: function(current, currentStart, currentEnd, old, oldStart, oldEnd) {
  var rowCount, columnCount, distances, t1, i, t2, j, t3, t4, t5, t6, t7, t8, north, west;
  rowCount = J.$add$ns(J.$sub$n(oldEnd, oldStart), 1);
  columnCount = J.$add$ns(J.$sub$n(currentEnd, currentStart), 1);
  distances = P.List_List(rowCount, null);
  if (typeof rowCount !== "number")
    throw H.iae(rowCount);
  t1 = distances.length;
  i = 0;
  for (; i < rowCount; ++i) {
    t2 = P.List_List(columnCount, null);
    if (i >= t1)
      throw H.ioore(distances, i);
    distances[i] = t2;
    t2 = distances[i];
    if (0 >= t2.length)
      throw H.ioore(t2, 0);
    t2[0] = i;
  }
  if (typeof columnCount !== "number")
    throw H.iae(columnCount);
  j = 0;
  for (; j < columnCount; ++j) {
    if (0 >= t1)
      throw H.ioore(distances, 0);
    t2 = distances[0];
    if (j >= t2.length)
      throw H.ioore(t2, j);
    t2[j] = j;
  }
  for (t2 = J.getInterceptor$asx(old), t3 = J.getInterceptor$asx(current), i = 1; i < rowCount; ++i)
    for (t4 = i - 1, t5 = oldStart + i - 1, j = 1; j < columnCount; ++j) {
      t6 = J.$eq(t2.$index(old, t5), t3.$index(current, currentStart + j - 1));
      t7 = distances[t4];
      t8 = j - 1;
      if (t6 === true) {
        if (i >= t1)
          throw H.ioore(distances, i);
        t6 = distances[i];
        if (t4 >= t1)
          throw H.ioore(distances, t4);
        if (t8 >= t7.length)
          throw H.ioore(t7, t8);
        t8 = t7[t8];
        if (j >= t6.length)
          throw H.ioore(t6, j);
        t6[j] = t8;
      } else {
        if (t4 >= t1)
          throw H.ioore(distances, t4);
        if (j >= t7.length)
          throw H.ioore(t7, j);
        north = J.$add$ns(t7[j], 1);
        if (i >= t1)
          throw H.ioore(distances, i);
        t6 = distances[i];
        if (t8 >= t6.length)
          throw H.ioore(t6, t8);
        west = J.$add$ns(t6[t8], 1);
        t8 = distances[i];
        t6 = P.min(north, west);
        if (j >= t8.length)
          throw H.ioore(t8, j);
        t8[j] = t6;
      }
    }
  return distances;
},

_spliceOperationsFromEditDistances: function(distances) {
  var t1, i, j, t2, current, edits, t3, t4, t5, northWest, west, north, min;
  t1 = distances.length;
  i = t1 - 1;
  if (0 >= t1)
    throw H.ioore(distances, 0);
  j = distances[0].length - 1;
  if (i < 0)
    throw H.ioore(distances, i);
  t2 = distances[i];
  if (j < 0 || j >= t2.length)
    throw H.ioore(t2, j);
  current = t2[j];
  edits = [];
  while (true) {
    if (!(i > 0 || j > 0))
      break;
    c$0: {
      if (i === 0) {
        edits.push(2);
        --j;
        break c$0;
      }
      if (j === 0) {
        edits.push(3);
        --i;
        break c$0;
      }
      t2 = i - 1;
      if (t2 < 0)
        throw H.ioore(distances, t2);
      t3 = distances[t2];
      t4 = j - 1;
      t5 = t3.length;
      if (t4 < 0 || t4 >= t5)
        throw H.ioore(t3, t4);
      northWest = t3[t4];
      if (j < 0 || j >= t5)
        throw H.ioore(t3, j);
      west = t3[j];
      if (i < 0)
        throw H.ioore(distances, i);
      t3 = distances[i];
      if (t4 >= t3.length)
        throw H.ioore(t3, t4);
      north = t3[t4];
      min = P.min(P.min(west, north), northWest);
      if (min === northWest) {
        if (J.$eq(northWest, current) === true)
          edits.push(0);
        else {
          edits.push(1);
          current = northWest;
        }
        j = t4;
        i = t2;
      } else if (min === west) {
        edits.push(3);
        current = west;
        i = t2;
      } else {
        edits.push(2);
        current = north;
        j = t4;
      }
    }
  }
  t1 = new H.ReversedListIterable(edits);
  H.setRuntimeTypeInfo(t1, [null]);
  return t1.toList$0(t1);
},

_sharedPrefix: function(arr1, arr2, searchLength) {
  var t1, t2, i;
  for (t1 = J.getInterceptor$asx(arr1), t2 = J.getInterceptor$asx(arr2), i = 0; i < searchLength; ++i)
    if (J.$eq(t1.$index(arr1, i), t2.$index(arr2, i)) !== true)
      return i;
  return searchLength;
},

_sharedSuffix: function(arr1, arr2, searchLength) {
  var t1, index1, t2, index2, count, t3;
  t1 = J.getInterceptor$asx(arr1);
  index1 = t1.get$length(arr1);
  t2 = J.getInterceptor$asx(arr2);
  index2 = t2.get$length(arr2);
  count = 0;
  while (true) {
    if (count < searchLength) {
      index1 = J.$sub$n(index1, 1);
      t3 = t1.$index(arr1, index1);
      index2 = J.$sub$n(index2, 1);
      t3 = J.$eq(t3, t2.$index(arr2, index2)) === true;
    } else
      t3 = false;
    if (!t3)
      break;
    ++count;
  }
  return count;
},

calcSplices: function(current, currentStart, currentEnd, old, oldStart, oldEnd) {
  var t1, t2, minLength, prefixCount, suffixCount, splice, oldStart0, ops, splices, oldIndex, index, i, removed;
  t1 = J.getInterceptor$n(currentEnd);
  t2 = J.getInterceptor$n(oldEnd);
  minLength = P.min(t1.$sub(currentEnd, currentStart), t2.$sub(oldEnd, oldStart));
  prefixCount = currentStart === 0 && oldStart === 0 ? G._sharedPrefix(current, old, minLength) : 0;
  suffixCount = t1.$eq(currentEnd, J.get$length$asx(current)) === true && t2.$eq(oldEnd, J.get$length$asx(old)) === true ? G._sharedSuffix(current, old, minLength - prefixCount) : 0;
  currentStart += prefixCount;
  oldStart += prefixCount;
  currentEnd = t1.$sub(currentEnd, suffixCount);
  oldEnd = t2.$sub(oldEnd, suffixCount);
  t1 = J.getInterceptor$n(currentEnd);
  if (J.$eq(t1.$sub(currentEnd, currentStart), 0) && J.$eq(J.$sub$n(oldEnd, oldStart), 0))
    return C.List_empty;
  if (currentStart === currentEnd) {
    splice = G.ListChangeRecord_ListChangeRecord(current, currentStart, null, null);
    if (typeof oldEnd !== "number")
      throw H.iae(oldEnd);
    t1 = splice._removed;
    t2 = J.getInterceptor$asx(old);
    for (; oldStart < oldEnd; oldStart = oldStart0) {
      oldStart0 = oldStart + 1;
      t1.push(t2.$index(old, oldStart));
    }
    return [splice];
  } else if (oldStart === oldEnd)
    return [G.ListChangeRecord_ListChangeRecord(current, currentStart, t1.$sub(currentEnd, currentStart), null)];
  ops = G._spliceOperationsFromEditDistances(G._calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));
  splices = [];
  H.setRuntimeTypeInfo(splices, [G.ListChangeRecord]);
  for (t1 = J.getInterceptor$asx(old), oldIndex = oldStart, index = currentStart, splice = null, i = 0; i < ops.length; ++i)
    switch (ops[i]) {
      case 0:
        if (splice != null) {
          splices.push(splice);
          splice = null;
        }
        ++index;
        ++oldIndex;
        break;
      case 1:
        if (splice == null) {
          removed = [];
          t2 = new P.UnmodifiableListView(removed);
          t2.$builtinTypeInfo = [null];
          splice = new G.ListChangeRecord(current, t2, removed, index, 0);
        }
        splice._addedCount = J.$add$ns(splice._addedCount, 1);
        ++index;
        splice._removed.push(t1.$index(old, oldIndex));
        ++oldIndex;
        break;
      case 2:
        if (splice == null) {
          removed = [];
          t2 = new P.UnmodifiableListView(removed);
          t2.$builtinTypeInfo = [null];
          splice = new G.ListChangeRecord(current, t2, removed, index, 0);
        }
        splice._addedCount = J.$add$ns(splice._addedCount, 1);
        ++index;
        break;
      case 3:
        if (splice == null) {
          removed = [];
          t2 = new P.UnmodifiableListView(removed);
          t2.$builtinTypeInfo = [null];
          splice = new G.ListChangeRecord(current, t2, removed, index, 0);
        }
        splice._removed.push(t1.$index(old, oldIndex));
        ++oldIndex;
        break;
      default:
    }
  if (splice != null)
    splices.push(splice);
  return splices;
},

ListChangeRecord: {"": "Object;object,_unmodifiableRemoved,_removed,_list_diff$_index,_addedCount",
  get$index: function(_) {
    return this._list_diff$_index;
  },
  "+index": 0,
  get$removed: function() {
    return this._unmodifiableRemoved;
  },
  get$addedCount: function() {
    return this._addedCount;
  },
  indexChanged$1: function(key) {
    var t1;
    if (key < this._list_diff$_index)
      return false;
    if (!J.$eq(this._addedCount, J.get$length$asx(this._unmodifiableRemoved._collection$_source)))
      return true;
    t1 = this._addedCount;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return key < this._list_diff$_index + t1;
  },
  toString$0: function(_) {
    return "#<ListChangeRecord index: " + H.S(this._list_diff$_index) + ", removed: " + H.S(this._unmodifiableRemoved) + ", addedCount: " + H.S(this._addedCount) + ">";
  },
  "+toString:0:0": 0,
  $isListChangeRecord: true,
  static: {
ListChangeRecord_ListChangeRecord: function(object, index, addedCount, removed) {
  var t1;
  removed = [];
  if (addedCount == null)
    addedCount = 0;
  t1 = new P.UnmodifiableListView(removed);
  t1.$builtinTypeInfo = [null];
  return new G.ListChangeRecord(object, t1, removed, index, addedCount);
}}

}}],
["observe.src.metadata", "package:observe/src/metadata.dart", , K, {
ObservableProperty: {"": "Object;"},

Reflectable: {"": "Object;"}}],
["observe.src.observable", "package:observe/src/observable.dart", , F, {
notifyPropertyChangeHelper: function(obj, field, oldValue, newValue) {
  var t1, t2;
  t1 = J.getInterceptor$x(obj);
  if (t1.get$hasObservers(obj) && J.$eq(oldValue, newValue) !== true) {
    t2 = new T.PropertyChangeRecord(obj, field, oldValue, newValue);
    H.setRuntimeTypeInfo(t2, [null]);
    t1.notifyChange$1(obj, t2);
  }
  return newValue;
},

Observable: {"": "Object;", $isObservable: true},

Observable_deliverChanges_closure: {"": "Closure;box_0,this_1",
  call$2: function($name, oldValue) {
    var t1, newValue, t2, t3;
    t1 = this.this_1;
    newValue = t1._mirror.getField$1($name).reflectee;
    if (J.$eq(oldValue, newValue) !== true) {
      t2 = this.box_0;
      if (t2.records_0 == null)
        t2.records_0 = [];
      t2 = t2.records_0;
      t3 = new T.PropertyChangeRecord(t1, $name, oldValue, newValue);
      H.setRuntimeTypeInfo(t3, [null]);
      t2.push(t3);
      t1 = t1._observable$_values;
      t1.$indexSet(t1, $name, newValue);
    }
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
}}],
["observe.src.observable_box", "package:observe/src/observable_box.dart", , A, {
ObservableBox: {"": "ChangeNotifier;",
  get$value: function(_) {
    return this._observable_box$_value;
    "190,13";
  },
  "+value": 1,
  set$value: function(_, newValue) {
    this._observable_box$_value = F.notifyPropertyChangeHelper(this, C.Symbol_value, this._observable_box$_value, newValue);
    "12,166,190,13";
  },
  "+value=": 1,
  toString$0: function(_) {
    return "#<" + H.S(new H.TypeImpl(H.getRuntimeTypeString(this), null)) + " value: " + H.S(this._observable_box$_value) + ">";
  },
  "+toString:0:0": 0
}}],
["observe.src.observable_map", "package:observe/src/observable_map.dart", , V, {
MapChangeRecord: {"": "ChangeRecord;key>,oldValue>,newValue>,isInsert,isRemove",
  toString$0: function(_) {
    var kind;
    if (this.isInsert)
      kind = "insert";
    else
      kind = this.isRemove ? "remove" : "set";
    return "#<MapChangeRecord " + kind + " " + H.S(this.key) + " from: " + H.S(this.oldValue) + " to: " + H.S(this.newValue) + ">";
  },
  "+toString:0:0": 0,
  $isMapChangeRecord: true
},

ObservableMap: {"": "ChangeNotifier;_observable_map$_map,_changes,_records",
  get$keys: function() {
    return this._observable_map$_map.get$keys();
    "191,13";
  },
  "+keys": 1,
  get$values: function(_) {
    var t1 = this._observable_map$_map;
    return t1.get$values(t1);
    "192,13";
  },
  "+values": 1,
  get$length: function(_) {
    var t1 = this._observable_map$_map;
    return t1.get$length(t1);
    "81,13";
  },
  "+length": 1,
  get$isEmpty: function(_) {
    var t1 = this._observable_map$_map;
    return t1.get$length(t1) === 0;
    "18,13";
  },
  "+isEmpty": 1,
  get$isNotEmpty: function(_) {
    var t1 = this._observable_map$_map;
    return t1.get$length(t1) !== 0;
    "18,13";
  },
  "+isNotEmpty": 1,
  containsValue$1: function(value) {
    return this._observable_map$_map.containsValue$1(value);
    "18,82,0,13";
  },
  "+containsValue:1:0": 1,
  containsKey$1: function(key) {
    return this._observable_map$_map.containsKey$1(key);
    "18,117,0,13";
  },
  "+containsKey:1:0": 1,
  $index: function(_, key) {
    var t1 = this._observable_map$_map;
    return t1.$index(t1, key);
    "193,117,0,13";
  },
  "+[]:1:0": 1,
  $indexSet: function(_, key, value) {
    var t1, len, oldValue, t2, t3;
    t1 = this._observable_map$_map;
    len = t1.get$length(t1);
    oldValue = t1.$index(t1, key);
    t1.$indexSet(t1, key, value);
    t2 = this._changes;
    if (t2 != null) {
      t3 = t2._async$_next;
      t2 = t3 == null ? t2 != null : t3 !== t2;
    } else
      t2 = false;
    if (t2) {
      t1 = t1.get$length(t1);
      t2 = len !== t1;
      if (t2) {
        if (this.get$hasObservers(this) && t2) {
          t1 = new T.PropertyChangeRecord(this, C.Symbol_length, len, t1);
          t1.$builtinTypeInfo = [null];
          this.notifyChange$1(this, t1);
        }
        t1 = new V.MapChangeRecord(key, null, value, true, false);
        t1.$builtinTypeInfo = [null, null];
        this.notifyChange$1(this, t1);
      } else if (J.$eq(oldValue, value) !== true) {
        t1 = new V.MapChangeRecord(key, oldValue, value, false, false);
        t1.$builtinTypeInfo = [null, null];
        this.notifyChange$1(this, t1);
      }
    }
    "12,117,194,82,193,13";
  },
  "+[]=:2:0": 1,
  addAll$1: function(_, other) {
    J.forEach$1$ax(other, new V.ObservableMap_addAll_closure(this));
  },
  putIfAbsent$2: function(key, ifAbsent) {
    var t1, len, result, t2, t3;
    t1 = this._observable_map$_map;
    len = t1.get$length(t1);
    result = t1.putIfAbsent$2(key, ifAbsent);
    t2 = this._changes;
    if (t2 != null) {
      t3 = t2._async$_next;
      t2 = t3 == null ? t2 != null : t3 !== t2;
    } else
      t2 = false;
    if (t2 && len !== t1.get$length(t1)) {
      F.notifyPropertyChangeHelper(this, C.Symbol_length, len, t1.get$length(t1));
      t1 = new V.MapChangeRecord(key, null, result, true, false);
      H.setRuntimeTypeInfo(t1, [null, null]);
      this.notifyChange$1(this, t1);
    }
    return result;
  },
  remove$1: function(_, key) {
    var t1, len, result, t2, t3;
    t1 = this._observable_map$_map;
    len = t1.get$length(t1);
    result = t1.remove$1(t1, key);
    t2 = this._changes;
    if (t2 != null) {
      t3 = t2._async$_next;
      t2 = t3 == null ? t2 != null : t3 !== t2;
    } else
      t2 = false;
    if (t2 && len !== t1.get$length(t1)) {
      t2 = new V.MapChangeRecord(key, result, null, false, true);
      H.setRuntimeTypeInfo(t2, [null, null]);
      this.notifyChange$1(this, t2);
      F.notifyPropertyChangeHelper(this, C.Symbol_length, len, t1.get$length(t1));
    }
    return result;
  },
  clear$0: function(_) {
    var t1, len, t2, t3;
    t1 = this._observable_map$_map;
    len = t1.get$length(t1);
    t2 = this._changes;
    if (t2 != null) {
      t3 = t2._async$_next;
      t2 = t3 == null ? t2 != null : t3 !== t2;
    } else
      t2 = false;
    if (t2 && len > 0) {
      t1.forEach$1(t1, new V.ObservableMap_clear_closure(this));
      F.notifyPropertyChangeHelper(this, C.Symbol_length, len, 0);
    }
    t1.clear$0(t1);
  },
  forEach$1: function(_, f) {
    var t1 = this._observable_map$_map;
    return t1.forEach$1(t1, f);
  },
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  "+toString:0:0": 0,
  $asMap: null,
  $isMap: true,
  static: {
ObservableMap_ObservableMap$from: function(other, $K, $V) {
  var t1 = V.ObservableMap_ObservableMap$createFromType(other, $K, $V);
  t1.addAll$1(t1, other);
  return t1;
},

ObservableMap_ObservableMap$createFromType: function(other, $K, $V) {
  var t1, result;
  t1 = J.getInterceptor(other);
  if (typeof other === "object" && other !== null && !!t1.$isLinkedHashMap) {
    result = new V.ObservableMap(P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V), null, null);
    H.setRuntimeTypeInfo(result, [$K, $V]);
  } else {
    result = new V.ObservableMap(P.HashMap_HashMap(null, null, null, $K, $V), null, null);
    H.setRuntimeTypeInfo(result, [$K, $V]);
  }
  return result;
}}

},

ObservableMap_addAll_closure: {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1 = this.this_0;
    t1.$indexSet(t1, key, value);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

ObservableMap_clear_closure: {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1, t2;
    t1 = this.this_0;
    t2 = new V.MapChangeRecord(key, value, null, false, true);
    H.setRuntimeTypeInfo(t2, [null, null]);
    t1.notifyChange$1(t1, t2);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
}}],
["observe.src.path_observer", "package:observe/src/path_observer.dart", , L, {
_changeRecordMatches: function(record, key) {
  var t1 = J.getInterceptor(record);
  if (typeof record === "object" && record !== null && !!t1.$isPropertyChangeRecord)
    return J.$eq(record.name, key);
  if (typeof record === "object" && record !== null && !!t1.$isMapChangeRecord) {
    t1 = J.getInterceptor$x(key);
    if (typeof key === "object" && key !== null && !!t1.$isSymbol)
      key = t1.get$_name(key);
    return J.$eq(record.key, key);
  }
  return false;
},

_getObjectProperty: function(object, property) {
  var mirror, type, t1, t2, unmangledName, unmangledName0, exception;
  if (object == null)
    return;
  t1 = property;
  if (typeof t1 === "number" && Math.floor(t1) === t1) {
    t1 = object;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!t2.$isList) && J.$ge$n(property, 0) && J.$lt$n(property, J.get$length$asx(object)))
      return J.$index$asx(object, property);
  } else {
    t1 = property;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isSymbol) {
      mirror = H.reflect(object);
      unmangledName = J.get$runtimeType$(mirror.get$reflectee())._typeName;
      t1 = $.get$mangledGlobalNames();
      unmangledName0 = t1.$index(t1, unmangledName);
      type = H.reflectClassByName(H.s(unmangledName0 == null ? unmangledName : unmangledName0), unmangledName);
      try {
        if (L._maybeHasGetter(type, property)) {
          t1 = property;
          t1 = mirror._invoke$4(t1, 1, J.get$_name$x(t1), []);
          return t1.reflectee;
        }
        if (L._hasMethod(type, C.Symbol_Qyo)) {
          t1 = J.$index$asx(object, J.get$_name$x(property));
          return t1;
        }
      } catch (exception) {
        t1 = H.unwrapException(exception);
        t2 = J.getInterceptor(t1);
        if (typeof t1 === "object" && t1 !== null && !!t2.$isNoSuchMethodError) {
          if (!L._hasMethod(type, C.Symbol_noSuchMethod))
            throw exception;
        } else
          throw exception;
      }

    }
  }
  if ($.get$_logger().isLoggable$1(C.Level_FINER_400))
    $.get$_logger().finer$1("can't get " + H.S(property) + " in " + H.S(object));
  return;
},

_setObjectProperty: function(object, property, value) {
  var mirror, type, t1, t2, exception;
  if (object == null)
    return false;
  t1 = property;
  if (typeof t1 === "number" && Math.floor(t1) === t1) {
    t1 = object;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!t2.$isList) && J.$ge$n(property, 0) && J.$lt$n(property, J.get$length$asx(object))) {
      J.$indexSet$ax(object, property, value);
      return true;
    }
  } else {
    t1 = property;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isSymbol) {
      mirror = H.reflect(object);
      type = H.reflectClassByMangledName(J.get$runtimeType$(mirror.get$reflectee())._typeName);
      try {
        if (L._maybeHasSetter(type, property)) {
          mirror.setField$2(property, value);
          return true;
        }
        if (L._hasMethod(type, C.Symbol_sgp)) {
          J.$indexSet$ax(object, J.get$_name$x(property), value);
          return true;
        }
      } catch (exception) {
        t1 = H.unwrapException(exception);
        t2 = J.getInterceptor(t1);
        if (typeof t1 === "object" && t1 !== null && !!t2.$isNoSuchMethodError) {
          if (!L._hasMethod(type, C.Symbol_noSuchMethod))
            throw exception;
        } else
          throw exception;
      }

    }
  }
  if ($.get$_logger().isLoggable$1(C.Level_FINER_400))
    $.get$_logger().finer$1("can't set " + H.S(property) + " in " + H.S(object));
  return false;
},

_maybeHasGetter: function(type, $name) {
  var members;
  for (; J.$eq(type, $.get$objectType()) !== true;) {
    members = type.get$declarations();
    if (members.containsKey$1($name) === true)
      return true;
    if (members.containsKey$1(C.Symbol_noSuchMethod) === true)
      return true;
    type = L._safeSuperclass(type);
  }
  return false;
},

_maybeHasSetter: function(type, $name) {
  var setterName, members, t1, t2;
  setterName = new H.Symbol0(H.Symbol_validate(H.S($name.get$_name($name)) + "="));
  for (; J.$eq(type, $.get$objectType()) !== true;) {
    members = type.get$declarations();
    t1 = J.$index$asx(members, $name);
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isVariableMirror)
      return true;
    if (members.containsKey$1(setterName) === true)
      return true;
    if (members.containsKey$1(C.Symbol_noSuchMethod) === true)
      return true;
    type = L._safeSuperclass(type);
  }
  return false;
},

_hasMethod: function(type, $name) {
  var member, t1;
  for (; J.$eq(type, $.get$objectType()) !== true;) {
    member = J.$index$asx(type.get$declarations(), $name);
    t1 = J.getInterceptor(member);
    if (typeof member === "object" && member !== null && !!t1.$isMethodMirror && member.get$isRegularMethod())
      return true;
    type = L._safeSuperclass(type);
  }
  return false;
},

_safeSuperclass: function(type) {
  var t1, exception, t2;
  try {
    t1 = type.get$superclass();
    return t1;
  } catch (exception) {
    t1 = H.unwrapException(exception);
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isUnsupportedError)
      return $.get$objectType();
    else
      throw exception;
  }

},

_isPathValid: function(s) {
  s = J.replaceAll$2$s(s, $.get$_spacesRegExp(), "");
  if (s === "")
    return true;
  if (0 >= s.length)
    throw H.ioore(s, 0);
  if (s[0] === ".")
    return false;
  return $.get$_pathRegExp().hasMatch$1(s);
},

PathObserver: {"": "ChangeNotifier;path>,_isValid,_segments,_values,_subs,_computeValue,_changes,_records",
  _computeValue$1: function(arg0) {
    return this._computeValue.call$1(arg0);
  },
  get$value: function(_) {
    var t1, t2;
    if (!this._isValid)
      return;
    t1 = this._changes;
    if (t1 != null) {
      t2 = t1._async$_next;
      t1 = t2 == null ? t1 != null : t2 !== t1;
    } else
      t1 = false;
    if (!t1)
      this._updateValues$0();
    return C.JSArray_methods.get$last(this._values);
    "12,13";
  },
  "+value": 1,
  set$value: function(_, newValue) {
    var t1, len, t2, t3;
    t1 = this._segments;
    len = t1.length;
    if (len === 0)
      return;
    t2 = this._changes;
    if (t2 != null) {
      t3 = t2._async$_next;
      t2 = t3 == null ? t2 != null : t3 !== t2;
    } else
      t2 = false;
    if (!t2)
      this._updateValues$1$end(len - 1);
    t2 = this._values;
    t3 = len - 1;
    if (t3 < 0 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    t2 = t2[t3];
    if (t3 >= t1.length)
      throw H.ioore(t1, t3);
    if (L._setObjectProperty(t2, t1[t3], newValue)) {
      t1 = this._values;
      if (len >= t1.length)
        throw H.ioore(t1, len);
      t1[len] = newValue;
    }
    "12,166,0,13";
  },
  "+value=": 1,
  bindSync$1: function(callback) {
    var result = this.get$changes(this).listen$1(new L.PathObserver_bindSync_closure(this, callback));
    callback.call$1(this.get$value(this));
    return result;
  },
  observed$0: function(_) {
    O.ChangeNotifier.prototype.observed$0.call(this, this);
    this._updateValues$0();
    this._observePath$0();
  },
  get$observed: function(_receiver) {
    return new H.BoundClosure$i0(this, L.PathObserver.prototype.observed$0, _receiver, "observed$0");
  },
  unobserved$0: function(_) {
    var i, t1;
    for (i = 0; t1 = this._subs, i < t1.length; ++i) {
      t1 = t1[i];
      if (t1 != null) {
        t1.cancel$0();
        t1 = this._subs;
        if (i >= t1.length)
          throw H.ioore(t1, i);
        t1[i] = null;
      }
    }
    O.ChangeNotifier.prototype.unobserved$0.call(this, this);
  },
  get$unobserved: function(_receiver) {
    return new H.BoundClosure$i0(this, L.PathObserver.prototype.unobserved$0, _receiver, "unobserved$0");
  },
  _updateValues$1$end: function(end) {
    var t1, last, t2, i, t3, newValue;
    if (end == null)
      end = this._segments.length;
    t1 = this._segments;
    last = t1.length - 1;
    if (typeof end !== "number")
      throw H.iae(end);
    t2 = this._computeValue != null;
    i = 0;
    for (; i < end;) {
      t3 = this._values;
      if (i >= t3.length)
        throw H.ioore(t3, i);
      t3 = t3[i];
      if (i >= t1.length)
        throw H.ioore(t1, i);
      newValue = L._getObjectProperty(t3, t1[i]);
      if (i === last && t2)
        newValue = this._computeValue$1(newValue);
      t3 = this._values;
      ++i;
      if (i >= t3.length)
        throw H.ioore(t3, i);
      t3[i] = newValue;
    }
  },
  _updateValues$0: function() {
    return this._updateValues$1$end(null);
  },
  _updateObservedValues$1$start: function(start) {
    var t1, last, t2, i, oldValue, newValue, t3, i0, t4;
    for (t1 = this._segments, last = t1.length - 1, t2 = this._computeValue != null, i = start, oldValue = null, newValue = null; i <= last; i = i0) {
      t3 = this._values;
      i0 = i + 1;
      t4 = t3.length;
      if (i0 < 0 || i0 >= t4)
        throw H.ioore(t3, i0);
      oldValue = t3[i0];
      if (i < 0 || i >= t4)
        throw H.ioore(t3, i);
      t3 = t3[i];
      if (i >= t1.length)
        throw H.ioore(t1, i);
      newValue = L._getObjectProperty(t3, t1[i]);
      if (i === last && t2)
        newValue = this._computeValue$1(newValue);
      if (oldValue == null ? newValue == null : oldValue === newValue) {
        this._observePath$2(start, i);
        return;
      }
      t3 = this._values;
      if (i0 >= t3.length)
        throw H.ioore(t3, i0);
      t3[i0] = newValue;
    }
    this._observePath$1(start);
    if (this.get$hasObservers(this) && J.$eq(oldValue, newValue) !== true) {
      t1 = new T.PropertyChangeRecord(this, C.Symbol_value, oldValue, newValue);
      t1.$builtinTypeInfo = [null];
      this.notifyChange$1(this, t1);
    }
  },
  _observePath$2: function(start, end) {
    var i, t1;
    if (end == null)
      end = this._segments.length;
    if (typeof end !== "number")
      throw H.iae(end);
    i = start;
    for (; i < end; ++i) {
      t1 = this._subs;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      t1 = t1[i];
      if (t1 != null)
        t1.cancel$0();
      this._observeIndex$1(i);
    }
  },
  _observePath$0: function() {
    return this._observePath$2(0, null);
  },
  _observePath$1: function(start) {
    return this._observePath$2(start, null);
  },
  _observeIndex$1: function(i) {
    var t1, object, segment, t2, subscription, handleError, handleDone;
    t1 = this._values;
    if (i < 0 || i >= t1.length)
      throw H.ioore(t1, i);
    object = t1[i];
    t1 = this._segments;
    if (i >= t1.length)
      throw H.ioore(t1, i);
    segment = t1[i];
    if (typeof segment === "number" && Math.floor(segment) === segment)
      ;
    else {
      t1 = J.getInterceptor$x(object);
      if (typeof object === "object" && object !== null && !!t1.$isObservable) {
        t2 = this._subs;
        subscription = t1.get$changes(object)._createSubscription$1(false);
        subscription._async$_onData = $.Zone__current.registerUnaryCallback$1(new L.PathObserver__observeIndex_closure(this, i, segment));
        handleError = P._nullErrorHandler$closure;
        subscription._onError = P._registerErrorHandler(handleError, $.Zone__current);
        handleDone = P._nullDoneHandler$closure;
        subscription._onDone = $.Zone__current.registerCallback$1(handleDone);
        if (i >= t2.length)
          throw H.ioore(t2, i);
        t2[i] = subscription;
      }
    }
  },
  PathObserver$3$computeValue: function(object, path, computeValue) {
    var t1, t2, segment, index;
    if (this._isValid)
      for (t1 = J.trim$0$s(path).split("."), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = this._segments; t2.moveNext$0();) {
        segment = t2._current;
        if (J.$eq(segment, "") === true)
          continue;
        index = H.Primitives_parseInt(segment, 10, new L.PathObserver_closure());
        t1.push(index != null ? index : new H.Symbol0(H.Symbol_validate(segment)));
      }
    t1 = this._segments;
    t2 = P.List_List(t1.length + 1, P.Object);
    H.setRuntimeTypeInfo(t2, [P.Object]);
    this._values = t2;
    if (t1.length === 0 && computeValue != null)
      object = computeValue.call$1(object);
    t2 = this._values;
    if (0 >= t2.length)
      throw H.ioore(t2, 0);
    t2[0] = object;
    t1 = P.List_List(t1.length, P.StreamSubscription);
    H.setRuntimeTypeInfo(t1, [P.StreamSubscription]);
    this._subs = t1;
  },
  $isPathObserver: true,
  static: {
PathObserver$: function(object, path, computeValue) {
  var t1, t2;
  t1 = L._isPathValid(path);
  t2 = [];
  H.setRuntimeTypeInfo(t2, [P.Object]);
  t2 = new L.PathObserver(path, t1, t2, null, null, computeValue, null, null);
  t2.PathObserver$3$computeValue(object, path, computeValue);
  return t2;
}}

},

PathObserver_closure: {"": "Closure;",
  call$1: function(_) {
    return;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

PathObserver_bindSync_closure: {"": "Closure;this_0,callback_1",
  call$1: function(records) {
    var t1 = this.this_0;
    this.callback_1.call$1(t1.get$value(t1));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

PathObserver__observeIndex_closure0: {"": "Closure;this_0,i_1,segment_2",
  call$1: function(records) {
    var t1, t2;
    for (t1 = J.get$iterator$ax(records), t2 = this.segment_2; t1.moveNext$0();)
      if (t1.get$current().indexChanged$1(t2)) {
        this.this_0._updateObservedValues$1$start(this.i_1);
        return;
      }
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

PathObserver__observeIndex_closure: {"": "Closure;this_3,i_4,segment_5",
  call$1: function(records) {
    var t1, t2;
    for (t1 = J.get$iterator$ax(records), t2 = this.segment_5; t1.moveNext$0();)
      if (L._changeRecordMatches(t1.get$current(), t2) === true) {
        this.this_3._updateObservedValues$1$start(this.i_4);
        return;
      }
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

closure0: {"": "Closure;",
  call$0: function() {
    return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^(?:(?:[$_a-zA-Z]+[$_a-zA-Z0-9]*|(?:[0-9]|[1-9]+[0-9]+)))(?:\\.(?:[$_a-zA-Z]+[$_a-zA-Z0-9]*|(?:[0-9]|[1-9]+[0-9]+)))*$", false, true, false), null, null);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
}}],
["page", "page.dart", , Y, {
PageElement: {"": ["DartdocElement_ChangeNotifier;_page$__$home%-,_changes,_records,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$home: function(receiver) {
    return receiver._page$__$home;
    "35,13,101";
  },
  "+home": 1,
  set$home: function(receiver, value) {
    receiver._page$__$home = this.notifyPropertyChange$3(receiver, C.Symbol_home, receiver._page$__$home, value);
    "12,82,35,13";
  },
  "+home=": 1,
  enteredView$0: function(receiver) {
    var t1;
    E.DartdocElement.prototype.enteredView$0.call(this, receiver);
    t1 = L.PathObserver$(receiver, "viewer.currentPage", null);
    t1.get$changes(t1).listen$1(new Y.PageElement_enteredView_closure(receiver));
    L.PathObserver$(receiver, "viewer.homePage", null).bindSync$1(new Y.PageElement_enteredView_closure0(receiver));
    J.setProperty$2$x(receiver.style, "display", "block");
    "12";
  },
  "+enteredView:0:0": 1,
  get$homePage: function(receiver) {
    return $.get$viewer()._dartdoc_viewer$__$homePage;
    "12,101";
  },
  "+homePage": 1,
  get$isHome: function(receiver) {
    var t1, t2;
    t1 = $.get$viewer()._currentPage;
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isHome;
    "12,101";
  },
  "+isHome": 1,
  get$hasHomePage: function(receiver) {
    return $.get$viewer()._dartdoc_viewer$__$homePage != null;
    "12,101";
  },
  "+hasHomePage": 1,
  get$currentPageIsLibrary: function(receiver) {
    var t1, t2;
    t1 = $.get$viewer()._currentPage;
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isLibrary;
    "12,101";
  },
  "+currentPageIsLibrary": 1,
  get$currentPageIsMethod: function(receiver) {
    var t1, t2;
    t1 = $.get$viewer()._currentPage;
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isMethod;
    "12,101";
  },
  "+currentPageIsMethod": 1,
  get$currentPageIsClass: function(receiver) {
    var t1, t2;
    t1 = $.get$viewer()._currentPage;
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isClass;
    "12,101";
  },
  "+currentPageIsClass": 1,
  get$currentPageIsTypedef: function(receiver) {
    var t1, t2;
    t1 = $.get$viewer()._currentPage;
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isTypedef;
    "12,101";
  },
  "+currentPageIsTypedef": 1,
  get$currentPage: function(receiver) {
    return $.get$viewer()._currentPage;
    "12,101";
  },
  "+currentPage": 1,
  set$currentPage: function(receiver, x) {
    "12,116,12";
  },
  "+currentPage=": 1,
  "@": function() {
    return [C.CustomTag_W3i];
  },
  static: {
PageElement$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.PageElement_methods.Element$created$0(receiver);
  C.PageElement_methods.PolymerElement$created$0(receiver);
  return receiver;
  "77";
},

"+new PageElement$created:0:0": 1}

},

"+PageElement": [195],

DartdocElement_ChangeNotifier: {"": "DartdocElement+ChangeNotifier;", $isObservable: true},

PageElement_enteredView_closure: {"": "Closure;this_0-",
  call$1: function(changes) {
    var change, t1, t2, t3, t4, t5, t6, t7;
    change = J.get$first$ax(changes);
    t1 = this.this_0;
    t2 = J.getInterceptor$x(change);
    t3 = J.getInterceptor$x(t1);
    t3.notifyPropertyChange$3(t1, C.Symbol_currentPage, t2.get$oldValue(change), t2.get$newValue(change));
    t4 = t2.get$oldValue(change);
    t5 = J.getInterceptor(t4);
    t6 = t2.get$newValue(change);
    t7 = J.getInterceptor(t6);
    t3.notifyPropertyChange$3(t1, C.Symbol_currentPageIsLibrary, typeof t4 === "object" && t4 !== null && !!t5.$isLibrary, typeof t6 === "object" && t6 !== null && !!t7.$isLibrary);
    t7 = t2.get$oldValue(change);
    t6 = J.getInterceptor(t7);
    t5 = t2.get$newValue(change);
    t4 = J.getInterceptor(t5);
    t3.notifyPropertyChange$3(t1, C.Symbol_currentPageIsMethod, typeof t7 === "object" && t7 !== null && !!t6.$isMethod, typeof t5 === "object" && t5 !== null && !!t4.$isMethod);
    t4 = t2.get$oldValue(change);
    t5 = J.getInterceptor(t4);
    t6 = t2.get$newValue(change);
    t7 = J.getInterceptor(t6);
    t3.notifyPropertyChange$3(t1, C.Symbol_currentPageIsClass, typeof t4 === "object" && t4 !== null && !!t5.$isClass, typeof t6 === "object" && t6 !== null && !!t7.$isClass);
    t7 = t2.get$oldValue(change);
    t6 = J.getInterceptor(t7);
    t5 = t2.get$newValue(change);
    t4 = J.getInterceptor(t5);
    t3.notifyPropertyChange$3(t1, C.Symbol_currentPageIsTypedef, typeof t7 === "object" && t7 !== null && !!t6.$isTypedef, typeof t5 === "object" && t5 !== null && !!t4.$isTypedef);
    t4 = t2.get$oldValue(change);
    t5 = J.getInterceptor(t4);
    t2 = t2.get$newValue(change);
    t6 = J.getInterceptor(t2);
    t3.notifyPropertyChange$3(t1, C.Symbol_isHome, typeof t4 === "object" && t4 !== null && !!t5.$isHome, typeof t2 === "object" && t2 !== null && !!t6.$isHome);
    "12,108,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+PageElement_enteredView_closure": [100],

PageElement_enteredView_closure0: {"": "Closure;this_1-",
  call$1: function(_) {
    var t1, t2, t3, t4;
    t1 = this.this_1;
    t2 = J.getInterceptor$x(t1);
    t2.notifyPropertyChange$3(t1, C.Symbol_hasHomePage, null, $.get$viewer()._dartdoc_viewer$__$homePage != null);
    t2.notifyPropertyChange$3(t1, C.Symbol_homePage, null, $.get$viewer()._dartdoc_viewer$__$homePage);
    t3 = $.get$viewer()._currentPage;
    t4 = J.getInterceptor(t3);
    t2.notifyPropertyChange$3(t1, C.Symbol_isHome, null, typeof t3 === "object" && t3 !== null && !!t4.$isHome);
    "12,134,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+PageElement_enteredView_closure": [100]}],
["parameters", "parameters.dart", , R, {
ParameterElement: {"": ["DartdocElement;_parameters$_parameters%-,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$observables: function(receiver) {
    return N.concat(E.DartdocElement.prototype.get$observables.call(this, receiver), C.List_daG);
    "12";
  },
  "+observables": 1,
  get$methodsToCall: function(receiver) {
    return N.concat(E.DartdocElement.prototype.get$methodsToCall.call(this, receiver), C.List_Symbol_addAllParameters);
    "12";
  },
  "+methodsToCall": 1,
  get$parameters: function(receiver) {
    return receiver._parameters$_parameters;
    "12,98";
  },
  "+parameters": 1,
  set$parameters: function(receiver, newParameters) {
    this.notifyObservables$1(receiver, new R.ParameterElement_parameters_closure(receiver, newParameters));
    "12,196,12,98";
  },
  "+parameters=": 1,
  get$required: function(receiver) {
    var t1 = J.where$1$ax(receiver._parameters$_parameters, new R.ParameterElement_required_closure());
    return t1.toList$0(t1);
    "129,101";
  },
  "+required": 1,
  get$optional: function(receiver) {
    var t1 = J.where$1$ax(receiver._parameters$_parameters, new R.ParameterElement_optional_closure());
    return t1.toList$0(t1);
    "129,101";
  },
  "+optional": 1,
  get$optionalOpeningDelimiter: function(receiver) {
    var t1;
    if (J.get$isEmpty$asx(this.get$optional(receiver)))
      t1 = "";
    else
      t1 = J.get$first$ax(this.get$optional(receiver)).get$isNamed() === true ? "{" : "[";
    return t1;
    "12,101";
  },
  "+optionalOpeningDelimiter": 1,
  get$optionalClosingDelimiter: function(receiver) {
    var t1;
    if (J.get$isEmpty$asx(this.get$optional(receiver)))
      t1 = "";
    else
      t1 = J.get$first$ax(this.get$optional(receiver)).get$isNamed() === true ? "}" : "]";
    return t1;
    "12,101";
  },
  "+optionalClosingDelimiter": 1,
  addAllParameters$0: function(receiver) {
    var $location, t1, t2;
    $location = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector(".required");
    if ($location == null)
      return;
    t1 = J.getInterceptor$x($location);
    t2 = t1.get$children($location);
    t2.clear$0(t2);
    t1.insertAdjacentText$2($location, "beforeend", "(");
    this.addParameters$3(receiver, this.get$required(receiver), "required", $location);
    this.addParameters$3(receiver, this.get$optional(receiver), "optional", $location);
    t1.insertAdjacentText$2($location, "beforeend", ")");
    "12";
  },
  "+addAllParameters:0:0": 1,
  addParameters$3: function(receiver, elements, className, $location) {
    var t1, outerSpan, t2, t3;
    t1 = J.getInterceptor$asx(elements);
    if (t1.get$isEmpty(elements) === true)
      return;
    if ($location == null)
      return;
    outerSpan = document.createElement("span", null);
    t2 = J.getInterceptor(className);
    if (t2.$eq(className, "optional") === true) {
      if (J.get$isEmpty$asx(this.get$optional(receiver)))
        t3 = "";
      else
        t3 = J.get$first$ax(this.get$optional(receiver)).get$isNamed() === true ? "{" : "[";
      J.insertAdjacentText$2$x(outerSpan, "beforeend", t3);
    }
    t1.forEach$1(elements, new R.ParameterElement_addParameters_closure(receiver, elements, className, outerSpan));
    if (t2.$eq(className, "optional") === true) {
      if (J.get$isEmpty$asx(this.get$optional(receiver)))
        t1 = "";
      else
        t1 = J.get$first$ax(this.get$optional(receiver)).get$isNamed() === true ? "}" : "]";
      J.insertAdjacentText$2$x(outerSpan, "beforeend", t1);
    }
    J.add$1$ax(J.get$children$x($location), outerSpan);
    "12,197,129,28,7,43,12";
  },
  "+addParameters:3:0": 1,
  "@": function() {
    return [C.CustomTag_dsQ];
  },
  static: {
ParameterElement$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._parameters$_parameters = C.List_empty;
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.ParameterElement_methods.Element$created$0(receiver);
  C.ParameterElement_methods.PolymerElement$created$0(receiver);
  return receiver;
  "78";
},

"+new ParameterElement$created:0:0": 1}

},

"+ParameterElement": [67],

ParameterElement_parameters_closure: {"": "Closure;this_0-,newParameters_1-",
  call$0: function() {
    var t1 = this.newParameters_1;
    J.set$_parameters$_parameters$x(this.this_0, t1);
    return t1;
    "12";
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+ParameterElement_parameters_closure": [100],

ParameterElement_required_closure: {"": "Closure;",
  call$1: function(parameter) {
    return parameter.get$isOptional() !== true;
    "12,198,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+ParameterElement_required_closure": [100],

ParameterElement_optional_closure: {"": "Closure;",
  call$1: function(parameter) {
    return parameter.get$isOptional();
    "12,198,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+ParameterElement_optional_closure": [100],

ParameterElement_addParameters_closure: {"": "Closure;this_0-,elements_1-,className_2-,outerSpan_3-",
  call$1: function(element) {
    var t1, t2, space, t3;
    t1 = J.getInterceptor$x(element);
    t2 = this.outerSpan_3;
    J.forEach$1$ax(J.get$annotations$x(t1.get$annotations(element)), new R.ParameterElement_addParameters__closure(t2));
    if (t1.get$type(element).get$isDynamic() !== true) {
      J.append$1$x(t2, E.MemberElement_createInner(t1.get$type(element)));
      space = " ";
    } else
      space = "";
    t3 = J.getInterceptor$x(t2);
    t3.insertAdjacentText$2(t2, "beforeend", space + H.S(t1.get$decoratedName(element)));
    if (J.$eq(this.className_2, "required") === true && J.get$isNotEmpty$asx(J.get$optional$x(this.this_0)) || t1.$eq(element, J.get$last$ax(this.elements_1)) !== true)
      t3.insertAdjacentText$2(t2, "beforeend", ", ");
    "12,87,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+ParameterElement_addParameters_closure": [100],

ParameterElement_addParameters__closure: {"": "Closure;outerSpan_4-",
  call$1: function(annotation) {
    var anchor, t1, t2;
    anchor = W.AnchorElement_AnchorElement(null);
    t1 = J.getInterceptor$x(annotation);
    anchor.textContent = "@" + H.S(t1.get$simpleType(annotation));
    J.set$href$x(anchor, "#" + H.S(t1.get$location(annotation)));
    t1 = this.outerSpan_4;
    t2 = J.getInterceptor$x(t1);
    t2.append$1(t1, anchor);
    t2.insertAdjacentText$2(t1, "beforeend", " ");
    "12,128,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+ParameterElement_addParameters__closure": [100]}],
["parser", "package:yaml/src/parser.dart", , V, {
Parser0: {"": "Object;_s,_pos,_len,_line,_column,_inBareDocument,_farthestLine,_farthestColumn,_farthestPos,_farthestContext,_contextStack,_errorAnnotations,_capturedString,_captureStart,_capturingAs",
  next$0: function() {
    var t1, $char, t2;
    t1 = this._pos;
    if (t1 === this._len)
      return -1;
    this._pos = t1 + 1;
    $char = J.codeUnitAt$1$s(this._s, t1);
    if ($char === 10 || $char === 13) {
      this._line = this._line + 1;
      this._column = 0;
    } else
      this._column = this._column + 1;
    t1 = this._farthestLine;
    t2 = this._line;
    if (t1 < t2) {
      this._farthestLine = t2;
      this._farthestColumn = this._column;
      this._farthestContext = C.JSArray_methods.get$last(this._contextStack);
    } else if (t1 === t2 && this._farthestColumn < this._column) {
      this._farthestColumn = this._column;
      this._farthestContext = C.JSArray_methods.get$last(this._contextStack);
    }
    this._farthestPos = this._pos;
    return $char;
  },
  get$next: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.next$0, null, "next$0");
  },
  peek$1: function(i) {
    var peekPos, t1;
    peekPos = this._pos + i;
    t1 = this._len;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return peekPos >= t1 || peekPos < 0 ? -1 : J.codeUnitAt$1$s(this._s, peekPos);
  },
  peek$0: function() {
    return this.peek$1(0);
  },
  consume$1: function(matcher) {
    var peekPos, t1;
    peekPos = this._pos + 0;
    t1 = this._len;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (matcher.call$1(peekPos >= t1 || peekPos < 0 ? -1 : J.codeUnitAt$1$s(this._s, peekPos)) === true) {
      this.next$0();
      return true;
    }
    return false;
  },
  consumeChar$1: function($char) {
    return this.consume$1(new V.Parser_consumeChar_closure($char));
  },
  oneOrMore$1: function(consumer) {
    var first, out, el;
    first = consumer.call$0();
    if (!(first != null && J.$eq(first, false) !== true))
      return;
    out = [first];
    for (; true;) {
      el = consumer.call$0();
      if (!(el != null && J.$eq(el, false) !== true))
        return out;
      out.push(el);
    }
    return;
  },
  zeroOrMore$1: function(consumer) {
    var out, oldPos, el;
    out = [];
    oldPos = this._pos;
    for (; true;) {
      el = consumer.call$0();
      if (!(el != null && J.$eq(el, false) !== true) || oldPos === this._pos)
        return out;
      oldPos = this._pos;
      out.push(el);
    }
    return;
  },
  or$1: function(consumers) {
    var t1, res;
    for (t1 = new H.ListIterator(consumers, consumers.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(consumers, "JSArray", 0)]); t1.moveNext$0();) {
      res = t1._current.call$0();
      if (res != null && J.$eq(res, false) !== true)
        return res;
    }
    return;
  },
  transaction$1: function(consumer) {
    var oldPos, oldLine, oldColumn, oldCaptureStart, t1, capturedSoFar, res;
    oldPos = this._pos;
    oldLine = this._line;
    oldColumn = this._column;
    oldCaptureStart = this._captureStart;
    t1 = this._capturedString;
    capturedSoFar = t1 == null ? null : J.toString$0(t1);
    res = consumer.call$0();
    if (res != null && J.$eq(res, false) !== true)
      return res;
    this._pos = oldPos;
    this._line = oldLine;
    this._column = oldColumn;
    this._captureStart = oldCaptureStart;
    this._capturedString = capturedSoFar == null ? null : P.StringBuffer$(capturedSoFar);
    return res;
  },
  nAtOnce$2: function(n, matcher) {
    return this.transaction$1(new V.Parser_nAtOnce_closure(this, n, matcher));
  },
  rawString$1: function(str) {
    return this.nAtOnce$2(str.length, new V.Parser_rawString_closure(str));
  },
  captureString$1: function(consumer) {
    var t1, res, t2, result;
    this._captureStart = this._pos;
    t1 = new P.StringBuffer("");
    t1._contents = "";
    this._capturedString = t1;
    res = this.transaction$1(consumer);
    if (!(res != null && J.$eq(res, false) !== true)) {
      this._captureStart = null;
      this._capturedString = null;
      return;
    }
    t1 = this._capturedString;
    t2 = J.substring$2$s(this._s, this._captureStart, this._pos);
    t1.toString;
    t1._contents = t1._contents + t2;
    this._captureStart = this._pos;
    result = J.toString$0(this._capturedString);
    this._captureStart = null;
    this._capturedString = null;
    return result;
  },
  captureAs$2: function(replacement, consumer) {
    return this.captureAndTransform$2(consumer, new V.Parser_captureAs_closure(replacement));
  },
  captureAndTransform$2: function(consumer, transformation) {
    var res;
    if (this._capturedString == null)
      return consumer.call$0();
    if (this._capturingAs)
      return consumer.call$0();
    this.flushCapture$0();
    this._capturingAs = true;
    res = consumer.call$0();
    this._capturingAs = false;
    if (!(res != null && J.$eq(res, false) !== true))
      return res;
    this._capturedString.write$1(transformation.call$1(J.substring$2$s(this._s, this._captureStart, this._pos)));
    this._captureStart = this._pos;
    return res;
  },
  flushCapture$0: function() {
    this._capturedString.write$1(J.substring$2$s(this._s, this._captureStart, this._pos));
    this._captureStart = this._pos;
  },
  addProps$2: function(node, props) {
    var t1, t2;
    if (props == null || node == null)
      return node;
    t1 = J.getInterceptor$ax(props);
    t2 = t1.get$first(props);
    if (t2 != null && J.$eq(t2, false) !== true)
      J.set$tag$x(node, t1.get$first(props));
    t2 = t1.get$last(props);
    if (t2 != null && J.$eq(t2, false) !== true)
      node.set$anchor(t1.get$last(props));
    return node;
  },
  map$1: function(_, pairs) {
    var $content = P.LinkedHashMap_LinkedHashMap(null, null, null, R.Node0, R.Node0);
    J.forEach$1$ax(pairs, new V.Parser_map_closure($content));
    return new R.MappingNode($content, new R.Tag("?", 2), null);
  },
  context$2: function($name, fn) {
    var t1;
    try {
      this._contextStack.push($name);
      t1 = fn.call$0();
      return t1;
    } finally {
      t1 = this._contextStack;
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      t1.pop();
    }
  },
  annotateError$2: function(message, fn) {
    var t1, start, t2, rti, t3;
    t1 = {};
    start = this._pos;
    t1.end_0 = null;
    this.transaction$1(new V.Parser_annotateError_closure(t1, this, fn));
    t2 = this._errorAnnotations;
    t1 = t1.end_0;
    rti = H.getRuntimeTypeInfo(t2);
    t3 = rti == null ? null : rti[0];
    t1 = new V._Pair(new V._Range(start, t1), message);
    t1.$builtinTypeInfo = [V._Range, t3];
    t2._parser0$_contents.push(t1);
  },
  error$1: function(_, message) {
    throw H.wrapException(V.SyntaxError$(this._line + 1, this._column + 1, H.S(message) + " (in " + this._farthestContext + ")"));
  },
  get$error: function(_receiver) {
    return new W.BoundClosure$i1(this, V.Parser0.prototype.error$1, _receiver, "error$1");
  },
  expect$2: function(result, expected) {
    if (result != null && J.$eq(result, false) !== true)
      return result;
    this.error$1(this, "expected " + expected);
  },
  parseFailed$0: function() {
    var message, t1, extraError;
    message = "invalid YAML in " + this._farthestContext;
    t1 = this._errorAnnotations;
    extraError = t1.$index(t1, this._farthestPos);
    if (extraError != null)
      message = message + " (" + H.S(extraError) + ")";
    throw H.wrapException(V.SyntaxError$(this._farthestLine + 1, this._farthestColumn + 1, message));
  },
  countIndentation$0: function() {
    var t1, t2, t3, i, peekPos;
    t1 = this._s;
    t2 = J.getInterceptor$s(t1);
    t3 = this._len;
    i = 0;
    while (true) {
      peekPos = this._pos + i;
      if (typeof t3 !== "number")
        throw H.iae(t3);
      if (!((peekPos >= t3 || peekPos < 0 ? -1 : t2.codeUnitAt$1(t1, peekPos)) === 32))
        break;
      ++i;
    }
    return i;
  },
  blockScalarAdditionalIndentation$2: function(header, indent) {
    var t1, t2, t3;
    t1 = {};
    if (!header.get$autoDetectIndent())
      return header.get$additionalIndent();
    t1.maxSpaces_0 = 0;
    t1.maxSpacesLine_1 = 0;
    t1.spaces_2 = 0;
    this.transaction$1(new V.Parser_blockScalarAdditionalIndentation_closure(t1, this));
    t2 = t1.spaces_2;
    if (t2 <= indent)
      return 1;
    t3 = t1.maxSpaces_0;
    if (t3 > t2)
      throw H.wrapException(V.SyntaxError$(t1.maxSpacesLine_1 + 1, t3, "Leading empty lines may not be indented more than the first non-empty line."));
    return t2 - indent;
  },
  indicatorType$1: function($char) {
    switch ($char) {
      case 45:
        return 4;
      case 63:
        return 5;
      case 58:
        return 6;
      case 44:
        return 7;
      case 91:
        return 8;
      case 93:
        return 9;
      case 123:
        return 10;
      case 125:
        return 11;
      case 35:
        return 12;
      case 38:
        return 13;
      case 42:
        return 14;
      case 33:
        return 15;
      case 124:
        return 16;
      case 62:
        return 17;
      case 39:
        return 18;
      case 34:
        return 19;
      case 37:
        return 20;
      case 64:
      case 96:
        return 21;
      default:
        return;
    }
  },
  isPrintable$1: function($char) {
    var t1 = J.getInterceptor($char);
    if (t1.$eq($char, 9) !== true)
      if (t1.$eq($char, 10) !== true)
        if (t1.$eq($char, 13) !== true)
          if (!(t1.$ge($char, 32) && t1.$le($char, 126)))
            if (t1.$eq($char, 133) !== true)
              if (!(t1.$ge($char, 160) && t1.$le($char, 55295)))
                if (!(t1.$ge($char, 57344) && t1.$le($char, 65533)))
                  t1 = t1.$ge($char, 65536) && t1.$le($char, 1114111);
                else
                  t1 = true;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
    else
      t1 = true;
    return t1;
  },
  isJson$1: function($char) {
    var t1 = J.getInterceptor($char);
    if (t1.$eq($char, 9) !== true)
      t1 = t1.$ge($char, 32) && t1.$le($char, 1114111);
    else
      t1 = true;
    return t1;
  },
  c_indicator$1: function(type) {
    return this.consume$1(new V.Parser_c_indicator_closure(this, type));
  },
  isFlowIndicator$1: function($char) {
    var indicator = this.indicatorType$1($char);
    return indicator === 7 || indicator === 8 || indicator === 9 || indicator === 10 || indicator === 11;
  },
  isBreak$1: function($char) {
    var t1 = J.getInterceptor($char);
    return t1.$eq($char, 10) === true || t1.$eq($char, 13) === true;
  },
  get$isBreak: function() {
    return new H.BoundClosure$1(this, V.Parser0.prototype.isBreak$1, null, "isBreak$1");
  },
  isNonBreak$1: function($char) {
    var t1;
    if (this.isPrintable$1($char)) {
      t1 = J.getInterceptor($char);
      t1 = !(t1.$eq($char, 10) === true || t1.$eq($char, 13) === true);
    } else
      t1 = false;
    return t1;
  },
  get$isNonBreak: function() {
    return new H.BoundClosure$1(this, V.Parser0.prototype.isNonBreak$1, null, "isNonBreak$1");
  },
  b_break$0: function() {
    if (this.consumeChar$1(13)) {
      new V.Parser_b_break_closure(this).call$0();
      return true;
    }
    return this.consumeChar$1(10);
  },
  b_asLineFeed$0: function() {
    return this.captureAs$2("\n", new V.Parser_b_asLineFeed_closure(this));
  },
  b_nonContent$0: function() {
    return this.captureAs$2("", new V.Parser_b_nonContent_closure(this));
  },
  isSpace$1: function($char) {
    var t1 = J.getInterceptor($char);
    return t1.$eq($char, 32) === true || t1.$eq($char, 9) === true;
  },
  get$isSpace: function() {
    return new H.BoundClosure$1(this, V.Parser0.prototype.isSpace$1, null, "isSpace$1");
  },
  isNonSpace$1: function($char) {
    var t1;
    if (this.isPrintable$1($char)) {
      t1 = J.getInterceptor($char);
      t1 = !(t1.$eq($char, 10) === true || t1.$eq($char, 13) === true);
    } else
      t1 = false;
    if (t1) {
      t1 = J.getInterceptor($char);
      t1 = !(t1.$eq($char, 32) === true || t1.$eq($char, 9) === true);
    } else
      t1 = false;
    return t1;
  },
  get$isNonSpace: function() {
    return new H.BoundClosure$1(this, V.Parser0.prototype.isNonSpace$1, null, "isNonSpace$1");
  },
  isHexDigit$1: function($char) {
    var t1 = J.getInterceptor$n($char);
    if (!(t1.$ge($char, 48) && t1.$le($char, 57)))
      if (!(t1.$ge($char, 97) && t1.$le($char, 102)))
        t1 = t1.$ge($char, 65) && t1.$le($char, 70);
      else
        t1 = true;
    else
      t1 = true;
    return t1;
  },
  c_escape$0: function() {
    return this.captureAs$2("", new V.Parser_c_escape_closure(this));
  },
  ns_escNull$0: function() {
    return this.captureAs$2("\u0000", new V.Parser_ns_escNull_closure(this));
  },
  get$ns_escNull: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_escNull$0, null, "ns_escNull$0");
  },
  ns_escBell$0: function() {
    return this.captureAs$2("\u0007", new V.Parser_ns_escBell_closure(this));
  },
  get$ns_escBell: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_escBell$0, null, "ns_escBell$0");
  },
  ns_escBackspace$0: function() {
    return this.captureAs$2("\u0008", new V.Parser_ns_escBackspace_closure(this));
  },
  get$ns_escBackspace: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_escBackspace$0, null, "ns_escBackspace$0");
  },
  ns_escHorizontalTab$0: function() {
    return this.captureAs$2("\t", new V.Parser_ns_escHorizontalTab_closure(this));
  },
  get$ns_escHorizontalTab: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_escHorizontalTab$0, null, "ns_escHorizontalTab$0");
  },
  ns_escLineFeed$0: function() {
    return this.captureAs$2("\n", new V.Parser_ns_escLineFeed_closure(this));
  },
  get$ns_escLineFeed: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_escLineFeed$0, null, "ns_escLineFeed$0");
  },
  ns_escVerticalTab$0: function() {
    return this.captureAs$2("\u000b", new V.Parser_ns_escVerticalTab_closure(this));
  },
  get$ns_escVerticalTab: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_escVerticalTab$0, null, "ns_escVerticalTab$0");
  },
  ns_escFormFeed$0: function() {
    return this.captureAs$2("\u000c", new V.Parser_ns_escFormFeed_closure(this));
  },
  get$ns_escFormFeed: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_escFormFeed$0, null, "ns_escFormFeed$0");
  },
  ns_escCarriageReturn$0: function() {
    return this.captureAs$2("\r", new V.Parser_ns_escCarriageReturn_closure(this));
  },
  get$ns_escCarriageReturn: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_escCarriageReturn$0, null, "ns_escCarriageReturn$0");
  },
  ns_escEscape$0: function() {
    return this.captureAs$2("\u001b", new V.Parser_ns_escEscape_closure(this));
  },
  get$ns_escEscape: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_escEscape$0, null, "ns_escEscape$0");
  },
  ns_escSpace$0: function() {
    return this.consumeChar$1(32);
  },
  get$ns_escSpace: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_escSpace$0, null, "ns_escSpace$0");
  },
  ns_escDoubleQuote$0: function() {
    return this.consumeChar$1(34);
  },
  get$ns_escDoubleQuote: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_escDoubleQuote$0, null, "ns_escDoubleQuote$0");
  },
  ns_escSlash$0: function() {
    return this.consumeChar$1(47);
  },
  get$ns_escSlash: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_escSlash$0, null, "ns_escSlash$0");
  },
  ns_escBackslash$0: function() {
    return this.consumeChar$1(92);
  },
  get$ns_escBackslash: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_escBackslash$0, null, "ns_escBackslash$0");
  },
  ns_escNextLine$0: function() {
    return this.captureAs$2("\u0085", new V.Parser_ns_escNextLine_closure(this));
  },
  get$ns_escNextLine: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_escNextLine$0, null, "ns_escNextLine$0");
  },
  ns_escNonBreakingSpace$0: function() {
    return this.captureAs$2("\u00a0", new V.Parser_ns_escNonBreakingSpace_closure(this));
  },
  get$ns_escNonBreakingSpace: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_escNonBreakingSpace$0, null, "ns_escNonBreakingSpace$0");
  },
  ns_escLineSeparator$0: function() {
    return this.captureAs$2("\u2028", new V.Parser_ns_escLineSeparator_closure(this));
  },
  get$ns_escLineSeparator: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_escLineSeparator$0, null, "ns_escLineSeparator$0");
  },
  ns_escParagraphSeparator$0: function() {
    return this.captureAs$2("\u2029", new V.Parser_ns_escParagraphSeparator_closure(this));
  },
  get$ns_escParagraphSeparator: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_escParagraphSeparator$0, null, "ns_escParagraphSeparator$0");
  },
  ns_esc8Bit$0: function() {
    return this.ns_escNBit$2(120, 2);
  },
  get$ns_esc8Bit: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_esc8Bit$0, null, "ns_esc8Bit$0");
  },
  ns_esc16Bit$0: function() {
    return this.ns_escNBit$2(117, 4);
  },
  get$ns_esc16Bit: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_esc16Bit$0, null, "ns_esc16Bit$0");
  },
  ns_esc32Bit$0: function() {
    return this.ns_escNBit$2(85, 8);
  },
  get$ns_esc32Bit: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_esc32Bit$0, null, "ns_esc32Bit$0");
  },
  ns_escNBit$2: function($char, digits) {
    if (this.captureAs$2("", new V.Parser_ns_escNBit_closure(this, $char)) !== true)
      return false;
    return this.expect$2(this.captureAndTransform$2(new V.Parser_ns_escNBit_closure0(this, digits), new V.Parser_ns_escNBit_closure1()), "" + digits + " hexidecimal digits");
  },
  c_ns_escChar$0: function() {
    return this.context$2("escape sequence", new V.Parser_c_ns_escChar_closure(this));
  },
  get$c_ns_escChar: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.c_ns_escChar$0, null, "c_ns_escChar$0");
  },
  s_indent$1: function(indent) {
    var result = this.nAtOnce$2(indent, new V.Parser_s_indent_closure());
    if (this.peek$0() === 9)
      this.annotateError$2("tab characters are not allowed as indentation in YAML", new V.Parser_s_indent_closure0(this));
    return result;
  },
  s_indentLessThan$1: function(indent) {
    var box_0, t1, box_00, t2, peekPos;
    box_0 = {};
    box_0.i_0 = 0;
    if (typeof indent !== "number")
      throw indent.$sub();
    t1 = indent - 1;
    for (; box_0.i_0 < t1; box_00 = {}, t2 = box_0.i_0, box_00.i_0 = t2, box_00.i_0 = t2 + 1, box_0 = box_00)
      if (!this.consumeChar$1(32)) {
        peekPos = this._pos + 0;
        t1 = this._len;
        if (typeof t1 !== "number")
          throw H.iae(t1);
        if ((peekPos >= t1 || peekPos < 0 ? -1 : J.codeUnitAt$1$s(this._s, peekPos)) === 9)
          this.annotateError$2("tab characters are not allowed as indentation in YAML", new V.Parser_s_indentLessThan_closure(box_0, this, indent));
        break;
      }
    return true;
  },
  s_separateInLine$0: function() {
    return this.transaction$1(new V.Parser_s_separateInLine_closure(this));
  },
  get$s_separateInLine: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.s_separateInLine$0, null, "s_separateInLine$0");
  },
  s_linePrefix$2: function(indent, ctx) {
    return this.captureAs$2("", new V.Parser_s_linePrefix_closure(this, indent, ctx));
  },
  s_flowLinePrefix$1: function(indent) {
    return this.captureAs$2("", new V.Parser_s_flowLinePrefix_closure(this, indent));
  },
  l_empty$2: function(indent, ctx) {
    return this.transaction$1(new V.Parser_l_empty_closure(this, indent, ctx));
  },
  b_asSpace$0: function() {
    return this.captureAs$2(" ", new V.Parser_b_asSpace_closure(this));
  },
  get$b_asSpace: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.b_asSpace$0, null, "b_asSpace$0");
  },
  b_l_trimmed$2: function(indent, ctx) {
    return this.transaction$1(new V.Parser_b_l_trimmed_closure(this, indent, ctx));
  },
  b_l_folded$2: function(indent, ctx) {
    return this.or$1([new V.Parser_b_l_folded_closure(this, indent, ctx), this.get$b_asSpace()]);
  },
  s_flowFolded$1: function(indent) {
    return this.transaction$1(new V.Parser_s_flowFolded_closure(this, indent));
  },
  c_nb_commentText$0: function() {
    var t1 = this.c_indicator$1(12);
    if (!t1)
      return false;
    this.zeroOrMore$1(new V.Parser_c_nb_commentText_closure(this));
    return true;
  },
  get$c_nb_commentText: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.c_nb_commentText$0, null, "c_nb_commentText$0");
  },
  s_b_comment$0: function() {
    var t1 = this.s_separateInLine$0();
    if (t1 != null && J.$eq(t1, false) !== true)
      this.get$c_nb_commentText().call$0();
    return this._pos === this._len || this.b_nonContent$0() === true;
  },
  l_comment$0: function() {
    return this.transaction$1(new V.Parser_l_comment_closure(this));
  },
  get$l_comment: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.l_comment$0, null, "l_comment$0");
  },
  s_l_comments$0: function() {
    var t1 = this.s_b_comment$0();
    if (!t1 && this._column !== 0)
      return false;
    this.zeroOrMore$1(this.get$l_comment());
    return true;
  },
  s_separate$2: function(indent, ctx) {
    switch (ctx) {
      case 0:
      case 1:
      case 2:
      case 3:
        return this.s_separateLines$1(indent);
      case 4:
      case 5:
        return this.s_separateInLine$0();
      default:
        throw H.wrapException("invalid context \"" + H.S(ctx) + "\"");
    }
  },
  s_separateLines$1: function(indent) {
    return this.transaction$1(new V.Parser_s_separateLines_closure(this, indent)) === true || this.s_separateInLine$0() === true;
  },
  l_directive$0: function() {
    return false;
  },
  get$l_directive: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.l_directive$0, null, "l_directive$0");
  },
  c_ns_properties$2: function(indent, ctx) {
    return;
  },
  isAnchorChar$1: function($char) {
    var t1;
    if (this.isPrintable$1($char)) {
      t1 = J.getInterceptor($char);
      t1 = !(t1.$eq($char, 10) === true || t1.$eq($char, 13) === true);
    } else
      t1 = false;
    if (t1) {
      t1 = J.getInterceptor($char);
      t1 = !(t1.$eq($char, 32) === true || t1.$eq($char, 9) === true);
    } else
      t1 = false;
    return t1 && !this.isFlowIndicator$1($char);
  },
  get$isAnchorChar: function() {
    return new H.BoundClosure$1(this, V.Parser0.prototype.isAnchorChar$1, null, "isAnchorChar$1");
  },
  ns_anchorName$0: function() {
    return this.captureString$1(new V.Parser_ns_anchorName_closure(this));
  },
  c_ns_aliasNode$0: function() {
    var t1 = this.c_indicator$1(14);
    if (!t1)
      return;
    return new R.AliasNode(new R.Tag("tag:yaml.org,2002:str", 0), this.expect$2(this.ns_anchorName$0(), "anchor name"));
  },
  get$c_ns_aliasNode: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.c_ns_aliasNode$0, null, "c_ns_aliasNode$0");
  },
  e_scalar$0: function() {
    return new R.ScalarNode("", null, new R.Tag("?", 0), null);
  },
  get$e_scalar: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.e_scalar$0, null, "e_scalar$0");
  },
  e_node$0: function() {
    return new R.ScalarNode("", null, new R.Tag("?", 0), null);
  },
  get$e_node: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.e_node$0, null, "e_node$0");
  },
  nb_doubleChar$0: function() {
    return this.or$1([this.get$c_ns_escChar(), new V.Parser_nb_doubleChar_closure(this)]);
  },
  get$nb_doubleChar: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.nb_doubleChar$0, null, "nb_doubleChar$0");
  },
  c_doubleQuoted$2: function(indent, ctx) {
    return this.context$2("string", new V.Parser_c_doubleQuoted_closure(this, indent, ctx));
  },
  nb_doubleText$2: function(indent, ctx) {
    return this.captureString$1(new V.Parser_nb_doubleText_closure(this, indent, ctx));
  },
  s_doubleEscaped$1: function(indent) {
    return this.transaction$1(new V.Parser_s_doubleEscaped_closure(this, indent));
  },
  s_doubleBreak$1: function(indent) {
    return this.or$1([new V.Parser_s_doubleBreak_closure(this, indent), new V.Parser_s_doubleBreak_closure0(this, indent)]);
  },
  nb_ns_doubleInLine$0: function() {
    this.zeroOrMore$1(new V.Parser_nb_ns_doubleInLine_closure(this));
  },
  s_doubleNextLine$1: function(indent) {
    var t1 = this.s_doubleBreak$1(indent);
    if (!(t1 != null && J.$eq(t1, false) !== true))
      return false;
    new V.Parser_s_doubleNextLine_closure(this, indent).call$0();
    return true;
  },
  nb_doubleMultiLine$1: function(indent) {
    this.nb_ns_doubleInLine$0();
    this.or$1([new V.Parser_nb_doubleMultiLine_closure(this, indent), new V.Parser_nb_doubleMultiLine_closure0(this)]);
  },
  c_quotedQuote$0: function() {
    return this.captureAs$2("'", new V.Parser_c_quotedQuote_closure(this));
  },
  get$c_quotedQuote: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.c_quotedQuote$0, null, "c_quotedQuote$0");
  },
  nb_singleChar$0: function() {
    return this.or$1([this.get$c_quotedQuote(), new V.Parser_nb_singleChar_closure(this)]);
  },
  get$nb_singleChar: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.nb_singleChar$0, null, "nb_singleChar$0");
  },
  c_singleQuoted$2: function(indent, ctx) {
    return this.context$2("string", new V.Parser_c_singleQuoted_closure(this, indent, ctx));
  },
  nb_singleText$2: function(indent, ctx) {
    return this.captureString$1(new V.Parser_nb_singleText_closure(this, indent, ctx));
  },
  nb_ns_singleInLine$0: function() {
    this.zeroOrMore$1(new V.Parser_nb_ns_singleInLine_closure(this));
  },
  s_singleNextLine$1: function(indent) {
    var t1 = this.s_flowFolded$1(indent);
    if (!(t1 != null && J.$eq(t1, false) !== true))
      return false;
    new V.Parser_s_singleNextLine_closure(this, indent).call$0();
    return true;
  },
  nb_singleMultiLine$1: function(indent) {
    this.nb_ns_singleInLine$0();
    this.or$1([new V.Parser_nb_singleMultiLine_closure(this, indent), new V.Parser_nb_singleMultiLine_closure0(this)]);
  },
  ns_plainFirst$1: function(ctx) {
    var $char, indicator, t1, match;
    $char = this.peek$0();
    indicator = this.indicatorType$1($char);
    if (indicator === 21)
      this.error$1(this, "reserved indicators can't start a plain scalar");
    if (this.isPrintable$1($char))
      t1 = !($char === 10 || $char === 13);
    else
      t1 = false;
    if (t1)
      t1 = !($char === 32 || $char === 9);
    else
      t1 = false;
    if (!(t1 && indicator == null))
      match = (indicator === 5 || indicator === 6 || indicator === 4) && this.isPlainSafe$2(ctx, this.peek$1(1));
    else
      match = true;
    if (match)
      this.next$0();
    return match;
  },
  isPlainSafe$2: function(ctx, $char) {
    var t1;
    switch (ctx) {
      case 2:
      case 4:
        if (this.isPrintable$1($char))
          t1 = !($char === 10 || $char === 13);
        else
          t1 = false;
        if (t1)
          t1 = !($char === 32 || $char === 9);
        else
          t1 = false;
        return t1;
      case 3:
      case 5:
        if (this.isPrintable$1($char))
          t1 = !($char === 10 || $char === 13);
        else
          t1 = false;
        if (t1)
          t1 = !($char === 32 || $char === 9);
        else
          t1 = false;
        return t1 && !this.isFlowIndicator$1($char);
      default:
        throw H.wrapException("invalid context \"" + H.S(ctx) + "\"");
    }
  },
  ns_plainChar$1: function(ctx) {
    var $char, indicator, safeChar, t1, t2, nonCommentHash, nonMappingColon, match;
    $char = this.peek$0();
    indicator = this.indicatorType$1($char);
    safeChar = this.isPlainSafe$2(ctx, $char) && indicator !== 6 && indicator !== 12;
    t1 = this.peek$1(-1);
    if (this.isPrintable$1(t1))
      t2 = !(t1 === 10 || t1 === 13);
    else
      t2 = false;
    if (t2)
      t1 = !(t1 === 32 || t1 === 9);
    else
      t1 = false;
    nonCommentHash = t1 && indicator === 12;
    nonMappingColon = indicator === 6 && this.isPlainSafe$2(ctx, this.peek$1(1));
    match = safeChar || nonCommentHash || nonMappingColon;
    if (match)
      this.next$0();
    return match;
  },
  ns_plain$2: function(indent, ctx) {
    return this.context$2("plain scalar", new V.Parser_ns_plain_closure(this, indent, ctx));
  },
  nb_ns_plainInLine$1: function(ctx) {
    this.zeroOrMore$1(new V.Parser_nb_ns_plainInLine_closure(this, ctx));
  },
  ns_plainOneLine$1: function(ctx) {
    var t1 = this.c_forbidden$0();
    if (t1)
      return false;
    t1 = this.ns_plainFirst$1(ctx);
    if (!t1)
      return false;
    this.nb_ns_plainInLine$1(ctx);
    return true;
  },
  s_ns_plainNextLine$2: function(indent, ctx) {
    return this.transaction$1(new V.Parser_s_ns_plainNextLine_closure(this, indent, ctx));
  },
  ns_plainMultiLine$2: function(indent, ctx) {
    var t1 = this.ns_plainOneLine$1(ctx);
    if (!t1)
      return false;
    this.zeroOrMore$1(new V.Parser_ns_plainMultiLine_closure(this, indent, ctx));
    return true;
  },
  inFlow$1: function(ctx) {
    switch (ctx) {
      case 2:
      case 3:
        return 3;
      case 4:
      case 5:
        return 5;
      default:
    }
  },
  c_flowSequence$2: function(indent, ctx) {
    return this.transaction$1(new V.Parser_c_flowSequence_closure(this, indent, ctx));
  },
  ns_s_flowSeqEntries$2: function(indent, ctx) {
    var first, t1, rest;
    first = this.ns_flowSeqEntry$2(indent, ctx);
    if (!(first != null && J.$eq(first, false) !== true))
      return P.ListQueue$(null, R.Node0);
    new V.Parser_ns_s_flowSeqEntries_closure(this, indent, ctx).call$0();
    t1 = this.c_indicator$1(7);
    if (t1) {
      new V.Parser_ns_s_flowSeqEntries_closure0(this, indent, ctx).call$0();
      rest = new V.Parser_ns_s_flowSeqEntries_closure1(this, indent, ctx).call$0();
    } else
      rest = null;
    if (rest == null)
      rest = P.ListQueue$(null, R.Node0);
    rest.addFirst$1(first);
    return rest;
  },
  ns_flowSeqEntry$2: function(indent, ctx) {
    return this.or$1([new V.Parser_ns_flowSeqEntry_closure(this, indent, ctx), new V.Parser_ns_flowSeqEntry_closure0(this, indent, ctx)]);
  },
  c_flowMapping$2: function(indent, ctx) {
    var t1, $content;
    t1 = this.c_indicator$1(10);
    if (!t1)
      return;
    new V.Parser_c_flowMapping_closure(this, indent, ctx).call$0();
    $content = new V.Parser_c_flowMapping_closure0(this, indent, ctx).call$0();
    t1 = this.c_indicator$1(11);
    if (!t1)
      return;
    return new R.MappingNode($content, new R.Tag("?", 2), null);
  },
  ns_s_flowMapEntries$2: function(indent, ctx) {
    var first, t1, rest, t2, t3;
    first = this.ns_flowMapEntry$2(indent, ctx);
    if (!(first != null && J.$eq(first, false) !== true))
      return new L.YamlMap(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    new V.Parser_ns_s_flowMapEntries_closure(this, indent, ctx).call$0();
    t1 = this.c_indicator$1(7);
    if (t1) {
      new V.Parser_ns_s_flowMapEntries_closure0(this, indent, ctx).call$0();
      rest = this.ns_s_flowMapEntries$2(indent, ctx);
    } else
      rest = null;
    if (rest == null)
      rest = new L.YamlMap(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t1 = J.getInterceptor$ax(first);
    t2 = t1.get$first(first);
    t3 = rest._yaml_map$_map;
    if (t3.containsKey$1(rest._wrapKey$1(t2)) !== true) {
      t2 = t1.get$first(first);
      t1 = t1.get$last(first);
      t3.$indexSet(t3, rest._wrapKey$1(t2), t1);
    }
    return rest;
  },
  ns_flowMapEntry$2: function(indent, ctx) {
    return this.or$1([new V.Parser_ns_flowMapEntry_closure(this, indent, ctx), new V.Parser_ns_flowMapEntry_closure0(this, indent, ctx)]);
  },
  ns_flowMapExplicitEntry$2: function(indent, ctx) {
    return this.or$1([new V.Parser_ns_flowMapExplicitEntry_closure(this, indent, ctx), new V.Parser_ns_flowMapExplicitEntry_closure0(this)]);
  },
  ns_flowMapImplicitEntry$2: function(indent, ctx) {
    return this.or$1([new V.Parser_ns_flowMapImplicitEntry_closure(this, indent, ctx), new V.Parser_ns_flowMapImplicitEntry_closure0(this, indent, ctx), new V.Parser_ns_flowMapImplicitEntry_closure1(this, indent, ctx)]);
  },
  ns_flowMapYamlKeyEntry$2: function(indent, ctx) {
    var key, t1;
    key = this.ns_flowYamlNode$2(indent, ctx);
    if (!(key != null && J.$eq(key, false) !== true))
      return;
    t1 = new V._Pair(key, this.or$1([new V.Parser_ns_flowMapYamlKeyEntry_closure(this, indent, ctx), this.get$e_node()]));
    H.setRuntimeTypeInfo(t1, [R.Node0, R.Node0]);
    return t1;
  },
  c_ns_flowMapEmptyKeyEntry$2: function(indent, ctx) {
    var value, t1;
    value = this.c_ns_flowMapSeparateValue$2(indent, ctx);
    if (!(value != null && J.$eq(value, false) !== true))
      return;
    t1 = new V._Pair(new R.ScalarNode("", null, new R.Tag("?", 0), null), value);
    H.setRuntimeTypeInfo(t1, [R.Node0, R.Node0]);
    return t1;
  },
  c_ns_flowMapSeparateValue$2: function(indent, ctx) {
    return this.transaction$1(new V.Parser_c_ns_flowMapSeparateValue_closure(this, indent, ctx));
  },
  c_ns_flowMapJsonKeyEntry$2: function(indent, ctx) {
    var key, t1;
    key = this.c_flowJsonNode$2(indent, ctx);
    if (!(key != null && J.$eq(key, false) !== true))
      return;
    t1 = new V._Pair(key, this.or$1([new V.Parser_c_ns_flowMapJsonKeyEntry_closure(this, indent, ctx), this.get$e_node()]));
    H.setRuntimeTypeInfo(t1, [R.Node0, R.Node0]);
    return t1;
  },
  c_ns_flowMapAdjacentValue$2: function(indent, ctx) {
    var t1 = this.c_indicator$1(6);
    if (!t1)
      return;
    return this.or$1([new V.Parser_c_ns_flowMapAdjacentValue_closure(this, indent, ctx), this.get$e_node()]);
  },
  ns_flowPair$2: function(indent, ctx) {
    var pair = this.or$1([new V.Parser_ns_flowPair_closure(this, indent, ctx), new V.Parser_ns_flowPair_closure0(this, indent, ctx)]);
    if (!(pair != null && J.$eq(pair, false) !== true))
      return;
    return this.map$1(this, [pair]);
  },
  ns_flowPairEntry$2: function(indent, ctx) {
    return this.or$1([new V.Parser_ns_flowPairEntry_closure(this, indent, ctx), new V.Parser_ns_flowPairEntry_closure0(this, indent, ctx), new V.Parser_ns_flowPairEntry_closure1(this, indent, ctx)]);
  },
  ns_flowPairYamlKeyEntry$2: function(indent, ctx) {
    return this.transaction$1(new V.Parser_ns_flowPairYamlKeyEntry_closure(this, indent, ctx));
  },
  c_ns_flowPairJsonKeyEntry$2: function(indent, ctx) {
    return this.transaction$1(new V.Parser_c_ns_flowPairJsonKeyEntry_closure(this, indent, ctx));
  },
  ns_s_implicitYamlKey$1: function(ctx) {
    return this.transaction$1(new V.Parser_ns_s_implicitYamlKey_closure(this, ctx));
  },
  c_s_implicitJsonKey$1: function(ctx) {
    return this.transaction$1(new V.Parser_c_s_implicitJsonKey_closure(this, ctx));
  },
  ns_flowYamlContent$2: function(indent, ctx) {
    var str = this.ns_plain$2(indent, ctx);
    if (!(str != null && J.$eq(str, false) !== true))
      return;
    return new R.ScalarNode(str, null, new R.Tag("?", 0), null);
  },
  c_flowJsonContent$2: function(indent, ctx) {
    return this.or$1([new V.Parser_c_flowJsonContent_closure(this, indent, ctx), new V.Parser_c_flowJsonContent_closure0(this, indent, ctx), new V.Parser_c_flowJsonContent_closure1(this, indent, ctx), new V.Parser_c_flowJsonContent_closure2(this, indent, ctx)]);
  },
  ns_flowContent$2: function(indent, ctx) {
    return this.or$1([new V.Parser_ns_flowContent_closure(this, indent, ctx), new V.Parser_ns_flowContent_closure0(this, indent, ctx)]);
  },
  ns_flowYamlNode$2: function(indent, ctx) {
    return this.or$1([this.get$c_ns_aliasNode(), new V.Parser_ns_flowYamlNode_closure(this, indent, ctx), new V.Parser_ns_flowYamlNode_closure0(this, indent, ctx)]);
  },
  c_flowJsonNode$2: function(indent, ctx) {
    return this.transaction$1(new V.Parser_c_flowJsonNode_closure(this, indent, ctx));
  },
  ns_flowNode$2: function(indent, ctx) {
    return this.or$1([this.get$c_ns_aliasNode(), new V.Parser_ns_flowNode_closure(this, indent, ctx), new V.Parser_ns_flowNode_closure0(this, indent, ctx)]);
  },
  c_b_blockHeader$0: function() {
    return this.transaction$1(new V.Parser_c_b_blockHeader_closure(this));
  },
  c_indentationIndicator$0: function() {
    var t1 = this.peek$0();
    if (!(t1 >= 48 && t1 <= 57))
      return;
    return this.next$0() - 48;
  },
  c_chompingIndicator$0: function() {
    switch (this.peek$0()) {
      case 45:
        this.next$0();
        return 0;
      case 43:
        this.next$0();
        return 1;
      default:
        return 2;
    }
  },
  b_chompedLast$1: function(chomping) {
    if (this._pos === this._len)
      return true;
    switch (chomping) {
      case 0:
        return this.b_nonContent$0();
      case 2:
      case 1:
        return this.b_asLineFeed$0();
      default:
    }
  },
  l_chompedEmpty$2: function(indent, chomping) {
    switch (chomping) {
      case 0:
      case 2:
        this.l_stripEmpty$1(indent);
        break;
      case 1:
        this.l_keepEmpty$1(indent);
        break;
      default:
    }
  },
  l_stripEmpty$1: function(indent) {
    this.captureAs$2("", new V.Parser_l_stripEmpty_closure(this, indent));
  },
  l_keepEmpty$1: function(indent) {
    this.zeroOrMore$1(new V.Parser_l_keepEmpty_closure(this, indent));
    new V.Parser_l_keepEmpty_closure0(this, indent).call$0();
  },
  l_trailComments$1: function(indent) {
    return this.transaction$1(new V.Parser_l_trailComments_closure(this, indent));
  },
  c_l_literal$1: function(indent) {
    return this.transaction$1(new V.Parser_c_l_literal_closure(this, indent));
  },
  l_nb_literalText$1: function(indent) {
    return this.transaction$1(new V.Parser_l_nb_literalText_closure(this, indent));
  },
  b_nb_literalNext$1: function(indent) {
    return this.transaction$1(new V.Parser_b_nb_literalNext_closure(this, indent));
  },
  l_literalContent$2: function(indent, chomping) {
    return this.captureString$1(new V.Parser_l_literalContent_closure(this, indent, chomping));
  },
  c_l_folded$1: function(indent) {
    return this.transaction$1(new V.Parser_c_l_folded_closure(this, indent));
  },
  s_nb_foldedText$1: function(indent) {
    return this.transaction$1(new V.Parser_s_nb_foldedText_closure(this, indent));
  },
  l_nb_foldedLines$1: function(indent) {
    var t1 = this.s_nb_foldedText$1(indent);
    if (!(t1 != null && J.$eq(t1, false) !== true))
      return false;
    this.zeroOrMore$1(new V.Parser_l_nb_foldedLines_closure(this, indent));
    return true;
  },
  s_nb_spacedText$1: function(indent) {
    return this.transaction$1(new V.Parser_s_nb_spacedText_closure(this, indent));
  },
  b_l_spaced$1: function(indent) {
    var t1 = this.b_asLineFeed$0();
    if (!(t1 != null && J.$eq(t1, false) !== true))
      return false;
    this.zeroOrMore$1(new V.Parser_b_l_spaced_closure(this, indent));
    return true;
  },
  l_nb_spacedLines$1: function(indent) {
    var t1 = this.s_nb_spacedText$1(indent);
    if (!(t1 != null && J.$eq(t1, false) !== true))
      return false;
    this.zeroOrMore$1(new V.Parser_l_nb_spacedLines_closure(this, indent));
    return true;
  },
  l_nb_sameLines$1: function(indent) {
    return this.transaction$1(new V.Parser_l_nb_sameLines_closure(this, indent));
  },
  l_nb_diffLines$1: function(indent) {
    var t1 = this.l_nb_sameLines$1(indent);
    if (!(t1 != null && J.$eq(t1, false) !== true))
      return false;
    this.zeroOrMore$1(new V.Parser_l_nb_diffLines_closure(this, indent));
    return true;
  },
  l_foldedContent$2: function(indent, chomping) {
    return this.captureString$1(new V.Parser_l_foldedContent_closure(this, indent, chomping));
  },
  l_blockSequence$1: function(indent) {
    return this.context$2("sequence", new V.Parser_l_blockSequence_closure(this, indent));
  },
  c_l_blockSeqEntry$1: function(indent) {
    return this.transaction$1(new V.Parser_c_l_blockSeqEntry_closure(this, indent));
  },
  s_l_blockIndented$2: function(indent, ctx) {
    return this.or$1([new V.Parser_s_l_blockIndented_closure(this, indent, this.countIndentation$0()), new V.Parser_s_l_blockIndented_closure0(this, indent, ctx), new V.Parser_s_l_blockIndented_closure1(this)]);
  },
  ns_l_compactSequence$1: function(indent) {
    return this.context$2("sequence", new V.Parser_ns_l_compactSequence_closure(this, indent));
  },
  l_blockMapping$1: function(indent) {
    return this.context$2("mapping", new V.Parser_l_blockMapping_closure(this, indent));
  },
  ns_l_blockMapEntry$1: function(indent) {
    return this.or$1([new V.Parser_ns_l_blockMapEntry_closure(this, indent), new V.Parser_ns_l_blockMapEntry_closure0(this, indent)]);
  },
  c_l_blockMapExplicitEntry$1: function(indent) {
    var key, t1;
    key = this.c_l_blockMapExplicitKey$1(indent);
    if (!(key != null && J.$eq(key, false) !== true))
      return;
    t1 = new V._Pair(key, this.or$1([new V.Parser_c_l_blockMapExplicitEntry_closure(this, indent), this.get$e_node()]));
    H.setRuntimeTypeInfo(t1, [R.Node0, R.Node0]);
    return t1;
  },
  c_l_blockMapExplicitKey$1: function(indent) {
    return this.transaction$1(new V.Parser_c_l_blockMapExplicitKey_closure(this, indent));
  },
  l_blockMapExplicitValue$1: function(indent) {
    return this.transaction$1(new V.Parser_l_blockMapExplicitValue_closure(this, indent));
  },
  ns_l_blockMapImplicitEntry$1: function(indent) {
    return this.transaction$1(new V.Parser_ns_l_blockMapImplicitEntry_closure(this, indent));
  },
  ns_s_blockMapImplicitKey$0: function() {
    return this.context$2("mapping key", new V.Parser_ns_s_blockMapImplicitKey_closure(this));
  },
  get$ns_s_blockMapImplicitKey: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.ns_s_blockMapImplicitKey$0, null, "ns_s_blockMapImplicitKey$0");
  },
  c_l_blockMapImplicitValue$1: function(indent) {
    return this.context$2("mapping value", new V.Parser_c_l_blockMapImplicitValue_closure(this, indent));
  },
  ns_l_compactMapping$1: function(indent) {
    return this.context$2("mapping", new V.Parser_ns_l_compactMapping_closure(this, indent));
  },
  s_l_blockNode$2: function(indent, ctx) {
    return this.or$1([new V.Parser_s_l_blockNode_closure(this, indent, ctx), new V.Parser_s_l_blockNode_closure0(this, indent)]);
  },
  s_l_flowInBlock$1: function(indent) {
    return this.transaction$1(new V.Parser_s_l_flowInBlock_closure(this, indent));
  },
  s_l_blockInBlock$2: function(indent, ctx) {
    return this.or$1([new V.Parser_s_l_blockInBlock_closure(this, indent, ctx), new V.Parser_s_l_blockInBlock_closure0(this, indent, ctx)]);
  },
  s_l_blockScalar$2: function(indent, ctx) {
    return this.transaction$1(new V.Parser_s_l_blockScalar_closure(this, indent, ctx));
  },
  s_l_blockCollection$2: function(indent, ctx) {
    return this.transaction$1(new V.Parser_s_l_blockCollection_closure(this, indent, ctx));
  },
  l_documentPrefix$0: function() {
    this.zeroOrMore$1(this.get$l_comment());
  },
  get$l_documentPrefix: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.l_documentPrefix$0, null, "l_documentPrefix$0");
  },
  c_directivesEnd$0: function() {
    return this.rawString$1("---");
  },
  get$c_directivesEnd: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.c_directivesEnd$0, null, "c_directivesEnd$0");
  },
  c_documentEnd$0: function() {
    return this.rawString$1("...");
  },
  get$c_documentEnd: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.c_documentEnd$0, null, "c_documentEnd$0");
  },
  l_documentSuffix$0: function() {
    return this.transaction$1(new V.Parser_l_documentSuffix_closure(this));
  },
  get$l_documentSuffix: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.l_documentSuffix$0, null, "l_documentSuffix$0");
  },
  c_forbidden$0: function() {
    var t1 = {};
    if (!this._inBareDocument || this._column !== 0)
      return false;
    t1.forbidden_0 = false;
    this.transaction$1(new V.Parser_c_forbidden_closure(t1, this));
    return t1.forbidden_0;
  },
  l_bareDocument$0: function() {
    try {
      this._inBareDocument = true;
      var t1 = this.s_l_blockNode$2(-1, 1);
      return t1;
    } finally {
      this._inBareDocument = false;
    }
  },
  get$l_bareDocument: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.l_bareDocument$0, null, "l_bareDocument$0");
  },
  l_explicitDocument$0: function() {
    var t1, doc;
    t1 = this.rawString$1("---");
    if (!(t1 != null && J.$eq(t1, false) !== true))
      return;
    doc = this.l_bareDocument$0();
    if (doc != null && J.$eq(doc, false) !== true)
      return doc;
    this.s_l_comments$0();
    return new R.ScalarNode("", null, new R.Tag("?", 0), null);
  },
  get$l_explicitDocument: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.l_explicitDocument$0, null, "l_explicitDocument$0");
  },
  l_directiveDocument$0: function() {
    if (!(this.oneOrMore$1(this.get$l_directive()) != null && true))
      return;
    var doc = this.l_explicitDocument$0();
    if (doc != null)
      return doc;
    this.parseFailed$0();
  },
  get$l_directiveDocument: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.l_directiveDocument$0, null, "l_directiveDocument$0");
  },
  l_anyDocument$0: function() {
    return this.or$1([this.get$l_directiveDocument(), this.get$l_explicitDocument(), this.get$l_bareDocument()]);
  },
  get$l_anyDocument: function() {
    return new P.BoundClosure$0(this, V.Parser0.prototype.l_anyDocument$0, null, "l_anyDocument$0");
  },
  l_yamlStream$0: function() {
    var docs, first;
    docs = [];
    this.zeroOrMore$1(this.get$l_documentPrefix());
    first = this.get$l_anyDocument().call$0();
    docs.push(!(first != null && J.$eq(first, false) !== true) ? new R.ScalarNode("", null, new R.Tag("?", 0), null) : first);
    this.zeroOrMore$1(new V.Parser_l_yamlStream_closure(this, docs));
    if (this._pos !== this._len)
      this.parseFailed$0();
    return docs;
  },
  static: {
"": "Parser_TAB,Parser_LF,Parser_CR,Parser_SP,Parser_TILDE,Parser_NEL,Parser_PLUS,Parser_HYPHEN,Parser_QUESTION_MARK,Parser_COLON,Parser_COMMA,Parser_LEFT_BRACKET,Parser_RIGHT_BRACKET,Parser_LEFT_BRACE,Parser_RIGHT_BRACE,Parser_HASH,Parser_AMPERSAND,Parser_ASTERISK,Parser_EXCLAMATION,Parser_VERTICAL_BAR,Parser_GREATER_THAN,Parser_SINGLE_QUOTE,Parser_DOUBLE_QUOTE,Parser_PERCENT,Parser_AT,Parser_GRAVE_ACCENT,Parser_NULL,Parser_BELL,Parser_BACKSPACE,Parser_VERTICAL_TAB,Parser_FORM_FEED,Parser_ESCAPE,Parser_SLASH,Parser_BACKSLASH,Parser_UNDERSCORE,Parser_NBSP,Parser_LINE_SEPARATOR,Parser_PARAGRAPH_SEPARATOR,Parser_NUMBER_0,Parser_NUMBER_9,Parser_LETTER_A,Parser_LETTER_B,Parser_LETTER_E,Parser_LETTER_F,Parser_LETTER_N,Parser_LETTER_R,Parser_LETTER_T,Parser_LETTER_U,Parser_LETTER_V,Parser_LETTER_X,Parser_LETTER_CAP_A,Parser_LETTER_CAP_F,Parser_LETTER_CAP_L,Parser_LETTER_CAP_N,Parser_LETTER_CAP_P,Parser_LETTER_CAP_U,Parser_LETTER_CAP_X,Parser_C_SEQUENCE_ENTRY,Parser_C_MAPPING_KEY,Parser_C_MAPPING_VALUE,Parser_C_COLLECT_ENTRY,Parser_C_SEQUENCE_START,Parser_C_SEQUENCE_END,Parser_C_MAPPING_START,Parser_C_MAPPING_END,Parser_C_COMMENT,Parser_C_ANCHOR,Parser_C_ALIAS,Parser_C_TAG,Parser_C_LITERAL,Parser_C_FOLDED,Parser_C_SINGLE_QUOTE,Parser_C_DOUBLE_QUOTE,Parser_C_DIRECTIVE,Parser_C_RESERVED,Parser_BLOCK_OUT,Parser_BLOCK_IN,Parser_FLOW_OUT,Parser_FLOW_IN,Parser_BLOCK_KEY,Parser_FLOW_KEY,Parser_CHOMPING_STRIP,Parser_CHOMPING_KEEP,Parser_CHOMPING_CLIP",
Parser$0: function(s) {
  var t1, t2, t3;
  t1 = J.get$length$asx(s);
  t2 = ["document"];
  H.setRuntimeTypeInfo(t2, [J.JSString]);
  t3 = [];
  H.setRuntimeTypeInfo(t3, [[V._Pair, V._Range, null]]);
  t3 = new V._RangeMap(t3);
  H.setRuntimeTypeInfo(t3, [null]);
  return new V.Parser0(s, 0, t1, 0, 0, false, 0, 0, 0, "document", t2, t3, null, null, false);
}}

},

Parser_consumeChar_closure: {"": "Closure;char_0",
  call$1: function(c) {
    return J.$eq(c, this.char_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Parser_nAtOnce_closure: {"": "Closure;this_1,n_2,matcher_3",
  call$0: function() {
    var box_0, t1, t2, t3, box_00, t4;
    box_0 = {};
    box_0.i_0 = 0;
    t1 = this.n_2;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    t2 = this.this_1;
    t3 = this.matcher_3;
    for (; box_0.i_0 < t1; box_00 = {}, t4 = box_0.i_0, box_00.i_0 = t4, box_00.i_0 = t4 + 1, box_0 = box_00)
      if (!t2.consume$1(new V.Parser_nAtOnce__closure(box_0, t3)))
        return false;
    return true;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nAtOnce__closure: {"": "Closure;box_0,matcher_4",
  call$1: function(c) {
    return this.matcher_4.call$2(c, this.box_0.i_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Parser_rawString_closure: {"": "Closure;str_0",
  call$2: function(c, i) {
    return C.JSString_methods.codeUnitAt$1(this.str_0, i) === c;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Parser_captureAs_closure: {"": "Closure;replacement_0",
  call$1: function(_) {
    return this.replacement_0;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Parser_map_closure: {"": "Closure;content_0",
  call$1: function(pair) {
    var t1, t2, t3;
    t1 = this.content_0;
    t2 = J.getInterceptor$ax(pair);
    t3 = t2.get$first(pair);
    t2 = t2.get$last(pair);
    t1.$indexSet(t1, t3, t2);
    return t2;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Parser_annotateError_closure: {"": "Closure;box_0,this_1,fn_2",
  call$0: function() {
    this.fn_2.call$0();
    this.box_0.end_0 = this.this_1._pos;
    return false;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_blockScalarAdditionalIndentation_closure: {"": "Closure;box_0,this_1",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_1;
    t2 = this.box_0;
    do {
      t2.spaces_2 = t1.captureString$1(new V.Parser_blockScalarAdditionalIndentation__closure(t1)).length;
      t3 = t2.spaces_2;
      if (t3 > t2.maxSpaces_0) {
        t2.maxSpaces_0 = t3;
        t2.maxSpacesLine_1 = t1._line;
      }
    } while (t1.b_break$0());
    return false;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_blockScalarAdditionalIndentation__closure: {"": "Closure;this_2",
  call$0: function() {
    var t1 = this.this_2;
    return t1.zeroOrMore$1(new V.Parser_blockScalarAdditionalIndentation___closure(t1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_blockScalarAdditionalIndentation___closure: {"": "Closure;this_3",
  call$0: function() {
    return this.this_3.consumeChar$1(32);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_indicator_closure: {"": "Closure;this_0,type_1",
  call$1: function(c) {
    return this.this_0.indicatorType$1(c) === this.type_1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Parser_b_break_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.consumeChar$1(10);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_b_asLineFeed_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.b_break$0();
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_b_nonContent_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.b_break$0();
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_escape_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.consumeChar$1(92);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_escNull_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.consumeChar$1(48);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_escBell_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.consumeChar$1(97);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_escBackspace_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.consumeChar$1(98);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_escHorizontalTab_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.consume$1(new V.Parser_ns_escHorizontalTab__closure());
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_escHorizontalTab__closure: {"": "Closure;",
  call$1: function(c) {
    var t1 = J.getInterceptor(c);
    return t1.$eq(c, 116) === true || t1.$eq(c, 9) === true;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Parser_ns_escLineFeed_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.consumeChar$1(110);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_escVerticalTab_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.consumeChar$1(118);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_escFormFeed_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.consumeChar$1(102);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_escCarriageReturn_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.consumeChar$1(114);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_escEscape_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.consumeChar$1(101);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_escNextLine_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.consumeChar$1(78);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_escNonBreakingSpace_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.consumeChar$1(95);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_escLineSeparator_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.consumeChar$1(76);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_escParagraphSeparator_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.consumeChar$1(80);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_escNBit_closure: {"": "Closure;this_0,char_1",
  call$0: function() {
    return this.this_0.consumeChar$1(this.char_1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_escNBit_closure0: {"": "Closure;this_2,digits_3",
  call$0: function() {
    var t1 = this.this_2;
    return t1.nAtOnce$2(this.digits_3, new V.Parser_ns_escNBit__closure(t1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_escNBit__closure: {"": "Closure;this_4",
  call$2: function(c, _) {
    return this.this_4.isHexDigit$1(c);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Parser_ns_escNBit_closure1: {"": "Closure;",
  call$1: function(hex) {
    return P.String_String$fromCharCodes([H.Primitives_parseInt("0x" + H.S(hex), null, null)]);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Parser_c_ns_escChar_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    return t1.transaction$1(new V.Parser_c_ns_escChar__closure(t1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_ns_escChar__closure: {"": "Closure;this_1",
  call$0: function() {
    var t1, t2;
    t1 = this.this_1;
    t2 = t1.c_escape$0();
    if (!(t2 != null && J.$eq(t2, false) !== true))
      return false;
    t1 = t1.or$1([t1.get$ns_escNull(), t1.get$ns_escBell(), t1.get$ns_escBackspace(), t1.get$ns_escHorizontalTab(), t1.get$ns_escLineFeed(), t1.get$ns_escVerticalTab(), t1.get$ns_escFormFeed(), t1.get$ns_escCarriageReturn(), t1.get$ns_escEscape(), t1.get$ns_escSpace(), t1.get$ns_escDoubleQuote(), t1.get$ns_escSlash(), t1.get$ns_escBackslash(), t1.get$ns_escNextLine(), t1.get$ns_escNonBreakingSpace(), t1.get$ns_escLineSeparator(), t1.get$ns_escParagraphSeparator(), t1.get$ns_esc8Bit(), t1.get$ns_esc16Bit(), t1.get$ns_esc32Bit()]);
    return t1 != null && J.$eq(t1, false) !== true;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_indent_closure: {"": "Closure;",
  call$2: function(c, i) {
    return J.$eq(c, 32);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Parser_s_indent_closure0: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    return t1.zeroOrMore$1(new V.Parser_s_indent__closure(t1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_indent__closure: {"": "Closure;this_1",
  call$0: function() {
    var t1 = this.this_1;
    return t1.consume$1(t1.get$isSpace());
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_indentLessThan_closure: {"": "Closure;box_0,this_1,indent_2",
  call$0: function() {
    var t1, t2, t3;
    for (t1 = this.box_0, t2 = this.indent_2 - 1, t3 = this.this_1; t1.i_0 < t2; t1.i_0 = t1.i_0 + 1)
      if (!t3.consume$1(t3.get$isSpace()))
        break;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_separateInLine_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    return t1.captureAs$2("", new V.Parser_s_separateInLine__closure(t1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_separateInLine__closure: {"": "Closure;this_1",
  call$0: function() {
    var t1 = this.this_1;
    return t1.oneOrMore$1(new V.Parser_s_separateInLine___closure(t1)) != null && true || t1._column === 0;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_separateInLine___closure: {"": "Closure;this_2",
  call$0: function() {
    var t1 = this.this_2;
    return t1.consume$1(t1.get$isSpace());
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_linePrefix_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    switch (this.ctx_2) {
      case 0:
      case 1:
        return this.this_0.s_indent$1(this.indent_1);
      case 2:
      case 3:
        return this.this_0.s_flowLinePrefix$1(this.indent_1);
      default:
    }
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_flowLinePrefix_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.s_indent$1(this.indent_1);
    if (!(t2 != null && J.$eq(t2, false) !== true))
      return false;
    t1.get$s_separateInLine().call$0();
    return true;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_empty_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    var t1, t2, start;
    t1 = this.this_0;
    t2 = this.indent_1;
    start = t1.or$1([new V.Parser_l_empty__closure(t1, t2, this.ctx_2), new V.Parser_l_empty__closure0(t1, t2)]);
    if (!(start != null && J.$eq(start, false) !== true))
      return false;
    return t1.b_asLineFeed$0();
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_empty__closure: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    return this.this_3.s_linePrefix$2(this.indent_4, this.ctx_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_empty__closure0: {"": "Closure;this_6,indent_7",
  call$0: function() {
    return this.this_6.s_indentLessThan$1(this.indent_7);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_b_asSpace_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    return t1.consume$1(t1.get$isBreak());
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_b_l_trimmed_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.b_nonContent$0();
    if (!(t2 != null && J.$eq(t2, false) !== true))
      return false;
    return t1.oneOrMore$1(new V.Parser_b_l_trimmed__closure(t1, this.indent_1, this.ctx_2)) != null && true;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_b_l_trimmed__closure: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    var t1 = this.this_3;
    return t1.captureAs$2("\n", new V.Parser_b_l_trimmed___closure(t1, this.indent_4, this.ctx_5));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_b_l_trimmed___closure: {"": "Closure;this_6,indent_7,ctx_8",
  call$0: function() {
    return this.this_6.l_empty$2(this.indent_7, this.ctx_8);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_b_l_folded_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    return this.this_0.b_l_trimmed$2(this.indent_1, this.ctx_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_flowFolded_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_0;
    t1.get$s_separateInLine().call$0();
    t2 = this.indent_1;
    t3 = t1.b_l_folded$2(t2, 3);
    if (!(t3 != null && J.$eq(t3, false) !== true))
      return false;
    return t1.s_flowLinePrefix$1(t2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_nb_commentText_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    return t1.consume$1(t1.get$isNonBreak());
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_comment_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.s_separateInLine$0();
    if (!(t2 != null && J.$eq(t2, false) !== true))
      return false;
    t1.get$c_nb_commentText().call$0();
    return t1._pos === t1._len || t1.b_nonContent$0() === true;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_separateLines_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1 = this.this_0;
    return t1.s_l_comments$0() && t1.s_flowLinePrefix$1(this.indent_1) === true;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_ns_properties_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    var t1 = this.this_0.s_separate$2(this.indent_1, this.ctx_2);
    if (!(t1 != null && J.$eq(t1, false) !== true))
      return;
    return;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_ns_properties_closure0: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    var t1 = this.this_3.s_separate$2(this.indent_4, this.ctx_5);
    if (!(t1 != null && J.$eq(t1, false) !== true))
      return;
    return;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_anchorName_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    return t1.oneOrMore$1(new V.Parser_ns_anchorName__closure(t1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_anchorName__closure: {"": "Closure;this_1",
  call$0: function() {
    var t1 = this.this_1;
    return t1.consume$1(t1.get$isAnchorChar());
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_doubleChar_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    return t1.consume$1(new V.Parser_nb_doubleChar__closure(t1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_doubleChar__closure: {"": "Closure;this_1",
  call$1: function(c) {
    var t1;
    if (this.this_1.isJson$1(c)) {
      t1 = J.getInterceptor(c);
      t1 = t1.$eq(c, 92) !== true && t1.$eq(c, 34) !== true;
    } else
      t1 = false;
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Parser_c_doubleQuoted_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    var t1 = this.this_0;
    return t1.transaction$1(new V.Parser_c_doubleQuoted__closure(t1, this.indent_1, this.ctx_2));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_doubleQuoted__closure: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    var t1, t2, contents;
    t1 = this.this_3;
    t2 = t1.c_indicator$1(19);
    if (!t2)
      return;
    contents = t1.nb_doubleText$2(this.indent_4, this.ctx_5);
    t1 = t1.c_indicator$1(19);
    if (!t1)
      return;
    return new R.ScalarNode(contents, null, new R.Tag("!", 0), null);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_doubleText_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    switch (this.ctx_2) {
      case 2:
      case 3:
        this.this_0.nb_doubleMultiLine$1(this.indent_1);
        break;
      case 4:
      case 5:
        var t1 = this.this_0;
        t1.zeroOrMore$1(t1.get$nb_doubleChar());
        break;
      default:
    }
    return true;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_doubleEscaped_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t1.zeroOrMore$1(new V.Parser_s_doubleEscaped__closure(t1));
    if (t1.captureAs$2("", new V.Parser_s_doubleEscaped__closure0(t1)) !== true)
      return false;
    t2 = t1.b_nonContent$0();
    if (!(t2 != null && J.$eq(t2, false) !== true))
      return false;
    t2 = this.indent_1;
    t1.zeroOrMore$1(new V.Parser_s_doubleEscaped__closure1(t1, t2));
    return t1.s_flowLinePrefix$1(t2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_doubleEscaped__closure: {"": "Closure;this_2",
  call$0: function() {
    var t1 = this.this_2;
    return t1.consume$1(t1.get$isSpace());
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_doubleEscaped__closure0: {"": "Closure;this_3",
  call$0: function() {
    return this.this_3.consumeChar$1(92);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_doubleEscaped__closure1: {"": "Closure;this_4,indent_5",
  call$0: function() {
    var t1 = this.this_4;
    return t1.captureAs$2("\n", new V.Parser_s_doubleEscaped___closure(t1, this.indent_5));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_doubleEscaped___closure: {"": "Closure;this_6,indent_7",
  call$0: function() {
    return this.this_6.l_empty$2(this.indent_7, 3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_doubleBreak_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    return this.this_0.s_doubleEscaped$1(this.indent_1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_doubleBreak_closure0: {"": "Closure;this_2,indent_3",
  call$0: function() {
    return this.this_2.s_flowFolded$1(this.indent_3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_ns_doubleInLine_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    return t1.transaction$1(new V.Parser_nb_ns_doubleInLine__closure(t1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_ns_doubleInLine__closure: {"": "Closure;this_1",
  call$0: function() {
    var t1, t2;
    t1 = this.this_1;
    t1.zeroOrMore$1(new V.Parser_nb_ns_doubleInLine___closure(t1));
    t2 = t1.peek$0();
    if (!(t2 === 32 || t2 === 9)) {
      t1 = t1.nb_doubleChar$0();
      t1 = t1 != null && J.$eq(t1, false) !== true;
    } else
      t1 = false;
    return t1;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_ns_doubleInLine___closure: {"": "Closure;this_2",
  call$0: function() {
    var t1 = this.this_2;
    return t1.consume$1(t1.get$isSpace());
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_doubleNextLine_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.peek$0();
    if (!(t2 === 32 || t2 === 9)) {
      t2 = t1.nb_doubleChar$0();
      t2 = t2 != null && J.$eq(t2, false) !== true;
    } else
      t2 = false;
    if (!t2)
      return;
    t1.nb_ns_doubleInLine$0();
    t1.or$1([new V.Parser_s_doubleNextLine__closure(t1, this.indent_1), new V.Parser_s_doubleNextLine__closure0(t1)]);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_doubleNextLine__closure: {"": "Closure;this_2,indent_3",
  call$0: function() {
    return this.this_2.s_doubleNextLine$1(this.indent_3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_doubleNextLine__closure0: {"": "Closure;this_4",
  call$0: function() {
    var t1 = this.this_4;
    return t1.zeroOrMore$1(new V.Parser_s_doubleNextLine___closure(t1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_doubleNextLine___closure: {"": "Closure;this_5",
  call$0: function() {
    var t1 = this.this_5;
    return t1.consume$1(t1.get$isSpace());
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_doubleMultiLine_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    return this.this_0.s_doubleNextLine$1(this.indent_1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_doubleMultiLine_closure0: {"": "Closure;this_2",
  call$0: function() {
    var t1 = this.this_2;
    return t1.zeroOrMore$1(new V.Parser_nb_doubleMultiLine__closure(t1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_doubleMultiLine__closure: {"": "Closure;this_3",
  call$0: function() {
    var t1 = this.this_3;
    return t1.consume$1(t1.get$isSpace());
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_quotedQuote_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.rawString$1("''");
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_singleChar_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    return t1.consume$1(new V.Parser_nb_singleChar__closure(t1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_singleChar__closure: {"": "Closure;this_1",
  call$1: function(c) {
    return this.this_1.isJson$1(c) && J.$eq(c, 39) !== true;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Parser_c_singleQuoted_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    var t1 = this.this_0;
    return t1.transaction$1(new V.Parser_c_singleQuoted__closure(t1, this.indent_1, this.ctx_2));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_singleQuoted__closure: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    var t1, t2, contents;
    t1 = this.this_3;
    t2 = t1.c_indicator$1(18);
    if (!t2)
      return;
    contents = t1.nb_singleText$2(this.indent_4, this.ctx_5);
    t1 = t1.c_indicator$1(18);
    if (!t1)
      return;
    return new R.ScalarNode(contents, null, new R.Tag("!", 0), null);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_singleText_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    switch (this.ctx_2) {
      case 2:
      case 3:
        this.this_0.nb_singleMultiLine$1(this.indent_1);
        break;
      case 4:
      case 5:
        var t1 = this.this_0;
        t1.zeroOrMore$1(t1.get$nb_singleChar());
        break;
      default:
    }
    return true;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_ns_singleInLine_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    return t1.transaction$1(new V.Parser_nb_ns_singleInLine__closure(t1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_ns_singleInLine__closure: {"": "Closure;this_1",
  call$0: function() {
    var t1, t2;
    t1 = this.this_1;
    t1.zeroOrMore$1(new V.Parser_nb_ns_singleInLine___closure(t1));
    t2 = t1.peek$0();
    if (!(t2 === 32 || t2 === 9)) {
      t1 = t1.nb_singleChar$0();
      t1 = t1 != null && J.$eq(t1, false) !== true;
    } else
      t1 = false;
    return t1;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_ns_singleInLine___closure: {"": "Closure;this_2",
  call$0: function() {
    var t1 = this.this_2;
    return t1.consume$1(t1.get$isSpace());
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_singleNextLine_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.peek$0();
    if (!(t2 === 32 || t2 === 9)) {
      t2 = t1.nb_singleChar$0();
      t2 = t2 != null && J.$eq(t2, false) !== true;
    } else
      t2 = false;
    if (!t2)
      return;
    t1.nb_ns_singleInLine$0();
    t1.or$1([new V.Parser_s_singleNextLine__closure(t1, this.indent_1), new V.Parser_s_singleNextLine__closure0(t1)]);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_singleNextLine__closure: {"": "Closure;this_2,indent_3",
  call$0: function() {
    return this.this_2.s_singleNextLine$1(this.indent_3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_singleNextLine__closure0: {"": "Closure;this_4",
  call$0: function() {
    var t1 = this.this_4;
    return t1.zeroOrMore$1(new V.Parser_s_singleNextLine___closure(t1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_singleNextLine___closure: {"": "Closure;this_5",
  call$0: function() {
    var t1 = this.this_5;
    return t1.consume$1(t1.get$isSpace());
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_singleMultiLine_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    return this.this_0.s_singleNextLine$1(this.indent_1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_singleMultiLine_closure0: {"": "Closure;this_2",
  call$0: function() {
    var t1 = this.this_2;
    return t1.zeroOrMore$1(new V.Parser_nb_singleMultiLine__closure(t1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_singleMultiLine__closure: {"": "Closure;this_3",
  call$0: function() {
    var t1 = this.this_3;
    return t1.consume$1(t1.get$isSpace());
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_plain_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    var t1 = this.this_0;
    return t1.captureString$1(new V.Parser_ns_plain__closure(t1, this.indent_1, this.ctx_2));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_plain__closure: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    var t1 = this.ctx_5;
    switch (t1) {
      case 2:
      case 3:
        return this.this_3.ns_plainMultiLine$2(this.indent_4, t1);
      case 4:
      case 5:
        return this.this_3.ns_plainOneLine$1(t1);
      default:
        throw H.wrapException("invalid context \"" + H.S(t1) + "\"");
    }
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_ns_plainInLine_closure: {"": "Closure;this_0,ctx_1",
  call$0: function() {
    var t1 = this.this_0;
    return t1.transaction$1(new V.Parser_nb_ns_plainInLine__closure(t1, this.ctx_1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_ns_plainInLine__closure: {"": "Closure;this_2,ctx_3",
  call$0: function() {
    var t1 = this.this_2;
    t1.zeroOrMore$1(new V.Parser_nb_ns_plainInLine___closure(t1));
    return t1.ns_plainChar$1(this.ctx_3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_nb_ns_plainInLine___closure: {"": "Closure;this_4",
  call$0: function() {
    var t1 = this.this_4;
    return t1.consume$1(t1.get$isSpace());
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_ns_plainNextLine_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_0;
    t2 = t1.s_flowFolded$1(this.indent_1);
    if (!(t2 != null && J.$eq(t2, false) !== true))
      return false;
    t2 = t1.c_forbidden$0();
    if (t2)
      return false;
    t2 = this.ctx_2;
    t3 = t1.ns_plainChar$1(t2);
    if (!t3)
      return false;
    t1.nb_ns_plainInLine$1(t2);
    return true;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_plainMultiLine_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    return this.this_0.s_ns_plainNextLine$2(this.indent_1, this.ctx_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_flowSequence_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    var t1, t2, t3, $content;
    t1 = this.this_0;
    t2 = t1.c_indicator$1(8);
    if (!t2)
      return;
    t2 = this.indent_1;
    t3 = this.ctx_2;
    new V.Parser_c_flowSequence__closure(t1, t2, t3).call$0();
    $content = new V.Parser_c_flowSequence__closure0(t1, t2, t3).call$0();
    t1 = t1.c_indicator$1(9);
    if (!t1)
      return;
    return new R.SequenceNode(P.List_List$from($content, true, R.Node0), new R.Tag("?", 1), null);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_flowSequence__closure: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    return this.this_3.s_separate$2(this.indent_4, this.ctx_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_flowSequence__closure0: {"": "Closure;this_6,indent_7,ctx_8",
  call$0: function() {
    var t1 = this.this_6;
    return t1.ns_s_flowSeqEntries$2(this.indent_7, t1.inFlow$1(this.ctx_8));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_s_flowSeqEntries_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    return this.this_0.s_separate$2(this.indent_1, this.ctx_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_s_flowSeqEntries_closure0: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    return this.this_3.s_separate$2(this.indent_4, this.ctx_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_s_flowSeqEntries_closure1: {"": "Closure;this_6,indent_7,ctx_8",
  call$0: function() {
    return this.this_6.ns_s_flowSeqEntries$2(this.indent_7, this.ctx_8);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowSeqEntry_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    return this.this_0.ns_flowPair$2(this.indent_1, this.ctx_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowSeqEntry_closure0: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    return this.this_3.ns_flowNode$2(this.indent_4, this.ctx_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_flowMapping_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    return this.this_0.s_separate$2(this.indent_1, this.ctx_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_flowMapping_closure0: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    var t1 = this.this_3;
    return t1.ns_s_flowMapEntries$2(this.indent_4, t1.inFlow$1(this.ctx_5));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_s_flowMapEntries_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    return this.this_0.s_separate$2(this.indent_1, this.ctx_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_s_flowMapEntries_closure0: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    return this.this_3.s_separate$2(this.indent_4, this.ctx_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowMapEntry_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    var t1 = this.this_0;
    return t1.transaction$1(new V.Parser_ns_flowMapEntry__closure(t1, this.indent_1, this.ctx_2));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowMapEntry__closure: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    var t1, t2, t3, t4;
    t1 = this.this_3;
    t2 = t1.c_indicator$1(5);
    if (!t2)
      return false;
    t2 = this.indent_4;
    t3 = this.ctx_5;
    t4 = t1.s_separate$2(t2, t3);
    if (!(t4 != null && J.$eq(t4, false) !== true))
      return false;
    return t1.ns_flowMapExplicitEntry$2(t2, t3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowMapEntry_closure0: {"": "Closure;this_6,indent_7,ctx_8",
  call$0: function() {
    return this.this_6.ns_flowMapImplicitEntry$2(this.indent_7, this.ctx_8);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowMapExplicitEntry_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    return this.this_0.ns_flowMapImplicitEntry$2(this.indent_1, this.ctx_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowMapExplicitEntry_closure0: {"": "Closure;this_3",
  call$0: function() {
    var t1 = new V._Pair(new R.ScalarNode("", null, new R.Tag("?", 0), null), new R.ScalarNode("", null, new R.Tag("?", 0), null));
    H.setRuntimeTypeInfo(t1, [R.Node0, R.Node0]);
    return t1;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowMapImplicitEntry_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    return this.this_0.ns_flowMapYamlKeyEntry$2(this.indent_1, this.ctx_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowMapImplicitEntry_closure0: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    return this.this_3.c_ns_flowMapEmptyKeyEntry$2(this.indent_4, this.ctx_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowMapImplicitEntry_closure1: {"": "Closure;this_6,indent_7,ctx_8",
  call$0: function() {
    return this.this_6.c_ns_flowMapJsonKeyEntry$2(this.indent_7, this.ctx_8);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowMapYamlKeyEntry_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    var t1 = this.this_0;
    return t1.transaction$1(new V.Parser_ns_flowMapYamlKeyEntry__closure(t1, this.indent_1, this.ctx_2));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowMapYamlKeyEntry__closure: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_3;
    t2 = this.indent_4;
    t3 = this.ctx_5;
    new V.Parser_ns_flowMapYamlKeyEntry___closure(t1, t2, t3).call$0();
    return t1.c_ns_flowMapSeparateValue$2(t2, t3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowMapYamlKeyEntry___closure: {"": "Closure;this_6,indent_7,ctx_8",
  call$0: function() {
    return this.this_6.s_separate$2(this.indent_7, this.ctx_8);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_ns_flowMapSeparateValue_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.c_indicator$1(6);
    if (!t2)
      return;
    t2 = this.ctx_2;
    if (t1.isPlainSafe$2(t2, t1.peek$0()))
      return;
    return t1.or$1([new V.Parser_c_ns_flowMapSeparateValue__closure(t1, this.indent_1, t2), t1.get$e_node()]);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_ns_flowMapSeparateValue__closure: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    var t1 = this.this_3;
    return t1.transaction$1(new V.Parser_c_ns_flowMapSeparateValue___closure(t1, this.indent_4, this.ctx_5));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_ns_flowMapSeparateValue___closure: {"": "Closure;this_6,indent_7,ctx_8",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_6;
    t2 = this.indent_7;
    t3 = this.ctx_8;
    if (t1.s_separate$2(t2, t3) !== true)
      return;
    return t1.ns_flowNode$2(t2, t3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_ns_flowMapJsonKeyEntry_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    var t1 = this.this_0;
    return t1.transaction$1(new V.Parser_c_ns_flowMapJsonKeyEntry__closure(t1, this.indent_1, this.ctx_2));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_ns_flowMapJsonKeyEntry__closure: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_3;
    t2 = this.indent_4;
    t3 = this.ctx_5;
    new V.Parser_c_ns_flowMapJsonKeyEntry___closure(t1, t2, t3).call$0();
    return t1.c_ns_flowMapAdjacentValue$2(t2, t3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_ns_flowMapJsonKeyEntry___closure: {"": "Closure;this_6,indent_7,ctx_8",
  call$0: function() {
    return this.this_6.s_separate$2(this.indent_7, this.ctx_8);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_ns_flowMapAdjacentValue_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    var t1 = this.this_0;
    return t1.transaction$1(new V.Parser_c_ns_flowMapAdjacentValue__closure(t1, this.indent_1, this.ctx_2));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_ns_flowMapAdjacentValue__closure: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_3;
    t2 = this.indent_4;
    t3 = this.ctx_5;
    new V.Parser_c_ns_flowMapAdjacentValue___closure(t1, t2, t3).call$0();
    return t1.ns_flowNode$2(t2, t3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_ns_flowMapAdjacentValue___closure: {"": "Closure;this_6,indent_7,ctx_8",
  call$0: function() {
    return this.this_6.s_separate$2(this.indent_7, this.ctx_8);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowPair_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    var t1 = this.this_0;
    return t1.transaction$1(new V.Parser_ns_flowPair__closure(t1, this.indent_1, this.ctx_2));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowPair__closure: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    var t1, t2, t3, t4;
    t1 = this.this_3;
    t2 = t1.c_indicator$1(5);
    if (!t2)
      return;
    t2 = this.indent_4;
    t3 = this.ctx_5;
    t4 = t1.s_separate$2(t2, t3);
    if (!(t4 != null && J.$eq(t4, false) !== true))
      return;
    return t1.ns_flowMapExplicitEntry$2(t2, t3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowPair_closure0: {"": "Closure;this_6,indent_7,ctx_8",
  call$0: function() {
    return this.this_6.ns_flowPairEntry$2(this.indent_7, this.ctx_8);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowPairEntry_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    return this.this_0.ns_flowPairYamlKeyEntry$2(this.indent_1, this.ctx_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowPairEntry_closure0: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    return this.this_3.c_ns_flowMapEmptyKeyEntry$2(this.indent_4, this.ctx_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowPairEntry_closure1: {"": "Closure;this_6,indent_7,ctx_8",
  call$0: function() {
    return this.this_6.c_ns_flowPairJsonKeyEntry$2(this.indent_7, this.ctx_8);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowPairYamlKeyEntry_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    var t1, key, value;
    t1 = this.this_0;
    key = t1.ns_s_implicitYamlKey$1(5);
    if (!(key != null && J.$eq(key, false) !== true))
      return;
    value = t1.c_ns_flowMapSeparateValue$2(this.indent_1, this.ctx_2);
    if (!(value != null && J.$eq(value, false) !== true))
      return;
    t1 = new V._Pair(key, value);
    H.setRuntimeTypeInfo(t1, [R.Node0, R.Node0]);
    return t1;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_ns_flowPairJsonKeyEntry_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    var t1, key, value;
    t1 = this.this_0;
    key = t1.c_s_implicitJsonKey$1(5);
    if (!(key != null && J.$eq(key, false) !== true))
      return;
    value = t1.c_ns_flowMapAdjacentValue$2(this.indent_1, this.ctx_2);
    if (!(value != null && J.$eq(value, false) !== true))
      return;
    t1 = new V._Pair(key, value);
    H.setRuntimeTypeInfo(t1, [R.Node0, R.Node0]);
    return t1;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_s_implicitYamlKey_closure: {"": "Closure;this_0,ctx_1",
  call$0: function() {
    var t1, node;
    t1 = this.this_0;
    node = t1.ns_flowYamlNode$2(null, this.ctx_1);
    if (!(node != null && J.$eq(node, false) !== true))
      return;
    t1.get$s_separateInLine().call$0();
    return node;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_s_implicitJsonKey_closure: {"": "Closure;this_0,ctx_1",
  call$0: function() {
    var t1, node;
    t1 = this.this_0;
    node = t1.c_flowJsonNode$2(null, this.ctx_1);
    if (!(node != null && J.$eq(node, false) !== true))
      return;
    t1.get$s_separateInLine().call$0();
    return node;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_flowJsonContent_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    return this.this_0.c_flowSequence$2(this.indent_1, this.ctx_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_flowJsonContent_closure0: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    return this.this_3.c_flowMapping$2(this.indent_4, this.ctx_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_flowJsonContent_closure1: {"": "Closure;this_6,indent_7,ctx_8",
  call$0: function() {
    return this.this_6.c_singleQuoted$2(this.indent_7, this.ctx_8);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_flowJsonContent_closure2: {"": "Closure;this_9,indent_10,ctx_11",
  call$0: function() {
    return this.this_9.c_doubleQuoted$2(this.indent_10, this.ctx_11);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowContent_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    return this.this_0.ns_flowYamlContent$2(this.indent_1, this.ctx_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowContent_closure0: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    return this.this_3.c_flowJsonContent$2(this.indent_4, this.ctx_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowYamlNode_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    return this.this_0.ns_flowYamlContent$2(this.indent_1, this.ctx_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowYamlNode_closure0: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    var t1, t2, t3, props;
    t1 = this.this_3;
    t2 = this.indent_4;
    t3 = this.ctx_5;
    props = t1.c_ns_properties$2(t2, t3);
    if (!(props != null && true))
      return;
    return t1.addProps$2(t1.or$1([new V.Parser_ns_flowYamlNode__closure(t1, t2, t3), t1.get$e_scalar()]), props);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowYamlNode__closure: {"": "Closure;this_6,indent_7,ctx_8",
  call$0: function() {
    var t1 = this.this_6;
    return t1.transaction$1(new V.Parser_ns_flowYamlNode___closure(t1, this.indent_7, this.ctx_8));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowYamlNode___closure: {"": "Closure;this_9,indent_10,ctx_11",
  call$0: function() {
    var t1, t2, t3, t4;
    t1 = this.this_9;
    t2 = this.indent_10;
    t3 = this.ctx_11;
    t4 = t1.s_separate$2(t2, t3);
    if (!(t4 != null && J.$eq(t4, false) !== true))
      return;
    return t1.ns_flowYamlContent$2(t2, t3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_flowJsonNode_closure: {"": "Closure;this_1,indent_2,ctx_3",
  call$0: function() {
    var t1, t2, t3, t4;
    t1 = {};
    t1.props_0 = null;
    t2 = this.this_1;
    t3 = this.indent_2;
    t4 = this.ctx_3;
    new V.Parser_c_flowJsonNode__closure(t1, t2, t3, t4).call$0();
    return t2.addProps$2(t2.c_flowJsonContent$2(t3, t4), t1.props_0);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_flowJsonNode__closure: {"": "Closure;box_0,this_4,indent_5,ctx_6",
  call$0: function() {
    var t1 = this.this_4;
    return t1.transaction$1(new V.Parser_c_flowJsonNode___closure(this.box_0, t1, this.indent_5, this.ctx_6));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_flowJsonNode___closure: {"": "Closure;box_0,this_7,indent_8,ctx_9",
  call$0: function() {
    var t1, t2, t3, t4;
    t1 = this.this_7;
    t2 = this.indent_8;
    t3 = this.ctx_9;
    t4 = this.box_0;
    t4.props_0 = t1.c_ns_properties$2(t2, t3);
    if (!(t4.props_0 != null && true))
      return;
    return t1.s_separate$2(t2, t3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowNode_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    return this.this_0.ns_flowContent$2(this.indent_1, this.ctx_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowNode_closure0: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    var t1 = this.this_3;
    return t1.transaction$1(new V.Parser_ns_flowNode__closure(t1, this.indent_4, this.ctx_5));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowNode__closure: {"": "Closure;this_6,indent_7,ctx_8",
  call$0: function() {
    var t1, t2, t3, props;
    t1 = this.this_6;
    t2 = this.indent_7;
    t3 = this.ctx_8;
    props = t1.c_ns_properties$2(t2, t3);
    if (!(props != null && true))
      return;
    return t1.addProps$2(t1.or$1([new V.Parser_ns_flowNode___closure(t1, t2, t3), t1.get$e_scalar()]), props);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowNode___closure: {"": "Closure;this_9,indent_10,ctx_11",
  call$0: function() {
    var t1 = this.this_9;
    return t1.transaction$1(new V.Parser_ns_flowNode____closure(t1, this.indent_10, this.ctx_11));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_flowNode____closure: {"": "Closure;this_12,indent_13,ctx_14",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_12;
    t2 = this.indent_13;
    t3 = this.ctx_14;
    return t1.s_separate$2(t2, t3) === true ? t1.ns_flowContent$2(t2, t3) : null;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_b_blockHeader_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1, indentation, chomping;
    t1 = this.this_0;
    indentation = t1.c_indentationIndicator$0();
    chomping = t1.c_chompingIndicator$0();
    if (!(indentation != null && true))
      indentation = t1.c_indentationIndicator$0();
    t1 = t1.s_b_comment$0();
    if (!t1)
      return;
    return new V._BlockHeader(indentation, chomping);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_stripEmpty_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = this.indent_1;
    t1.zeroOrMore$1(new V.Parser_l_stripEmpty__closure(t1, t2));
    new V.Parser_l_stripEmpty__closure0(t1, t2).call$0();
    return true;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_stripEmpty__closure: {"": "Closure;this_2,indent_3",
  call$0: function() {
    var t1 = this.this_2;
    return t1.transaction$1(new V.Parser_l_stripEmpty___closure(t1, this.indent_3));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_stripEmpty___closure: {"": "Closure;this_4,indent_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    t2 = t1.s_indentLessThan$1(this.indent_5 + 1);
    if (!t2)
      return false;
    return t1.b_nonContent$0();
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_stripEmpty__closure0: {"": "Closure;this_6,indent_7",
  call$0: function() {
    return this.this_6.l_trailComments$1(this.indent_7);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_keepEmpty_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1 = this.this_0;
    return t1.captureAs$2("\n", new V.Parser_l_keepEmpty__closure0(t1, this.indent_1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_keepEmpty__closure0: {"": "Closure;this_2,indent_3",
  call$0: function() {
    return this.this_2.l_empty$2(this.indent_3, 1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_keepEmpty_closure0: {"": "Closure;this_4,indent_5",
  call$0: function() {
    var t1 = this.this_4;
    return t1.captureAs$2("", new V.Parser_l_keepEmpty__closure(t1, this.indent_5));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_keepEmpty__closure: {"": "Closure;this_6,indent_7",
  call$0: function() {
    return this.this_6.l_trailComments$1(this.indent_7);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_trailComments_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.s_indentLessThan$1(this.indent_1 + 1);
    if (!t2)
      return false;
    t2 = t1.c_nb_commentText$0();
    if (!t2)
      return false;
    t2 = t1._pos === t1._len || t1.b_nonContent$0() === true;
    if (!t2)
      return false;
    t1.zeroOrMore$1(t1.get$l_comment());
    return true;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_l_literal_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2, header, additionalIndent, $content;
    t1 = this.this_0;
    t2 = t1.c_indicator$1(16);
    if (!t2)
      return;
    header = t1.c_b_blockHeader$0();
    if (!(header != null && J.$eq(header, false) !== true))
      return;
    t2 = this.indent_1;
    additionalIndent = t1.blockScalarAdditionalIndentation$2(header, t2);
    if (typeof additionalIndent !== "number")
      throw H.iae(additionalIndent);
    $content = t1.l_literalContent$2(t2 + additionalIndent, header.get$chomping());
    if (!($content != null && true))
      return;
    return new R.ScalarNode($content, null, new R.Tag("!", 0), null);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_nb_literalText_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = this.indent_1;
    t1.zeroOrMore$1(new V.Parser_l_nb_literalText__closure(t1, t2));
    t2 = t1.captureAs$2("", new V.Parser_l_nb_literalText__closure0(t1, t2));
    if (!(t2 != null && J.$eq(t2, false) !== true))
      return false;
    return t1.oneOrMore$1(new V.Parser_l_nb_literalText__closure1(t1)) != null && true;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_nb_literalText__closure: {"": "Closure;this_2,indent_3",
  call$0: function() {
    var t1 = this.this_2;
    return t1.captureAs$2("\n", new V.Parser_l_nb_literalText___closure(t1, this.indent_3));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_nb_literalText___closure: {"": "Closure;this_4,indent_5",
  call$0: function() {
    return this.this_4.l_empty$2(this.indent_5, 1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_nb_literalText__closure0: {"": "Closure;this_6,indent_7",
  call$0: function() {
    return this.this_6.s_indent$1(this.indent_7);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_nb_literalText__closure1: {"": "Closure;this_8",
  call$0: function() {
    var t1 = this.this_8;
    return t1.consume$1(t1.get$isNonBreak());
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_b_nb_literalNext_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.b_asLineFeed$0();
    if (!(t2 != null && J.$eq(t2, false) !== true))
      return false;
    return t1.l_nb_literalText$1(this.indent_1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_literalContent_closure: {"": "Closure;this_0,indent_1,chomping_2",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_0;
    t2 = this.indent_1;
    t3 = this.chomping_2;
    t1.transaction$1(new V.Parser_l_literalContent__closure(t1, t2, t3));
    t1.l_chompedEmpty$2(t2, t3);
    return true;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_literalContent__closure: {"": "Closure;this_3,indent_4,chomping_5",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_3;
    t2 = this.indent_4;
    t3 = t1.l_nb_literalText$1(t2);
    if (!(t3 != null && J.$eq(t3, false) !== true))
      return false;
    t1.zeroOrMore$1(new V.Parser_l_literalContent___closure(t1, t2));
    return t1.b_chompedLast$1(this.chomping_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_literalContent___closure: {"": "Closure;this_6,indent_7",
  call$0: function() {
    return this.this_6.b_nb_literalNext$1(this.indent_7);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_l_folded_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2, header, additionalIndent, $content;
    t1 = this.this_0;
    t2 = t1.c_indicator$1(17);
    if (!t2)
      return;
    header = t1.c_b_blockHeader$0();
    if (!(header != null && J.$eq(header, false) !== true))
      return;
    t2 = this.indent_1;
    additionalIndent = t1.blockScalarAdditionalIndentation$2(header, t2);
    if (typeof additionalIndent !== "number")
      throw H.iae(additionalIndent);
    $content = t1.l_foldedContent$2(t2 + additionalIndent, header.get$chomping());
    if (!($content != null && true))
      return;
    return new R.ScalarNode($content, null, new R.Tag("!", 0), null);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_nb_foldedText_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.captureAs$2("", new V.Parser_s_nb_foldedText__closure(t1, this.indent_1));
    if (!(t2 != null && J.$eq(t2, false) !== true))
      return false;
    t2 = t1.consume$1(t1.get$isNonSpace());
    if (!t2)
      return false;
    t1.zeroOrMore$1(new V.Parser_s_nb_foldedText__closure0(t1));
    return true;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_nb_foldedText__closure: {"": "Closure;this_2,indent_3",
  call$0: function() {
    return this.this_2.s_indent$1(this.indent_3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_nb_foldedText__closure0: {"": "Closure;this_4",
  call$0: function() {
    var t1 = this.this_4;
    return t1.consume$1(t1.get$isNonBreak());
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_nb_foldedLines_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1 = this.this_0;
    return t1.transaction$1(new V.Parser_l_nb_foldedLines__closure(t1, this.indent_1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_nb_foldedLines__closure: {"": "Closure;this_2,indent_3",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_2;
    t2 = this.indent_3;
    t3 = t1.b_l_folded$2(t2, 1);
    if (!(t3 != null && J.$eq(t3, false) !== true))
      return false;
    return t1.s_nb_foldedText$1(t2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_nb_spacedText_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.captureAs$2("", new V.Parser_s_nb_spacedText__closure(t1, this.indent_1));
    if (!(t2 != null && J.$eq(t2, false) !== true))
      return false;
    t2 = t1.consume$1(t1.get$isSpace());
    if (!t2)
      return false;
    t1.zeroOrMore$1(new V.Parser_s_nb_spacedText__closure0(t1));
    return true;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_nb_spacedText__closure: {"": "Closure;this_2,indent_3",
  call$0: function() {
    return this.this_2.s_indent$1(this.indent_3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_nb_spacedText__closure0: {"": "Closure;this_4",
  call$0: function() {
    var t1 = this.this_4;
    return t1.consume$1(t1.get$isNonBreak());
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_b_l_spaced_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1 = this.this_0;
    return t1.captureAs$2("\n", new V.Parser_b_l_spaced__closure(t1, this.indent_1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_b_l_spaced__closure: {"": "Closure;this_2,indent_3",
  call$0: function() {
    return this.this_2.l_empty$2(this.indent_3, 1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_nb_spacedLines_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1 = this.this_0;
    return t1.transaction$1(new V.Parser_l_nb_spacedLines__closure(t1, this.indent_1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_nb_spacedLines__closure: {"": "Closure;this_2,indent_3",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_2;
    t2 = this.indent_3;
    t3 = t1.b_l_spaced$1(t2);
    if (!t3)
      return false;
    return t1.s_nb_spacedText$1(t2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_nb_sameLines_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = this.indent_1;
    t1.zeroOrMore$1(new V.Parser_l_nb_sameLines__closure(t1, t2));
    return t1.or$1([new V.Parser_l_nb_sameLines__closure0(t1, t2), new V.Parser_l_nb_sameLines__closure1(t1, t2)]);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_nb_sameLines__closure: {"": "Closure;this_2,indent_3",
  call$0: function() {
    var t1 = this.this_2;
    return t1.captureAs$2("\n", new V.Parser_l_nb_sameLines___closure(t1, this.indent_3));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_nb_sameLines___closure: {"": "Closure;this_4,indent_5",
  call$0: function() {
    return this.this_4.l_empty$2(this.indent_5, 1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_nb_sameLines__closure0: {"": "Closure;this_6,indent_7",
  call$0: function() {
    return this.this_6.l_nb_foldedLines$1(this.indent_7);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_nb_sameLines__closure1: {"": "Closure;this_8,indent_9",
  call$0: function() {
    return this.this_8.l_nb_spacedLines$1(this.indent_9);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_nb_diffLines_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1 = this.this_0;
    return t1.transaction$1(new V.Parser_l_nb_diffLines__closure(t1, this.indent_1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_nb_diffLines__closure: {"": "Closure;this_2,indent_3",
  call$0: function() {
    var t1, t2;
    t1 = this.this_2;
    t2 = t1.b_asLineFeed$0();
    if (!(t2 != null && J.$eq(t2, false) !== true))
      return false;
    return t1.l_nb_sameLines$1(this.indent_3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_foldedContent_closure: {"": "Closure;this_0,indent_1,chomping_2",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_0;
    t2 = this.indent_1;
    t3 = this.chomping_2;
    t1.transaction$1(new V.Parser_l_foldedContent__closure(t1, t2, t3));
    t1.l_chompedEmpty$2(t2, t3);
    return true;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_foldedContent__closure: {"": "Closure;this_3,indent_4,chomping_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_3;
    t2 = t1.l_nb_diffLines$1(this.indent_4);
    if (!t2)
      return false;
    return t1.b_chompedLast$1(this.chomping_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_blockSequence_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2, additionalIndent, $content;
    t1 = this.this_0;
    t2 = this.indent_1;
    additionalIndent = t1.countIndentation$0() - t2;
    if (additionalIndent <= 0)
      return;
    $content = t1.oneOrMore$1(new V.Parser_l_blockSequence__closure(t1, t2, additionalIndent));
    if (!($content != null && true))
      return;
    return new R.SequenceNode($content, new R.Tag("?", 1), null);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_blockSequence__closure: {"": "Closure;this_2,indent_3,additionalIndent_4",
  call$0: function() {
    var t1 = this.this_2;
    return t1.transaction$1(new V.Parser_l_blockSequence___closure(t1, this.indent_3, this.additionalIndent_4));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_blockSequence___closure: {"": "Closure;this_5,indent_6,additionalIndent_7",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_5;
    t2 = this.indent_6 + this.additionalIndent_7;
    t3 = t1.s_indent$1(t2);
    if (!(t3 != null && J.$eq(t3, false) !== true))
      return;
    return t1.c_l_blockSeqEntry$1(t2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_l_blockSeqEntry_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_0;
    t2 = t1.c_indicator$1(4);
    if (!t2)
      return;
    t2 = t1.peek$0();
    if (t1.isPrintable$1(t2))
      t3 = !(t2 === 10 || t2 === 13);
    else
      t3 = false;
    if (t3)
      t2 = !(t2 === 32 || t2 === 9);
    else
      t2 = false;
    if (t2)
      return;
    return t1.s_l_blockIndented$2(this.indent_1, 1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_l_blockIndented_closure: {"": "Closure;this_0,indent_1,additionalIndent_2",
  call$0: function() {
    var t1 = this.this_0;
    return t1.transaction$1(new V.Parser_s_l_blockIndented__closure(t1, this.indent_1, this.additionalIndent_2));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_l_blockIndented__closure: {"": "Closure;this_3,indent_4,additionalIndent_5",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_3;
    t2 = this.additionalIndent_5;
    t3 = t1.s_indent$1(t2);
    if (!(t3 != null && J.$eq(t3, false) !== true))
      return;
    t3 = this.indent_4;
    return t1.or$1([new V.Parser_s_l_blockIndented___closure(t1, t3, t2), new V.Parser_s_l_blockIndented___closure0(t1, t3, t2)]);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_l_blockIndented___closure: {"": "Closure;this_6,indent_7,additionalIndent_8",
  call$0: function() {
    return this.this_6.ns_l_compactSequence$1(this.indent_7 + 1 + this.additionalIndent_8);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_l_blockIndented___closure0: {"": "Closure;this_9,indent_10,additionalIndent_11",
  call$0: function() {
    return this.this_9.ns_l_compactMapping$1(this.indent_10 + 1 + this.additionalIndent_11);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_l_blockIndented_closure0: {"": "Closure;this_12,indent_13,ctx_14",
  call$0: function() {
    return this.this_12.s_l_blockNode$2(this.indent_13, this.ctx_14);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_l_blockIndented_closure1: {"": "Closure;this_15",
  call$0: function() {
    return this.this_15.s_l_comments$0() ? new R.ScalarNode("", null, new R.Tag("?", 0), null) : null;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_l_compactSequence_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2, first, $content;
    t1 = this.this_0;
    t2 = this.indent_1;
    first = t1.c_l_blockSeqEntry$1(t2);
    if (!(first != null && J.$eq(first, false) !== true))
      return;
    $content = t1.zeroOrMore$1(new V.Parser_ns_l_compactSequence__closure(t1, t2));
    J.insert$2$ax($content, 0, first);
    return new R.SequenceNode($content, new R.Tag("?", 1), null);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_l_compactSequence__closure: {"": "Closure;this_2,indent_3",
  call$0: function() {
    var t1 = this.this_2;
    return t1.transaction$1(new V.Parser_ns_l_compactSequence___closure(t1, this.indent_3));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_l_compactSequence___closure: {"": "Closure;this_4,indent_5",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_4;
    t2 = this.indent_5;
    t3 = t1.s_indent$1(t2);
    if (!(t3 != null && J.$eq(t3, false) !== true))
      return;
    return t1.c_l_blockSeqEntry$1(t2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_blockMapping_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2, additionalIndent, pairs;
    t1 = this.this_0;
    t2 = this.indent_1;
    additionalIndent = t1.countIndentation$0() - t2;
    if (additionalIndent <= 0)
      return;
    pairs = t1.oneOrMore$1(new V.Parser_l_blockMapping__closure(t1, t2, additionalIndent));
    if (!(pairs != null && true))
      return;
    return t1.map$1(t1, pairs);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_blockMapping__closure: {"": "Closure;this_2,indent_3,additionalIndent_4",
  call$0: function() {
    var t1 = this.this_2;
    return t1.transaction$1(new V.Parser_l_blockMapping___closure(t1, this.indent_3, this.additionalIndent_4));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_blockMapping___closure: {"": "Closure;this_5,indent_6,additionalIndent_7",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_5;
    t2 = this.indent_6 + this.additionalIndent_7;
    t3 = t1.s_indent$1(t2);
    if (!(t3 != null && J.$eq(t3, false) !== true))
      return;
    return t1.ns_l_blockMapEntry$1(t2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_l_blockMapEntry_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    return this.this_0.c_l_blockMapExplicitEntry$1(this.indent_1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_l_blockMapEntry_closure0: {"": "Closure;this_2,indent_3",
  call$0: function() {
    return this.this_2.ns_l_blockMapImplicitEntry$1(this.indent_3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_l_blockMapExplicitEntry_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    return this.this_0.l_blockMapExplicitValue$1(this.indent_1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_l_blockMapExplicitKey_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.c_indicator$1(5);
    if (!t2)
      return;
    return t1.s_l_blockIndented$2(this.indent_1, 0);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_blockMapExplicitValue_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_0;
    t2 = this.indent_1;
    t3 = t1.s_indent$1(t2);
    if (!(t3 != null && J.$eq(t3, false) !== true))
      return;
    t3 = t1.c_indicator$1(6);
    if (!t3)
      return;
    return t1.s_l_blockIndented$2(t2, 0);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_l_blockMapImplicitEntry_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, key, value;
    t1 = this.this_0;
    key = t1.or$1([t1.get$ns_s_blockMapImplicitKey(), t1.get$e_node()]);
    value = t1.c_l_blockMapImplicitValue$1(this.indent_1);
    if (value != null && J.$eq(value, false) !== true) {
      t1 = new V._Pair(key, value);
      H.setRuntimeTypeInfo(t1, [R.Node0, R.Node0]);
    } else
      t1 = null;
    return t1;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_s_blockMapImplicitKey_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    return t1.or$1([new V.Parser_ns_s_blockMapImplicitKey__closure(t1), new V.Parser_ns_s_blockMapImplicitKey__closure0(t1)]);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_s_blockMapImplicitKey__closure: {"": "Closure;this_1",
  call$0: function() {
    return this.this_1.c_s_implicitJsonKey$1(4);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_s_blockMapImplicitKey__closure0: {"": "Closure;this_2",
  call$0: function() {
    return this.this_2.ns_s_implicitYamlKey$1(4);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_l_blockMapImplicitValue_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1 = this.this_0;
    return t1.transaction$1(new V.Parser_c_l_blockMapImplicitValue__closure(t1, this.indent_1));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_l_blockMapImplicitValue__closure: {"": "Closure;this_2,indent_3",
  call$0: function() {
    var t1, t2;
    t1 = this.this_2;
    t2 = t1.c_indicator$1(6);
    if (!t2)
      return;
    return t1.or$1([new V.Parser_c_l_blockMapImplicitValue___closure(t1, this.indent_3), new V.Parser_c_l_blockMapImplicitValue___closure0(t1)]);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_l_blockMapImplicitValue___closure: {"": "Closure;this_4,indent_5",
  call$0: function() {
    return this.this_4.s_l_blockNode$2(this.indent_5, 0);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_l_blockMapImplicitValue___closure0: {"": "Closure;this_6",
  call$0: function() {
    return this.this_6.s_l_comments$0() ? new R.ScalarNode("", null, new R.Tag("?", 0), null) : null;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_l_compactMapping_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2, first, pairs;
    t1 = this.this_0;
    t2 = this.indent_1;
    first = t1.ns_l_blockMapEntry$1(t2);
    if (!(first != null && J.$eq(first, false) !== true))
      return;
    pairs = t1.zeroOrMore$1(new V.Parser_ns_l_compactMapping__closure(t1, t2));
    J.insert$2$ax(pairs, 0, first);
    return t1.map$1(t1, pairs);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_l_compactMapping__closure: {"": "Closure;this_2,indent_3",
  call$0: function() {
    var t1 = this.this_2;
    return t1.transaction$1(new V.Parser_ns_l_compactMapping___closure(t1, this.indent_3));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_ns_l_compactMapping___closure: {"": "Closure;this_4,indent_5",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_4;
    t2 = this.indent_5;
    t3 = t1.s_indent$1(t2);
    if (!(t3 != null && J.$eq(t3, false) !== true))
      return;
    return t1.ns_l_blockMapEntry$1(t2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_l_blockNode_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    return this.this_0.s_l_blockInBlock$2(this.indent_1, this.ctx_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_l_blockNode_closure0: {"": "Closure;this_3,indent_4",
  call$0: function() {
    return this.this_3.s_l_flowInBlock$1(this.indent_4);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_l_flowInBlock_closure: {"": "Closure;this_0,indent_1",
  call$0: function() {
    var t1, t2, t3, node;
    t1 = this.this_0;
    t2 = this.indent_1 + 1;
    t3 = t1.s_separate$2(t2, 2);
    if (!(t3 != null && J.$eq(t3, false) !== true))
      return;
    node = t1.ns_flowNode$2(t2, 2);
    if (!(node != null && J.$eq(node, false) !== true))
      return;
    t1 = t1.s_l_comments$0();
    if (!t1)
      return;
    return node;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_l_blockInBlock_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    return this.this_0.s_l_blockScalar$2(this.indent_1, this.ctx_2);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_l_blockInBlock_closure0: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    return this.this_3.s_l_blockCollection$2(this.indent_4, this.ctx_5);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_l_blockScalar_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    var t1, t2, t3, t4, props, node;
    t1 = this.this_0;
    t2 = this.indent_1;
    t3 = this.ctx_2;
    t4 = t1.s_separate$2(t2 + 1, t3);
    if (!(t4 != null && J.$eq(t4, false) !== true))
      return;
    props = t1.transaction$1(new V.Parser_s_l_blockScalar__closure(t1, t2, t3));
    node = t1.or$1([new V.Parser_s_l_blockScalar__closure0(t1, t2), new V.Parser_s_l_blockScalar__closure1(t1, t2)]);
    if (!(node != null && J.$eq(node, false) !== true))
      return;
    return t1.addProps$2(node, props);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_l_blockScalar__closure: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    var t1, t2, t3, innerProps;
    t1 = this.this_3;
    t2 = this.indent_4 + 1;
    t3 = this.ctx_5;
    innerProps = t1.c_ns_properties$2(t2, t3);
    if (!(innerProps != null && true))
      return;
    t1 = t1.s_separate$2(t2, t3);
    if (!(t1 != null && J.$eq(t1, false) !== true))
      return;
    return innerProps;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_l_blockScalar__closure0: {"": "Closure;this_6,indent_7",
  call$0: function() {
    return this.this_6.c_l_literal$1(this.indent_7);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_l_blockScalar__closure1: {"": "Closure;this_8,indent_9",
  call$0: function() {
    return this.this_8.c_l_folded$1(this.indent_9);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_l_blockCollection_closure: {"": "Closure;this_0,indent_1,ctx_2",
  call$0: function() {
    var t1, t2, t3, t4;
    t1 = this.this_0;
    t2 = this.indent_1;
    t3 = this.ctx_2;
    t1.transaction$1(new V.Parser_s_l_blockCollection__closure(t1, t2, t3));
    t4 = t1.s_l_comments$0();
    if (!t4)
      return;
    return t1.or$1([new V.Parser_s_l_blockCollection__closure0(t1, t2, t3), new V.Parser_s_l_blockCollection__closure1(t1, t2)]);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_l_blockCollection__closure: {"": "Closure;this_3,indent_4,ctx_5",
  call$0: function() {
    var t1, t2, t3, t4;
    t1 = this.this_3;
    t2 = this.indent_4 + 1;
    t3 = this.ctx_5;
    t4 = t1.s_separate$2(t2, t3);
    if (!(t4 != null && J.$eq(t4, false) !== true))
      return;
    return t1.c_ns_properties$2(t2, t3);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_l_blockCollection__closure0: {"": "Closure;this_6,indent_7,ctx_8",
  call$0: function() {
    var t1 = this.indent_7;
    if (this.ctx_8 === 0)
      --t1;
    return this.this_6.l_blockSequence$1(t1);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_s_l_blockCollection__closure1: {"": "Closure;this_9,indent_10",
  call$0: function() {
    return this.this_9.l_blockMapping$1(this.indent_10);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_documentSuffix_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.rawString$1("...");
    if (!(t2 != null && J.$eq(t2, false) !== true))
      return false;
    return t1.s_l_comments$0();
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_c_forbidden_closure: {"": "Closure;box_0,this_1",
  call$0: function() {
    var t1, t2, $char, forbidden;
    t1 = this.this_1;
    t2 = t1.or$1([t1.get$c_directivesEnd(), t1.get$c_documentEnd()]);
    if (!(t2 != null && J.$eq(t2, false) !== true))
      return;
    $char = t1.peek$0();
    if (!($char === 10 || $char === 13))
      forbidden = $char === 32 || $char === 9 || t1._pos === t1._len;
    else
      forbidden = true;
    this.box_0.forbidden_0 = forbidden;
    return;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Parser_l_yamlStream_closure: {"": "Closure;this_0,docs_1",
  call$0: function() {
    var t1, doc;
    t1 = this.this_0;
    if (t1.oneOrMore$1(t1.get$l_documentSuffix()) != null && true) {
      t1.zeroOrMore$1(t1.get$l_documentPrefix());
      doc = t1.get$l_anyDocument().call$0();
    } else {
      t1.zeroOrMore$1(t1.get$l_documentPrefix());
      doc = t1.get$l_explicitDocument().call$0();
    }
    if (doc != null && J.$eq(doc, false) !== true)
      this.docs_1.push(doc);
    return doc;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

SyntaxError: {"": "YamlException;_line,_column,_msg",
  toString$0: function(_) {
    return "Syntax error on line " + this._line + ", column " + this._column + ": " + K.YamlException.prototype.toString$0.call(this, this);
  },
  "+toString:0:0": 0,
  static: {
SyntaxError$: function(_line, _column, msg) {
  return new V.SyntaxError(_line, _column, msg);
}}

},

_Pair: {"": "Object;first>,last>",
  toString$0: function(_) {
    return "(" + H.S(this.first) + ", " + H.S(this.last) + ")";
  },
  "+toString:0:0": 0,
  $is_Pair: true
},

_BlockHeader: {"": "Object;additionalIndent<,chomping<",
  get$autoDetectIndent: function() {
    return this.additionalIndent == null;
  }
},

_Range: {"": "Object;start,end",
  contains$1: function(_, pos) {
    var t1 = J.getInterceptor$n(pos);
    return t1.$ge(pos, this.start) && t1.$le(pos, this.end);
  },
  $is_Range: true
},

_RangeMap: {"": "Object;_parser0$_contents",
  $index: function(_, pos) {
    var t1, $arguments, t2, pair;
    t1 = new H.ReversedListIterable(this._parser0$_contents);
    t1.$builtinTypeInfo = [null];
    $arguments = H.substitute(t1.$asListIterable, H.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new H.ListIterator(t1, t1.get$length(t1), 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();) {
      pair = t1._current;
      t2 = J.getInterceptor$ax(pair);
      if (J.contains$1$asx(t2.get$first(pair), pos) === true)
        return t2.get$last(pair);
    }
    return;
  },
  "+[]:1:0": 0,
  $indexSet: function(_, range, value) {
    var rti, t1, t2;
    rti = H.getRuntimeTypeInfo(this);
    t1 = rti == null ? null : rti[0];
    t2 = new V._Pair(range, value);
    t2.$builtinTypeInfo = [V._Range, t1];
    return this._parser0$_contents.push(t2);
  },
  "+[]=:2:0": 0
}}],
["path", "package:path/path.dart", , B, {
current: function() {
  var t1, t2;
  t1 = $.get$currentJsMirrorSystem();
  t1 = t1.get$libraries(t1);
  t2 = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1("dart:io"));
  t1 = t1.__js_mirrors$_source;
  if (t1.$index(t1, t2) != null) {
    t1 = $.get$currentJsMirrorSystem();
    t1 = t1.get$libraries(t1);
    t2 = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1("dart:io"));
    t1 = t1.__js_mirrors$_source;
    return J.get$path$x(H.interceptedTypeCast(J.$index$asx(t1.$index(t1, t2).get$declarations(), C.Symbol_Directory), "$isClassMirror").getField$1(C.Symbol_current).reflectee);
  } else {
    t1 = $.get$currentJsMirrorSystem();
    t1 = t1.get$libraries(t1);
    t2 = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1("dart:html"));
    t1 = t1.__js_mirrors$_source;
    if (t1.$index(t1, t2) != null) {
      t1 = $.get$currentJsMirrorSystem();
      t1 = t1.get$libraries(t1);
      t2 = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1("dart:html"));
      t1 = t1.__js_mirrors$_source;
      return J.get$href$x(J.get$location$x(t1.$index(t1, t2).getField$1(C.Symbol_window).reflectee));
    } else
      return ".";
  }
},

"+current": 0,

_validateArgList: function(method, args) {
  var i, numArgs, numArgs0, message, t1, t2, t3, t4;
  for (i = 1; i < 8; ++i) {
    if (args[i] == null || args[i - 1] != null)
      continue;
    for (numArgs = 8; numArgs >= 1; numArgs = numArgs0) {
      numArgs0 = numArgs - 1;
      if (args[numArgs0] != null)
        break;
    }
    message = new P.StringBuffer("");
    message._contents = "";
    t1 = method + "(";
    message._contents = message._contents + t1;
    t1 = new H.SubListIterable(args, 0, numArgs);
    t1.$builtinTypeInfo = [null];
    t2 = t1._start;
    t3 = J.getInterceptor$n(t2);
    if (t3.$lt(t2, 0))
      H.throwExpression(new P.RangeError("value " + H.S(t2)));
    t4 = t1._endOrLength;
    if (t4 != null) {
      if (J.$lt$n(t4, 0))
        H.throwExpression(new P.RangeError("value " + H.S(t4)));
      if (t3.$gt(t2, t4))
        H.throwExpression(P.RangeError$range(t2, 0, t4));
    }
    t1 = new H.MappedListIterable(t1, new B._validateArgList_closure());
    t1.$builtinTypeInfo = [null, null];
    t1 = t1.join$1(t1, ", ");
    message._contents = message._contents + t1;
    t1 = "): part " + (i - 1) + " was null, but part " + i + " was not.";
    t1 = message._contents + t1;
    message._contents = t1;
    throw H.wrapException(new P.ArgumentError(t1));
  }
},

Style__getPlatformStyle: function() {
  var t1, t2;
  t1 = $.get$currentJsMirrorSystem();
  t1 = t1.get$libraries(t1);
  t2 = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1("dart:io"));
  t1 = t1.__js_mirrors$_source;
  if (t1.$index(t1, t2) == null)
    return $.get$Style_url();
  t1 = $.get$currentJsMirrorSystem();
  t1 = t1.get$libraries(t1);
  t2 = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1("dart:io"));
  t1 = t1.__js_mirrors$_source;
  if (J.$eq(H.interceptedTypeCast(J.$index$asx(t1.$index(t1, t2).get$declarations(), C.Symbol_Platform), "$isClassMirror").getField$1(C.Symbol_operatingSystem).reflectee, "windows") === true)
    return $.get$Style_windows();
  return $.get$Style_posix();
},

_validateArgList_closure: {"": "Closure;",
  call$1: function(arg) {
    return arg == null ? "null" : "\"" + H.S(arg) + "\"";
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Builder: {"": "Object;style,root",
  dirname$1: function(path) {
    var parsed, t1, t2;
    parsed = this._parse$1(path);
    parsed.removeTrailingSeparators$0();
    t1 = parsed.parts;
    t2 = t1.length;
    if (t2 === 0) {
      t1 = parsed.root;
      return t1 == null ? "." : t1;
    }
    if (t2 === 1) {
      t1 = parsed.root;
      return t1 == null ? "." : t1;
    }
    C.JSArray_methods.removeLast$0(t1);
    t1 = parsed.separators;
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
    parsed.removeTrailingSeparators$0();
    return parsed.toString$0(parsed);
  },
  join$8: function(_, part1, part2, part3, part4, part5, part6, part7, part8) {
    var parts, t1;
    parts = [part1, part2, part3, part4, part5, part6, part7, part8];
    B._validateArgList("join", parts);
    t1 = new H.WhereIterable(parts, new B.Builder_join_closure());
    H.setRuntimeTypeInfo(t1, [null]);
    return this.joinAll$1(t1);
  },
  join$1: function($receiver, part1) {
    return this.join$8($receiver, part1, null, null, null, null, null, null, null);
  },
  joinAll$1: function(parts) {
    var buffer, t1, t2, t3, needsSeparator, isAbsoluteAndNotRootRelative, part, root, oldRoot, str, t4;
    buffer = P.StringBuffer$("");
    for (t1 = new B.Builder_joinAll_closure(), t2 = new H.WhereIterable(parts, t1), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(parts, "IterableBase", 0)]), t3 = parts.get$iterator(parts), t1 = new H.WhereIterator(t3, t1), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(t2, 0)]), t2 = this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false; t1.moveNext$0();) {
      part = t3.get$current();
      if (this._parse$1(part).isRootRelative && isAbsoluteAndNotRootRelative) {
        root = this._parse$1(buffer._contents).root;
        oldRoot = root == null ? "" : root;
        buffer._contents = "";
        str = typeof oldRoot === "string" ? oldRoot : H.S(oldRoot);
        buffer._contents = buffer._contents + str;
        str = typeof part === "string" ? part : H.S(part);
        buffer._contents = buffer._contents + str;
      } else if (this._parse$1(part).root != null) {
        isAbsoluteAndNotRootRelative = !this._parse$1(part).isRootRelative;
        buffer._contents = "";
        str = typeof part === "string" ? part : H.S(part);
        buffer._contents = buffer._contents + str;
      } else {
        t4 = J.getInterceptor$asx(part);
        if (J.$gt$n(t4.get$length(part), 0) && J.contains$1$asx(t4.$index(part, 0), t2.get$separatorPattern()) === true)
          ;
        else if (needsSeparator === true) {
          t4 = t2.get$separator();
          buffer._contents = buffer._contents + t4;
        }
        str = typeof part === "string" ? part : H.S(part);
        buffer._contents = buffer._contents + str;
      }
      needsSeparator = J.contains$1$asx(part, t2.get$needsSeparatorPattern());
    }
    return buffer._contents;
  },
  split$1: function(_, path) {
    var parsed, t1;
    parsed = this._parse$1(path);
    t1 = new H.WhereIterable(parsed.parts, new B.Builder_split_closure());
    H.setRuntimeTypeInfo(t1, [null]);
    parsed.parts = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
    t1 = parsed.root;
    if (t1 != null)
      C.JSArray_methods.insert$2(parsed.parts, 0, t1);
    return parsed.parts;
  },
  _parse$1: function(path) {
    var t1, root, t2, parts, separators, t3, firstSeparator, t4, start, t5, t6;
    t1 = this.style;
    root = t1.getRoot$1(path);
    t2 = t1.getRelativeRoot$1(path);
    if (root != null)
      path = J.substring$1$s(path, J.get$length$asx(root));
    parts = [];
    separators = [];
    t3 = t1.get$separatorPattern();
    firstSeparator = t3.matchAsPrefix$1(t3, path);
    if (firstSeparator != null) {
      t4 = firstSeparator._match;
      if (0 >= t4.length)
        throw H.ioore(t4, 0);
      separators.push(t4[0]);
      if (0 >= t4.length)
        throw H.ioore(t4, 0);
      path = J.substring$1$s(path, J.get$length$asx(t4[0]));
    } else
      separators.push("");
    if (typeof path !== "string")
      H.throwExpression(new P.ArgumentError(path));
    t3 = new H._AllMatchesIterator(t3, path, null);
    t4 = J.getInterceptor$asx(path);
    start = 0;
    for (; t3.moveNext$0();) {
      t5 = t3.__js_helper$_current._match;
      parts.push(t4.substring$2(path, start, t5.index));
      if (0 >= t5.length)
        throw H.ioore(t5, 0);
      separators.push(t5[0]);
      t6 = t5.index;
      if (0 >= t5.length)
        throw H.ioore(t5, 0);
      t5 = J.get$length$asx(t5[0]);
      if (typeof t5 !== "number")
        throw H.iae(t5);
      start = t6 + t5;
    }
    t3 = t4.get$length(path);
    if (typeof t3 !== "number")
      throw H.iae(t3);
    if (start < t3) {
      parts.push(t4.substring$1(path, start));
      separators.push("");
    }
    return new B._ParsedPath(t1, root, t2 != null, parts, separators);
  },
  static: {
Builder_Builder: function(root, style) {
  root = B.current();
  style = $.get$Style_platform();
  return new B.Builder(style, root);
}}

},

Builder_join_closure: {"": "Closure;",
  call$1: function(part) {
    return part != null;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Builder_joinAll_closure: {"": "Closure;",
  call$1: function(part) {
    return J.$eq(part, "") !== true;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Builder_split_closure: {"": "Closure;",
  call$1: function(part) {
    return J.get$isEmpty$asx(part) !== true;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Style: {"": "Object;relativeRootPattern<",
  getRoot$1: function(path) {
    var t1, matches;
    t1 = this.get$rootPattern();
    if (typeof path !== "string")
      H.throwExpression(new P.ArgumentError(path));
    matches = new H._AllMatchesIterable(t1, path);
    if (!matches.get$isEmpty(matches))
      return J.$index$asx(matches.get$first(matches), 0);
    return this.getRelativeRoot$1(path);
  },
  getRelativeRoot$1: function(path) {
    var t1, matches;
    t1 = this.get$relativeRootPattern();
    if (t1 == null)
      return;
    t1.toString;
    if (typeof path !== "string")
      H.throwExpression(new P.ArgumentError(path));
    matches = new H._AllMatchesIterable(t1, path);
    if (!matches.get$iterator(matches).moveNext$0())
      return;
    return J.$index$asx(matches.get$first(matches), 0);
  },
  toString$0: function(_) {
    return this.get$name(this);
  },
  "+toString:0:0": 0,
  static: {
"": "Style_url<",
}

},

_PosixStyle: {"": "Style;name>,separator<,separatorPattern<,needsSeparatorPattern<,rootPattern<,relativeRootPattern"},

_WindowsStyle: {"": "Style;name>,separator<,separatorPattern<,needsSeparatorPattern<,rootPattern<,relativeRootPattern"},

_UrlStyle: {"": "Style;name>,separator<,separatorPattern<,needsSeparatorPattern<,rootPattern<,relativeRootPattern<,path$Style$relativeRootPattern"},

_ParsedPath: {"": "Object;style,root,isRootRelative,parts,separators",
  removeTrailingSeparators$0: function() {
    var t1, t2;
    t1 = this.separators;
    while (true) {
      t2 = this.parts;
      if (!(t2.length !== 0 && J.$eq(C.JSArray_methods.get$last(t2), "") === true))
        break;
      C.JSArray_methods.removeLast$0(this.parts);
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      t1.pop();
    }
    t2 = t1.length;
    if (t2 > 0)
      t1[t2 - 1] = "";
  },
  toString$0: function(_) {
    var builder, t1, i, str, t2;
    builder = P.StringBuffer$("");
    t1 = this.root;
    if (t1 != null)
      builder.write$1(t1);
    for (t1 = this.separators, i = 0; i < this.parts.length; ++i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      str = t1[i];
      str = typeof str === "string" ? str : H.S(str);
      builder._contents = builder._contents + str;
      t2 = this.parts;
      if (i >= t2.length)
        throw H.ioore(t2, i);
      str = t2[i];
      str = typeof str === "string" ? str : H.S(str);
      builder._contents = builder._contents + str;
    }
    builder.write$1(C.JSArray_methods.get$last(t1));
    return builder._contents;
  },
  "+toString:0:0": 0
},
"": "url<"}],
["polymer", "package:polymer/polymer.dart", , A, {
_preventFlashOfUnstyledContent: function() {
  var style, head;
  style = document.createElement("style", null);
  style.textContent = ".polymer-veiled { opacity: 0; } \n.polymer-unveil{ -webkit-transition: opacity 0.3s; transition: opacity 0.3s; }\n";
  head = document.querySelector("head");
  head.insertBefore(style, head.firstChild);
  A._veilElements();
  $.get$Polymer__ready().future.then$1(new A._preventFlashOfUnstyledContent_closure());
},

_veilElements: function() {
  var t1, t2, selector;
  for (t1 = $.get$Polymer_veiledElements(), t2 = new H.ListIterator(t1, 1, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
    selector = t2._current;
    for (t1 = W._FrozenElementList$_wrap(document.querySelectorAll(selector), null), t1 = t1.get$iterator(t1); t1.moveNext$0();)
      J.add$1$ax(J.get$classes$x(t1._current), "polymer-veiled");
  }
},

_notifySuper: function($name) {
  var t1, waiting;
  t1 = $.get$_waitSuper();
  waiting = t1.remove$1(t1, $name);
  if (waiting != null)
    for (t1 = J.get$iterator$ax(waiting); t1.moveNext$0();)
      J.registerWhenReady$0$x(t1.get$current());
},

_getPublishedProperties: function(cls, props) {
  var t1, field, t2, t3, t4, getter;
  if (J.$eq(cls, $.get$_objectType()) === true)
    return props;
  props = A._getPublishedProperties(cls.get$superclass(), props);
  for (t1 = J.get$iterator$ax(J.get$values$x(cls.get$declarations())); t1.moveNext$0();) {
    field = t1.get$current();
    t2 = J.getInterceptor$x(field);
    if (typeof field !== "object" || field === null || !t2.$isVariableMirror || t2.get$isFinal(field) || field.get$isStatic() || field.get$isPrivate())
      continue;
    for (t2 = J.get$iterator$ax(field.get$metadata()); t2.moveNext$0();) {
      t3 = t2.get$current().get$reflectee();
      t4 = J.getInterceptor(t3);
      if (typeof t3 === "object" && t3 !== null && !!t4.$isPublishedProperty) {
        if (props == null)
          props = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        props.$indexSet(props, field.get$simpleName(), field);
        break;
      }
    }
  }
  for (t1 = J.get$iterator$ax(J.get$values$x(cls.get$declarations())); t1.moveNext$0();) {
    getter = t1.get$current();
    t2 = J.getInterceptor(getter);
    if (typeof getter !== "object" || getter === null || !t2.$isMethodMirror || !getter.get$isGetter() || getter.isStatic || getter.get$isPrivate())
      continue;
    for (t2 = J.get$iterator$ax(getter.get$metadata()); t2.moveNext$0();) {
      t3 = t2.get$current().get$reflectee();
      t4 = J.getInterceptor(t3);
      if (typeof t3 === "object" && t3 !== null && !!t4.$isPublishedProperty) {
        if (A._hasSetter(cls, getter)) {
          if (props == null)
            props = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
          props.$indexSet(props, getter.get$simpleName(), getter);
        }
        break;
      }
    }
  }
  return props;
},

_hasSetter: function(cls, getter) {
  var t1, mirror;
  t1 = H.Symbol_validate(H.S(J.get$_name$x(getter.get$simpleName())) + "=");
  mirror = J.$index$asx(cls.get$declarations(), new H.Symbol0(t1));
  t1 = J.getInterceptor(mirror);
  return typeof mirror === "object" && mirror !== null && !!t1.$isMethodMirror && mirror.get$isSetter();
},

_shimShadowDomStyling: function(template, $name, extendee) {
  var platform, shadowCss;
  if ($.get$context() == null || template == null)
    return;
  if ($.get$context().hasProperty$1("ShadowDOMPolyfill"))
    return;
  platform = J.$index$asx($.get$context(), "Platform");
  if (platform == null)
    return;
  shadowCss = J.$index$asx(platform, "ShadowCSS");
  if (shadowCss == null)
    return;
  shadowCss.callMethod$2("shimStyling", [template, $name, extendee]);
},

_cssTextFromSheet: function(sheet) {
  var resource;
  if (sheet == null || $.get$context() == null)
    return "";
  resource = J.$index$asx(P.JsObject_JsObject$fromBrowserObject(sheet), "__resource");
  return resource != null ? resource : "";
},

_eventNameFromType: function(eventType) {
  var result = J.$index$asx($.get$_reverseEventTranslations(), eventType);
  return result != null ? result : eventType;
},

Polymer_register: function($name, type) {
  var t1, waiting;
  if (type == null)
    type = C.Type_I2I;
  t1 = $.get$_typesByName();
  t1.$indexSet(t1, $name, type);
  t1 = $.get$_waitType();
  waiting = t1.remove$1(t1, $name);
  if (waiting != null)
    J.registerWhenReady$0$x(waiting);
},

Polymer__unbindNodeTree: function(node) {
  A.Polymer__forNodeTree(node, new A.Polymer__unbindNodeTree_closure());
},

Polymer__forNodeTree: function(node, callback) {
  var child;
  if (node == null)
    return;
  callback.call$1(node);
  for (child = node.firstChild; child != null; child = child.nextSibling)
    A.Polymer__forNodeTree(child, callback);
},

Polymer__bindProperties: function(inA, inProperty, inB, inPath) {
  var path;
  if ($.get$_bindLog().isLoggable$1(C.Level_FINE_500))
    $.get$_bindLog().fine$1("[" + H.S(inB) + "]: bindProperties: [" + H.S(inPath) + "] to [" + J.get$localName$x(inA) + "].[" + H.S(inProperty) + "]");
  path = L.PathObserver$(inB, inPath, null);
  if (path.get$value(path) == null)
    path.set$value(path, H.reflect(inA).getField$1(inProperty).reflectee);
  return A._PolymerBinding$(inA, inProperty, inB, inPath);
},

Polymer_prepareBinding: function(path, $name, node, originalPrepareBinding) {
  if (!J.startsWith$1$s($name, "on-"))
    return originalPrepareBinding.call$3(path, $name, node);
  return new A.Polymer_prepareBinding_closure(path, $name);
},

Polymer__findController: function(node) {
  var t1;
  for (; t1 = J.getInterceptor$x(node), t1.get$parentNode(node) != null;)
    node = t1.get$parentNode(node);
  t1 = $.get$_shadowHost();
  return t1.$index(t1, node);
},

Polymer__invokeMethod: function(receiver, methodName, args) {
  var receiverMirror, method, t1;
  receiverMirror = H.reflect(receiver);
  method = J.$index$asx(J.get$methods$x(H.reflectClassByMangledName(J.get$runtimeType$(receiverMirror.reflectee)._typeName)), methodName);
  if (method != null) {
    t1 = J.where$1$ax(J.get$parameters$x(method), new A.Polymer__invokeMethod_closure());
    C.JSArray_methods.set$length(args, t1.get$length(t1));
  }
  return receiverMirror.invoke$2(methodName, args).reflectee;
},

Polymer_applyStyleToScope: function(style, scope) {
  var clone, attr;
  if (style == null)
    return;
  clone = document.createElement("style", null);
  clone.textContent = style.textContent;
  attr = style.getAttribute("element");
  if (attr != null)
    clone.setAttribute("element", attr);
  scope.appendChild(clone);
},

Polymer_unveilElements: function() {
  var t1 = window;
  C.Window_methods._ensureRequestAnimationFrame$0(t1);
  C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(new A.Polymer_unveilElements_closure()));
},

_propertyType: function(property) {
  var t1 = J.getInterceptor$x(property);
  return typeof property === "object" && property !== null && !!t1.$isVariableMirror ? t1.get$type(property) : H.interceptedTypeCast(property, "$isMethodMirror").get$returnType();
},

_inferPropertyType: function(value, property) {
  var type, t;
  type = A._propertyType(property);
  if (J.$eq(type.get$qualifiedName(), C.Symbol_46c) === true || J.$eq(type.get$qualifiedName(), C.Symbol_dynamic) === true)
    if (value != null) {
      t = A._getCoreType(value);
      if (t != null)
        return P.reflectClass(t);
      return H.reflectClassByMangledName(J.get$runtimeType$(H.reflect(value).reflectee)._typeName);
    }
  return type;
},

_getCoreType: function(value) {
  var t1;
  if (value == null)
    return C.Type_eZO;
  if (typeof value === "number" && Math.floor(value) === value)
    return C.Type_SnA;
  if (typeof value === "number")
    return C.Type_qq1;
  if (typeof value === "boolean")
    return C.Type_EsU;
  if (typeof value === "string")
    return C.Type_Ejg;
  t1 = J.getInterceptor(value);
  if (typeof value === "object" && value !== null && !!t1.$isDateTime)
    return C.Type_dVs;
  return;
},

_runJob: function(job, callback, wait) {
  if (job != null)
    job.stop$0(job);
  else
    job = new A._Job(null, null);
  job._callback = callback;
  job._timer = P.Timer_Timer(wait, job.get$complete(job));
  return job;
},

initPolymer: function() {
  if ($._useDirtyChecking) {
    var t1 = $.Zone__current.fork$1$specification(O.dirtyCheckZoneSpec());
    t1.run$1(A._initPolymerOptimized$closure);
    return t1;
  }
  A._initPolymerOptimized();
  return $.Zone__current;
},

_initPolymerOptimized: function() {
  var t1 = document;
  W._registerCustomElement(window, t1, "polymer-element", C.Type_YnA, null);
  A._loadLibraries();
  A._preventFlashOfUnstyledContent();
  $.get$customElementsReady().then$1(new A._initPolymerOptimized_closure());
},

_loadLibraries: function() {
  var lib, e, s, t1, t2, exception, t3;
  for (t1 = $.get$_librariesToLoad(), t1.toString, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
    lib = t2._current;
    try {
      A._loadLibrary(lib);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
      t1.$builtinTypeInfo = [null];
      t1 = new P._AsyncCompleter(t1);
      t1.$builtinTypeInfo = [null];
      t3 = e;
      if (t3 == null)
        H.throwExpression(new P.ArgumentError("Error must not be null"));
      t1 = t1.future;
      if (t1._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t1._asyncCompleteError$2(t3, s);
    }

  }
},

_discoverScripts: function(doc, baseUri, seen, scripts) {
  var line, t1, scriptSeen, node, t2, url;
  if (seen == null)
    seen = P.LinkedHashSet_LinkedHashSet(null, null, null, W.Document);
  if (scripts == null) {
    scripts = [];
    scripts.$builtinTypeInfo = [J.JSString];
  }
  if (doc == null) {
    line = "warning: " + H.S(baseUri) + " not found.";
    t1 = $.printToZone;
    if (t1 == null)
      H.printString(line);
    else
      t1.call$1(line);
    return scripts;
  }
  if (seen.contains$1(seen, doc))
    return scripts;
  seen.add$1(seen, doc);
  for (t1 = W._FrozenElementList$_wrap(doc.querySelectorAll("script,link[rel=\"import\"]"), null), t1 = t1.get$iterator(t1), scriptSeen = false; t1.moveNext$0();) {
    node = t1._current;
    t2 = J.getInterceptor$x(node);
    if (typeof node === "object" && node !== null && !!t2.$isLinkElement)
      A._discoverScripts(node.import, node.href, seen, scripts);
    else if (typeof node === "object" && node !== null && !!t2.$isScriptElement && node.type === "application/dart")
      if (!scriptSeen) {
        url = t2.get$src(node);
        scripts.push(url === "" ? baseUri : url);
        scriptSeen = true;
      } else {
        line = "warning: more than one Dart script tag in " + H.S(baseUri) + ". Dartium currently only allows a single Dart script tag per document.";
        t2 = $.printToZone;
        if (t2 == null)
          H.printString(line);
        else
          t2.call$1(line);
      }
  }
  return scripts;
},

_loadLibrary: function(uriString) {
  var t1, uri, lib, packageUri, canonicalLib, line, t2, c, meta, t3, type, t4, waiting;
  t1 = $.get$_rootUri();
  t1.toString;
  uri = t1.resolveUri$1(P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(uriString)));
  t1 = $.get$_libs().__js_mirrors$_source;
  lib = t1.$index(t1, uri);
  if (J.startsWith$1$s(uri._path, $.get$_packageRoot()) && J.endsWith$1$s(uri._path, ".dart") === true) {
    t1 = "package:" + J.substring$1$s(uri._path, $.get$_packageRoot().length);
    packageUri = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(t1));
    t1 = $.get$_libs().__js_mirrors$_source;
    canonicalLib = t1.$index(t1, packageUri);
    if (canonicalLib != null)
      lib = canonicalLib;
  }
  if (lib == null) {
    line = "warning: " + H.S(uri) + " library not found";
    t1 = $.printToZone;
    if (t1 == null)
      H.printString(line);
    else
      t1.call$1(line);
    return;
  }
  for (t1 = J.getInterceptor$x(lib), t2 = J.get$iterator$ax(J.get$values$x(t1.get$functions(lib))); t2.moveNext$0();)
    A._maybeInvoke(lib, t2.get$current());
  for (t1 = J.get$iterator$ax(J.get$values$x(t1.get$classes(lib))); t1.moveNext$0();) {
    c = t1.get$current();
    for (t2 = J.get$iterator$ax(c.get$metadata()); t2.moveNext$0();) {
      meta = t2.get$current().get$reflectee();
      t3 = J.getInterceptor(meta);
      if (typeof meta === "object" && meta !== null && !!t3.$isCustomTag) {
        t3 = meta.tagName;
        type = M.getReflectedTypeWorkaround(c);
        if (type == null)
          type = C.Type_I2I;
        t4 = $.get$_typesByName();
        t4.$indexSet(t4, t3, type);
        t4 = $.get$_waitType();
        waiting = t4.remove$1(t4, t3);
        if (waiting != null)
          J.registerWhenReady$0$x(waiting);
      }
    }
  }
},

_maybeInvoke: function(obj, method) {
  var t1, annotationFound, line;
  for (t1 = J.get$iterator$ax(method.get$metadata()); annotationFound = false, t1.moveNext$0();)
    if (t1.get$current().get$reflectee() === C.C__InitMethodAnnotation) {
      annotationFound = true;
      break;
    }
  if (!annotationFound)
    return;
  if (method.get$isStatic() !== true) {
    line = "warning: methods marked with @initMethod should be static, " + H.S(method.get$simpleName()) + " is not.";
    t1 = $.printToZone;
    if (t1 == null)
      H.printString(line);
    else
      t1.call$1(line);
    return;
  }
  t1 = J.where$1$ax(J.get$parameters$x(method), new A._maybeInvoke_closure());
  if (t1.get$isEmpty(t1) !== true) {
    line = "warning: methods marked with @initMethod should take no arguments, " + H.S(method.get$simpleName()) + " expects some.";
    t1 = $.printToZone;
    if (t1 == null)
      H.printString(line);
    else
      t1.call$1(line);
    return;
  }
  obj.invoke$2(method.get$simpleName(), C.List_empty);
},

_preventFlashOfUnstyledContent_closure: {"": "Closure;",
  call$1: function(_) {
    A.Polymer_unveilElements();
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

PolymerDeclaration: {"": "HtmlElement;_type,_supertype,_super,_polymer$_name,_polymer$_publish=,_publishLC=,_polymer$_observe=,_instanceAttributes=,_sheets,_styles,_eventDelegates=,_templateDelegates",
  get$type: function(receiver) {
    return receiver._type;
  },
  "+type": 0,
  get$superDeclaration: function(receiver) {
    return receiver._super;
  },
  get$name: function(receiver) {
    return receiver._polymer$_name;
  },
  "+name": 0,
  get$templateContent: function(receiver) {
    var template, t1, t2;
    template = receiver.querySelector("template");
    if (template != null) {
      t1 = J.getInterceptor(template);
      t2 = J.get$content$x(typeof template === "object" && template !== null && !!t1.$isNodeBindExtension ? template : M.nodeBindFallback(template));
      t1 = t2;
    } else
      t1 = null;
    return t1;
  },
  registerWhenReady$0: function(receiver) {
    var extendee;
    if (this.waitingForType$1(receiver, receiver._polymer$_name))
      return;
    extendee = receiver.getAttribute("extends");
    if (this.waitingForExtendee$1(receiver, extendee))
      return;
    this.register$2(receiver, receiver._polymer$_name, extendee);
    A._notifySuper(receiver._polymer$_name);
  },
  waitingForType$1: function(receiver, $name) {
    var t1 = $.get$_typesByName();
    if (t1.$index(t1, $name) != null)
      return false;
    t1 = $.get$_waitType();
    t1.$indexSet(t1, $name, receiver);
    if (receiver.hasAttribute("noscript") === true)
      A.Polymer_register($name, null);
    return true;
  },
  waitingForExtendee$1: function(receiver, extendee) {
    if (extendee != null && J.indexOf$1$asx(extendee, "-") >= 0)
      if (!$.get$_declarations().containsKey$1(extendee)) {
        J.add$1$ax($.get$_waitSuper().putIfAbsent$2(extendee, new A.PolymerDeclaration_waitingForExtendee_closure()), receiver);
        return true;
      }
    return false;
  },
  register$2: function(receiver, $name, extendee) {
    var t1;
    this.buildType$2(receiver, $name, extendee);
    t1 = $.get$_declarations();
    t1.$indexSet(t1, $name, receiver);
    this.desugar$2(receiver, $name, extendee);
    this.registerType$1(receiver, $name);
  },
  buildType$2: function(receiver, $name, extendee) {
    var t1, cls;
    t1 = $.get$_typesByName();
    receiver._type = t1.$index(t1, $name);
    t1 = $.get$_typesByName();
    receiver._supertype = t1.$index(t1, extendee);
    if (receiver._supertype != null) {
      t1 = $.get$_declarations();
      receiver._super = t1.$index(t1, extendee);
    }
    cls = P.reflectClass(receiver._type);
    this.publishAttributes$2(receiver, cls, receiver._super);
    t1 = receiver._polymer$_publish;
    if (t1 != null)
      receiver._publishLC = this._lowerCaseMap$1(receiver, t1);
    this.inferObservers$1(receiver, cls);
  },
  desugar$2: function(receiver, $name, extendee) {
    var cls, registered;
    this.accumulateInstanceAttributes$0(receiver);
    this.addAttributeDelegates$1(receiver, receiver._eventDelegates);
    this.cacheSheets$0(receiver);
    this.cacheStyles$0(receiver);
    this.installLocalSheets$0(receiver);
    this.installGlobalStyles$0(receiver);
    A._shimShadowDomStyling(this.get$templateContent(receiver), $name, extendee);
    cls = P.reflectClass(receiver._type);
    registered = J.$index$asx(J.get$methods$x(cls), C.Symbol_registerCallback);
    if (registered != null && registered.get$isStatic() === true && registered.get$isRegularMethod())
      cls.invoke$2(C.Symbol_registerCallback, [receiver]);
  },
  registerType$1: function(receiver, $name) {
    var decl, baseTag, t1, t2;
    for (decl = receiver, baseTag = null; decl != null;) {
      t1 = J.getInterceptor$x(decl);
      baseTag = t1.get$attributes(decl)._element.getAttribute("extends");
      decl = t1.get$superDeclaration(decl);
    }
    t1 = document;
    t2 = receiver._type;
    W._registerCustomElement(window, t1, $name, t2, baseTag);
  },
  publishAttributes$2: function(receiver, cls, superDecl) {
    var t1, t2, attrs, attr, property, mirror, t3;
    if (superDecl != null && J.get$_polymer$_publish$x(superDecl) != null) {
      t1 = J.get$_polymer$_publish$x(superDecl);
      t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t2.addAll$1(t2, t1);
      receiver._polymer$_publish = t2;
    }
    receiver._polymer$_publish = A._getPublishedProperties(cls, receiver._polymer$_publish);
    attrs = receiver.getAttribute("attributes");
    if (attrs != null) {
      t1 = attrs.split(J.contains$1$asx(attrs, ",") ? "," : " ");
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]);
      for (; t2.moveNext$0();) {
        attr = J.trim$0$s(t2._current);
        if (attr !== "") {
          t1 = receiver._polymer$_publish;
          t1 = t1 != null && t1.containsKey$1(attr);
        } else
          t1 = false;
        if (t1)
          continue;
        property = new H.Symbol0(H.Symbol_validate(attr));
        mirror = J.$index$asx(cls.get$declarations(), property);
        t1 = J.getInterceptor(mirror);
        if (typeof mirror === "object" && mirror !== null && !!t1.$isMethodMirror) {
          if (!mirror.get$isGetter() || !A._hasSetter(cls, mirror))
            mirror = null;
        } else if (typeof mirror !== "object" || mirror === null || !t1.$isVariableMirror)
          mirror = null;
        if (mirror == null) {
          window;
          t1 = $.get$Console__safeConsole();
          t3 = "property for attribute " + attr + " of polymer-element name=" + receiver._polymer$_name + " not found.";
          t1.toString;
          if (typeof console != "undefined")
            console.warn(t3);
          continue;
        }
        if (receiver._polymer$_publish == null)
          receiver._polymer$_publish = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        t1 = receiver._polymer$_publish;
        t1.$indexSet(t1, property, mirror);
      }
    }
  },
  accumulateInstanceAttributes$0: function(receiver) {
    var t1, t2;
    receiver._instanceAttributes = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, P.Object);
    t1 = receiver._super;
    if (t1 != null) {
      t2 = receiver._instanceAttributes;
      t2.addAll$1(t2, J.get$_instanceAttributes$x(t1));
    }
    t1 = new W._ElementAttributeMap(receiver);
    t1.forEach$1(t1, new A.PolymerDeclaration_accumulateInstanceAttributes_closure(receiver));
  },
  addAttributeDelegates$1: function(receiver, delegates) {
    var t1 = new W._ElementAttributeMap(receiver);
    t1.forEach$1(t1, new A.PolymerDeclaration_addAttributeDelegates_closure(delegates));
  },
  cacheSheets$0: function(receiver) {
    var t1, t2;
    receiver._sheets = this.findNodes$1(receiver, "[rel=stylesheet]");
    for (t1 = receiver._sheets, t1.toString, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();)
      J.remove$0$ax(t2._current);
  },
  cacheStyles$0: function(receiver) {
    var t1, t2;
    receiver._styles = this.findNodes$1(receiver, "style[polymer-scope]");
    for (t1 = receiver._styles, t1.toString, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();)
      J.remove$0$ax(t2._current);
  },
  installLocalSheets$0: function(receiver) {
    var t1, sheets, $content, cssText, t2, str;
    t1 = receiver._sheets;
    t1.toString;
    sheets = new H.WhereIterable(t1, new A.PolymerDeclaration_installLocalSheets_closure());
    H.setRuntimeTypeInfo(sheets, [null]);
    $content = this.get$templateContent(receiver);
    if ($content != null) {
      cssText = P.StringBuffer$("");
      for (t1 = J.get$iterator$ax(sheets._iterable), t2 = new H.WhereIterator(t1, sheets._f), H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(sheets, 0)]); t2.moveNext$0();) {
        str = A._cssTextFromSheet(t1.get$current());
        str = typeof str === "string" ? str : H.S(str);
        cssText._contents = cssText._contents + str;
        cssText._contents = cssText._contents + "\n";
      }
      if (cssText._contents.length > 0) {
        t1 = document.createElement("style", null);
        t1.textContent = H.S(cssText);
        t2 = J.getInterceptor$x($content);
        t2.insertBefore$2($content, t1, t2.get$firstChild($content));
      }
    }
  },
  findNodes$2: function(receiver, selector, matcher) {
    var t1, nodes, $content;
    t1 = W._FrozenElementList$_wrap(receiver.querySelectorAll(selector), null);
    nodes = t1.toList$0(t1);
    $content = this.get$templateContent(receiver);
    if ($content != null)
      C.JSArray_methods.addAll$1(nodes, J.queryAll$1$x($content, selector));
    return nodes;
  },
  findNodes$1: function($receiver, selector) {
    return this.findNodes$2($receiver, selector, null);
  },
  installGlobalStyles$0: function(receiver) {
    A.Polymer_applyStyleToScope(this.cssTextToScopeStyle$2(receiver, this.cssTextForScope$1(receiver, "global"), "global"), document.head);
  },
  cssTextForScope$1: function(receiver, scopeDescriptor) {
    var cssText, t1, t2, t3, t4, str;
    cssText = P.StringBuffer$("");
    t1 = new A.PolymerDeclaration_cssTextForScope_matcher("[polymer-scope=" + scopeDescriptor + "]");
    for (t2 = receiver._sheets, t2.toString, t3 = new H.WhereIterable(t2, t1), H.setRuntimeTypeInfo(t3, [null]), t2 = J.get$iterator$ax(t2), t4 = new H.WhereIterator(t2, t1), H.setRuntimeTypeInfo(t4, [H.getTypeArgumentByIndex(t3, 0)]); t4.moveNext$0();) {
      str = A._cssTextFromSheet(t2.get$current());
      str = typeof str === "string" ? str : H.S(str);
      cssText._contents = cssText._contents + str;
      cssText._contents = cssText._contents + "\n\n";
    }
    for (t2 = receiver._styles, t2.toString, t3 = new H.WhereIterable(t2, t1), H.setRuntimeTypeInfo(t3, [null]), t2 = J.get$iterator$ax(t2), t1 = new H.WhereIterator(t2, t1), H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(t3, 0)]); t1.moveNext$0();) {
      t3 = t2.get$current().get$textContent();
      cssText._contents = cssText._contents + t3;
      cssText._contents = cssText._contents + "\n\n";
    }
    return cssText._contents;
  },
  cssTextToScopeStyle$2: function(receiver, cssText, scopeDescriptor) {
    var t1;
    if (cssText === "")
      return;
    t1 = document.createElement("style", null);
    t1.textContent = cssText;
    t1.toString;
    t1.setAttribute("element", receiver._polymer$_name + "-" + scopeDescriptor);
    return t1;
  },
  inferObservers$1: function(receiver, cls) {
    var t1, method, t2, $name;
    for (t1 = J.get$iterator$ax(J.get$values$x(cls.get$declarations())); t1.moveNext$0();) {
      method = t1.get$current();
      t2 = J.getInterceptor(method);
      if (typeof method !== "object" || method === null || !t2.$isMethodMirror || method.get$isStatic() || !method.get$isRegularMethod())
        continue;
      $name = J.get$_name$x(method.get$simpleName());
      t2 = J.getInterceptor$s($name);
      if (t2.endsWith$1($name, "Changed") === true && t2.$eq($name, "attributeChanged") !== true) {
        if (receiver._polymer$_observe == null)
          receiver._polymer$_observe = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        $name = t2.substring$2($name, 0, J.$sub$n(t2.get$length($name), 7));
        t2 = receiver._polymer$_observe;
        t2.$indexSet(t2, new H.Symbol0(H.Symbol_validate($name)), method.get$simpleName());
      }
    }
  },
  _lowerCaseMap$1: function(receiver, properties) {
    var map = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, null);
    properties.forEach$1(properties, new A.PolymerDeclaration__lowerCaseMap_closure(map));
    return map;
  },
  PolymerDeclaration$created$0: function(receiver) {
    receiver._polymer$_name = receiver.getAttribute("name");
    this.registerWhenReady$0(receiver);
  },
  $isPolymerDeclaration: true,
  static: {
"": "PolymerDeclaration__TAG",
PolymerDeclaration$created: function(receiver) {
  receiver._eventDelegates = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  C.PolymerDeclaration_methods.Element$created$0(receiver);
  C.PolymerDeclaration_methods.PolymerDeclaration$created$0(receiver);
  return receiver;
},

"+new PolymerDeclaration$created:0:0": 0,

PolymerDeclaration_isInstanceAttribute: function($name) {
  return !C.Map_c94aj.containsKey$1($name) && !J.startsWith$1$s($name, "on-");
}}

},

PolymerDeclaration_waitingForExtendee_closure: {"": "Closure;",
  call$0: function() {
    return [];
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

PolymerDeclaration_accumulateInstanceAttributes_closure: {"": "Closure;this_0",
  call$2: function($name, value) {
    var t1;
    if (A.PolymerDeclaration_isInstanceAttribute($name)) {
      t1 = this.this_0._instanceAttributes;
      t1.$indexSet(t1, $name, value);
    }
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

PolymerDeclaration_addAttributeDelegates_closure: {"": "Closure;delegates_0",
  call$2: function($name, value) {
    var t1, t2, start, end, t3;
    t1 = J.getInterceptor$s($name);
    if (t1.startsWith$1($name, "on-")) {
      t2 = J.getInterceptor$asx(value);
      start = t2.indexOf$1(value, "{{");
      end = t2.lastIndexOf$1(value, "}}");
      if (start >= 0 && J.$ge$n(end, 0)) {
        t3 = this.delegates_0;
        t3.$indexSet(t3, t1.substring$1($name, 3), C.JSString_methods.trim$0(t2.substring$2(value, start + 2, end)));
      }
    }
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

PolymerDeclaration_installLocalSheets_closure: {"": "Closure;",
  call$1: function(s) {
    return J.get$attributes$x(s)._element.hasAttribute("polymer-scope") !== true;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

PolymerDeclaration_cssTextForScope_matcher: {"": "Closure;selector_0",
  call$1: function(s) {
    return J.matches$1$x(s, this.selector_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

PolymerDeclaration__lowerCaseMap_closure: {"": "Closure;map_0",
  call$2: function($name, value) {
    var t1 = this.map_0;
    t1.$indexSet(t1, J.toLowerCase$0$s(J.get$_name$x($name)), value);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure20: {"": "Closure;",
  call$0: function() {
    var map = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, J.JSString);
    C.Map_484CA.forEach$1(C.Map_484CA, new A._closure7(map));
    return map;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_closure7: {"": "Closure;map_0",
  call$2: function(onName, eventType) {
    var t1 = this.map_0;
    t1.$indexSet(t1, eventType, onName);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

PublishedProperty: {"": "ObservableProperty;", $isPublishedProperty: true},

Polymer: {"": ["Object;$$=-", function() {
    return [C.C_Reflectable];
  }],
  get$applyAuthorStyles: function(receiver) {
    return false;
  },
  "+applyAuthorStyles": 0,
  polymerCreated$0: function(receiver) {
    if (W._convertNativeToDart_Window(this.get$ownerDocument(receiver).defaultView) != null || $.Polymer__preparingElements > 0)
      this.prepareElement$0(receiver);
  },
  get$_customTagName: function(receiver) {
    var isAttr = this.get$attributes(receiver)._element.getAttribute("is");
    return isAttr == null || isAttr === "" ? this.get$localName(receiver) : isAttr;
  },
  prepareElement$0: function(receiver) {
    var t1, t2;
    t1 = this.get$_customTagName(receiver);
    t2 = $.get$_declarations();
    receiver._declaration = t2.$index(t2, t1);
    this.observeProperties$0(receiver);
    this.copyInstanceAttributes$0(receiver);
    this.takeAttributes$0(receiver);
    this.addHostListeners$0(receiver);
    $.Polymer__preparingElements = $.Polymer__preparingElements + 1;
    this.parseDeclarations$1(receiver, receiver._declaration);
    $.Polymer__preparingElements = $.Polymer__preparingElements - 1;
  },
  enteredView$0: function(receiver) {
    if (receiver._declaration == null)
      this.prepareElement$0(receiver);
    this.cancelUnbindAll$1$preventCascade(receiver, true);
  },
  "+enteredView:0:0": 0,
  leftView$0: function(receiver) {
    this.asyncUnbindAll$0(receiver);
  },
  parseDeclarations$1: function(receiver, declaration) {
    if (declaration != null) {
      this.parseDeclarations$1(receiver, J.get$superDeclaration$x(declaration));
      this.parseDeclaration$1(receiver, declaration);
    }
  },
  parseDeclaration$1: function(receiver, elementElement) {
    var t1, template, root, t2, $name;
    t1 = J.getInterceptor$x(elementElement);
    template = t1.query$1(elementElement, "template");
    if (template != null)
      if (J.get$attributes$x(receiver._declaration)._element.hasAttribute("lightdom") === true) {
        this.lightFromTemplate$1(receiver, template);
        root = null;
      } else
        root = this.shadowFromTemplate$1(receiver, template);
    else
      root = null;
    t2 = J.getInterceptor(root);
    if (typeof root !== "object" || root === null || !t2.$isShadowRoot)
      return;
    $name = t1.get$attributes(elementElement)._element.getAttribute("name");
    if ($name == null)
      return;
    t1 = receiver._shadowRoots;
    t1.$indexSet(t1, $name, root);
  },
  lightFromTemplate$1: function(receiver, template) {
    var t1, dom;
    if (template == null)
      return;
    t1 = J.getInterceptor(template);
    t1 = typeof template === "object" && template !== null && !!t1.$isNodeBindExtension ? template : M.nodeBindFallback(template);
    dom = t1.createInstance$2(receiver, receiver.syntax);
    this.append$1(receiver, dom);
    this.marshalNodeReferences$1(receiver, receiver);
    return dom;
  },
  shadowFromTemplate$1: function(receiver, template) {
    var root, t1;
    if (template == null)
      return;
    this.get$shadowRoot(receiver);
    root = this.createShadowRoot$0(receiver);
    t1 = $.get$_shadowHost();
    t1.$indexSet(t1, root, receiver);
    root.applyAuthorStyles = this.get$applyAuthorStyles(receiver);
    root.resetStyleInheritance = false;
    t1 = J.getInterceptor(template);
    t1 = typeof template === "object" && template !== null && !!t1.$isNodeBindExtension ? template : M.nodeBindFallback(template);
    root.appendChild(t1.createInstance$2(receiver, receiver.syntax));
    this.marshalNodeReferences$1(receiver, root);
    return root;
  },
  marshalNodeReferences$1: function(receiver, root) {
    var t1, t2, t3, n;
    for (t1 = J.queryAll$1$x(root, "[id]"), t1 = t1.get$iterator(t1), t2 = receiver.$$, t3 = J.getInterceptor$ax(t2); t1.moveNext$0();) {
      n = t1._current;
      t3.$indexSet(t2, J.get$id$x(n), n);
    }
  },
  attributeChanged$3: function(receiver, $name, oldValue, newValue) {
    var t1 = J.getInterceptor($name);
    if (t1.$eq($name, "class") !== true && t1.$eq($name, "style") !== true)
      this.attributeToProperty$2(receiver, $name, newValue);
  },
  copyInstanceAttributes$0: function(receiver) {
    var t1 = J.get$_instanceAttributes$x(receiver._declaration);
    t1.forEach$1(t1, new A.Polymer_copyInstanceAttributes_closure(receiver));
  },
  takeAttributes$0: function(receiver) {
    var t1;
    if (J.get$_publishLC$x(receiver._declaration) == null)
      return;
    t1 = this.get$attributes(receiver);
    t1.forEach$1(t1, this.get$attributeToProperty(receiver));
  },
  attributeToProperty$2: function(receiver, $name, value) {
    var property, $self, currentValue, newValue;
    property = this.propertyForAttribute$1(receiver, $name);
    if (property == null)
      return;
    if (value == null || J.contains$1$asx(value, $.get$Polymer_bindPattern()) === true)
      return;
    $self = H.reflect(receiver);
    currentValue = $self.getField$1(property.get$simpleName()).reflectee;
    newValue = Z.deserializeValue(value, currentValue, A._inferPropertyType(currentValue, property));
    if (newValue == null ? currentValue != null : newValue !== currentValue)
      $self.setField$2(property.get$simpleName(), newValue);
  },
  get$attributeToProperty: function(_receiver) {
    return new A.BoundClosure$i2(this, A.Polymer.prototype.attributeToProperty$2, _receiver, "attributeToProperty$2");
  },
  propertyForAttribute$1: function(receiver, $name) {
    var publishLC = J.get$_publishLC$x(receiver._declaration);
    if (publishLC == null)
      return;
    return publishLC.$index(publishLC, $name);
  },
  serializeValue$1: function(receiver, value) {
    if (value == null)
      return;
    if (typeof value === "boolean")
      return value ? "" : null;
    else if (typeof value === "string" || typeof value === "number" && Math.floor(value) === value || typeof value === "number")
      return H.S(value);
    return;
  },
  reflectPropertyToAttribute$1: function(receiver, $name) {
    var propValue, serializedValue, t1;
    propValue = H.reflect(receiver).getField$1($name).reflectee;
    serializedValue = this.serializeValue$1(receiver, propValue);
    if (serializedValue != null)
      this.get$attributes(receiver)._element.setAttribute(J.get$_name$x($name), serializedValue);
    else if (typeof propValue === "boolean") {
      t1 = this.get$attributes(receiver);
      t1.remove$1(t1, J.get$_name$x($name));
    }
  },
  bind$3: function(receiver, $name, model, path) {
    var property, observer;
    if (receiver._declaration == null)
      this.prepareElement$0(receiver);
    property = this.propertyForAttribute$1(receiver, $name);
    if (property == null)
      return J.bind$3$x(M.nodeBindFallback(receiver), $name, model, path);
    else {
      J.unbind$1$x(M.nodeBindFallback(receiver), $name);
      observer = A.Polymer__bindProperties(receiver, property.get$simpleName(), model, path);
      this.reflectPropertyToAttribute$1(receiver, property.get$simpleName());
      J.$indexSet$ax(J.get$bindings$x(M.nodeBindFallback(receiver)), $name, observer);
      return observer;
    }
  },
  get$bindings: function(receiver) {
    return J.get$bindings$x(M.nodeBindFallback(receiver));
  },
  unbind$1: function(receiver, $name) {
    return J.unbind$1$x(M.nodeBindFallback(receiver), $name);
  },
  asyncUnbindAll$0: function(receiver) {
    if (receiver._unbound === true)
      return;
    $.get$_unbindLog().fine$1("[" + this.get$localName(receiver) + "] asyncUnbindAll");
    receiver._unbindAllJob = A._runJob(receiver._unbindAllJob, this.get$unbindAll(receiver), C.Duration_0);
  },
  unbindAll$0: function(receiver) {
    var root;
    if (receiver._unbound === true)
      return;
    this.unbindAllProperties$0(receiver);
    J.unbindAll$0$x(M.nodeBindFallback(receiver));
    root = this.get$shadowRoot(receiver);
    for (; root != null;) {
      A.Polymer__unbindNodeTree(root);
      root = root.olderShadowRoot;
    }
    receiver._unbound = true;
  },
  get$unbindAll: function(_receiver) {
    return new H.BoundClosure$i0(this, A.Polymer.prototype.unbindAll$0, _receiver, "unbindAll$0");
  },
  cancelUnbindAll$1$preventCascade: function(receiver, preventCascade) {
    var t1;
    if (receiver._unbound === true) {
      $.get$_unbindLog().warning$1("[" + this.get$localName(receiver) + "] already unbound, cannot cancel unbindAll");
      return;
    }
    $.get$_unbindLog().fine$1("[" + this.get$localName(receiver) + "] cancelUnbindAll");
    t1 = receiver._unbindAllJob;
    if (t1 != null) {
      t1.stop$0(t1);
      receiver._unbindAllJob = null;
    }
    if (preventCascade === true)
      return;
    A.Polymer__forNodeTree(this.get$shadowRoot(receiver), new A.Polymer_cancelUnbindAll_closure());
  },
  cancelUnbindAll$0: function($receiver) {
    return this.cancelUnbindAll$1$preventCascade($receiver, null);
  },
  observeProperties$0: function(receiver) {
    var observe, publish, t1, t2, t3, $name;
    observe = J.get$_polymer$_observe$x(receiver._declaration);
    publish = J.get$_polymer$_publish$x(receiver._declaration);
    t1 = observe == null;
    if (!t1)
      for (observe.toString, t2 = new P.LinkedHashMapKeyIterable(observe), H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(observe, 0)]), t3 = new P.LinkedHashMapKeyIterator(observe, observe._modifications, null, null), H.setRuntimeTypeInfo(t3, [H.getTypeArgumentByIndex(t2, 0)]), t3._cell = observe._first; t3.moveNext$0();) {
        $name = t3._collection$_current;
        this.observeArrayValue$3(receiver, $name, H.reflect(receiver)._invoke$4($name, 1, J.get$_name$x($name), []), null);
      }
    if (!t1 || publish != null)
      receiver._propertyObserver = this.get$changes(receiver).listen$1(this.get$notifyPropertyChanges(receiver));
  },
  notifyPropertyChanges$1: function(receiver, changes) {
    var observe, publish, valuePairs, t1, c, t2;
    observe = J.get$_polymer$_observe$x(receiver._declaration);
    publish = J.get$_polymer$_publish$x(receiver._declaration);
    valuePairs = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, A._PropertyValue);
    for (t1 = J.get$iterator$ax(changes); t1.moveNext$0();) {
      c = t1.get$current();
      t2 = J.getInterceptor(c);
      if (typeof c !== "object" || c === null || !t2.$isPropertyChangeRecord)
        continue;
      J.set$newValue$x(valuePairs.putIfAbsent$2(c.name, new A.Polymer_notifyPropertyChanges_closure(c)), c.newValue);
    }
    valuePairs.forEach$1(valuePairs, new A.Polymer_notifyPropertyChanges_closure0(receiver, changes, observe, publish));
  },
  get$notifyPropertyChanges: function(_receiver) {
    return new W.BoundClosure$i1(this, A.Polymer.prototype.notifyPropertyChanges$1, _receiver, "notifyPropertyChanges$1");
  },
  observeArrayValue$3: function(receiver, $name, value, old) {
    var observe = J.get$_polymer$_observe$x(receiver._declaration);
    if (observe == null)
      return;
    if (observe.$index(observe, $name) == null)
      return;
  },
  unbindAllProperties$0: function(receiver) {
    var t1 = receiver._propertyObserver;
    if (t1 != null) {
      t1.cancel$0();
      receiver._propertyObserver = null;
    }
    this.unregisterObservers$0(receiver);
  },
  unregisterObservers$0: function(receiver) {
    var t1, t2;
    t1 = receiver._observers;
    if (t1 == null)
      return;
    for (t1 = t1.get$values(t1), t2 = new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t2.moveNext$0();)
      t2._current.cancel$0();
    t1 = receiver._observers;
    t1.clear$0(t1);
    receiver._observers = null;
  },
  addHostListeners$0: function(receiver) {
    var events = J.get$_eventDelegates$x(receiver._declaration);
    if (events.get$isEmpty(events))
      return;
    if ($.get$_eventsLog().isLoggable$1(C.Level_FINE_500))
      $.get$_eventsLog().fine$1("[" + this.get$localName(receiver) + "] addHostListeners: " + H.S(events));
    this.addNodeListeners$3(receiver, receiver, events.get$keys(), this.get$hostEventListener(receiver));
  },
  addNodeListeners$3: function(receiver, node, events, listener) {
    var t1, t2, $name, t3, rti, t4;
    for (t1 = events._collection$_map, t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null), H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(events, 0)]), t2._cell = t1._first, t1 = J.getInterceptor$x(node); t2.moveNext$0();) {
      $name = t2._collection$_current;
      t3 = t1.get$on(node);
      t3 = t3.$index(t3, $name);
      rti = H.getRuntimeTypeInfo(t3);
      t4 = rti == null ? null : rti[0];
      t3 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(listener), t3._useCapture);
      t3.$builtinTypeInfo = [t4];
      t4 = t3._onData;
      if (t4 != null && t3._pauseCount <= 0)
        J.addEventListener$3$x(t3._target, t3._eventType, t4, t3._useCapture);
    }
  },
  hostEventListener$1: function(receiver, $event) {
    var t1, log, t2, h;
    t1 = J.getInterceptor$x($event);
    if (t1.get$bubbles($event) !== true)
      return;
    log = $.get$_eventsLog().isLoggable$1(C.Level_FINE_500);
    if (log)
      $.get$_eventsLog().fine$1(">>> [" + this.get$localName(receiver) + "]: hostEventListener(" + H.S(t1.get$type($event)) + ")");
    t2 = J.get$_eventDelegates$x(receiver._declaration);
    h = t2.$index(t2, A._eventNameFromType(t1.get$type($event)));
    if (h != null) {
      if (log)
        $.get$_eventsLog().fine$1("[" + this.get$localName(receiver) + "] found host handler name [" + H.S(h) + "]");
      this.dispatchMethod$3(receiver, receiver, h, [$event, typeof $event === "object" && $event !== null && !!t1.$isCustomEvent ? t1.get$detail($event) : null, receiver]);
    }
    if (log)
      $.get$_eventsLog().fine$1("<<< [" + this.get$localName(receiver) + "]: hostEventListener(" + H.S(t1.get$type($event)) + ")");
  },
  get$hostEventListener: function(_receiver) {
    return new W.BoundClosure$i1(this, A.Polymer.prototype.hostEventListener$1, _receiver, "hostEventListener$1");
  },
  dispatchMethod$3: function(receiver, object, callbackOrMethod, args) {
    var log, t1;
    log = $.get$_eventsLog().isLoggable$1(C.Level_FINE_500);
    if (log)
      $.get$_eventsLog().fine$1(">>> [" + this.get$localName(receiver) + "]: dispatch " + H.S(callbackOrMethod));
    t1 = J.getInterceptor(callbackOrMethod);
    if (typeof callbackOrMethod === "object" && callbackOrMethod !== null && !!t1.$isFunction)
      H.Primitives_applyFunction(callbackOrMethod, args, P.Function__toMangledNames(null));
    else if (typeof callbackOrMethod === "string")
      A.Polymer__invokeMethod(object, new H.Symbol0(H.Symbol_validate(callbackOrMethod)), args);
    else
      $.get$_eventsLog().warning$1("invalid callback");
    if (log)
      $.get$_eventsLog().info$1("<<< [" + this.get$localName(receiver) + "]: dispatch " + H.S(callbackOrMethod));
  },
  $isPolymer: true,
  $isNodeBindExtension: true,
  $isObservable: true,
  $isElement: true,
  $isInterceptor: true,
  $isNode: true,
  $isEventTarget: true
},

Polymer_copyInstanceAttributes_closure: {"": "Closure;this_0",
  call$2: function($name, value) {
    J.get$attributes$x(this.this_0).putIfAbsent$2($name, new A.Polymer_copyInstanceAttributes__closure(value));
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Polymer_copyInstanceAttributes__closure: {"": "Closure;value_1",
  call$0: function() {
    return this.value_1;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Polymer_cancelUnbindAll_closure: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$x(n);
    if (typeof n === "object" && n !== null && !!t1.$isPolymer)
      t1.cancelUnbindAll$0(n);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Polymer__unbindNodeTree_closure: {"": "Closure;",
  call$1: function(node) {
    var t1 = J.getInterceptor(node);
    return J.unbindAll$0$x(typeof node === "object" && node !== null && !!t1.$isNodeBindExtension ? node : M.nodeBindFallback(node));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Polymer_notifyPropertyChanges_closure: {"": "Closure;c_0",
  call$0: function() {
    return new A._PropertyValue(this.c_0.oldValue, null);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Polymer_notifyPropertyChanges_closure0: {"": "Closure;this_1,changes_2,observe_3,publish_4",
  call$2: function($name, pair) {
    var t1, method, t2;
    t1 = this.publish_4;
    if (t1 != null && t1.containsKey$1($name))
      J.reflectPropertyToAttribute$1$x(this.this_1, $name);
    t1 = this.observe_3;
    if (t1 == null)
      return;
    method = t1.$index(t1, $name);
    if (method != null) {
      t1 = this.this_1;
      t2 = J.getInterceptor$x(pair);
      J.observeArrayValue$3$x(t1, $name, t2.get$newValue(pair), t2.get$oldValue(pair));
      A.Polymer__invokeMethod(t1, method, [t2.get$oldValue(pair), t2.get$newValue(pair), this.changes_2]);
    }
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Polymer_observeArrayValue_closure: {"": "Closure;this_0,old_1,callbackName_2",
  call$1: function(changes) {
    A.Polymer__invokeMethod(this.this_0, this.callbackName_2, [this.old_1]);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Polymer_prepareBinding_closure: {"": "Closure;path_0,name_1",
  call$2: function(model, node) {
    var eventName, translated, t1, t2;
    if ($.get$_eventsLog().isLoggable$1(C.Level_FINE_500))
      $.get$_eventsLog().fine$1("event: [" + H.S(node) + "]." + H.S(this.name_1) + " => [" + H.S(model) + "]." + this.path_0 + "())");
    eventName = J.substring$1$s(this.name_1, 3);
    translated = C.Map_484CA.$index(C.Map_484CA, eventName);
    if (translated != null)
      eventName = translated;
    t1 = J.get$on$x(node);
    t1 = t1.$index(t1, eventName);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new A.Polymer_prepareBinding__closure(this.path_0, model, node)), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
    t2._tryResume$0();
    return t2;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

Polymer_prepareBinding__closure: {"": "Closure;path_2,model_3,node_4",
  call$1: function($event) {
    var t1, ctrlr, t2, method, obj, t3;
    t1 = this.node_4;
    ctrlr = A.Polymer__findController(t1);
    t2 = J.getInterceptor$x(ctrlr);
    if (typeof ctrlr !== "object" || ctrlr === null || !t2.$isPolymer)
      return;
    method = this.path_2;
    if (0 >= method.length)
      throw H.ioore(method, 0);
    if (method[0] === "@") {
      obj = this.model_3;
      t3 = L.PathObserver$(obj, C.JSString_methods.substring$1(method, 1), null);
      method = t3.get$value(t3);
    } else
      obj = ctrlr;
    t3 = J.getInterceptor$x($event);
    t2.dispatchMethod$3(ctrlr, obj, method, [$event, typeof $event === "object" && $event !== null && !!t3.$isCustomEvent ? t3.get$detail($event) : null, t1]);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Polymer__invokeMethod_closure: {"": "Closure;",
  call$1: function(p) {
    return p.get$isOptional() !== true;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Polymer_unveilElements_closure: {"": "Closure;",
  call$1: function(_) {
    var nodes, t1, t2, t3;
    nodes = W._FrozenElementList$_wrap(document.querySelectorAll(".polymer-veiled"), null);
    for (t1 = nodes.get$iterator(nodes); t1.moveNext$0();) {
      t2 = J.get$classes$x(t1._current);
      t3 = J.getInterceptor$ax(t2);
      t3.add$1(t2, "polymer-unveil");
      t3.remove$1(t2, "polymer-veiled");
    }
    if (nodes.get$isNotEmpty(nodes)) {
      t1 = C._CustomEventStreamProvider__determineTransitionEventType.forTarget$1(window);
      t1.get$first(t1).then$1(new A.Polymer_unveilElements__closure(nodes));
    }
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Polymer_unveilElements__closure: {"": "Closure;nodes_0",
  call$1: function(_) {
    var t1;
    for (t1 = this.nodes_0, t1 = t1.get$iterator(t1); t1.moveNext$0();)
      J.remove$1$ax(J.get$classes$x(t1._current), "polymer-unveil");
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_PolymerBinding: {"": "NodeBinding;_polymer$_target,_property,_sub,_lastValue,_node_binding$_node,_model,_observer,_pathSub,property,path",
  close$0: function(_) {
    if (this._node_binding$_node == null)
      return;
    this._sub.cancel$0();
    X.NodeBinding.prototype.close$0.call(this, this);
  },
  valueChanged$1: function(newValue) {
    this._lastValue = newValue;
    this._polymer$_target.setField$2(this._property, newValue);
  },
  _propertyValueChanged$1: function(records) {
    var t1, t2, record, t3, newValue;
    for (t1 = J.get$iterator$ax(records), t2 = this._property; t1.moveNext$0();) {
      record = t1.get$current();
      t3 = J.getInterceptor(record);
      if (typeof record === "object" && record !== null && !!t3.$isPropertyChangeRecord && J.$eq(record.name, t2) === true) {
        newValue = this._polymer$_target._invoke$4(t2, 1, J.get$_name$x(t2), []).reflectee;
        t1 = this._lastValue;
        if (t1 == null ? newValue != null : t1 !== newValue)
          J.set$value$x(this._observer, newValue);
        return;
      }
    }
  },
  get$_propertyValueChanged: function() {
    return new H.BoundClosure$1(this, A._PolymerBinding.prototype._propertyValueChanged$1, null, "_propertyValueChanged$1");
  },
  _PolymerBinding$4: function(node, property, model, path) {
    this._sub = J.get$changes$x(node).listen$1(this.get$_propertyValueChanged());
  },
  static: {
_PolymerBinding$: function(node, property, model, path) {
  var t1, t2, t3;
  t1 = H.reflect(node);
  t2 = J.get$_name$x(property);
  t3 = path != null ? path : "";
  t3 = new A._PolymerBinding(t1, property, null, null, node, model, null, null, t2, t3);
  t3.NodeBinding$4(node, t2, model, path);
  t3._PolymerBinding$4(node, property, model, path);
  return t3;
}}

},

PolymerElement: {"": ["HtmlElement_Polymer_ChangeNotifier;_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  PolymerElement$created$0: function(receiver) {
    this.polymerCreated$0(receiver);
  },
  static: {
PolymerElement$created: function(receiver) {
  var t1, t2, t3, t4, t5;
  t1 = $.get$Polymer__polymerSyntax();
  t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t3 = J.JSString;
  t4 = W.Element;
  t5 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null);
  H.setRuntimeTypeInfo(t5, [t3, t4]);
  receiver.syntax = t1;
  receiver._shadowRoots = t2;
  receiver.$$ = t5;
  C.PolymerElement_methods.Element$created$0(receiver);
  C.PolymerElement_methods.PolymerElement$created$0(receiver);
  return receiver;
},

"+new PolymerElement$created:0:0": 0}

},

HtmlElement_Polymer: {"": ["HtmlElement+Polymer;$$=-", function() {
    return [C.C_Reflectable];
  }], $isPolymer: true, $isNodeBindExtension: true, $isObservable: true, $isElement: true, $isInterceptor: true, $isNode: true, $isEventTarget: true},

HtmlElement_Polymer_ChangeNotifier: {"": "HtmlElement_Polymer+ChangeNotifier;", $isObservable: true},

_PropertyValue: {"": "Object;oldValue>,newValue*", $is_PropertyValue: true},

_PolymerExpressionsWithEventDelegate: {"": "PolymerExpressions;globals"},

_Job: {"": "Object;_callback,_timer",
  _callback$0: function() {
    return this._callback.call$0();
  },
  stop$0: function(_) {
    var t1 = this._timer;
    if (t1 != null) {
      t1.cancel$0();
      this._timer = null;
    }
  },
  complete$0: function(_) {
    if (this._timer != null) {
      this.stop$0(this);
      this._callback$0();
    }
  },
  get$complete: function(_receiver) {
    return new H.BoundClosure$i0(this, A._Job.prototype.complete$0, _receiver, "complete$0");
  }
},

CustomTag: {"": "Object;tagName>", $isCustomTag: true},

_initPolymerOptimized_closure: {"": "Closure;",
  call$1: function(_) {
    var t1 = $.get$Polymer__ready().future;
    if (t1._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    t1._asyncComplete$1(null);
    return;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_maybeInvoke_closure: {"": "Closure;",
  call$1: function(p) {
    return p.get$isOptional() !== true;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_InitMethodAnnotation: {"": "Object;"}}],
["polymer.deserialize", "package:polymer/deserialize.dart", , Z, {
deserializeValue: function(value, currentValue, type) {
  var handler, t1, exception;
  handler = J.$index$asx($.get$_typeHandlers(), type.get$qualifiedName());
  if (handler != null)
    return handler.call$2(value, currentValue);
  try {
    t1 = C.C_JsonCodec.decode$1(J.replaceAll$2$s(value, "'", "\""));
    return t1;
  } catch (exception) {
    H.unwrapException(exception);
    return value;
  }

},

closure1: {"": "Closure;",
  call$0: function() {
    var m = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    m.$indexSet(m, C.Symbol_iC9, new Z._closure());
    m.$indexSet(m, C.Symbol_s2s, new Z._closure0());
    m.$indexSet(m, C.Symbol_4YB, new Z._closure1());
    m.$indexSet(m, C.Symbol_6TA, new Z._closure2());
    m.$indexSet(m, C.Symbol_mdn, new Z._closure3());
    m.$indexSet(m, C.Symbol_sMO, new Z._closure4());
    return m;
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_closure: {"": "Closure;",
  call$2: function(x, _) {
    return x;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_closure0: {"": "Closure;",
  call$2: function(x, _) {
    return x;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_closure1: {"": "Closure;",
  call$2: function(x, def) {
    var t1, exception;
    try {
      t1 = P.DateTime_parse(x);
      return t1;
    } catch (exception) {
      H.unwrapException(exception);
      return def;
    }

  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_closure2: {"": "Closure;",
  call$2: function(x, _) {
    return J.$eq(x, "false") !== true;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_closure3: {"": "Closure;",
  call$2: function(x, def) {
    return H.Primitives_parseInt(x, null, new Z.__closure0(def));
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

__closure0: {"": "Closure;def_0",
  call$1: function(_) {
    return this.def_0;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_closure4: {"": "Closure;",
  call$2: function(x, def) {
    return H.Primitives_parseDouble(x, new Z.__closure(def));
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

__closure: {"": "Closure;def_1",
  call$1: function(_) {
    return this.def_1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["polymer.src.reflected_type", "package:polymer/src/reflected_type.dart", , M, {
getReflectedTypeWorkaround: function(cls) {
  var t1, t2;
  t1 = H.reflect(cls);
  t2 = $.get$_mangledNameField();
  t2 = t1._invoke$4(t2, 1, J.get$_name$x(t2), []);
  return $.get$_jsHelper().invoke$2(C.Symbol_createRuntimeType, [t2.reflectee]).get$reflectee();
},

closure21: {"": "Closure;",
  call$0: function() {
    var t1, $name;
    for (t1 = J.get$iterator$ax(J.get$variables$x(H.reflectClassByMangledName(J.get$runtimeType$(H.reflect(P.reflectClass(C.Type_ah5)).reflectee)._typeName)).get$keys()); t1.moveNext$0();) {
      $name = t1.get$current();
      if (J.$eq(J.get$_name$x($name), "_mangledName") === true)
        return $name;
    }
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
}}],
["polymer_expressions", "package:polymer_expressions/polymer_expressions.dart", , T, {
_classAttributeConverter: function(v) {
  var t1 = J.getInterceptor$ax(v);
  if (typeof v === "object" && v !== null && !!t1.$isMap) {
    t1 = J.where$1$ax(v.get$keys(), new T._classAttributeConverter_closure(v));
    t1 = t1.join$1(t1, " ");
  } else
    t1 = typeof v === "object" && v !== null && (v.constructor === Array || !!t1.$isIterable) ? t1.join$1(v, " ") : v;
  return t1;
},

_styleAttributeConverter: function(v) {
  var t1 = J.getInterceptor$ax(v);
  if (typeof v === "object" && v !== null && !!t1.$isMap) {
    t1 = J.map$1$ax(v.get$keys(), new T._styleAttributeConverter_closure(v));
    t1 = t1.join$1(t1, ";");
  } else
    t1 = typeof v === "object" && v !== null && (v.constructor === Array || !!t1.$isIterable) ? t1.join$1(v, ";") : v;
  return t1;
},

_classAttributeConverter_closure: {"": "Closure;v_0",
  call$1: function(k) {
    var t1 = this.v_0;
    return J.$eq(t1.$index(t1, k), true);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_styleAttributeConverter_closure: {"": "Closure;v_0",
  call$1: function(k) {
    var t1 = this.v_0;
    return H.S(k) + ": " + H.S(t1.$index(t1, k));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

PolymerExpressions: {"": "BindingDelegate;",
  prepareBinding$3: function(path, $name, node) {
    if (path == null)
      return;
    return new T.PolymerExpressions_prepareBinding_closure(this, $name, T.Parser$(path, null).parse$0());
  },
  get$prepareBinding: function() {
    return new T.BoundClosure$3(this, T.PolymerExpressions.prototype.prepareBinding$3, null, "prepareBinding$3");
  },
  prepareInstanceModel$1: function(template) {
    return new T.PolymerExpressions_prepareInstanceModel_closure(this);
  }
},

PolymerExpressions_prepareBinding_closure: {"": "Closure;this_0,name_1,expr_2",
  call$2: function(model, node) {
    var t1 = J.getInterceptor(model);
    if (typeof model !== "object" || model === null || !t1.$isScope)
      model = new K.Scope(null, model, V.ObservableMap_ObservableMap$from(this.this_0.globals, null, null), null);
    t1 = J.getInterceptor(node);
    t1 = typeof node === "object" && node !== null && !!t1.$isElement;
    if (t1 && J.$eq(this.name_1, "class") === true)
      return T._Binding$(this.expr_2, model, T._classAttributeConverter$closure);
    if (t1 && J.$eq(this.name_1, "style") === true)
      return T._Binding$(this.expr_2, model, T._styleAttributeConverter$closure);
    return T._Binding$(this.expr_2, model, null);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

PolymerExpressions_prepareInstanceModel_closure: {"": "Closure;this_0",
  call$1: function(model) {
    var t1 = J.getInterceptor(model);
    return typeof model === "object" && model !== null && !!t1.$isScope ? model : new K.Scope(null, model, V.ObservableMap_ObservableMap$from(this.this_0.globals, null, null), null);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_Binding: {"": "ChangeNotifier;_scope,_polymer_expressions$_expr,_converter,_polymer_expressions$_value,_changes,_records",
  _converter$1: function(arg0) {
    return this._converter.call$1(arg0);
  },
  _polymer_expressions$_setValue$1: function(v) {
    var oldValue, t1;
    oldValue = this._polymer_expressions$_value;
    t1 = J.getInterceptor(v);
    if (typeof v === "object" && v !== null && !!t1.$isComprehension) {
      t1 = J.map$1$ax(v.iterable, new T._Binding__setValue_closure(this, v));
      this._polymer_expressions$_value = t1.toList$1$growable(t1, false);
    } else
      this._polymer_expressions$_value = this._converter == null ? v : this._converter$1(v);
    F.notifyPropertyChangeHelper(this, C.Symbol_value, oldValue, this._polymer_expressions$_value);
  },
  get$_polymer_expressions$_setValue: function() {
    return new H.BoundClosure$1(this, T._Binding.prototype._polymer_expressions$_setValue$1, null, "_polymer_expressions$_setValue$1");
  },
  get$value: function(_) {
    return this._polymer_expressions$_value;
    "12,13";
  },
  "+value": 1,
  set$value: function(_, v) {
    var e, exception, t1, t2;
    try {
      K.assign(this._polymer_expressions$_expr, v, this._scope);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      t2 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t2.$isEvalException) {
        e = t1;
        $.get$_logger1().warning$1("Error evaluating expression '" + H.S(this._polymer_expressions$_expr) + "': " + J.get$message$x(e));
      } else
        throw exception;
    }

    "12,199,12,13";
  },
  "+value=": 1,
  _Binding$3: function(expr, scope, _converter) {
    var e, t1, t2, exception, t3;
    t1 = this._polymer_expressions$_expr;
    t2 = t1.get$onUpdate().listen$1(this.get$_polymer_expressions$_setValue());
    t2.onError$1(t2, new T._Binding_closure(this));
    try {
      J.accept$1$x(t1, new K.Updater(this._scope));
      t1.get$currentValue();
      this._polymer_expressions$_setValue$1(t1.get$currentValue());
    } catch (exception) {
      t2 = H.unwrapException(exception);
      t3 = J.getInterceptor(t2);
      if (typeof t2 === "object" && t2 !== null && !!t3.$isEvalException) {
        e = t2;
        $.get$_logger1().warning$1("Error evaluating expression '" + H.S(t1) + "': " + J.get$message$x(e));
      } else
        throw exception;
    }

  },
  static: {
_Binding$: function(expr, scope, _converter) {
  var t1 = new T._Binding(scope, expr.accept$1(expr, new K.ObserverBuilder(scope, P.ListQueue$(null, null))), _converter, null, null, null);
  t1._Binding$3(expr, scope, _converter);
  return t1;
}}

},

_Binding_closure: {"": "Closure;this_0",
  call$1: function(e) {
    $.get$_logger1().warning$1("Error evaluating expression '" + H.S(this.this_0._polymer_expressions$_expr) + "': " + H.S(J.get$message$x(e)));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_Binding__setValue_closure: {"": "Closure;this_0,v_1",
  call$1: function(i) {
    var vars = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    vars.$indexSet(vars, this.v_1.identifier, i);
    return new K.Scope(this.this_0._scope, null, V.ObservableMap_ObservableMap$from(vars, null, null), null);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["polymer_expressions.async", "package:polymer_expressions/async.dart", , B, {
StreamBinding: {"": "ObservableBox;stream,_observable_box$_value,_changes,_records",
  StreamBinding$1: function(stream, $T) {
    this.stream.listen$1(new B.StreamBinding_closure($T, this));
  },
  $asObservableBox: function($T) {
    return [null];
  },
  static: {
StreamBinding$: function(stream, $T) {
  var t1 = new B.StreamBinding(stream, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1.StreamBinding$1(stream, $T);
  return t1;
}}

},

StreamBinding_closure: {"": "Closure;T_0,this_1",
  call$1: function(i) {
    var t1 = this.this_1;
    t1._observable_box$_value = F.notifyPropertyChangeHelper(t1, C.Symbol_value, t1._observable_box$_value, i);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["polymer_expressions.eval", "package:polymer_expressions/eval.dart", , K, {
eval0: function(expr, scope) {
  var observer = J.accept$1$x(expr, new K.ObserverBuilder(scope, P.ListQueue$(null, null)));
  J.accept$1$x(observer, new K.Updater(scope));
  return observer.get$_eval$_value();
},

assign: function(expr, value, scope) {
  var t1, t2, filters, t3, t4, property, expression, isIndex, filterExpr, observer, o;
  t1 = {};
  t1.expr_0 = expr;
  t2 = new K.assign_notAssignable(t1);
  filters = [];
  H.setRuntimeTypeInfo(filters, [U.Expression]);
  for (; t3 = t1.expr_0, t4 = J.getInterceptor$x(t3), typeof t3 === "object" && t3 !== null && !!t4.$isBinaryOperator;) {
    if (J.$eq(t4.get$operator(t3), "|") !== true)
      break;
    filters.push(t4.get$right(t3));
    t1.expr_0 = t4.get$left(t3);
  }
  t1 = t1.expr_0;
  t3 = J.getInterceptor(t1);
  if (typeof t1 === "object" && t1 !== null && !!t3.$isIdentifier) {
    property = t3.get$value(t1);
    expression = C.C_EmptyExpression;
    isIndex = false;
  } else if (typeof t1 === "object" && t1 !== null && !!t3.$isInvoke) {
    expression = t1.get$receiver();
    if (J.$eq(t3.get$method(t1), "[]") === true) {
      t3 = t1.get$arguments();
      if (0 >= t3.length)
        throw H.ioore(t3, 0);
      t3 = t3[0];
      t4 = J.getInterceptor(t3);
      if (typeof t3 !== "object" || t3 === null || !t4.$isLiteral)
        t2.call$0();
      t1 = t1.get$arguments();
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      property = J.get$value$x(t1[0]);
      isIndex = true;
    } else {
      if (t3.get$method(t1) != null) {
        if (t1.get$arguments() != null)
          t2.call$0();
        property = t3.get$method(t1);
      } else {
        t2.call$0();
        property = null;
      }
      isIndex = false;
    }
  } else {
    t2.call$0();
    expression = null;
    property = null;
    isIndex = false;
  }
  for (t1 = new H.ListIterator(filters, filters.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(filters, "JSArray", 0)]); t1.moveNext$0();) {
    filterExpr = t1._current;
    observer = J.accept$1$x(filterExpr, new K.ObserverBuilder(scope, P.ListQueue$(null, null)));
    J.accept$1$x(observer, new K.Updater(scope));
    observer.get$_eval$_value();
    throw H.wrapException(K.EvalException$("filter must implement Transformer: " + H.S(filterExpr)));
  }
  o = K.eval0(expression, scope);
  if (o == null)
    throw H.wrapException(K.EvalException$("Can't assign to null: " + H.S(expression)));
  if (isIndex)
    J.$indexSet$ax(o, property, value);
  else
    H.reflect(o).setField$2(new H.Symbol0(H.Symbol_validate(property)), value);
},

_convert: function(v) {
  var t1 = J.getInterceptor(v);
  if (typeof v === "object" && v !== null && !!t1.$isStream)
    return B.StreamBinding$(v, null);
  return v;
},

$call: function(receiver, args) {
  var t1 = J.getInterceptor(receiver);
  return K._convert(typeof receiver === "object" && receiver !== null && !!t1.$isMethod0 ? receiver.mirror.invoke$3(receiver.symbol, args, null).reflectee : H.Primitives_applyFunction(receiver, args, P.Function__toMangledNames(null)));
},

"+call:2:0": 0,

closure4: {"": "Closure;",
  call$2: function(a, b) {
    return J.$add$ns(a, b);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure5: {"": "Closure;",
  call$2: function(a, b) {
    return J.$sub$n(a, b);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure6: {"": "Closure;",
  call$2: function(a, b) {
    return J.$mul$n(a, b);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure7: {"": "Closure;",
  call$2: function(a, b) {
    return J.$div$n(a, b);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure8: {"": "Closure;",
  call$2: function(a, b) {
    return J.$eq(a, b);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure9: {"": "Closure;",
  call$2: function(a, b) {
    return J.$eq(a, b) !== true;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure10: {"": "Closure;",
  call$2: function(a, b) {
    return J.$gt$n(a, b);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure11: {"": "Closure;",
  call$2: function(a, b) {
    return J.$ge$n(a, b);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure12: {"": "Closure;",
  call$2: function(a, b) {
    return J.$lt$n(a, b);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure13: {"": "Closure;",
  call$2: function(a, b) {
    return J.$le$n(a, b);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure14: {"": "Closure;",
  call$2: function(a, b) {
    return a === true || b === true;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure15: {"": "Closure;",
  call$2: function(a, b) {
    return a === true && b === true;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure16: {"": "Closure;",
  call$2: function(a, f) {
    var t1 = H.checkFunctionSubtype(f, "Object__Object", null, null, null);
    if (t1)
      return f.call$1(a);
    throw H.wrapException(K.EvalException$("Filters must be a one-argument function."));
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

closure17: {"": "Closure;",
  call$1: function(a) {
    return a;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

closure18: {"": "Closure;",
  call$1: function(a) {
    return J.$negate$n(a);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

closure19: {"": "Closure;",
  call$1: function(a) {
    return a !== true;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

assign_notAssignable: {"": "Closure;box_0",
  call$0: function() {
    return H.throwExpression(K.EvalException$("Expression is not assignable: " + H.S(this.box_0.expr_0)));
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

Scope: {"": "Object;parent>,model,_variables,__modelMirror",
  get$_modelMirror: function() {
    var t1 = this.__modelMirror;
    if (t1 != null)
      return t1;
    t1 = H.reflect(this.model);
    this.__modelMirror = t1;
    return t1;
  },
  $index: function(_, $name) {
    var t1, symbol, unmangledName, unmangledName0, memberMirror, t2;
    if (J.$eq($name, "this") === true)
      return this.model;
    else {
      t1 = this._variables._observable_map$_map;
      if (t1.containsKey$1($name))
        return K._convert(t1.$index(t1, $name));
      else if (this.model != null) {
        symbol = new H.Symbol0(H.Symbol_validate($name));
        unmangledName = J.get$runtimeType$(this.get$_modelMirror().reflectee)._typeName;
        t1 = $.get$mangledGlobalNames();
        unmangledName0 = t1.$index(t1, unmangledName);
        memberMirror = Z.getMemberMirror(H.reflectClassByName(H.s(unmangledName0 == null ? unmangledName : unmangledName0), unmangledName), symbol);
        t1 = J.getInterceptor(memberMirror);
        if (typeof memberMirror !== "object" || memberMirror === null || !t1.$isVariableMirror)
          t2 = typeof memberMirror === "object" && memberMirror !== null && !!t1.$isMethodMirror && memberMirror.get$isGetter();
        else
          t2 = true;
        if (t2)
          return K._convert(this.get$_modelMirror()._invoke$4(symbol, 1, symbol._name, []).reflectee);
        else if (typeof memberMirror === "object" && memberMirror !== null && !!t1.$isMethodMirror)
          return new K.Method0(this.get$_modelMirror(), symbol);
      }
    }
    t1 = this.parent;
    if (t1 != null)
      return K._convert(t1.$index(t1, $name));
    else
      throw H.wrapException(K.EvalException$("variable '" + H.S($name) + "' not found"));
  },
  "+[]:1:0": 0,
  ownerOf$1: function($name) {
    var t1;
    if (J.$eq($name, "this") === true)
      return;
    else {
      t1 = this._variables;
      if (t1._observable_map$_map.containsKey$1($name))
        return t1;
      else {
        t1 = H.Symbol_validate($name);
        if (Z.getMemberMirror(H.reflectClassByMangledName(J.get$runtimeType$(this.get$_modelMirror().reflectee)._typeName), new H.Symbol0(t1)) != null)
          return this.model;
      }
    }
    t1 = this.parent;
    if (t1 != null)
      return t1.ownerOf$1($name);
  },
  contains$1: function(_, $name) {
    var t1;
    if (this._variables._observable_map$_map.containsKey$1($name))
      return true;
    else {
      t1 = H.Symbol_validate($name);
      if (Z.getMemberMirror(H.reflectClassByMangledName(J.get$runtimeType$(this.get$_modelMirror().reflectee)._typeName), new H.Symbol0(t1)) != null)
        return true;
    }
    t1 = this.parent;
    if (t1 != null)
      return t1.contains$1(t1, $name);
    return false;
  },
  $isScope: true
},

ExpressionObserver: {"": "Object;_parent?,_eval$_value<",
  get$onUpdate: function() {
    var t1, t2;
    t1 = this._eval$_controller;
    t2 = new P._BroadcastStream(t1);
    H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
    return t2;
  },
  get$currentValue: function() {
    return this._eval$_value;
  },
  _updateSelf$1: function(scope) {
  },
  _invalidate$1: function(scope) {
    var t1;
    this._observe$1(this, scope);
    t1 = this._parent;
    if (t1 != null)
      t1._invalidate$1(scope);
  },
  _observe$1: function(_, scope) {
    var t1, _oldValue, t2;
    t1 = this._eval$_subscription;
    if (t1 != null) {
      t1.cancel$0();
      this._eval$_subscription = null;
    }
    _oldValue = this._eval$_value;
    this._updateSelf$1(scope);
    t1 = this._eval$_value;
    if (t1 == null ? _oldValue != null : t1 !== _oldValue) {
      t2 = this._eval$_controller;
      if (t2._state >= 4)
        H.throwExpression(t2._addEventError$0());
      t2._sendData$1(t1);
    }
  },
  toString$0: function(_) {
    var t1 = this._eval$_expr;
    return t1.toString$0(t1);
  },
  "+toString:0:0": 0,
  $isExpression: true
},

Updater: {"": "RecursiveVisitor;scope",
  visitExpression$1: function(e) {
    e._observe$1(e, this.scope);
  },
  visitInExpression$1: function(c) {
    J.accept$1$x(c.get$right(c), this);
    c._observe$1(c, this.scope);
  }
},

ObserverBuilder: {"": "Visitor0;scope,parents",
  visitEmptyExpression$1: function(e) {
    return new K.EmptyObserver(e, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
  },
  visitParenthesizedExpression$1: function(e) {
    var t1 = e.child;
    return t1.accept$1(t1, this);
  },
  visitInvoke$1: function(i) {
    var receiver, t1, args, t2, invoke;
    receiver = J.accept$1$x(i.get$receiver(), this);
    t1 = i.get$arguments();
    if (t1 == null)
      args = null;
    else {
      t2 = this.get$visit();
      t1.toString;
      t2 = new H.MappedListIterable(t1, t2);
      H.setRuntimeTypeInfo(t2, [null, null]);
      args = t2.toList$1$growable(t2, false);
    }
    invoke = new K.InvokeObserver(receiver, args, i, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    receiver.set$_parent(invoke);
    if (args != null) {
      args.toString;
      H.IterableMixinWorkaround_forEach(args, new K.ObserverBuilder_visitInvoke_closure(invoke));
    }
    return invoke;
  },
  visitLiteral$1: function(l) {
    return new K.LiteralObserver(l, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
  },
  visitMapLiteral$1: function(l) {
    var t1, entries, map;
    t1 = new H.MappedListIterable(l.get$entries(l), this.get$visit());
    H.setRuntimeTypeInfo(t1, [null, null]);
    entries = t1.toList$1$growable(t1, false);
    map = new K.MapLiteralObserver(entries, l, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    H.IterableMixinWorkaround_forEach(entries, new K.ObserverBuilder_visitMapLiteral_closure(map));
    return map;
  },
  visitMapLiteralEntry$1: function(e) {
    var key, value, entry;
    key = J.accept$1$x(e.get$key(e), this);
    value = J.accept$1$x(e.get$entryValue(), this);
    entry = new K.MapLiteralEntryObserver(key, value, e, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    key.set$_parent(entry);
    value.set$_parent(entry);
    return entry;
  },
  visitIdentifier$1: function(i) {
    return new K.IdentifierObserver(i, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
  },
  visitBinaryOperator$1: function(o) {
    var left, right, binary;
    left = J.accept$1$x(o.get$left(o), this);
    right = J.accept$1$x(o.get$right(o), this);
    binary = new K.BinaryObserver(left, right, o, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    left.set$_parent(binary);
    right.set$_parent(binary);
    return binary;
  },
  visitUnaryOperator$1: function(o) {
    var expr, unary;
    expr = J.accept$1$x(o.get$child(), this);
    unary = new K.UnaryObserver(expr, o, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    expr.set$_parent(unary);
    return unary;
  },
  visitInExpression$1: function(i) {
    var left, right, inexpr;
    left = J.accept$1$x(i.get$left(i), this);
    right = J.accept$1$x(i.get$right(i), this);
    inexpr = new K.InObserver(left, right, i, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    right.set$_parent(inexpr);
    return inexpr;
  }
},

ObserverBuilder_visitInvoke_closure: {"": "Closure;invoke_0",
  call$1: function(a) {
    var t1 = this.invoke_0;
    a.set$_parent(t1);
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

ObserverBuilder_visitMapLiteral_closure: {"": "Closure;map_0",
  call$1: function(e) {
    var t1 = this.map_0;
    e.set$_parent(t1);
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

EmptyObserver: {"": "ExpressionObserver;_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
  _updateSelf$1: function(scope) {
    this._eval$_value = scope.model;
  },
  accept$1: function(_, v) {
    return v.visitEmptyExpression$1(this);
  },
  $asExpressionObserver: function() {
    return [U.EmptyExpression];
  },
  $isEmptyExpression: true,
  $isExpression: true
},

LiteralObserver: {"": "ExpressionObserver;_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
  get$value: function(_) {
    var t1 = this._eval$_expr;
    return t1.get$value(t1);
  },
  "+value": 0,
  _updateSelf$1: function(scope) {
    var t1 = this._eval$_expr;
    this._eval$_value = t1.get$value(t1);
  },
  accept$1: function(_, v) {
    return v.visitLiteral$1(this);
  },
  $asExpressionObserver: function() {
    return [U.Literal];
  },
  $asLiteral: function() {
    return [null];
  },
  $isLiteral: true,
  $isExpression: true
},

MapLiteralObserver: {"": "ExpressionObserver;entries>,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
  _updateSelf$1: function(scope) {
    this._eval$_value = H.IterableMixinWorkaround_fold(this.entries, P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), new K.MapLiteralObserver__updateSelf_closure());
  },
  accept$1: function(_, v) {
    return v.visitMapLiteral$1(this);
  },
  $asExpressionObserver: function() {
    return [U.MapLiteral];
  },
  $isMapLiteral: true,
  $isExpression: true
},

MapLiteralObserver__updateSelf_closure: {"": "Closure;",
  call$2: function(m, e) {
    J.$indexSet$ax(m, J.get$key$x(e).get$_eval$_value(), e.get$entryValue().get$_eval$_value());
    return m;
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

MapLiteralEntryObserver: {"": "ExpressionObserver;key>,entryValue<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
  accept$1: function(_, v) {
    return v.visitMapLiteralEntry$1(this);
  },
  $asExpressionObserver: function() {
    return [U.MapLiteralEntry];
  },
  $isMapLiteralEntry: true,
  $isExpression: true
},

IdentifierObserver: {"": "ExpressionObserver;_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
  get$value: function(_) {
    var t1 = this._eval$_expr;
    return t1.get$value(t1);
  },
  "+value": 0,
  _updateSelf$1: function(scope) {
    var t1, owner, t2;
    t1 = this._eval$_expr;
    this._eval$_value = scope.$index(scope, t1.get$value(t1));
    owner = scope.ownerOf$1(t1.get$value(t1));
    t2 = J.getInterceptor$x(owner);
    if (typeof owner === "object" && owner !== null && !!t2.$isObservable) {
      t1 = H.Symbol_validate(t1.get$value(t1));
      this._eval$_subscription = t2.get$changes(owner).listen$1(new K.IdentifierObserver__updateSelf_closure(this, scope, new H.Symbol0(t1)));
    }
  },
  accept$1: function(_, v) {
    return v.visitIdentifier$1(this);
  },
  $asExpressionObserver: function() {
    return [U.Identifier];
  },
  $isIdentifier: true,
  $isExpression: true
},

IdentifierObserver__updateSelf_closure: {"": "Closure;this_0,scope_1,symbol_2",
  call$1: function(changes) {
    if (J.any$1$ax(changes, new K.IdentifierObserver__updateSelf__closure(this.symbol_2)) === true)
      this.this_0._invalidate$1(this.scope_1);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

IdentifierObserver__updateSelf__closure: {"": "Closure;symbol_3",
  call$1: function(c) {
    var t1 = J.getInterceptor(c);
    return typeof c === "object" && c !== null && !!t1.$isPropertyChangeRecord && J.$eq(c.name, this.symbol_3) === true;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

UnaryObserver: {"": "ExpressionObserver;child<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
  get$operator: function(_) {
    var t1 = this._eval$_expr;
    return t1.get$operator(t1);
  },
  _updateSelf$1: function(scope) {
    var t1, t2, f;
    t1 = $.get$_UNARY_OPERATORS();
    t2 = this._eval$_expr;
    f = t1.$index(t1, t2.get$operator(t2));
    if (J.$eq(t2.get$operator(t2), "!") === true) {
      t1 = this.child.get$_eval$_value();
      this._eval$_value = f.call$1(t1 == null ? false : t1);
    } else {
      t1 = this.child;
      this._eval$_value = t1.get$_eval$_value() == null ? null : f.call$1(t1.get$_eval$_value());
    }
  },
  accept$1: function(_, v) {
    return v.visitUnaryOperator$1(this);
  },
  $asExpressionObserver: function() {
    return [U.UnaryOperator];
  },
  $isUnaryOperator: true,
  $isExpression: true
},

BinaryObserver: {"": "ExpressionObserver;left>,right>,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
  get$operator: function(_) {
    var t1 = this._eval$_expr;
    return t1.get$operator(t1);
  },
  _updateSelf$1: function(scope) {
    var t1, t2, f;
    t1 = $.get$_BINARY_OPERATORS();
    t2 = this._eval$_expr;
    f = t1.$index(t1, t2.get$operator(t2));
    if (J.$eq(t2.get$operator(t2), "&&") === true || J.$eq(t2.get$operator(t2), "||") === true) {
      t1 = this.left.get$_eval$_value();
      if (t1 == null)
        t1 = false;
      t2 = this.right.get$_eval$_value();
      this._eval$_value = f.call$2(t1, t2 == null ? false : t2);
    } else if (J.$eq(t2.get$operator(t2), "==") === true || J.$eq(t2.get$operator(t2), "!=") === true)
      this._eval$_value = f.call$2(this.left.get$_eval$_value(), this.right.get$_eval$_value());
    else {
      t1 = this.left;
      if (t1.get$_eval$_value() == null || this.right.get$_eval$_value() == null)
        this._eval$_value = null;
      else
        this._eval$_value = f.call$2(t1.get$_eval$_value(), this.right.get$_eval$_value());
    }
  },
  accept$1: function(_, v) {
    return v.visitBinaryOperator$1(this);
  },
  $asExpressionObserver: function() {
    return [U.BinaryOperator];
  },
  $isBinaryOperator: true,
  $isExpression: true
},

InvokeObserver: {"": "ExpressionObserver;receiver<,arguments<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
  get$isGetter: function() {
    return this._eval$_expr.get$isGetter();
  },
  "+isGetter": 0,
  get$method: function(_) {
    var t1 = this._eval$_expr;
    return t1.get$method(t1);
  },
  _updateSelf$1: function(scope) {
    var t1, args, receiverValue, key, mirror, symbol;
    t1 = this.arguments;
    if (t1 == null)
      args = [];
    else {
      t1.toString;
      t1 = new H.MappedListIterable(t1, new K.InvokeObserver__updateSelf_closure());
      H.setRuntimeTypeInfo(t1, [null, null]);
      args = t1.toList$1$growable(t1, false);
    }
    receiverValue = this.receiver.get$_eval$_value();
    if (receiverValue == null)
      this._eval$_value = null;
    else {
      t1 = this._eval$_expr;
      if (t1.get$method(t1) == null)
        if (t1.get$isGetter())
          this._eval$_value = receiverValue;
        else
          this._eval$_value = K.$call(receiverValue, args);
      else if (J.$eq(t1.get$method(t1), "[]") === true) {
        if (0 >= args.length)
          throw H.ioore(args, 0);
        key = args[0];
        t1 = J.getInterceptor$asx(receiverValue);
        this._eval$_value = t1.$index(receiverValue, key);
        if (typeof receiverValue === "object" && receiverValue !== null && !!t1.$isObservable)
          this._eval$_subscription = t1.get$changes(receiverValue).listen$1(new K.InvokeObserver__updateSelf_closure0(this, scope, key));
      } else {
        mirror = H.reflect(receiverValue);
        symbol = new H.Symbol0(H.Symbol_validate(t1.get$method(t1)));
        this._eval$_value = t1.get$isGetter() ? mirror.getField$1(symbol).reflectee : mirror.invoke$3(symbol, args, null).reflectee;
        t1 = J.getInterceptor$x(receiverValue);
        if (typeof receiverValue === "object" && receiverValue !== null && !!t1.$isObservable)
          this._eval$_subscription = t1.get$changes(receiverValue).listen$1(new K.InvokeObserver__updateSelf_closure1(this, scope, symbol));
      }
    }
  },
  accept$1: function(_, v) {
    return v.visitInvoke$1(this);
  },
  $asExpressionObserver: function() {
    return [U.Invoke];
  },
  $isInvoke: true,
  $isExpression: true
},

InvokeObserver__updateSelf_closure: {"": "Closure;",
  call$1: function(a) {
    return a.get$_eval$_value();
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

InvokeObserver__updateSelf_closure0: {"": "Closure;this_0,scope_1,key_2",
  call$1: function(changes) {
    if (J.any$1$ax(changes, new K.InvokeObserver__updateSelf__closure0(this.key_2)) === true)
      this.this_0._invalidate$1(this.scope_1);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

InvokeObserver__updateSelf__closure0: {"": "Closure;key_3",
  call$1: function(c) {
    var t1 = J.getInterceptor(c);
    return typeof c === "object" && c !== null && !!t1.$isMapChangeRecord && J.$eq(c.key, this.key_3) === true;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

InvokeObserver__updateSelf_closure1: {"": "Closure;this_4,scope_5,symbol_6",
  call$1: function(changes) {
    if (J.any$1$ax(changes, new K.InvokeObserver__updateSelf__closure(this.symbol_6)) === true)
      this.this_4._invalidate$1(this.scope_5);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

InvokeObserver__updateSelf__closure: {"": "Closure;symbol_7",
  call$1: function(c) {
    var t1 = J.getInterceptor(c);
    return typeof c === "object" && c !== null && !!t1.$isPropertyChangeRecord && J.$eq(c.name, this.symbol_7) === true;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

InObserver: {"": "ExpressionObserver;left>,right>,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
  _updateSelf$1: function(scope) {
    var identifier, iterable, t1, t2;
    identifier = this.left;
    iterable = this.right.get$_eval$_value();
    t1 = J.getInterceptor(iterable);
    if ((typeof iterable !== "object" || iterable === null || iterable.constructor !== Array && !t1.$isIterable) && iterable != null)
      throw H.wrapException(K.EvalException$("right side of 'in' is not an iterator"));
    t1 = J.get$value$x(identifier);
    t2 = iterable != null ? iterable : C.List_empty;
    this._eval$_value = new K.Comprehension(t1, t2);
  },
  accept$1: function(_, v) {
    return v.visitInExpression$1(this);
  },
  $asExpressionObserver: function() {
    return [U.InExpression];
  },
  $isInExpression: true,
  $isExpression: true
},

InObserver__updateSelf_closure: {"": "Closure;this_0,scope_1",
  call$1: function(_) {
    return this.this_0._invalidate$1(this.scope_1);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

Comprehension: {"": "Object;identifier,iterable", $isComprehension: true},

Method0: {"": "Object;mirror>,symbol",
  call$1: function(arg0) {
    return this.mirror.invoke$3(this.symbol, [arg0], null).reflectee;
  },
  "+call:1:0": 0,
  $isMethod0: true,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+Method": 0,

EvalException: {"": "Object;message>",
  toString$0: function(_) {
    return "EvalException: " + this.message;
  },
  "+toString:0:0": 0,
  $isEvalException: true,
  static: {
EvalException$: function(message) {
  return new K.EvalException(message);
}}

}}],
["polymer_expressions.expression", "package:polymer_expressions/expression.dart", , U, {
_listEquals: function(a, b) {
  var t1, i, t2;
  t1 = J.getInterceptor(a);
  if (t1.$eq(a, b))
    return true;
  if (a == null || b == null)
    return false;
  if (J.$eq(t1.get$length(a), b.length) !== true)
    return false;
  i = 0;
  while (true) {
    t2 = t1.get$length(a);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (!(i < t2))
      break;
    t2 = t1.$index(a, i);
    if (i >= b.length)
      throw H.ioore(b, i);
    if (J.$eq(t2, b[i]) !== true)
      return false;
    ++i;
  }
  return true;
},

_hashList: function(l) {
  l.toString;
  return U._JenkinsSmiHash_finish(H.IterableMixinWorkaround_fold(l, 0, new U._hashList_closure()));
},

_JenkinsSmiHash_combine: function(hash, value) {
  var t1 = J.$add$ns(hash, value);
  if (typeof t1 !== "number")
    throw H.iae(t1);
  hash = 536870911 & t1;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish: function(hash) {
  if (typeof hash !== "number")
    throw H.iae(hash);
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

AstFactory: {"": "Object;",
  invoke$3: function(e, m, a) {
    return new U.Invoke(e, m, a);
  },
  "+invoke:3:0": 0,
  "*invoke": [12],
  invoke$2: function(e, m) {
    return this.invoke$3(e, m, null);
  },
  "+invoke:2:0": 0
},

Expression: {"": "Object;", $isExpression: true},

EmptyExpression: {"": "Expression;",
  accept$1: function(_, v) {
    return v.visitEmptyExpression$1(this);
  },
  $isEmptyExpression: true
},

Literal: {"": "Expression;value>",
  accept$1: function(_, v) {
    return v.visitLiteral$1(this);
  },
  toString$0: function(_) {
    var t1 = this.value;
    return typeof t1 === "string" ? "\"" + H.S(t1) + "\"" : H.S(t1);
  },
  "+toString:0:0": 0,
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = H.checkSubtype(o, "$isLiteral", [H.getTypeArgumentByIndex(this, 0)], "$asLiteral");
    return t1 && J.$eq(J.get$value$x(o), this.value) === true;
  },
  get$hashCode: function(_) {
    return J.get$hashCode$(this.value);
  },
  $isLiteral: true
},

MapLiteral: {"": "Expression;entries>",
  accept$1: function(_, v) {
    return v.visitMapLiteral$1(this);
  },
  toString$0: function(_) {
    return "{" + H.S(this.entries) + "}";
  },
  "+toString:0:0": 0,
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor$x(o);
    return typeof o === "object" && o !== null && !!t1.$isMapLiteral && U._listEquals(t1.get$entries(o), this.entries);
  },
  get$hashCode: function(_) {
    return U._hashList(this.entries);
  },
  $isMapLiteral: true
},

MapLiteralEntry: {"": "Expression;key>,entryValue<",
  accept$1: function(_, v) {
    return v.visitMapLiteralEntry$1(this);
  },
  toString$0: function(_) {
    return H.S(this.key) + ": " + H.S(this.entryValue);
  },
  "+toString:0:0": 0,
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor$x(o);
    return typeof o === "object" && o !== null && !!t1.$isMapLiteralEntry && J.$eq(t1.get$key(o), this.key) === true && J.$eq(o.get$entryValue(), this.entryValue) === true;
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = J.get$hashCode$(this.key.value);
    t2 = J.get$hashCode$(this.entryValue);
    return U._JenkinsSmiHash_finish(U._JenkinsSmiHash_combine(U._JenkinsSmiHash_combine(0, t1), t2));
  },
  $isMapLiteralEntry: true
},

ParenthesizedExpression: {"": "Expression;child",
  accept$1: function(_, v) {
    return v.visitParenthesizedExpression$1(this);
  },
  toString$0: function(_) {
    return "(" + H.S(this.child) + ")";
  },
  "+toString:0:0": 0,
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor(o);
    return typeof o === "object" && o !== null && !!t1.$isParenthesizedExpression && J.$eq(o.child, this.child);
  },
  get$hashCode: function(_) {
    return J.get$hashCode$(this.child);
  },
  $isParenthesizedExpression: true
},

Identifier: {"": "Expression;value>",
  accept$1: function(_, v) {
    return v.visitIdentifier$1(this);
  },
  toString$0: function(_) {
    return this.value;
  },
  "+toString:0:0": 0,
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor$x(o);
    return typeof o === "object" && o !== null && !!t1.$isIdentifier && J.$eq(t1.get$value(o), this.value) === true;
  },
  get$hashCode: function(_) {
    return J.get$hashCode$(this.value);
  },
  $isIdentifier: true
},

UnaryOperator: {"": "Expression;operator>,child<",
  accept$1: function(_, v) {
    return v.visitUnaryOperator$1(this);
  },
  toString$0: function(_) {
    return H.S(this.operator) + " " + H.S(this.child);
  },
  "+toString:0:0": 0,
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor$x(o);
    return typeof o === "object" && o !== null && !!t1.$isUnaryOperator && J.$eq(t1.get$operator(o), this.operator) === true && J.$eq(o.get$child(), this.child) === true;
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = J.get$hashCode$(this.operator);
    t2 = J.get$hashCode$(this.child);
    return U._JenkinsSmiHash_finish(U._JenkinsSmiHash_combine(U._JenkinsSmiHash_combine(0, t1), t2));
  },
  $isUnaryOperator: true
},

BinaryOperator: {"": "Expression;operator>,left>,right>",
  accept$1: function(_, v) {
    return v.visitBinaryOperator$1(this);
  },
  toString$0: function(_) {
    return "(" + H.S(this.left) + " " + H.S(this.operator) + " " + H.S(this.right) + ")";
  },
  "+toString:0:0": 0,
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor$x(o);
    return typeof o === "object" && o !== null && !!t1.$isBinaryOperator && J.$eq(t1.get$operator(o), this.operator) === true && J.$eq(t1.get$left(o), this.left) === true && J.$eq(t1.get$right(o), this.right) === true;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = J.get$hashCode$(this.operator);
    t2 = J.get$hashCode$(this.left);
    t3 = J.get$hashCode$(this.right);
    return U._JenkinsSmiHash_finish(U._JenkinsSmiHash_combine(U._JenkinsSmiHash_combine(U._JenkinsSmiHash_combine(0, t1), t2), t3));
  },
  $isBinaryOperator: true
},

InExpression: {"": "Expression;left>,right>",
  accept$1: function(_, v) {
    return v.visitInExpression$1(this);
  },
  toString$0: function(_) {
    return "(" + H.S(this.left) + " in " + H.S(this.right) + ")";
  },
  "+toString:0:0": 0,
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor$x(o);
    return typeof o === "object" && o !== null && !!t1.$isInExpression && J.$eq(t1.get$left(o), this.left) === true && J.$eq(t1.get$right(o), this.right) === true;
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = this.left;
    t1 = t1.get$hashCode(t1);
    t2 = J.get$hashCode$(this.right);
    return U._JenkinsSmiHash_finish(U._JenkinsSmiHash_combine(U._JenkinsSmiHash_combine(0, t1), t2));
  },
  $isInExpression: true
},

Invoke: {"": "Expression;receiver<,method>,arguments<",
  accept$1: function(_, v) {
    return v.visitInvoke$1(this);
  },
  get$isGetter: function() {
    return this.arguments == null;
  },
  "+isGetter": 0,
  toString$0: function(_) {
    return H.S(this.receiver) + "." + H.S(this.method) + "(" + H.S(this.arguments) + ")";
  },
  "+toString:0:0": 0,
  $eq: function(_, o) {
    var t1;
    if (o == null)
      return false;
    t1 = J.getInterceptor$x(o);
    return typeof o === "object" && o !== null && !!t1.$isInvoke && J.$eq(o.get$receiver(), this.receiver) === true && J.$eq(t1.get$method(o), this.method) === true && U._listEquals(o.get$arguments(), this.arguments);
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = J.get$hashCode$(this.receiver);
    t2 = J.get$hashCode$(this.method);
    t3 = U._hashList(this.arguments);
    return U._JenkinsSmiHash_finish(U._JenkinsSmiHash_combine(U._JenkinsSmiHash_combine(U._JenkinsSmiHash_combine(0, t1), t2), t3));
  },
  $isInvoke: true
},

_hashList_closure: {"": "Closure;",
  call$2: function(h, item) {
    return U._JenkinsSmiHash_combine(h, J.get$hashCode$(item));
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
}}],
["polymer_expressions.parser", "package:polymer_expressions/parser.dart", , T, {
Parser: {"": "Object;_astFactory,_tokenizer,_tokens,_parser$_iterator,_token",
  parse$0: function() {
    var t1, t2;
    t1 = this._tokenizer.tokenize$0();
    this._tokens = t1;
    t2 = new H.ListIterator(t1, t1.length, 0, null);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]);
    this._parser$_iterator = t2;
    this._advance$0();
    return this._parseExpression$0();
  },
  _advance$2: function(kind, value) {
    var t1;
    if (kind != null) {
      t1 = J.get$kind$x(this._token);
      t1 = t1 == null ? kind != null : t1 !== kind;
    } else
      t1 = false;
    if (!t1)
      t1 = value != null && J.$eq(J.get$value$x(this._token), value) !== true;
    else
      t1 = true;
    if (t1)
      throw H.wrapException(Y.ParseException$("Expected " + value + ": " + H.S(this._token)));
    this._token = this._parser$_iterator.moveNext$0() ? this._parser$_iterator._current : null;
  },
  _advance$0: function() {
    return this._advance$2(null, null);
  },
  _parseExpression$0: function() {
    if (this._token == null) {
      this._astFactory.toString;
      return C.C_EmptyExpression;
    }
    var expr = this._parseUnary$0();
    return expr == null ? null : this._parsePrecedence$2(expr, 0);
  },
  _parsePrecedence$2: function(left, precedence) {
    var t1, t2, args, indexExpr;
    for (t1 = this._astFactory; t2 = this._token, t2 != null;)
      if (J.get$kind$x(t2) === 9)
        if (J.$eq(J.get$value$x(this._token), "(") === true) {
          args = this._parseArguments$0();
          t1.toString;
          left = new U.Invoke(left, null, args);
        } else if (J.$eq(J.get$value$x(this._token), "[") === true) {
          indexExpr = this._parseIndex$0();
          args = indexExpr == null ? [] : [indexExpr];
          t1.toString;
          left = new U.Invoke(left, "[]", args);
        } else
          break;
      else if (J.get$kind$x(this._token) === 3) {
        this._advance$0();
        left = this._makeInvoke$2(left, this._parseUnary$0());
      } else if (J.get$kind$x(this._token) === 10 && J.$eq(J.get$value$x(this._token), "in") === true)
        left = this._parseComprehension$1(left);
      else if (J.get$kind$x(this._token) === 8 && J.$ge$n(this._token.get$precedence(), precedence))
        left = this._parseBinary$1(left);
      else
        break;
    return left;
  },
  _makeInvoke$2: function(left, right) {
    var t1, t2;
    if (typeof right === "object" && right !== null && !!right.$isIdentifier) {
      t1 = right.get$value(right);
      this._astFactory.toString;
      return new U.Invoke(left, t1, null);
    } else {
      if (typeof right === "object" && right !== null && !!right.$isInvoke) {
        t1 = right.get$receiver();
        t2 = J.getInterceptor(t1);
        t2 = typeof t1 === "object" && t1 !== null && !!t2.$isIdentifier;
        t1 = t2;
      } else
        t1 = false;
      if (t1) {
        t1 = J.get$value$x(right.get$receiver());
        t2 = right.get$arguments();
        this._astFactory.toString;
        return new U.Invoke(left, t1, t2);
      } else
        throw H.wrapException(Y.ParseException$("expected identifier: " + H.S(right)));
    }
  },
  _parseBinary$1: function(left) {
    var op, right, t1;
    op = this._token;
    this._advance$0();
    right = this._parseUnary$0();
    while (true) {
      t1 = this._token;
      if (t1 != null)
        t1 = (J.get$kind$x(t1) === 8 || J.get$kind$x(this._token) === 3 || J.get$kind$x(this._token) === 9) && J.$gt$n(this._token.get$precedence(), op.get$precedence());
      else
        t1 = false;
      if (!t1)
        break;
      right = this._parsePrecedence$2(right, this._token.get$precedence());
    }
    t1 = J.get$value$x(op);
    this._astFactory.toString;
    return new U.BinaryOperator(t1, left, right);
  },
  _parseUnary$0: function() {
    var value, t1, t2, expr;
    if (J.get$kind$x(this._token) === 8) {
      value = J.get$value$x(this._token);
      t1 = J.getInterceptor(value);
      if (t1.$eq(value, "+") === true || t1.$eq(value, "-") === true) {
        this._advance$0();
        if (J.get$kind$x(this._token) === 6) {
          t1 = H.Primitives_parseInt(H.S(value) + H.S(J.get$value$x(this._token)), null, null);
          this._astFactory.toString;
          value = new U.Literal(t1);
          value.$builtinTypeInfo = [null];
          this._advance$0();
          return value;
        } else {
          t1 = this._astFactory;
          if (J.get$kind$x(this._token) === 7) {
            t2 = H.Primitives_parseDouble(H.S(value) + H.S(J.get$value$x(this._token)), null);
            t1.toString;
            value = new U.Literal(t2);
            value.$builtinTypeInfo = [null];
            this._advance$0();
            return value;
          } else {
            expr = this._parsePrecedence$2(this._parsePrimary$0(), 11);
            t1.toString;
            return new U.UnaryOperator(value, expr);
          }
        }
      } else if (t1.$eq(value, "!") === true) {
        this._advance$0();
        expr = this._parsePrecedence$2(this._parsePrimary$0(), 11);
        this._astFactory.toString;
        return new U.UnaryOperator(value, expr);
      }
    }
    return this._parsePrimary$0();
  },
  _parsePrimary$0: function() {
    var keyword, t1;
    switch (J.get$kind$x(this._token)) {
      case 10:
        keyword = J.get$value$x(this._token);
        t1 = J.getInterceptor(keyword);
        if (t1.$eq(keyword, "this") === true) {
          this._advance$0();
          this._astFactory.toString;
          return new U.Identifier("this");
        } else if (t1.$eq(keyword, "in") === true)
          return;
        throw H.wrapException(new P.ArgumentError("unrecognized keyword: " + H.S(keyword)));
      case 2:
        return this._parseInvokeOrIdentifier$0();
      case 1:
        return this._parseString$0();
      case 6:
        return this._parseInteger$0();
      case 7:
        return this._parseDecimal$0();
      case 9:
        if (J.$eq(J.get$value$x(this._token), "(") === true)
          return this._parseParenthesized$0();
        else if (J.$eq(J.get$value$x(this._token), "{") === true)
          return this._parseMapLiteral$0();
        return;
      default:
        return;
    }
  },
  _parseMapLiteral$0: function() {
    var entries, t1, t2, value;
    entries = [];
    t1 = this._astFactory;
    do {
      this._advance$0();
      if (J.get$kind$x(this._token) === 9 && J.$eq(J.get$value$x(this._token), "}") === true)
        break;
      t2 = J.get$value$x(this._token);
      t1.toString;
      value = new U.Literal(t2);
      value.$builtinTypeInfo = [null];
      this._advance$0();
      this._advance$2(5, ":");
      entries.push(new U.MapLiteralEntry(value, this._parseExpression$0()));
      t2 = this._token;
    } while (t2 != null && J.$eq(J.get$value$x(t2), ",") === true);
    this._advance$2(9, "}");
    return new U.MapLiteral(entries);
  },
  _parseComprehension$1: function(left) {
    var t1, right;
    t1 = J.getInterceptor(left);
    if (typeof left !== "object" || left === null || !t1.$isIdentifier)
      throw H.wrapException(Y.ParseException$("in... statements must start with an identifier"));
    this._advance$0();
    right = this._parseExpression$0();
    this._astFactory.toString;
    return new U.InExpression(left, right);
  },
  _parseInvokeOrIdentifier$0: function() {
    var t1, identifier, args;
    if (J.$eq(J.get$value$x(this._token), "true") === true) {
      this._advance$0();
      this._astFactory.toString;
      t1 = new U.Literal(true);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    }
    if (J.$eq(J.get$value$x(this._token), "false") === true) {
      this._advance$0();
      this._astFactory.toString;
      t1 = new U.Literal(false);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    }
    if (J.$eq(J.get$value$x(this._token), "null") === true) {
      this._advance$0();
      this._astFactory.toString;
      t1 = new U.Literal(null);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    }
    identifier = this._parseIdentifier$0();
    args = this._parseArguments$0();
    if (args == null)
      return identifier;
    else {
      this._astFactory.toString;
      return new U.Invoke(identifier, null, args);
    }
  },
  _parseIdentifier$0: function() {
    if (J.get$kind$x(this._token) !== 2)
      throw H.wrapException(Y.ParseException$("expected identifier: " + H.S(this._token) + ".value"));
    var value = J.get$value$x(this._token);
    this._advance$0();
    this._astFactory.toString;
    return new U.Identifier(value);
  },
  _parseArguments$0: function() {
    var t1, args;
    t1 = this._token;
    if (t1 != null && J.get$kind$x(t1) === 9 && J.$eq(J.get$value$x(this._token), "(") === true) {
      args = [];
      do {
        this._advance$0();
        if (J.get$kind$x(this._token) === 9 && J.$eq(J.get$value$x(this._token), ")") === true)
          break;
        args.push(this._parseExpression$0());
        t1 = this._token;
      } while (t1 != null && J.$eq(J.get$value$x(t1), ",") === true);
      this._advance$2(9, ")");
      return args;
    }
    return;
  },
  _parseIndex$0: function() {
    var t1, expr;
    t1 = this._token;
    if (t1 != null && J.get$kind$x(t1) === 9 && J.$eq(J.get$value$x(this._token), "[") === true) {
      this._advance$0();
      expr = this._parseExpression$0();
      this._advance$2(9, "]");
      return expr;
    }
    return;
  },
  _parseParenthesized$0: function() {
    this._advance$0();
    var expr = this._parseExpression$0();
    this._advance$2(9, ")");
    this._astFactory.toString;
    return new U.ParenthesizedExpression(expr);
  },
  _parseString$0: function() {
    var t1, value;
    t1 = J.get$value$x(this._token);
    this._astFactory.toString;
    value = new U.Literal(t1);
    H.setRuntimeTypeInfo(value, [null]);
    this._advance$0();
    return value;
  },
  _parseInteger$1: function(prefix) {
    var t1, value;
    t1 = H.Primitives_parseInt(H.S(prefix) + H.S(J.get$value$x(this._token)), null, null);
    this._astFactory.toString;
    value = new U.Literal(t1);
    H.setRuntimeTypeInfo(value, [null]);
    this._advance$0();
    return value;
  },
  _parseInteger$0: function() {
    return this._parseInteger$1("");
  },
  _parseDecimal$1: function(prefix) {
    var t1, value;
    t1 = H.Primitives_parseDouble(H.S(prefix) + H.S(J.get$value$x(this._token)), null);
    this._astFactory.toString;
    value = new U.Literal(t1);
    H.setRuntimeTypeInfo(value, [null]);
    this._advance$0();
    return value;
  },
  _parseDecimal$0: function() {
    return this._parseDecimal$1("");
  },
  static: {
Parser$: function(input, astFactory) {
  var t1, t2, t3;
  t1 = [];
  H.setRuntimeTypeInfo(t1, [Y.Token]);
  t2 = P.StringBuffer$("");
  t3 = new U.AstFactory();
  return new T.Parser(t3, new Y.Tokenizer(t1, t2, new P.RuneIterator(input, 0, 0, null), null), null, null, null);
}}

}}],
["polymer_expressions.src.globals", "package:polymer_expressions/src/globals.dart", , K, {
enumerate: function(iterable) {
  var t1 = new K.EnumerateIterable(iterable);
  H.setRuntimeTypeInfo(t1, [null]);
  return t1;
},

IndexedValue: {"": "Object;index>-,value>-", $isIndexedValue: true,
  "@": function() {
    return [C.C_Reflectable];
  },
  "<>": [4],
  static: {
IndexedValue$: function(index, value, $V) {
  var t1 = new K.IndexedValue(index, value);
  H.setRuntimeTypeInfo(t1, [$V]);
  return t1;
  "79,80,81,82,83";
},

"+new IndexedValue:2:0": 1}

},

"+IndexedValue": [0],

EnumerateIterable: {"": "IterableBase;_globals$_iterable",
  get$iterator: function(_) {
    var t1 = new K.EnumerateIterator(J.get$iterator$ax(this._globals$_iterable), 0, null);
    t1.$builtinTypeInfo = this.$builtinTypeInfo;
    return t1;
  },
  get$length: function(_) {
    return J.get$length$asx(this._globals$_iterable);
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return J.get$isEmpty$asx(this._globals$_iterable);
  },
  "+isEmpty": 0,
  get$first: function(_) {
    var t1 = new K.IndexedValue(0, J.get$first$ax(this._globals$_iterable));
    t1.$builtinTypeInfo = this.$builtinTypeInfo;
    return t1;
  },
  get$last: function(_) {
    var t1, t2;
    t1 = this._globals$_iterable;
    t2 = J.getInterceptor$asx(t1);
    t1 = new K.IndexedValue(J.$sub$n(t2.get$length(t1), 1), t2.get$last(t1));
    t1.$builtinTypeInfo = this.$builtinTypeInfo;
    return t1;
  },
  elementAt$1: function(_, index) {
    var t1 = new K.IndexedValue(index, J.elementAt$1$ax(this._globals$_iterable, index));
    t1.$builtinTypeInfo = this.$builtinTypeInfo;
    return t1;
  },
  $asIterableBase: function($V) {
    return [[K.IndexedValue, $V]];
  },
  $asIterable: function($V) {
    return [[K.IndexedValue, $V]];
  }
},

EnumerateIterator: {"": "Iterator;_globals$_iterator,_globals$_index,_globals$_current",
  get$current: function() {
    return this._globals$_current;
  },
  "+current": 0,
  moveNext$0: function() {
    var t1, t2;
    t1 = this._globals$_iterator;
    if (t1.moveNext$0()) {
      t2 = this._globals$_index;
      this._globals$_index = t2 + 1;
      t1 = new K.IndexedValue(t2, t1.get$current());
      H.setRuntimeTypeInfo(t1, [null]);
      this._globals$_current = t1;
      return true;
    }
    this._globals$_current = null;
    return false;
  },
  $asIterator: function($V) {
    return [[K.IndexedValue, $V]];
  }
}}],
["polymer_expressions.src.mirrors", "package:polymer_expressions/src/mirrors.dart", , Z, {
getMemberMirror: function(classMirror, $name) {
  var superclass, mirror, t1;
  if (classMirror.get$declarations().containsKey$1($name) === true)
    return J.$index$asx(classMirror.get$declarations(), $name);
  superclass = classMirror.get$superclass();
  if (superclass != null && J.$eq(superclass.get$qualifiedName(), C.Symbol_46c) !== true) {
    mirror = Z.getMemberMirror(classMirror.get$superclass(), $name);
    if (mirror != null)
      return mirror;
  }
  for (t1 = J.get$iterator$ax(classMirror.get$superinterfaces()); t1.moveNext$0();) {
    mirror = Z.getMemberMirror(t1.get$current(), $name);
    if (mirror != null)
      return mirror;
  }
  return;
}}],
["polymer_expressions.tokenizer", "package:polymer_expressions/tokenizer.dart", , Y, {
isIdentifierOrKeywordStart: function(next) {
  var t1;
  if (typeof next !== "number")
    throw H.iae(next);
  if (!(97 <= next && next <= 122))
    t1 = 65 <= next && next <= 90 || next === 95 || next === 36 || next > 127;
  else
    t1 = true;
  return t1;
},

isIdentifier: function(next) {
  var t1;
  if (typeof next !== "number")
    throw H.iae(next);
  if (!(97 <= next && next <= 122))
    if (!(65 <= next && next <= 90))
      t1 = 48 <= next && next <= 57 || next === 95 || next === 36 || next > 127;
    else
      t1 = true;
  else
    t1 = true;
  return t1;
},

escape: function(c) {
  switch (c) {
    case 102:
      return 12;
    case 110:
      return 10;
    case 114:
      return 13;
    case 116:
      return 9;
    case 118:
      return 11;
    default:
      return c;
  }
},

Token: {"": "Object;kind>,value>,precedence<",
  toString$0: function(_) {
    return "(" + this.kind + ", '" + this.value + "')";
  },
  "+toString:0:0": 0,
  $isToken: true
},

Tokenizer: {"": "Object;_tokenizer$_tokens,_sb,_tokenizer$_iterator,_tokenizer$_next",
  tokenize$0: function() {
    var t1, t2, t3, charCodes, value;
    t1 = this._tokenizer$_iterator;
    this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
    for (t2 = this._tokenizer$_tokens; t3 = this._tokenizer$_next, t3 != null;)
      if (t3 === 32 || t3 === 9 || t3 === 160)
        this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
      else if (t3 === 34 || t3 === 39)
        this.tokenizeString$0();
      else if (Y.isIdentifierOrKeywordStart(t3))
        this.tokenizeIdentifierOrKeyword$0();
      else {
        t3 = this._tokenizer$_next;
        if (typeof t3 !== "number")
          throw H.iae(t3);
        if (48 <= t3 && t3 <= 57)
          this.tokenizeNumber$0();
        else if (t3 === 46) {
          this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
          t3 = this._tokenizer$_next;
          if (typeof t3 !== "number")
            throw H.iae(t3);
          if (48 <= t3 && t3 <= 57)
            this.tokenizeFraction$0();
          else
            t2.push(new Y.Token(3, ".", 11));
        } else if (t3 === 44) {
          this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
          t2.push(new Y.Token(4, ",", 0));
        } else if (t3 === 58) {
          this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
          t2.push(new Y.Token(5, ":", 0));
        } else if (C.JSArray_methods.contains$1(C.List_UiL, t3))
          this.tokenizeOperator$0();
        else if (C.JSArray_methods.contains$1(C.List_ww8, this._tokenizer$_next)) {
          charCodes = P.List_List$filled(1, this._tokenizer$_next, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          value = H.Primitives_stringFromCharCodes(charCodes);
          t2.push(new Y.Token(9, value, C.Map_FKtZ4.$index(C.Map_FKtZ4, value)));
          this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
        } else
          this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
      }
    return t2;
  },
  tokenizeString$0: function() {
    var quoteChar, t1, t2, t3, charCodes;
    quoteChar = this._tokenizer$_next;
    t1 = this._tokenizer$_iterator;
    this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
    for (t2 = this._sb; t3 = this._tokenizer$_next, t3 == null ? quoteChar != null : t3 !== quoteChar;) {
      if (t3 == null)
        throw H.wrapException(Y.ParseException$("unterminated string"));
      if (t3 === 92) {
        this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
        t3 = this._tokenizer$_next;
        if (t3 == null)
          throw H.wrapException(Y.ParseException$("unterminated string"));
        charCodes = P.List_List$filled(1, Y.escape(t3), J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t3 = H.Primitives_stringFromCharCodes(charCodes);
        t2._contents = t2._contents + t3;
      } else {
        charCodes = P.List_List$filled(1, t3, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t3 = H.Primitives_stringFromCharCodes(charCodes);
        t2._contents = t2._contents + t3;
      }
      this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
    }
    this._tokenizer$_tokens.push(new Y.Token(1, t2._contents, 0));
    t2._contents = "";
    this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
  },
  tokenizeIdentifierOrKeyword$0: function() {
    var t1, t2, t3, charCodes, value;
    t1 = this._tokenizer$_iterator;
    t2 = this._sb;
    while (true) {
      t3 = this._tokenizer$_next;
      if (!(t3 != null && Y.isIdentifier(t3)))
        break;
      charCodes = P.List_List$filled(1, this._tokenizer$_next, J.JSInt);
      charCodes.$builtinTypeInfo = [J.JSInt];
      t3 = H.Primitives_stringFromCharCodes(charCodes);
      t2._contents = t2._contents + t3;
      this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
    }
    value = t2._contents;
    t1 = this._tokenizer$_tokens;
    if (C.JSArray_methods.contains$1(C.List_in_this, value))
      t1.push(new Y.Token(10, value, 0));
    else
      t1.push(new Y.Token(2, value, 0));
    t2._contents = "";
  },
  tokenizeNumber$0: function() {
    var t1, t2, t3, t4, charCodes;
    t1 = this._tokenizer$_iterator;
    t2 = this._sb;
    while (true) {
      t3 = this._tokenizer$_next;
      if (t3 != null) {
        if (typeof t3 !== "number")
          throw H.iae(t3);
        t4 = 48 <= t3 && t3 <= 57;
      } else
        t4 = false;
      if (!t4)
        break;
      charCodes = P.List_List$filled(1, t3, J.JSInt);
      charCodes.$builtinTypeInfo = [J.JSInt];
      t3 = H.Primitives_stringFromCharCodes(charCodes);
      t2._contents = t2._contents + t3;
      this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
    }
    if (t3 === 46) {
      this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
      t1 = this._tokenizer$_next;
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (48 <= t1 && t1 <= 57)
        this.tokenizeFraction$0();
      else
        this._tokenizer$_tokens.push(new Y.Token(3, ".", 11));
    } else {
      this._tokenizer$_tokens.push(new Y.Token(6, t2._contents, 0));
      t2._contents = "";
    }
  },
  tokenizeFraction$0: function() {
    var t1, t2, t3, t4, charCodes;
    t1 = this._sb;
    t1.write$1(P.String_String$fromCharCode(46));
    t2 = this._tokenizer$_iterator;
    while (true) {
      t3 = this._tokenizer$_next;
      if (t3 != null) {
        if (typeof t3 !== "number")
          throw H.iae(t3);
        t4 = 48 <= t3 && t3 <= 57;
      } else
        t4 = false;
      if (!t4)
        break;
      charCodes = P.List_List$filled(1, t3, J.JSInt);
      charCodes.$builtinTypeInfo = [J.JSInt];
      t3 = H.Primitives_stringFromCharCodes(charCodes);
      t1._contents = t1._contents + t3;
      this._tokenizer$_next = t2.moveNext$0() ? t2._currentCodePoint : null;
    }
    this._tokenizer$_tokens.push(new Y.Token(7, t1._contents, 0));
    t1._contents = "";
  },
  tokenizeOperator$0: function() {
    var startChar, t1, t2, op2, op, charCodes;
    startChar = this._tokenizer$_next;
    t1 = this._tokenizer$_iterator;
    this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
    if (C.JSArray_methods.contains$1(C.List_UiL, this._tokenizer$_next)) {
      t2 = this._tokenizer$_next;
      op2 = H.Primitives_stringFromCharCodes([startChar, t2]);
      if (C.JSArray_methods.contains$1(C.List_Ynd, op2)) {
        this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
        op = op2;
      } else {
        charCodes = P.List_List$filled(1, startChar, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        op = H.Primitives_stringFromCharCodes(charCodes);
      }
    } else {
      charCodes = P.List_List$filled(1, startChar, J.JSInt);
      charCodes.$builtinTypeInfo = [J.JSInt];
      op = H.Primitives_stringFromCharCodes(charCodes);
    }
    this._tokenizer$_tokens.push(new Y.Token(8, op, C.Map_FKtZ4.$index(C.Map_FKtZ4, op)));
  }
},

ParseException: {"": "Object;message>",
  toString$0: function(_) {
    return "ParseException: " + this.message;
  },
  "+toString:0:0": 0,
  static: {
ParseException$: function(message) {
  return new Y.ParseException(message);
}}

}}],
["polymer_expressions.visitor", "package:polymer_expressions/visitor.dart", , S, {
Visitor0: {"": "Object;",
  visit$1: function(s) {
    return J.accept$1$x(s, this);
  },
  get$visit: function() {
    return new H.BoundClosure$1(this, S.Visitor0.prototype.visit$1, null, "visit$1");
  }
},

RecursiveVisitor: {"": "Visitor0;",
  visitEmptyExpression$1: function(e) {
    return this.visitExpression$1(e);
  },
  visitParenthesizedExpression$1: function(e) {
    e.accept$1(e, this);
    this.visitExpression$1(e);
  },
  visitInvoke$1: function(i) {
    var t1, t2;
    J.accept$1$x(i.get$receiver(), this);
    t1 = i.get$arguments();
    if (t1 != null)
      for (t1.toString, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();)
        J.accept$1$x(t2._current, this);
    this.visitExpression$1(i);
  },
  visitLiteral$1: function(l) {
    return this.visitExpression$1(l);
  },
  visitMapLiteral$1: function(l) {
    var t1, t2;
    for (t1 = l.get$entries(l), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();)
      J.accept$1$x(t2._current, this);
    this.visitExpression$1(l);
  },
  visitMapLiteralEntry$1: function(e) {
    J.accept$1$x(e.get$key(e), this);
    J.accept$1$x(e.get$entryValue(), this);
    this.visitExpression$1(e);
  },
  visitIdentifier$1: function(i) {
    return this.visitExpression$1(i);
  },
  visitBinaryOperator$1: function(o) {
    J.accept$1$x(o.get$left(o), this);
    J.accept$1$x(o.get$right(o), this);
    this.visitExpression$1(o);
  },
  visitUnaryOperator$1: function(o) {
    J.accept$1$x(o.get$child(), this);
    this.visitExpression$1(o);
  },
  visitInExpression$1: function(c) {
    J.accept$1$x(c.get$left(c), this);
    J.accept$1$x(c.get$right(c), this);
    this.visitExpression$1(c);
  }
}}],
["results", "results.dart", , L, {
Result: {"": ["AnchorElement_Polymer_ChangeNotifier;_results$_item%-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$item: function(receiver) {
    return receiver._results$_item;
    "12,98";
  },
  "+item": 1,
  set$item: function(receiver, newItem) {
    var oldItem, oldObservables;
    oldItem = receiver._results$_item;
    oldObservables = [this.get$descriptiveName(receiver), this.get$descriptiveType(receiver), this.get$outerLibrary(receiver)];
    receiver._results$_item = newItem;
    this.notifyPropertyChange$3(receiver, C.Symbol_item, oldItem, newItem);
    this.notifyPropertyChange$3(receiver, C.Symbol_descriptiveName, C.JSArray_methods.get$first(oldObservables), this.get$descriptiveName(receiver));
    this.notifyPropertyChange$3(receiver, C.Symbol_descriptiveType, oldObservables[1], this.get$descriptiveName(receiver));
    this.notifyPropertyChange$3(receiver, C.Symbol_outerLibrary, C.JSArray_methods.get$last(oldObservables), this.get$descriptiveName(receiver));
    "12,132,12";
  },
  "+item=": 1,
  get$applyAuthorStyles: function(receiver) {
    return true;
    "12";
  },
  "+applyAuthorStyles": 1,
  get$membertype: function(receiver) {
    var t1 = receiver._results$_item;
    return t1 == null ? "none" : J.get$type$x(t1);
    "7,101";
  },
  "+membertype": 1,
  get$qualifiedname: function(receiver) {
    var t1 = receiver._results$_item;
    return t1 == null ? "none" : t1.get$element();
    "7,101";
  },
  "+qualifiedname": 1,
  get$descriptiveName: function(receiver) {
    var t1, $name, t2, lib;
    t1 = receiver._results$_item;
    if ((t1 == null ? "none" : t1.get$element()) == null)
      return "";
    t1 = receiver._results$_item;
    $name = J.split$1$s(t1 == null ? "none" : t1.get$element(), ".");
    t1 = receiver._results$_item;
    if (J.$eq(t1 == null ? "none" : J.get$type$x(t1), "library") === true) {
      t1 = $.get$pageIndex();
      t2 = receiver._results$_item;
      lib = t1.$index(t1, t2 == null ? "none" : t2.get$element());
      if (lib == null)
        return "";
      return J.get$decoratedName$x(lib);
    } else {
      t1 = receiver._results$_item;
      if (J.$eq(t1 == null ? "none" : J.get$type$x(t1), "constructor") === true) {
        if (J.$eq(C.JSArray_methods.get$last($name), "") === true) {
          t1 = $name.length;
          t2 = t1 - 2;
          if (t2 < 0)
            throw H.ioore($name, t2);
          return $name[t2];
        }
        t1 = $name.length;
        t2 = t1 - 2;
        if (t2 < 0)
          throw H.ioore($name, t2);
        return H.S($name[t2]) + "." + H.S(C.JSArray_methods.get$last($name));
      }
    }
    return C.JSArray_methods.get$last($name);
    "7";
  },
  "+descriptiveName": 1,
  get$descriptiveType: function(receiver) {
    var t1, loc, t2, t3, t4, t5;
    t1 = receiver._results$_item;
    if (t1 == null)
      return "";
    loc = new Y.DocsLocation(null, null, null, null, null);
    loc._extractPieces$1(t1.get$element());
    t1 = receiver._results$_item;
    if (J.$eq(t1 == null ? "none" : J.get$type$x(t1), "class") === true)
      return "class";
    t1 = receiver._results$_item;
    if (J.$eq(t1 == null ? "none" : J.get$type$x(t1), "library") === true) {
      t1 = loc.packageName;
      return t1 == null ? "library" : "library in " + H.S(t1);
    }
    t1 = $.get$index();
    t2 = loc.get$componentNames();
    if (0 >= t2.length)
      throw H.ioore(t2, 0);
    t2.pop();
    t2 = Y.DocsLocation$fromList(t2);
    t3 = t2.get$packagePlus();
    t4 = t2.libraryName;
    if (t4 == null)
      t4 = "";
    t5 = t2.memberName;
    t5 = t5 == null ? "" : "." + H.S(t5);
    t2 = t2.subMemberName;
    if (J.$eq(J.$index$asx(t1, C.JSArray_methods.join$1([t3, t4, t5, t2 == null ? "" : "." + H.S(t2)], "")), "class") === true) {
      t1 = receiver._results$_item;
      return H.S(t1 == null ? "none" : J.get$type$x(t1)) + " in " + H.S(loc.get$parentName());
    }
    t1 = receiver._results$_item;
    return t1 == null ? "none" : J.get$type$x(t1);
    "7";
  },
  "+descriptiveType": 1,
  get$outerLibrary: function(receiver) {
    var t1, loc, t2, libraryName, library, packageName;
    t1 = receiver._results$_item;
    if (J.$eq(t1 == null ? "none" : J.get$type$x(t1), "library") === true)
      return "";
    t1 = receiver._results$_item;
    t1 = t1 == null ? "none" : t1.get$element();
    loc = new Y.DocsLocation(null, null, null, null, null);
    loc._extractPieces$1(t1);
    t1 = H.S(loc.get$packagePlus());
    t2 = loc.libraryName;
    libraryName = t1 + H.S(t2 == null ? "" : t2);
    t1 = $.get$pageIndex();
    library = t1.$index(t1, libraryName);
    if (library == null)
      return "";
    packageName = loc.packageName;
    t1 = J.getInterceptor$x(library);
    if (packageName == null)
      return "library " + H.S(t1.get$decoratedName(library));
    else
      return "library " + H.S(t1.get$decoratedName(library)) + " in " + H.S(packageName);
    "7";
  },
  "+outerLibrary": 1,
  "@": function() {
    return [C.CustomTag_o0y];
  },
  static: {
Result$created: function(receiver) {
  var t1, t2, t3, t4, t5;
  t1 = $.get$Polymer__polymerSyntax();
  t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t3 = J.JSString;
  t4 = W.Element;
  t5 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null);
  H.setRuntimeTypeInfo(t5, [t3, t4]);
  receiver.syntax = t1;
  receiver._shadowRoots = t2;
  receiver.$$ = t5;
  C.Result_methods.Element$created$0(receiver);
  return receiver;
  "84";
},

"+new Result$created:0:0": 1}

},

"+Result": [200],

AnchorElement_Polymer: {"": ["AnchorElement+Polymer;$$=-", function() {
    return [C.C_Reflectable];
  }], $isPolymer: true, $isNodeBindExtension: true, $isObservable: true, $isElement: true, $isInterceptor: true, $isNode: true, $isEventTarget: true},

AnchorElement_Polymer_ChangeNotifier: {"": "AnchorElement_Polymer+ChangeNotifier;", $isObservable: true}}],
["search", "search.dart", , B, {
Search: {"": ["DartdocElement_ChangeNotifier0;results%-,_search$__$isFocused%-,_searchQuery%-,currentIndex%-,_changes,_records,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$isFocused: function(receiver) {
    return receiver._search$__$isFocused;
    "18,13,101";
  },
  "+isFocused": 1,
  set$isFocused: function(receiver, value) {
    receiver._search$__$isFocused = this.notifyPropertyChange$3(receiver, C.Symbol_isFocused, receiver._search$__$isFocused, value);
    "12,82,18,13";
  },
  "+isFocused=": 1,
  get$searchQuery: function(receiver) {
    return receiver._searchQuery;
    "12,98";
  },
  "+searchQuery": 1,
  set$searchQuery: function(receiver, newQuery) {
    receiver._searchQuery = newQuery;
    this.updateResults$0(receiver);
    "12,201,12,98";
  },
  "+searchQuery=": 1,
  get$hasNoResults: function(receiver) {
    return J.get$isEmpty$asx(receiver.results);
    "18,101";
  },
  "+hasNoResults": 1,
  get$dropdownOpen: function(receiver) {
    return J.get$isEmpty$asx(receiver._searchQuery) !== true && receiver._search$__$isFocused === true ? "open" : "";
    "7,101";
  },
  "+dropdownOpen": 1,
  updateResults$0: function(receiver) {
    var t1, t2, t3;
    receiver.currentIndex = -1;
    J.clear$0$ax(receiver.results);
    t1 = receiver.results;
    t2 = receiver._searchQuery;
    t3 = $.get$viewer()._dartdoc_viewer$__$isDesktop === true ? 10 : 5;
    J.addAll$1$ax(t1, B.lookupSearchResults(t2, t3, this.get$locationValidInContext(receiver)));
    this.notifyPropertyChange$3(receiver, C.Symbol_results, null, receiver.results);
    this.notifyPropertyChange$3(receiver, C.Symbol_hasNoResults, null, J.get$isEmpty$asx(receiver.results));
    this.notifyPropertyChange$3(receiver, C.Symbol_dropdownOpen, null, J.get$isEmpty$asx(receiver._searchQuery) !== true && receiver._search$__$isFocused === true ? "open" : "");
    "12";
  },
  "+updateResults:0:0": 1,
  locationValidInContext$1: function(receiver, $location) {
    var currentContext, t1;
    currentContext = J.get$home$x($.get$viewer()._currentPage);
    $.get$viewer()._showPkgLibraries;
    t1 = J.getInterceptor(currentContext);
    if (t1.$eq(currentContext, $.get$viewer()._dartdoc_viewer$__$homePage) === true)
      if ($.get$viewer()._showPkgLibraries === true)
        return true;
      else
        return $location.get$packageName() == null;
    else
      return J.$eq($location.get$packageName(), t1.get$name(currentContext));
    "18,43,120";
  },
  "+locationValidInContext:1:0": 1,
  get$locationValidInContext: function(_receiver) {
    return new W.BoundClosure$i1(this, B.Search.prototype.locationValidInContext$1, _receiver, "locationValidInContext$1");
  },
  onBlurCallback$1: function(receiver, _) {
    receiver._search$__$isFocused = this.notifyPropertyChange$3(receiver, C.Symbol_isFocused, receiver._search$__$isFocused, false);
    this.notifyPropertyChange$3(receiver, C.Symbol_dropdownOpen, "open", "");
    "12,134,12";
  },
  "+onBlurCallback:1:0": 1,
  get$onBlurCallback: function(_receiver) {
    return new W.BoundClosure$i1(this, B.Search.prototype.onBlurCallback$1, _receiver, "onBlurCallback$1");
  },
  onFocusCallback$1: function(receiver, _) {
    receiver._search$__$isFocused = this.notifyPropertyChange$3(receiver, C.Symbol_isFocused, receiver._search$__$isFocused, true);
    "12,134,12";
  },
  "+onFocusCallback:1:0": 1,
  get$onFocusCallback: function(_receiver) {
    return new W.BoundClosure$i1(this, B.Search.prototype.onFocusCallback$1, _receiver, "onFocusCallback$1");
  },
  onSubmitCallback$3: function(receiver, $event, detail, target) {
    var t1, t2, refId, parentRefId, encoded, t3;
    if (J.get$isEmpty$asx(receiver.results) !== true) {
      if (target != null) {
        t1 = J.getInterceptor$x(target);
        t2 = t1.get$dataset(target);
        refId = t2._attributes._element.getAttribute("data-" + t2._toHyphenedName$1("ref-id"));
        t1 = J.get$dataset$x(t1.get$parent(target));
        parentRefId = t1._attributes._element.getAttribute("data-" + t1._toHyphenedName$1("ref-id"));
        if (refId == null)
          refId = parentRefId;
      } else
        refId = null;
      if (refId == null || refId.length === 0)
        refId = J.get$first$ax(receiver.results).get$element();
      t1 = new Y.DocsLocation(null, null, null, null, null);
      t1._extractPieces$1(refId);
      new E.LinkableType(null).loc = t1;
      encoded = P.Uri__uriEncode(C.List_CVk, t1.get$withAnchor(), false);
      $.get$viewer().handleLink$1(encoded);
      t1 = window.history;
      t2 = "#" + encoded;
      t3 = $.get$viewer()._currentPage;
      t3 = t3 == null ? "" : J.get$decoratedName$x(t3);
      t1.pushState(t2, t3, "#" + encoded);
      receiver._searchQuery = "";
      this.updateResults$0(receiver);
      J.clear$0$ax(receiver.results);
      J.searchSubmitted$0$x($.get$dartdocMain());
    }
    "12,104,12,105,12,106,12";
  },
  "+onSubmitCallback:3:0": 1,
  enteredView$0: function(receiver) {
    var t1, t2;
    E.DartdocElement.prototype.enteredView$0.call(this, receiver);
    t1 = receiver._xtag;
    t1 = C.EventStreamProvider_focus.forTarget$2$useCapture(t1 != null ? t1 : receiver, true);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(this.get$onFocusCallback(receiver)), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
    t2._tryResume$0();
    t1 = receiver._xtag;
    t1 = C.EventStreamProvider_blur.forTarget$2$useCapture(t1 != null ? t1 : receiver, true);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(this.get$onBlurCallback(receiver)), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
    t2._tryResume$0();
    t2 = C.EventStreamProvider_keydown.forElement$1(receiver);
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(this.get$handleUpDown(receiver)), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(t2, 0)]);
    t1._tryResume$0();
    t1 = C.EventStreamProvider_keydown.forTarget$1(window);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(this.get$shortcutHandler(receiver)), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
    t2._tryResume$0();
    "12";
  },
  "+enteredView:0:0": 1,
  handleUpDown$1: function(receiver, e) {
    var t1, t2;
    t1 = J.getInterceptor$x(e);
    if (t1.get$keyCode(e) === 38) {
      if (J.$gt$n(receiver.currentIndex, 0)) {
        t2 = J.$sub$n(receiver.currentIndex, 1);
        receiver.currentIndex = t2;
        (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#search" + H.S(t2)).parentElement.focus();
      } else if (J.$eq(receiver.currentIndex, 0) === true)
        (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#q").focus();
      t1.preventDefault$0(e);
    } else if (t1.get$keyCode(e) === 40) {
      if (J.$lt$n(receiver.currentIndex, J.$sub$n(J.get$length$asx(receiver.results), 1))) {
        t2 = J.$add$ns(receiver.currentIndex, 1);
        receiver.currentIndex = t2;
        (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#search" + H.S(t2)).parentElement.focus();
      }
      t1.preventDefault$0(e);
    } else if (t1.get$keyCode(e) === 13) {
      this.onSubmitCallback$3(receiver, e, null, (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#search" + H.S(receiver.currentIndex)));
      t1.preventDefault$0(e);
    }
    "12,172,202";
  },
  "+handleUpDown:1:0": 1,
  get$handleUpDown: function(_receiver) {
    return new W.BoundClosure$i1(this, B.Search.prototype.handleUpDown$1, _receiver, "handleUpDown$1");
  },
  shortcutHandler$1: function(receiver, $event) {
    var t1 = J.getInterceptor$x($event);
    if (t1.get$keyCode($event) === 51 && t1.get$ctrlKey($event) === true) {
      (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#q").focus();
      t1.preventDefault$0($event);
    } else if (receiver._search$__$isFocused !== true && t1.get$keyCode($event) === 83) {
      (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#q").focus();
      t1.preventDefault$0($event);
    } else if (t1.get$keyCode($event) === 27) {
      receiver._searchQuery = "";
      this.updateResults$0(receiver);
      J.clear$0$ax(receiver.results);
      t1.preventDefault$0($event);
    }
    "12,104,202";
  },
  "+shortcutHandler:1:0": 1,
  get$shortcutHandler: function(_receiver) {
    return new W.BoundClosure$i1(this, B.Search.prototype.shortcutHandler$1, _receiver, "shortcutHandler$1");
  },
  get$searchBox: function(receiver) {
    return (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#q");
    "12";
  },
  "+searchBox": 1,
  "@": function() {
    return [C.CustomTag_CbU];
  },
  static: {
Search$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver.results = [];
  receiver._search$__$isFocused = false;
  receiver._searchQuery = "";
  receiver.currentIndex = -1;
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.Search_methods.Element$created$0(receiver);
  C.Search_methods.PolymerElement$created$0(receiver);
  return receiver;
  "85";
},

"+new Search$created:0:0": 1}

},

"+Search": [203],

DartdocElement_ChangeNotifier0: {"": "DartdocElement+ChangeNotifier;", $isObservable: true}}],
["search", "package:dartdoc_viewer/search.dart", , B, {
lookupSearchResults: function(query, maxResults, filter) {
  var t1, stopwatch, scoredResults, resultSet, queryList, key, t2, r, type, $location, t3, t4, t5, t6, qualifiedNameParts;
  t1 = J.getInterceptor(query);
  if (t1.$eq(query, "") === true)
    return [];
  stopwatch = new P.Stopwatch(null, null);
  stopwatch.start$0(stopwatch);
  scoredResults = [];
  H.setRuntimeTypeInfo(scoredResults, [B.SearchResult]);
  resultSet = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
  t1 = new H.MappedListIterable(t1.trim$0(query).toLowerCase().split(" "), new B.lookupSearchResults_closure());
  H.setRuntimeTypeInfo(t1, [null, null]);
  queryList = t1.toList$0(t1);
  for (t1 = J.get$iterator$ax($.get$index().get$keys()); t1.moveNext$0();) {
    key = t1.get$current();
    if (H.IterableMixinWorkaround_any(queryList, new B.lookupSearchResults_closure0(J.toLowerCase$0$s(key))))
      resultSet.add$1(resultSet, key);
  }
  for (t1 = new P.LinkedHashSetIterator(resultSet, resultSet._modifications, null, null), H.setRuntimeTypeInfo(t1, [null]), t1._cell = resultSet._first; t1.moveNext$0();) {
    t2 = {};
    r = t1._collection$_current;
    if (C.JSNumber_methods.$tdiv(stopwatch.get$elapsedTicks() * 1000, 1000000) > 500)
      return [];
    t2.score_0 = 0;
    t2.lowerCaseResult_1 = J.toLowerCase$0$s(r);
    type = J.$index$asx($.get$index(), r);
    t2.splitDotQueries_2 = [];
    H.IterableMixinWorkaround_forEach(queryList, new B.lookupSearchResults_closure1(t2));
    C.JSArray_methods.addAll$1(queryList, t2.splitDotQueries_2);
    if (J.contains$1$asx(t2.lowerCaseResult_1, ".dom.") === true)
      t2.lowerCaseResult_1 = J.replaceFirst$2$s(t2.lowerCaseResult_1, ".dom", "");
    $location = new Y.DocsLocation(null, null, null, null, null);
    $location._extractPieces$1(t2.lowerCaseResult_1);
    t3 = new H.SubListIterable($location.get$componentNames(), 1, null);
    t3.$builtinTypeInfo = [null];
    t4 = t3._start;
    t5 = J.getInterceptor$n(t4);
    if (t5.$lt(t4, 0))
      H.throwExpression(new P.RangeError("value " + H.S(t4)));
    t6 = t3._endOrLength;
    if (t6 != null) {
      if (J.$lt$n(t6, 0))
        H.throwExpression(new P.RangeError("value " + H.S(t6)));
      if (t5.$gt(t4, t6))
        H.throwExpression(P.RangeError$range(t4, 0, t6));
    }
    qualifiedNameParts = t3.toList$0(t3);
    if (filter.call$1($location) !== true)
      t2.score_0 = J.$sub$n(t2.score_0, 500);
    H.IterableMixinWorkaround_forEach(queryList, new B.lookupSearchResults_closure2(t2, type, $location, qualifiedNameParts));
    scoredResults.push(new B.SearchResult(r, type, t2.score_0, null));
  }
  if (C.JSNumber_methods.$tdiv(stopwatch.get$elapsedTicks() * 1000, 1000000) > 500)
    return [];
  H.IterableMixinWorkaround_sortList(scoredResults, null);
  B.updatePositions(scoredResults);
  t1 = scoredResults.length;
  if (typeof maxResults !== "number")
    throw H.iae(maxResults);
  if (t1 > maxResults) {
    t1 = H.SubListIterable$(scoredResults, 0, maxResults, null);
    return t1.toList$0(t1);
  } else
    return scoredResults;
  "89,90,7,91,81,92,93,13";
},

"+lookupSearchResults:3:0": 1,

updatePositions: function(list) {
  var t1, i, t2;
  t1 = J.getInterceptor$asx(list);
  i = 0;
  while (true) {
    t2 = t1.get$length(list);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (!(i < t2))
      break;
    J.set$position$x(t1.$index(list, i), i);
    ++i;
  }
  "12,94,89,13";
},

"+updatePositions:1:0": 1,

SearchResult: {"": "Object;element@-,type*-,score@-,position*-",
  get$url: function(_) {
    var $location, sub, t1, t2, t3, t4, newLocation;
    if (!C.JSArray_methods.contains$1(C.List_Ss1, this.type))
      return this.element;
    $location = new Y.DocsLocation(null, null, null, null, null);
    $location._extractPieces$1(this.element);
    sub = $location.subMemberName;
    if (sub == null)
      sub = $location.memberName;
    if (sub == null)
      return this.element;
    t1 = $location.get$componentNames();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
    t1 = Y.DocsLocation$fromList(t1);
    t2 = t1.get$packagePlus();
    t3 = t1.libraryName;
    if (t3 == null)
      t3 = "";
    t4 = t1.memberName;
    t4 = t4 == null ? "" : "." + H.S(t4);
    t1 = t1.subMemberName;
    newLocation = new Y.DocsLocation(null, null, null, null, null);
    newLocation._extractPieces$1(C.JSArray_methods.join$1([t2, t3, t4, t1 == null ? "" : "." + H.S(t1)], ""));
    newLocation.anchor = C.JSString_methods.$add("id_", sub);
    t1 = newLocation.get$packagePlus();
    t2 = newLocation.libraryName;
    if (t2 == null)
      t2 = "";
    t3 = newLocation.memberName;
    t3 = t3 == null ? "" : "." + H.S(t3);
    t4 = newLocation.subMemberName;
    t1 = C.JSArray_methods.join$1([t1, t2, t3, t4 == null ? "" : "." + H.S(t4)], "");
    t2 = newLocation.anchor;
    return t1 + (t2 == null ? "" : "@" + H.S(t2));
    "7";
  },
  "+url": 1,
  compareTo$1: function(_, other) {
    return J.compareTo$1$ns(other.get$score(), this.score);
    "81,204,86";
  },
  "+compareTo:1:0": 1,
  toString$0: function(_) {
    return "SearchResult(" + H.S(this.element) + ", " + H.S(this.type) + ", " + H.S(this.score) + ")";
    "12";
  },
  "+toString:0:0": 1,
  $isSearchResult: true,
  "@": function() {
    return [C.C_Reflectable];
  },
  static: {
"": "SearchResult_typesThatLinkWithinAParentPage<-",
SearchResult$: function(element, type, score) {
  return new B.SearchResult(element, type, score, null);
  "86,87,7,58,7,88,81";
},

"+new SearchResult:3:0": 1}

},

"+SearchResult": [0, 205],

lookupSearchResults_closure: {"": "Closure;",
  call$1: function(x) {
    return J.replaceAll$2$s(x, ":", "-");
    "12,116,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+lookupSearchResults_closure": [100],

lookupSearchResults_closure0: {"": "Closure;lower_1-",
  call$1: function(q) {
    return J.contains$1$asx(this.lower_1, q);
    "12,206,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+lookupSearchResults_closure": [100],

lookupSearchResults_closure1: {"": "Closure;box_0-",
  call$1: function(q) {
    var t1, t2;
    t1 = J.getInterceptor$asx(q);
    if (t1.contains$1(q, ".") === true && J.endsWith$1$s(this.box_0.lowerCaseResult_1, q) === true) {
      t2 = this.box_0;
      t2.score_0 = J.$add$ns(t2.score_0, 100);
      t2.splitDotQueries_2 = t1.split$1(q, ".");
    }
    "12,206,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+lookupSearchResults_closure": [100],

lookupSearchResults_closure2: {"": "Closure;box_0-,type_2-,location_3-,qualifiedNameParts_4-",
  call$1: function(q) {
    var t1, t2, t3, t4, t5, segment, t6, percent;
    t1 = this.qualifiedNameParts_4;
    t2 = J.getInterceptor$ax(t1);
    if (J.$eq(t2.get$last(t1), q) === true) {
      t3 = this.box_0;
      t4 = t3.score_0;
      t5 = J.$index$asx($.get$value(), this.type_2);
      if (typeof t5 !== "number")
        throw H.iae(t5);
      t3.score_0 = J.$add$ns(t4, C.JSInt_methods.$tdiv(1000, t5));
    } else if (J.startsWith$1$s(t2.get$last(t1), q)) {
      t3 = this.box_0;
      t4 = t3.score_0;
      t5 = J.$index$asx($.get$value(), this.type_2);
      if (typeof t5 !== "number")
        throw H.iae(t5);
      t3.score_0 = J.$add$ns(t4, C.JSInt_methods.$tdiv(750, t5));
    } else if (J.contains$1$asx(t2.get$last(t1), q) === true) {
      t3 = this.box_0;
      t4 = t3.score_0;
      t5 = J.$index$asx($.get$value(), this.type_2);
      if (typeof t5 !== "number")
        throw H.iae(t5);
      t3.score_0 = J.$add$ns(t4, C.JSInt_methods.$tdiv(500, t5));
    }
    for (t2 = new H.ListIterator(t1, t2.get$length(t1), 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = J.getInterceptor$asx(q), t3 = this.box_0, t4 = this.type_2; t2.moveNext$0();) {
      segment = t2._current;
      t5 = J.getInterceptor(segment);
      if (t5.$eq(segment, q) === true) {
        t5 = t3.score_0;
        t6 = J.$index$asx($.get$value(), t4);
        if (typeof t6 !== "number")
          throw H.iae(t6);
        t3.score_0 = J.$add$ns(t5, C.JSInt_methods.$tdiv(300, t6));
      } else if (t5.startsWith$1(segment, q)) {
        percent = J.$div$n(t1.get$length(q), t5.get$length(segment));
        t5 = t3.score_0;
        t6 = J.$index$asx($.get$value(), t4);
        if (typeof t6 !== "number")
          throw H.iae(t6);
        t3.score_0 = J.$add$ns(t5, C.JSNumber_methods.$tdiv(300 * percent, t6));
      } else if (t5.contains$1(segment, q) === true) {
        percent = J.$div$n(t1.get$length(q), t5.get$length(segment));
        t5 = t3.score_0;
        t6 = J.$index$asx($.get$value(), t4);
        if (typeof t6 !== "number")
          throw H.iae(t6);
        t3.score_0 = J.$add$ns(t5, C.JSNumber_methods.$tdiv(150 * percent, t6));
      }
    }
    if (J.startsWith$1$s(this.location_3.get$libraryName(), "dart"))
      t3.score_0 = J.$add$ns(t3.score_0, 50);
    "12,206,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+lookupSearchResults_closure": [100],
"": ["value@-,index@-", function() {
  return [C.C_Reflectable];
}, function() {
  return [C.C_Reflectable];
}]}],
["template_binding", "package:template_binding/template_binding.dart", , M, {
_InputBinding__getStreamForInputType: function(element) {
  var t1 = J.getInterceptor$x(element);
  if (typeof element === "object" && element !== null && !!t1.$isOptionElement)
    return C.EventStreamProvider_input.forElement$1(element);
  switch (t1.get$type(element)) {
    case "checkbox":
      return $.get$_InputBinding__checkboxEventType().forTarget$1(element);
    case "radio":
    case "select-multiple":
    case "select-one":
      return t1.get$onChange(element);
    default:
      return t1.get$onInput(element);
  }
},

_addMapBindings: function(node, map, model, delegate, bound) {
  var t1, c, i, i0;
  if (map == null)
    return;
  if (map.get$templateRef() != null) {
    t1 = map.get$templateRef();
    M.nodeBindFallback(node)._decorate$1(t1);
    if (delegate != null)
      M.nodeBindFallback(node).set$_bindingDelegate(delegate);
  }
  t1 = J.getInterceptor$x(map);
  if (t1.get$bindings(map) != null)
    M._processBindings(t1.get$bindings(map), node, model, bound);
  if (t1.get$children(map) == null)
    return;
  for (c = node.firstChild, i = 0; c != null; c = c.nextSibling, i = i0) {
    i0 = i + 1;
    M._addMapBindings(c, J.$index$asx(t1.get$children(map), i), model, delegate, bound);
  }
},

_getTreeScope: function(node) {
  var t1;
  for (; t1 = J.getInterceptor$x(node), t1.get$parentNode(node) != null;)
    node = t1.get$parentNode(node);
  if (typeof node === "object" && node !== null && !!t1.$isDocument || typeof node === "object" && node !== null && !!t1.$isShadowRoot || typeof node === "object" && node !== null && !!t1.$isSvgSvgElement)
    return node;
  return;
},

_getBindings: function(node, delegate) {
  var t1, tokens;
  t1 = J.getInterceptor(node);
  if (typeof node === "object" && node !== null && !!t1.$isElement)
    return M._parseAttributeBindings(node, delegate);
  if (typeof node === "object" && node !== null && !!t1.$isText) {
    tokens = M._parseMustaches(node.textContent, "text", node, delegate);
    if (tokens != null)
      return ["text", tokens];
  }
  return;
},

_parseAttributeBindings: function(element, delegate) {
  var t1, t2;
  t1 = {};
  t1.bindings_0 = null;
  t1.ifFound_1 = false;
  t1.bindFound_2 = false;
  t2 = new W._ElementAttributeMap(element);
  t2.forEach$1(t2, new M._parseAttributeBindings_closure(t1, element, delegate, M.isSemanticTemplate(element)));
  if (t1.ifFound_1 && !t1.bindFound_2) {
    if (t1.bindings_0 == null)
      t1.bindings_0 = [];
    t2 = t1.bindings_0;
    t2.push("bind");
    t2.push(M._parseMustaches("{{}}", "bind", element, delegate));
  }
  return t1.bindings_0;
},

_processBindings: function(bindings, node, model, bound) {
  var t1, t2, t3, i, $name, tokens, t4, bindingPath, delegateFn, delegateBinding, bindingModel, observer, j, t5, subPath, t6, subModel, binding;
  for (t1 = J.getInterceptor$asx(bindings), t2 = bound != null, t3 = J.getInterceptor(node), t3 = typeof node === "object" && node !== null && !!t3.$isNodeBindExtension, i = 0; i < t1.get$length(bindings); i += 2) {
    $name = t1.$index(bindings, i);
    tokens = t1.$index(bindings, i + 1);
    t4 = tokens.get$tokens();
    if (1 >= t4.length)
      throw H.ioore(t4, 1);
    bindingPath = t4[1];
    if (tokens.get$hasOnePath()) {
      t4 = tokens.get$tokens();
      if (2 >= t4.length)
        throw H.ioore(t4, 2);
      delegateFn = t4[2];
      if (delegateFn != null) {
        delegateBinding = delegateFn.call$2(model, node);
        if (delegateBinding != null) {
          bindingModel = delegateBinding;
          bindingPath = "value";
        } else
          bindingModel = model;
      } else
        bindingModel = model;
      if (!tokens.get$isSimplePath()) {
        bindingModel = L.PathObserver$(bindingModel, bindingPath, tokens.get$combinator());
        bindingPath = "value";
      }
    } else {
      observer = new Y.CompoundPathObserver([], [], null, tokens.get$combinator(), false, false, null, null);
      for (t4 = observer._compound_path_observer$_observers, j = 1; j < tokens.get$tokens().length; j += 3) {
        t5 = tokens.get$tokens();
        if (j >= t5.length)
          throw H.ioore(t5, j);
        subPath = t5[j];
        t5 = tokens.get$tokens();
        t6 = j + 1;
        if (t6 >= t5.length)
          throw H.ioore(t5, t6);
        delegateFn = t5[t6];
        delegateBinding = delegateFn != null ? delegateFn.call$2(model, node) : null;
        if (delegateBinding != null) {
          subModel = delegateBinding;
          subPath = "value";
        } else
          subModel = model;
        if (observer._started)
          H.throwExpression(new P.StateError("Cannot add more paths once started."));
        t4.push(L.PathObserver$(subModel, subPath, null));
      }
      observer.start$0(observer);
      bindingModel = observer;
      bindingPath = "value";
    }
    binding = J.bind$3$x(t3 ? node : M.nodeBindFallback(node), $name, bindingModel, bindingPath);
    if (t2)
      bound.push(binding);
  }
},

_parseMustaches: function(s, $name, node, delegate) {
  var t1, $length, t2, tokens, lastIndex, startIndex, endIndex, pathString, delegateFn;
  t1 = J.getInterceptor$asx(s);
  if (t1.get$isEmpty(s) === true)
    return;
  $length = t1.get$length(s);
  if (typeof $length !== "number")
    throw H.iae($length);
  t2 = delegate == null;
  tokens = null;
  lastIndex = 0;
  for (; lastIndex < $length;) {
    startIndex = t1.indexOf$2(s, "{{", lastIndex);
    endIndex = startIndex < 0 ? -1 : t1.indexOf$2(s, "}}", startIndex + 2);
    if (endIndex < 0) {
      if (tokens == null)
        return;
      tokens.push(t1.substring$1(s, lastIndex));
      break;
    }
    if (tokens == null)
      tokens = [];
    tokens.push(t1.substring$2(s, lastIndex, startIndex));
    pathString = C.JSString_methods.trim$0(t1.substring$2(s, startIndex + 2, endIndex));
    tokens.push(pathString);
    if (t2)
      delegateFn = null;
    else {
      delegate.toString;
      delegateFn = A.Polymer_prepareBinding(pathString, $name, node, T.PolymerExpressions.prototype.get$prepareBinding.call(delegate));
    }
    tokens.push(delegateFn);
    lastIndex = endIndex + 2;
  }
  if (lastIndex === $length)
    tokens.push("");
  return M._MustacheTokens$(tokens);
},

_addTemplateInstanceRecord: function(fragment, model) {
  var node, instanceRecord;
  node = fragment.firstChild;
  if (node == null)
    return;
  instanceRecord = new M.TemplateInstance(node, fragment.lastChild, model);
  for (; node != null;) {
    M.nodeBindFallback(node).set$_templateInstance(instanceRecord);
    node = node.nextSibling;
  }
},

nodeBindFallback: function(node) {
  var t1, values, extension;
  t1 = $.get$_expando();
  t1.toString;
  values = H.Primitives_getProperty(node, "expando$values");
  extension = values == null ? null : H.Primitives_getProperty(values, t1._getKey$0());
  if (extension != null)
    return extension;
  t1 = J.getInterceptor$x(node);
  if (typeof node === "object" && node !== null && !!t1.$isInputElement)
    extension = new M._InputElementExtension(node, null, null);
  else if (typeof node === "object" && node !== null && !!t1.$isSelectElement)
    extension = new M._SelectElementExtension(node, null, null);
  else if (typeof node === "object" && node !== null && !!t1.$isTextAreaElement)
    extension = new M._TextAreaElementExtension(node, null, null);
  else if (typeof node === "object" && node !== null && !!t1.$isElement) {
    if (t1.get$localName(node) !== "template")
      t1 = t1.get$attributes(node)._element.hasAttribute("template") === true && C.Map_05eTF.containsKey$1(t1.get$localName(node)) === true;
    else
      t1 = true;
    extension = t1 ? new M.TemplateBindExtension(null, null, null, false, null, null, null, null, node, null, null) : new M._ElementExtension(node, null, null);
  } else
    extension = typeof node === "object" && node !== null && !!t1.$isText ? new M._TextExtension(node, null, null) : new M.NodeBindExtension(node, null, null);
  t1 = $.get$_expando();
  t1.$indexSet(t1, node, extension);
  return extension;
},

isSemanticTemplate: function(n) {
  var t1 = J.getInterceptor$x(n);
  if (typeof n === "object" && n !== null && !!t1.$isElement)
    if (t1.get$localName(n) !== "template")
      t1 = t1.get$attributes(n)._element.hasAttribute("template") === true && C.Map_05eTF.containsKey$1(t1.get$localName(n)) === true;
    else
      t1 = true;
  else
    t1 = false;
  return t1;
},

_ElementExtension: {"": "NodeBindExtension;_node,_bindings,_templateInstance",
  bind$3: function(_, $name, model, path) {
    var t1, t2, binding;
    J.unbind$1$x(this.get$_template_binding$_self(), $name);
    t1 = this.get$_node();
    t2 = J.getInterceptor(t1);
    t1 = typeof t1 === "object" && t1 !== null && !!t2.$isOptionElement && J.$eq($name, "value") === true;
    t2 = this.get$_node();
    if (t1) {
      H.interceptedTypeCast(t2, "$isOptionElement");
      t2.toString;
      t1 = new W._ElementAttributeMap(t2);
      t1.remove$1(t1, $name);
      t1 = this.get$_node();
      t2 = path != null ? path : "";
      binding = new M._OptionValueBinding(null, t1, model, null, null, "value", t2);
      binding.NodeBinding$4(t1, "value", model, path);
      binding._eventSub = M._InputBinding__getStreamForInputType(t1).listen$1(binding.get$nodeValueChanged());
    } else
      binding = M._AttributeBinding__AttributeBinding(t2, $name, model, path);
    t1 = this.get$bindings(this);
    t1.$indexSet(t1, $name, binding);
    return binding;
  }
},

_AttributeBinding: {"": "NodeBinding;conditional,_node_binding$_node,_model,_observer,_pathSub,property,path",
  valueChanged$1: function(value) {
    var t1, t2;
    if (this.conditional === true) {
      t1 = null != value && false !== value;
      t2 = this.property;
      if (t1)
        J.get$attributes$x(X.NodeBinding.prototype.get$node.call(this))._element.setAttribute(t2, "");
      else {
        t1 = J.get$attributes$x(X.NodeBinding.prototype.get$node.call(this));
        t1.remove$1(t1, t2);
      }
    } else {
      t1 = J.get$attributes$x(X.NodeBinding.prototype.get$node.call(this));
      t2 = value == null ? "" : H.S(value);
      t1._element.setAttribute(this.property, t2);
    }
  },
  static: {
_AttributeBinding__AttributeBinding: function(node, $name, model, path) {
  var t1, conditional, t2;
  t1 = J.getInterceptor$s($name);
  conditional = t1.endsWith$1($name, "?");
  if (conditional === true) {
    t2 = J.get$attributes$x(node);
    t2.remove$1(t2, $name);
    $name = t1.substring$2($name, 0, J.$sub$n(t1.get$length($name), 1));
  }
  t1 = path != null ? path : "";
  t1 = new M._AttributeBinding(conditional, node, model, null, null, $name, t1);
  t1.NodeBinding$4(node, $name, model, path);
  return t1;
}}

},

_OptionValueBinding: {"": "_ValueBinding;_eventSub,_node_binding$_node,_model,_observer,_pathSub,property,path",
  get$node: function() {
    return M._ValueBinding.prototype.get$node.call(this);
  },
  valueChanged$1: function(newValue) {
    var select, t1, valueBinding, t2, oldValue, selectBinding;
    select = J.get$parent$x(M._ValueBinding.prototype.get$node.call(this));
    t1 = J.getInterceptor$x(select);
    if (typeof select === "object" && select !== null && !!t1.$isSelectElement) {
      valueBinding = J.$index$asx(J.get$bindings$x(M.nodeBindFallback(select)), "value");
      t2 = J.getInterceptor(valueBinding);
      if (typeof valueBinding === "object" && valueBinding !== null && !!t2.$is_SelectBinding) {
        oldValue = select.value;
        selectBinding = valueBinding;
      } else {
        oldValue = null;
        selectBinding = null;
      }
    } else {
      oldValue = null;
      selectBinding = null;
    }
    M._ValueBinding.prototype.valueChanged$1.call(this, newValue);
    if (selectBinding != null && selectBinding.get$_node_binding$_node() != null && J.$eq(t1.get$value(select), oldValue) !== true)
      selectBinding.nodeValueChanged$1(null);
  }
},

_InputBinding: {"": "NodeBinding;",
  close$0: function(_) {
    if (this._node_binding$_node == null)
      return;
    this._eventSub.cancel$0();
    X.NodeBinding.prototype.close$0.call(this, this);
  }
},

closure3: {"": "Closure;",
  call$0: function() {
    var checkbox, t1, fired, t2, t3;
    checkbox = document.createElement("div", null).appendChild(W.InputElement_InputElement(null));
    t1 = J.getInterceptor$x(checkbox);
    t1.set$type(checkbox, "checkbox");
    fired = [];
    t2 = t1.get$onClick(checkbox);
    t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new M._closure5(fired)), t2._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getTypeArgumentByIndex(t2, 0)]);
    t3._tryResume$0();
    t1 = t1.get$onChange(checkbox);
    t3 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new M._closure6(fired)), t1._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getTypeArgumentByIndex(t1, 0)]);
    t3._tryResume$0();
    checkbox.dispatchEvent(W.MouseEvent_MouseEvent("click", false, 0, true, true, 0, 0, false, 0, false, null, 0, 0, false, window));
    return fired.length === 1 ? C.EventStreamProvider_change : C.JSArray_methods.get$first(fired);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_closure5: {"": "Closure;fired_0",
  call$1: function(e) {
    this.fired_0.push(C.EventStreamProvider_click);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_closure6: {"": "Closure;fired_1",
  call$1: function(e) {
    this.fired_1.push(C.EventStreamProvider_change);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_ValueBinding: {"": "_InputBinding;_eventSub,_node_binding$_node,_model,_observer,_pathSub,property,path",
  get$node: function() {
    return X.NodeBinding.prototype.get$node.call(this);
  },
  valueChanged$1: function(newValue) {
    var t1 = this.get$node();
    J.set$value$x(t1, newValue == null ? "" : H.S(newValue));
  },
  nodeValueChanged$1: function(e) {
    var t1 = J.get$value$x(this.get$node());
    J.set$value$x(this._observer, t1);
    O.dirtyCheckObservables();
  },
  get$nodeValueChanged: function() {
    return new H.BoundClosure$1(this, M._ValueBinding.prototype.nodeValueChanged$1, null, "nodeValueChanged$1");
  }
},

_CheckedBinding: {"": "_InputBinding;_eventSub,_node_binding$_node,_model,_observer,_pathSub,property,path",
  valueChanged$1: function(newValue) {
    var t1 = X.NodeBinding.prototype.get$node.call(this);
    J.set$checked$x(t1, null != newValue && false !== newValue);
  },
  nodeValueChanged$1: function(e) {
    var t1, t2, r, checkedBinding;
    t1 = J.get$checked$x(X.NodeBinding.prototype.get$node.call(this));
    J.set$value$x(this._observer, t1);
    t1 = X.NodeBinding.prototype.get$node.call(this);
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isInputElement && J.$eq(J.get$type$x(X.NodeBinding.prototype.get$node.call(this)), "radio") === true)
      for (t1 = J.get$iterator$ax(M._CheckedBinding__getAssociatedRadioButtons(X.NodeBinding.prototype.get$node.call(this))); t1.moveNext$0();) {
        r = t1.get$current();
        t2 = J.getInterceptor(r);
        checkedBinding = J.$index$asx(J.get$bindings$x(typeof r === "object" && r !== null && !!t2.$isNodeBindExtension ? r : M.nodeBindFallback(r)), "checked");
        if (checkedBinding != null)
          J.set$value$x(checkedBinding, false);
      }
    O.dirtyCheckObservables();
  },
  get$nodeValueChanged: function() {
    return new H.BoundClosure$1(this, M._CheckedBinding.prototype.nodeValueChanged$1, null, "nodeValueChanged$1");
  },
  static: {
_CheckedBinding__getAssociatedRadioButtons: function(element) {
  var t1, treeScope, radios;
  t1 = J.getInterceptor$x(element);
  if (t1.get$form(element) != null) {
    t1 = t1.get$form(element);
    t1.toString;
    t1 = new W._ChildNodeListLazy(t1);
    return t1.where$1(t1, new M._CheckedBinding__getAssociatedRadioButtons_closure(element));
  } else {
    treeScope = M._getTreeScope(element);
    if (treeScope == null)
      return C.List_empty;
    radios = J.querySelectorAll$1$x(treeScope, "input[type=\"radio\"][name=\"" + H.S(t1.get$name(element)) + "\"]");
    return radios.where$1(radios, new M._CheckedBinding__getAssociatedRadioButtons_closure0(element));
  }
}}

},

_CheckedBinding__getAssociatedRadioButtons_closure: {"": "Closure;element_0",
  call$1: function(el) {
    var t1, t2;
    t1 = this.element_0;
    t2 = J.getInterceptor(el);
    if (t2.$eq(el, t1) !== true)
      if (typeof el === "object" && el !== null && !!t2.$isInputElement)
        if (el.type === "radio") {
          t2 = el.name;
          t1 = J.get$name$x(t1);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      else
        t1 = false;
    else
      t1 = false;
    return t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_CheckedBinding__getAssociatedRadioButtons_closure0: {"": "Closure;element_1",
  call$1: function(el) {
    var t1 = J.getInterceptor(el);
    return t1.$eq(el, this.element_1) !== true && t1.get$form(el) == null;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_SelectBinding: {"": "_InputBinding;_eventSub,_node_binding$_node,_model,_observer,_pathSub,property,path",
  valueChanged$1: function(newValue) {
    var t1 = {};
    if (this._tryUpdateValue$1(newValue) === true)
      return;
    t1.maxRetries_0 = 4;
    P.scheduleMicrotask(new M._SelectBinding_valueChanged_delaySetSelectedIndex(t1, this, newValue));
  },
  _tryUpdateValue$1: function(newValue) {
    var t1, t2, intValue;
    t1 = this.property;
    t2 = J.getInterceptor(t1);
    if (t2.$eq(t1, "selectedIndex") === true) {
      intValue = M._SelectBinding__toInt(newValue);
      J.set$selectedIndex$x(X.NodeBinding.prototype.get$node.call(this), intValue);
      t1 = J.get$selectedIndex$x(X.NodeBinding.prototype.get$node.call(this));
      return t1 == null ? intValue == null : t1 === intValue;
    } else if (t2.$eq(t1, "value") === true) {
      t1 = X.NodeBinding.prototype.get$node.call(this);
      J.set$value$x(t1, newValue == null ? "" : H.S(newValue));
      return J.$eq(J.get$value$x(X.NodeBinding.prototype.get$node.call(this)), newValue);
    }
  },
  nodeValueChanged$1: function(e) {
    var t1, t2;
    t1 = this.property;
    t2 = J.getInterceptor(t1);
    if (t2.$eq(t1, "selectedIndex") === true) {
      t1 = J.get$selectedIndex$x(X.NodeBinding.prototype.get$node.call(this));
      J.set$value$x(this._observer, t1);
    } else if (t2.$eq(t1, "value") === true) {
      t1 = J.get$value$x(X.NodeBinding.prototype.get$node.call(this));
      J.set$value$x(this._observer, t1);
    }
  },
  get$nodeValueChanged: function() {
    return new H.BoundClosure$1(this, M._SelectBinding.prototype.nodeValueChanged$1, null, "nodeValueChanged$1");
  },
  $is_SelectBinding: true,
  static: {
_SelectBinding__toInt: function(value) {
  if (typeof value === "string")
    return H.Primitives_parseInt(value, null, new M._SelectBinding__toInt_closure());
  return typeof value === "number" && Math.floor(value) === value ? value : 0;
}}

},

_SelectBinding_valueChanged_delaySetSelectedIndex: {"": "Closure;box_0,this_1,newValue_2",
  call$0: function() {
    var t1, t2;
    if (this.this_1._tryUpdateValue$1(this.newValue_2) !== true) {
      t1 = this.box_0;
      t2 = t1.maxRetries_0;
      t1.maxRetries_0 = t2 - 1;
      t2 = t2 > 0;
      t1 = t2;
    } else
      t1 = false;
    if (t1)
      P.scheduleMicrotask(this);
  },
  "+call:0:0": 0,
  $isFunction: true,
  $is_void_: true
},

_SelectBinding__toInt_closure: {"": "Closure;",
  call$1: function(_) {
    return 0;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_InputElementExtension: {"": "_ElementExtension;_node,_bindings,_templateInstance",
  get$_node: function() {
    return this._node;
  },
  bind$3: function(_, $name, model, path) {
    var t1, t2, t3;
    t1 = J.getInterceptor($name);
    if (t1.$eq($name, "value") !== true && t1.$eq($name, "checked") !== true)
      return M._ElementExtension.prototype.bind$3.call(this, this, $name, model, path);
    t2 = this.get$_node();
    t3 = J.getInterceptor(t2);
    J.unbind$1$x(typeof t2 === "object" && t2 !== null && !!t3.$isNodeBindExtension ? t2 : this, $name);
    t2 = J.get$attributes$x(this._node);
    t2.remove$1(t2, $name);
    t2 = this.get$bindings(this);
    if (t1.$eq($name, "value") === true) {
      t1 = this._node;
      t3 = path != null ? path : "";
      t3 = new M._ValueBinding(null, t1, model, null, null, "value", t3);
      t3.NodeBinding$4(t1, "value", model, path);
      t3._eventSub = M._InputBinding__getStreamForInputType(t1).listen$1(t3.get$nodeValueChanged());
      t1 = t3;
    } else {
      t1 = this._node;
      t3 = path != null ? path : "";
      t3 = new M._CheckedBinding(null, t1, model, null, null, "checked", t3);
      t3.NodeBinding$4(t1, "checked", model, path);
      t3._eventSub = M._InputBinding__getStreamForInputType(t1).listen$1(t3.get$nodeValueChanged());
      t1 = t3;
    }
    t2.$indexSet(t2, $name, t1);
    return t1;
  }
},

_InstanceBindingMap: {"": "Object;bindings>,children>,templateRef<,hasSubTemplate", static: {
_InstanceBindingMap__InstanceBindingMap: function(node, delegate) {
  var bindings, t1, t2, templateRef, hasSubTemplate, c, children, i, childMap;
  bindings = M._getBindings(node, delegate);
  t1 = J.getInterceptor(node);
  if (typeof node === "object" && node !== null && !!t1.$isElement)
    if (t1.get$localName(node) !== "template")
      t2 = t1.get$attributes(node)._element.hasAttribute("template") === true && C.Map_05eTF.containsKey$1(t1.get$localName(node)) === true;
    else
      t2 = true;
  else
    t2 = false;
  if (t2) {
    templateRef = node;
    hasSubTemplate = true;
  } else {
    hasSubTemplate = false;
    templateRef = null;
  }
  for (c = t1.get$firstChild(node), children = null, i = 0; c != null; c = c.nextSibling, ++i) {
    childMap = M._InstanceBindingMap__InstanceBindingMap(c, delegate);
    if (children == null)
      children = P.List_List(J.get$length$asx(t1.get$nodes(node)), null);
    if (i >= children.length)
      throw H.ioore(children, i);
    children[i] = childMap;
    if (childMap.hasSubTemplate)
      hasSubTemplate = true;
  }
  return new M._InstanceBindingMap(bindings, children, templateRef, hasSubTemplate);
}}
},

NodeBindExtension: {"": "Object;_node<,_bindings,_templateInstance?",
  bind$3: function(_, $name, model, path) {
    var t1, t2;
    window;
    t1 = $.get$Console__safeConsole();
    t2 = "Unhandled binding to Node: " + H.S(this) + " " + H.S($name) + " " + H.S(model) + " " + H.S(path);
    t1.toString;
    if (typeof console != "undefined")
      console.error(t2);
  },
  unbind$1: function(_, $name) {
    var t1, binding;
    if (this._bindings == null)
      return;
    t1 = this.get$bindings(this);
    binding = t1.remove$1(t1, $name);
    if (binding != null)
      J.close$0$x(binding);
  },
  unbindAll$0: function(_) {
    var t1, t2, binding;
    if (this._bindings == null)
      return;
    for (t1 = this.get$bindings(this), t1 = t1.get$values(t1), t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      binding = t2._current;
      if (binding != null)
        J.close$0$x(binding);
    }
    this._bindings = null;
  },
  get$bindings: function(_) {
    if (this._bindings == null)
      this._bindings = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, X.NodeBinding);
    return this._bindings;
  },
  get$_template_binding$_self: function() {
    var t1, t2;
    t1 = this.get$_node();
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isNodeBindExtension ? t1 : this;
  },
  $isNodeBindExtension: true
},

TemplateInstance: {"": "Object;firstNode,lastNode,model"},

_SelectElementExtension: {"": "_ElementExtension;_node,_bindings,_templateInstance",
  get$_node: function() {
    return this._node;
  },
  bind$3: function(_, $name, model, path) {
    var t1, t2, t3;
    if (J.$eq($name, "selectedindex") === true)
      $name = "selectedIndex";
    t1 = J.getInterceptor($name);
    if (t1.$eq($name, "selectedIndex") !== true && t1.$eq($name, "value") !== true)
      return M._ElementExtension.prototype.bind$3.call(this, this, $name, model, path);
    t1 = this.get$_node();
    t2 = J.getInterceptor(t1);
    J.unbind$1$x(typeof t1 === "object" && t1 !== null && !!t2.$isNodeBindExtension ? t1 : this, $name);
    t1 = J.get$attributes$x(this._node);
    t1.remove$1(t1, $name);
    t1 = this.get$bindings(this);
    t3 = this._node;
    t2 = path != null ? path : "";
    t2 = new M._SelectBinding(null, t3, model, null, null, $name, t2);
    t2.NodeBinding$4(t3, $name, model, path);
    t2._eventSub = M._InputBinding__getStreamForInputType(t3).listen$1(t2.get$nodeValueChanged());
    t1.$indexSet(t1, $name, t2);
    return t2;
  }
},

TemplateBindExtension: {"": "_ElementExtension;_template_binding$_model,_bindingDelegate?,_template_binding$_iterator<,_template_binding$_scheduled,_templateInstanceRef?,_content?,_templateIsDecorated?,_bindingMap@,_node,_bindings,_templateInstance",
  get$_node: function() {
    return this._node;
  },
  get$_template_binding$_self: function() {
    var t1, t2;
    t1 = this._node;
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isTemplateBindExtension ? this._node : this;
  },
  bind$3: function(_, $name, model, path) {
    var t1, t2;
    path = path != null ? path : "";
    if (this._template_binding$_iterator == null)
      this._template_binding$_iterator = new M._TemplateIterator(this, [], null, false, false, false, false, false, null, null, null, null, null, null, null, null, false, null, null);
    switch ($name) {
      case "bind":
        t1 = this._template_binding$_iterator;
        t1.hasBind = true;
        t1.bindModel = model;
        t1.bindPath = path;
        this._scheduleIterator$0();
        t1 = this.get$bindings(this);
        t2 = new M._TemplateBinding(this, model, $name, path);
        t1.$indexSet(t1, $name, t2);
        return t2;
      case "repeat":
        t1 = this._template_binding$_iterator;
        t1.hasRepeat = true;
        t1.repeatModel = model;
        t1.repeatPath = path;
        this._scheduleIterator$0();
        t1 = this.get$bindings(this);
        t2 = new M._TemplateBinding(this, model, $name, path);
        t1.$indexSet(t1, $name, t2);
        return t2;
      case "if":
        t1 = this._template_binding$_iterator;
        t1.hasIf = true;
        t1.ifModel = model;
        t1.ifPath = path;
        this._scheduleIterator$0();
        t1 = this.get$bindings(this);
        t2 = new M._TemplateBinding(this, model, $name, path);
        t1.$indexSet(t1, $name, t2);
        return t2;
      default:
        return M._ElementExtension.prototype.bind$3.call(this, this, $name, model, path);
    }
  },
  unbind$1: function(_, $name) {
    var t1;
    switch ($name) {
      case "bind":
        t1 = this._template_binding$_iterator;
        if (t1 == null)
          return;
        t1.hasBind = false;
        t1.bindModel = null;
        t1.bindPath = null;
        this._scheduleIterator$0();
        t1 = this.get$bindings(this);
        t1.remove$1(t1, $name);
        return;
      case "repeat":
        t1 = this._template_binding$_iterator;
        if (t1 == null)
          return;
        t1.hasRepeat = false;
        t1.repeatModel = null;
        t1.repeatPath = null;
        this._scheduleIterator$0();
        t1 = this.get$bindings(this);
        t1.remove$1(t1, $name);
        return;
      case "if":
        t1 = this._template_binding$_iterator;
        if (t1 == null)
          return;
        t1.hasIf = false;
        t1.ifModel = null;
        t1.ifPath = null;
        this._scheduleIterator$0();
        t1 = this.get$bindings(this);
        t1.remove$1(t1, $name);
        return;
      default:
        M.NodeBindExtension.prototype.unbind$1.call(this, this, $name);
        return;
    }
  },
  _scheduleIterator$0: function() {
    var t1 = this._template_binding$_iterator;
    if (!t1.depsChanging) {
      t1.depsChanging = true;
      P.scheduleMicrotask(this._template_binding$_iterator.get$resolve());
    }
  },
  createInstance$3: function(model, delegate, bound) {
    var ref, t1, $content, map, instance;
    ref = this.get$ref();
    t1 = J.getInterceptor(ref);
    ref = typeof ref === "object" && ref !== null && !!t1.$isNodeBindExtension ? ref : M.nodeBindFallback(ref);
    $content = J.get$content$x(ref);
    map = ref.get$_bindingMap();
    if (map == null) {
      map = M._InstanceBindingMap__InstanceBindingMap($content, delegate);
      ref.set$_bindingMap(map);
    }
    instance = map.hasSubTemplate ? M.TemplateBindExtension__deepCloneIgnoreTemplateContent($content) : J.clone$1$x($content, true);
    M._addMapBindings(instance, map, model, delegate, bound);
    M._addTemplateInstanceRecord(instance, model);
    return instance;
  },
  createInstance$2: function(model, delegate) {
    return this.createInstance$3(model, delegate, null);
  },
  get$bindingDelegate: function() {
    return this._bindingDelegate;
  },
  get$ref: function() {
    var refId, treeScope, result, t1, nextRef;
    this._decorate$0();
    refId = J.get$attributes$x(this._node)._element.getAttribute("ref");
    if (refId != null) {
      treeScope = M._getTreeScope(this._node);
      result = treeScope != null ? J.getElementById$1$x(treeScope, refId) : null;
    } else
      result = null;
    if (result == null) {
      result = this._templateInstanceRef;
      if (result == null)
        return this._node;
    }
    t1 = J.getInterceptor(result);
    nextRef = (typeof result === "object" && result !== null && !!t1.$isNodeBindExtension ? result : M.nodeBindFallback(result)).get$ref();
    return nextRef != null ? nextRef : result;
  },
  get$content: function(_) {
    var t1;
    this._decorate$0();
    t1 = this._content;
    return t1 != null ? t1 : H.interceptedTypeCast(this._node, "$isTemplateElement").content;
  },
  "+content": 0,
  _decorate$1: function(instanceRef) {
    var t1, t2, isNative, liftContents, templateElementExt, liftRoot;
    if (this._templateIsDecorated === true)
      return false;
    M.TemplateBindExtension__injectStylesheet();
    this._templateIsDecorated = true;
    t1 = this._node;
    t2 = J.getInterceptor(t1);
    isNative = typeof t1 === "object" && t1 !== null && !!t2.$isTemplateElement;
    liftContents = !isNative;
    if (liftContents) {
      t1 = this._node;
      t2 = J.getInterceptor$x(t1);
      t1 = t2.get$attributes(t1)._element.hasAttribute("template") === true && C.Map_05eTF.containsKey$1(t2.get$localName(t1)) === true;
    } else
      t1 = false;
    if (t1) {
      if (instanceRef != null)
        throw H.wrapException(new P.ArgumentError("instanceRef should not be supplied for attribute templates."));
      templateElementExt = M.TemplateBindExtension__extractTemplateFromAttributeTemplate(this._node);
      t1 = J.getInterceptor(templateElementExt);
      templateElementExt = typeof templateElementExt === "object" && templateElementExt !== null && !!t1.$isNodeBindExtension ? templateElementExt : M.nodeBindFallback(templateElementExt);
      templateElementExt.set$_templateIsDecorated(true);
      t1 = templateElementExt.get$_node();
      t2 = J.getInterceptor(t1);
      isNative = typeof t1 === "object" && t1 !== null && !!t2.$isTemplateElement;
      liftRoot = true;
    } else {
      templateElementExt = this;
      liftRoot = false;
    }
    if (!isNative)
      templateElementExt.set$_content(J.createDocumentFragment$0$x(M.TemplateBindExtension__getTemplateContentsOwner(J.get$ownerDocument$x(templateElementExt.get$_node()))));
    if (instanceRef != null)
      templateElementExt.set$_templateInstanceRef(instanceRef);
    else if (liftContents)
      M.TemplateBindExtension__liftNonNativeChildrenIntoContent(templateElementExt, this._node, liftRoot);
    else
      M.TemplateBindExtension_bootstrap(J.get$content$x(templateElementExt));
    return true;
  },
  _decorate$0: function() {
    return this._decorate$1(null);
  },
  $isTemplateBindExtension: true,
  static: {
"": "TemplateBindExtension__contentsOwner,TemplateBindExtension__allTemplatesSelectors,TemplateBindExtension__initStyles",
TemplateBindExtension__deepCloneIgnoreTemplateContent: function(node) {
  var t1, clone, t2, c;
  t1 = J.getInterceptor$x(node);
  clone = t1.clone$1(node, false);
  t2 = J.getInterceptor$x(clone);
  if (typeof clone === "object" && clone !== null && !!t2.$isElement)
    if (t2.get$localName(clone) !== "template")
      t2 = t2.get$attributes(clone)._element.hasAttribute("template") === true && C.Map_05eTF.containsKey$1(t2.get$localName(clone)) === true;
    else
      t2 = true;
  else
    t2 = false;
  if (t2)
    return clone;
  for (c = t1.get$firstChild(node); c != null; c = c.nextSibling)
    clone.appendChild(M.TemplateBindExtension__deepCloneIgnoreTemplateContent(c));
  return clone;
},

TemplateBindExtension__getTemplateContentsOwner: function(doc) {
  var t1, d, t2;
  if (W._convertNativeToDart_Window(doc.defaultView) == null)
    return doc;
  t1 = $.get$TemplateBindExtension__contentsOwner();
  d = t1.$index(t1, doc);
  if (d == null) {
    d = doc.implementation.createHTMLDocument("");
    for (; t1 = d.lastChild, t1 != null;) {
      t2 = t1.parentNode;
      if (t2 != null)
        t2.removeChild(t1);
    }
    t1 = $.get$TemplateBindExtension__contentsOwner();
    t1.$indexSet(t1, doc, d);
  }
  return d;
},

TemplateBindExtension__extractTemplateFromAttributeTemplate: function(el) {
  var t1, template, t2, t3, $name, value;
  t1 = J.getInterceptor$x(el);
  template = t1.get$ownerDocument(el).createElement("template", null);
  t1.get$parentNode(el).insertBefore(template, el);
  for (t2 = t1.get$attributes(el).get$keys(), t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "JSArray", 0)), t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]); t3.moveNext$0();) {
    $name = t3._current;
    switch ($name) {
      case "template":
        t2 = t1.get$attributes(el)._element;
        t2.getAttribute($name);
        t2.removeAttribute($name);
        break;
      case "repeat":
      case "bind":
      case "ref":
        template.toString;
        t2 = t1.get$attributes(el)._element;
        value = t2.getAttribute($name);
        t2.removeAttribute($name);
        template.setAttribute($name, value);
        break;
      default:
    }
  }
  return template;
},

TemplateBindExtension__liftNonNativeChildrenIntoContent: function(template, el, useRoot) {
  var $content, t1, t2, child;
  $content = J.get$content$x(template);
  if (useRoot) {
    J.append$1$x($content, el);
    return;
  }
  for (t1 = J.getInterceptor$x(el), t2 = J.getInterceptor$x($content); child = t1.get$firstChild(el), child != null;)
    t2.append$1($content, child);
},

TemplateBindExtension_bootstrap: function($content) {
  var t1, descendents;
  t1 = new M.TemplateBindExtension_bootstrap__bootstrap();
  descendents = J.querySelectorAll$1$x($content, $.get$TemplateBindExtension__allTemplatesSelectors());
  if (M.isSemanticTemplate($content))
    t1.call$1($content);
  descendents.forEach$1(descendents, t1);
},

TemplateBindExtension__injectStylesheet: function() {
  if ($.TemplateBindExtension__initStyles === true)
    return;
  $.TemplateBindExtension__initStyles = true;
  var style = document.createElement("style", null);
  style.textContent = $.get$TemplateBindExtension__allTemplatesSelectors() + " { display: none; }";
  document.head.appendChild(style);
}}

},

TemplateBindExtension_bootstrap__bootstrap: {"": "Closure;",
  call$1: function(template) {
    var t1;
    if (!M.nodeBindFallback(template)._decorate$1(null)) {
      t1 = J.getInterceptor(template);
      M.TemplateBindExtension_bootstrap(J.get$content$x(typeof template === "object" && template !== null && !!t1.$isNodeBindExtension ? template : M.nodeBindFallback(template)));
    }
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

closure2: {"": "Closure;",
  call$1: function(k) {
    return H.S(k) + "[template]";
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_TemplateBinding: {"": "Object;_ext,_template_binding$_model,property,path>",
  get$value: function(_) {
    return J.get$value$x(this.get$_template_binding$_observer());
  },
  "+value": 0,
  set$value: function(_, newValue) {
    J.set$value$x(this.get$_template_binding$_observer(), newValue);
  },
  "+value=": 0,
  get$_template_binding$_observer: function() {
    var t1, t2;
    t1 = this._template_binding$_model;
    t2 = J.getInterceptor(t1);
    if ((typeof t1 === "object" && t1 !== null && !!t2.$isPathObserver || typeof t1 === "object" && t1 !== null && !!t2.$isCompoundPathObserver) && J.$eq(this.path, "value") === true)
      return this._template_binding$_model;
    return L.PathObserver$(this._template_binding$_model, this.path, null);
  },
  close$0: function(_) {
    var t1 = this._ext;
    if (t1 == null)
      return;
    t1.unbind$1(t1, this.property);
    this._template_binding$_model = null;
    this._ext = null;
  },
  $isNodeBinding: true
},

_parseAttributeBindings_closure: {"": "Closure;box_0,element_1,delegate_2,isTemplateNode_3",
  call$2: function($name, value) {
    var t1, tokens;
    for (; t1 = J.getInterceptor$asx($name), J.$eq(t1.$index($name, 0), "_") === true;)
      $name = t1.substring$1($name, 1);
    if (this.isTemplateNode_3)
      if (t1.$eq($name, "if") === true) {
        this.box_0.ifFound_1 = true;
        if (J.$eq(value, "") === true)
          value = "{{}}";
      } else if (t1.$eq($name, "bind") === true || t1.$eq($name, "repeat") === true) {
        this.box_0.bindFound_2 = true;
        if (J.$eq(value, "") === true)
          value = "{{}}";
      }
    tokens = M._parseMustaches(value, $name, this.element_1, this.delegate_2);
    if (tokens != null) {
      t1 = this.box_0;
      if (t1.bindings_0 == null)
        t1.bindings_0 = [];
      t1 = t1.bindings_0;
      t1.push($name);
      t1.push(tokens);
    }
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_MustacheTokens: {"": "Object;tokens<,_combinator",
  get$hasOnePath: function() {
    return this.tokens.length === 4;
  },
  get$isSimplePath: function() {
    var t1, t2;
    t1 = this.tokens;
    t2 = t1.length;
    if (t2 === 4) {
      if (0 >= t2)
        throw H.ioore(t1, 0);
      if (J.$eq(t1[0], "") === true) {
        if (3 >= t1.length)
          throw H.ioore(t1, 3);
        t1 = J.$eq(t1[3], "") === true;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$combinator: function() {
    return this._combinator;
  },
  _singleCombinator$1: function(value) {
    var t1, t2;
    if (value == null)
      value = "";
    t1 = this.tokens;
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t2 = H.S(t1[0]) + H.S(value);
    if (3 >= t1.length)
      throw H.ioore(t1, 3);
    return t2 + H.S(t1[3]);
  },
  get$_singleCombinator: function() {
    return new H.BoundClosure$1(this, M._MustacheTokens.prototype._singleCombinator$1, null, "_singleCombinator$1");
  },
  _listCombinator$1: function(values) {
    var t1, newValue, t2, i, value, str, t3;
    t1 = this.tokens;
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    newValue = P.StringBuffer$(t1[0]);
    for (t2 = J.getInterceptor$asx(values), i = 1; i < t1.length; i += 3) {
      value = t2.$index(values, C.JSInt_methods.$tdiv(i - 1, 3));
      if (value != null) {
        str = typeof value === "string" ? value : H.S(value);
        newValue._contents = newValue._contents + str;
      }
      t3 = i + 2;
      if (t3 >= t1.length)
        throw H.ioore(t1, t3);
      str = t1[t3];
      str = typeof str === "string" ? str : H.S(str);
      newValue._contents = newValue._contents + str;
    }
    return newValue._contents;
  },
  get$_listCombinator: function() {
    return new H.BoundClosure$1(this, M._MustacheTokens.prototype._listCombinator$1, null, "_listCombinator$1");
  },
  _MustacheTokens$1: function(tokens) {
    this._combinator = this.tokens.length === 4 ? this.get$_singleCombinator() : this.get$_listCombinator();
  },
  static: {
_MustacheTokens$: function(tokens) {
  var t1 = new M._MustacheTokens(tokens, null);
  t1._MustacheTokens$1(tokens);
  return t1;
}}

},

_TemplateIterator: {"": "Object;_templateExt,terminators,iteratedValue,closed,depsChanging,hasRepeat,hasBind,hasIf,repeatModel,bindModel,ifModel,repeatPath,bindPath,ifPath,_valueSub,_listSub,_initPrepareFunctions,_instanceModelFn,_instancePositionChangedFn",
  _instanceModelFn$1: function(arg0) {
    return this._instanceModelFn.call$1(arg0);
  },
  resolve$0: function() {
    var t1, model, path, valueObserver, t2, t3;
    this.depsChanging = false;
    t1 = this._valueSub;
    if (t1 != null) {
      t1.cancel$0();
      this._valueSub = null;
    }
    t1 = this.hasRepeat;
    if (!t1 && !this.hasBind) {
      this._valueChanged$1(null);
      return;
    }
    model = t1 ? this.repeatModel : this.bindModel;
    path = t1 ? this.repeatPath : this.bindPath;
    if (!this.hasIf)
      valueObserver = L.PathObserver$(model, path, t1 ? null : new M._TemplateIterator_resolve_closure());
    else {
      valueObserver = new Y.CompoundPathObserver([], [], null, new M._TemplateIterator_resolve_valueFn(t1), false, false, null, null);
      if (valueObserver._started)
        H.throwExpression(new P.StateError("Cannot add more paths once started."));
      t1 = valueObserver._compound_path_observer$_observers;
      t1.push(L.PathObserver$(model, path, null));
      t2 = this.ifModel;
      t3 = this.ifPath;
      if (valueObserver._started)
        H.throwExpression(new P.StateError("Cannot add more paths once started."));
      t1.push(L.PathObserver$(t2, t3, null));
      valueObserver.start$0(valueObserver);
    }
    this._valueSub = valueObserver.get$changes(valueObserver).listen$1(new M._TemplateIterator_resolve_closure0(this));
    this._valueChanged$1(valueObserver.get$value(valueObserver));
  },
  get$resolve: function() {
    return new P.BoundClosure$0(this, M._TemplateIterator.prototype.resolve$0, null, "resolve$0");
  },
  _valueChanged$1: function(newValue) {
    var oldValue, t1, t2, t3, splices;
    oldValue = this.iteratedValue;
    this.unobserve$0();
    t1 = J.getInterceptor$ax(newValue);
    if (typeof newValue === "object" && newValue !== null && (newValue.constructor === Array || !!t1.$isList))
      this.iteratedValue = newValue;
    else if (typeof newValue === "object" && newValue !== null && (newValue.constructor === Array || !!t1.$isIterable))
      this.iteratedValue = t1.toList$0(newValue);
    else
      this.iteratedValue = null;
    t1 = this.iteratedValue;
    t2 = t1 != null;
    if (t2)
      ;
    t3 = oldValue != null ? oldValue : [];
    t1 = t2 ? t1 : [];
    splices = G.calcSplices(t1, 0, J.get$length$asx(t1), t3, 0, J.get$length$asx(t3));
    if (splices.length !== 0)
      this._handleSplices$1(splices);
  },
  getTerminatorAt$1: function(index) {
    var t1, t2, terminator, subIter;
    t1 = J.getInterceptor(index);
    if (t1.$eq(index, -1) === true)
      return this._templateExt._node;
    t2 = this.terminators;
    t1 = t1.$mul(index, 2);
    if (t1 >>> 0 !== t1 || t1 >= t2.length)
      throw H.ioore(t2, t1);
    terminator = t2[t1];
    if (M.isSemanticTemplate(terminator)) {
      t1 = this._templateExt._node;
      t1 = terminator == null ? t1 == null : terminator === t1;
    } else
      t1 = true;
    if (t1)
      return terminator;
    subIter = M.nodeBindFallback(terminator).get$_template_binding$_iterator();
    if (subIter == null)
      return terminator;
    return subIter.getTerminatorAt$1(C.JSInt_methods.$tdiv(subIter.terminators.length, 2) - 1);
  },
  insertInstanceAt$4: function(index, fragment, instanceNodes, bound) {
    var t1, previousTerminator, t2, terminator, $parent, insertBeforeNode;
    t1 = J.getInterceptor$n(index);
    previousTerminator = this.getTerminatorAt$1(t1.$sub(index, 1));
    t2 = fragment != null;
    if (t2)
      terminator = fragment.lastChild;
    else
      terminator = instanceNodes != null && J.get$isNotEmpty$asx(instanceNodes) ? J.get$last$ax(instanceNodes) : null;
    if (terminator == null)
      terminator = previousTerminator;
    t1 = t1.$mul(index, 2);
    H.IterableMixinWorkaround_insertAllList(this.terminators, t1, [terminator, bound]);
    $parent = J.get$parentNode$x(this._templateExt._node);
    insertBeforeNode = J.get$nextNode$x(previousTerminator);
    if (t2)
      $parent.insertBefore(fragment, insertBeforeNode);
    else if (instanceNodes != null)
      for (t1 = J.get$iterator$ax(instanceNodes); t1.moveNext$0();)
        $parent.insertBefore(t1.get$current(), insertBeforeNode);
  },
  extractInstanceAt$1: function(index) {
    var instanceNodes, t1, previousTerminator, terminator, t2, t3, bound, node;
    instanceNodes = [];
    instanceNodes.$builtinTypeInfo = [W.Node];
    t1 = J.getInterceptor$n(index);
    previousTerminator = this.getTerminatorAt$1(t1.$sub(index, 1));
    terminator = this.getTerminatorAt$1(index);
    t2 = this.terminators;
    t3 = J.$add$ns(t1.$mul(index, 2), 1);
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    bound = t2[t3];
    C.JSArray_methods.removeRange$2(t2, t1.$mul(index, 2), J.$add$ns(t1.$mul(index, 2), 2));
    J.get$parentNode$x(this._templateExt._node);
    for (t1 = J.getInterceptor$x(previousTerminator); J.$eq(terminator, previousTerminator) !== true;) {
      node = t1.get$nextNode(previousTerminator);
      if (node == null ? terminator == null : node === terminator)
        terminator = previousTerminator;
      t2 = node.parentNode;
      if (t2 != null)
        t2.removeChild(node);
      instanceNodes.push(node);
    }
    return new M._BoundNodes(instanceNodes, bound);
  },
  _handleSplices$1: function(splices) {
    var t1, template, t2, t3, delegate, instanceCache, removeDelta, splice, t4, t5, addIndex, model, instance, bound, instanceNodes, fragment;
    if (this.closed)
      return;
    t1 = this._templateExt;
    template = t1._node;
    t2 = t1._node;
    t3 = J.getInterceptor(t2);
    delegate = (typeof t2 === "object" && t2 !== null && !!t3.$isTemplateBindExtension ? t1._node : t1).get$bindingDelegate();
    t2 = J.getInterceptor$x(template);
    if (t2.get$parentNode(template) == null || W._convertNativeToDart_Window(t2.get$ownerDocument(template).defaultView) == null) {
      this.close$0(this);
      return;
    }
    if (!this._initPrepareFunctions) {
      this._initPrepareFunctions = true;
      if (delegate != null) {
        this._instanceModelFn = delegate.prepareInstanceModel$1(template);
        this._instancePositionChangedFn = null;
      }
    }
    instanceCache = P.HashMap_HashMap(P.identical$closure, null, null, P.Object, M._BoundNodes);
    for (t2 = J.getInterceptor$ax(splices), t3 = t2.get$iterator(splices), removeDelta = 0; t3.moveNext$0();) {
      splice = t3.get$current();
      for (t4 = splice.get$removed(), t4 = t4.get$iterator(t4), t5 = J.getInterceptor$x(splice); t4.moveNext$0();)
        instanceCache.$indexSet(instanceCache, t4._current, this.extractInstanceAt$1(J.$add$ns(t5.get$index(splice), removeDelta)));
      t4 = splice.get$addedCount();
      if (typeof t4 !== "number")
        throw H.iae(t4);
      removeDelta -= t4;
    }
    for (t2 = t2.get$iterator(splices); t2.moveNext$0();) {
      splice = t2.get$current();
      for (t3 = J.getInterceptor$x(splice), addIndex = t3.get$index(splice); t4 = J.getInterceptor$n(addIndex), t4.$lt(addIndex, J.$add$ns(t3.get$index(splice), splice.get$addedCount())); addIndex = t4.$add(addIndex, 1)) {
        model = J.$index$asx(this.iteratedValue, addIndex);
        instance = instanceCache.remove$1(instanceCache, model);
        if (instance != null && J.get$isNotEmpty$asx(J.get$nodes$x(instance))) {
          t5 = J.getInterceptor$x(instance);
          bound = t5.get$bound(instance);
          instanceNodes = t5.get$nodes(instance);
          fragment = null;
        } else {
          bound = [];
          if (this._instanceModelFn != null)
            model = this._instanceModelFn$1(model);
          fragment = model != null ? t1.createInstance$3(model, delegate, bound) : null;
          instanceNodes = null;
        }
        this.insertInstanceAt$4(addIndex, fragment, instanceNodes, bound);
      }
    }
    for (t1 = instanceCache.get$values(instanceCache), t2 = new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t2.moveNext$0();)
      this.closeInstanceBindings$1(J.get$bound$x(t2._current));
  },
  closeInstanceBindings$1: function(bound) {
    var t1;
    for (t1 = J.get$iterator$ax(bound); t1.moveNext$0();)
      J.close$0$x(t1.get$current());
  },
  unobserve$0: function() {
    return;
  },
  close$0: function(_) {
    var t1, i;
    if (this.closed)
      return;
    this.unobserve$0();
    for (t1 = this.terminators, i = 1; i < t1.length; i += 2)
      this.closeInstanceBindings$1(t1[i]);
    C.JSArray_methods.set$length(t1, 0);
    t1 = this._valueSub;
    if (t1 != null) {
      t1.cancel$0();
      this._valueSub = null;
    }
    this._templateExt._template_binding$_iterator = null;
    this.closed = true;
  }
},

_TemplateIterator_resolve_closure: {"": "Closure;",
  call$1: function(x) {
    return [x];
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_TemplateIterator_resolve_valueFn: {"": "Closure;isRepeat_0",
  call$1: function(values) {
    var t1, modelValue, ifValue;
    t1 = J.getInterceptor$asx(values);
    modelValue = t1.$index(values, 0);
    ifValue = t1.$index(values, 1);
    if (!(null != ifValue && false !== ifValue))
      return;
    return this.isRepeat_0 ? modelValue : [modelValue];
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_TemplateIterator_resolve_closure0: {"": "Closure;this_1",
  call$1: function(r) {
    return this.this_1._valueChanged$1(J.get$newValue$x(J.get$last$ax(r)));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

_BoundNodes: {"": "Object;nodes>,bound>", $is_BoundNodes: true},

_TextExtension: {"": "NodeBindExtension;_node,_bindings,_templateInstance",
  bind$3: function(_, $name, model, path) {
    var t1, t2, t3;
    if (J.$eq($name, "text") !== true)
      return M.NodeBindExtension.prototype.bind$3.call(this, this, $name, model, path);
    this.unbind$1(this, $name);
    t1 = this.get$bindings(this);
    t2 = this._node;
    t3 = path != null ? path : "";
    t3 = new M._TextBinding(t2, model, null, null, "text", t3);
    t3.NodeBinding$4(t2, "text", model, path);
    t1.$indexSet(t1, $name, t3);
    return t3;
  }
},

_TextBinding: {"": "NodeBinding;_node_binding$_node,_model,_observer,_pathSub,property,path",
  valueChanged$1: function(newValue) {
    var t1 = this._node_binding$_node;
    J.set$text$x(t1, newValue == null ? "" : H.S(newValue));
  }
},

_TextAreaElementExtension: {"": "_ElementExtension;_node,_bindings,_templateInstance",
  get$_node: function() {
    return this._node;
  },
  bind$3: function(_, $name, model, path) {
    var t1, t2, t3;
    if (J.$eq($name, "value") !== true)
      return M._ElementExtension.prototype.bind$3.call(this, this, $name, model, path);
    t1 = this.get$_node();
    t2 = J.getInterceptor(t1);
    J.unbind$1$x(typeof t1 === "object" && t1 !== null && !!t2.$isNodeBindExtension ? t1 : this, $name);
    t1 = J.get$attributes$x(this._node);
    t1.remove$1(t1, $name);
    t1 = this.get$bindings(this);
    t3 = this._node;
    t2 = path != null ? path : "";
    t2 = new M._ValueBinding(null, t3, model, null, null, "value", t2);
    t2.NodeBinding$4(t3, "value", model, path);
    t2._eventSub = M._InputBinding__getStreamForInputType(t3).listen$1(t2.get$nodeValueChanged());
    t1.$indexSet(t1, $name, t2);
    return t2;
  }
}}],
["template_binding.src.binding_delegate", "package:template_binding/src/binding_delegate.dart", , O, {
BindingDelegate: {"": "Object;"}}],
["template_binding.src.node_binding", "package:template_binding/src/node_binding.dart", , X, {
NodeBinding: {"": "Object;_node_binding$_node<,path>",
  get$node: function() {
    return this._node_binding$_node;
  },
  get$value: function(_) {
    return J.get$value$x(this._observer);
  },
  "+value": 0,
  set$value: function(_, newValue) {
    J.set$value$x(this._observer, newValue);
  },
  "+value=": 0,
  close$0: function(_) {
    var t1;
    if (this._node_binding$_node == null)
      return;
    t1 = this._pathSub;
    if (t1 != null)
      t1.cancel$0();
    this._pathSub = null;
    this._observer = null;
    this._node_binding$_node = null;
    this._model = null;
  },
  NodeBinding$4: function(_node, property, _model, path) {
    var t1, t2;
    t1 = this._model;
    t2 = J.getInterceptor(t1);
    t1 = (typeof t1 === "object" && t1 !== null && !!t2.$isPathObserver || typeof t1 === "object" && t1 !== null && !!t2.$isCompoundPathObserver) && J.$eq(path, "value") === true;
    t2 = this._model;
    if (t1)
      this._observer = t2;
    else
      this._observer = L.PathObserver$(t2, this.path, null);
    this._pathSub = J.get$changes$x(this._observer).listen$1(new X.NodeBinding_closure(this));
    this.valueChanged$1(J.get$value$x(this._observer));
  },
  $isNodeBinding: true
},

NodeBinding_closure: {"": "Closure;this_0",
  call$1: function(r) {
    var t1 = this.this_0;
    return t1.valueChanged$1(J.get$value$x(t1._observer));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["typedef", "typedef.dart", , M, {
TypedefElement: {"": ["MemberElement;_item-,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$observables: function(receiver) {
    return N.concat(E.MemberElement.prototype.get$observables.call(this, receiver), C.List_2Sa);
    "12";
  },
  "+observables": 1,
  wrongClass$1: function(receiver, newItem) {
    var t1 = J.getInterceptor(newItem);
    return typeof newItem !== "object" || newItem === null || !t1.$isTypedef;
    "12,132,12";
  },
  "+wrongClass:1:0": 1,
  get$defaultItem: function(receiver) {
    return E.Typedef$(H.fillLiteralMap(["name", "loading", "qualifiedName", "loading"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    "12";
  },
  "+defaultItem": 1,
  get$item: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver);
    "12";
  },
  "+item": 1,
  set$item: function(receiver, newItem) {
    E.MemberElement.prototype.set$item.call(this, receiver, newItem);
    return newItem;
    "12,132,12";
  },
  "+item=": 1,
  get$name: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver) == null ? "" : new M.TypedefElement_name_closure(receiver).call$0();
    "12,101";
  },
  "+name": 1,
  get$location: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver) == null ? "" : new M.TypedefElement_location_closure(receiver).call$0();
    "12,101";
  },
  "+location": 1,
  get$simpleType: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver) == null ? "" : new M.TypedefElement_simpleType_closure(receiver).call$0();
    "12,101";
  },
  "+simpleType": 1,
  get$parameters: function(receiver) {
    var t1 = [];
    return E.MemberElement.prototype.get$item.call(this, receiver) == null ? t1 : new M.TypedefElement_parameters_closure(receiver).call$0();
    "12,101";
  },
  "+parameters": 1,
  check$2: function(receiver, f, orElse) {
    return E.MemberElement.prototype.get$item.call(this, receiver) == null ? orElse : f.call$0();
    "12,187,12,112,12";
  },
  "+check:2:0": 1,
  "*check": [30],
  check$1: function($receiver, f) {
    return this.check$2($receiver, f, "");
  },
  "+check:1:0": 1,
  get$required: function(receiver) {
    var t1 = J.where$1$ax(J.get$parameters$x(E.MemberElement.prototype.get$item.call(this, receiver)), new M.TypedefElement_required_closure());
    return t1.toList$0(t1);
    "129,101";
  },
  "+required": 1,
  get$optional: function(receiver) {
    var t1 = J.where$1$ax(J.get$parameters$x(E.MemberElement.prototype.get$item.call(this, receiver)), new M.TypedefElement_optional_closure());
    return t1.toList$0(t1);
    "129,101";
  },
  "+optional": 1,
  get$annotations: function(receiver) {
    var t1 = E.AnnotationGroup$([]);
    return E.MemberElement.prototype.get$item.call(this, receiver) == null ? t1 : new M.TypedefElement_annotations_closure(receiver).call$0();
    "12,101";
  },
  "+annotations": 1,
  "@": function() {
    return [C.CustomTag_mLm];
  },
  static: {
TypedefElement$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.TypedefElement_methods.Element$created$0(receiver);
  C.TypedefElement_methods.PolymerElement$created$0(receiver);
  C.TypedefElement_methods.MemberElement$created$0(receiver);
  return receiver;
  "95";
},

"+new TypedefElement$created:0:0": 1}

},

"+TypedefElement": [68],

TypedefElement_name_closure: {"": "Closure;this_0-",
  call$0: function() {
    var t1 = this.this_0;
    return J.get$name$x(E.MemberElement.prototype.get$item.call(J.getInterceptor$x(t1), t1));
    "12";
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+TypedefElement_name_closure": [100],

TypedefElement_location_closure: {"": "Closure;this_0-",
  call$0: function() {
    var t1 = this.this_0;
    return J.get$location$x(J.get$type$x(E.MemberElement.prototype.get$item.call(J.getInterceptor$x(t1), t1)));
    "12";
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+TypedefElement_location_closure": [100],

TypedefElement_simpleType_closure: {"": "Closure;this_0-",
  call$0: function() {
    var t1 = this.this_0;
    return J.get$simpleType$x(J.get$type$x(E.MemberElement.prototype.get$item.call(J.getInterceptor$x(t1), t1)));
    "12";
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+TypedefElement_simpleType_closure": [100],

TypedefElement_parameters_closure: {"": "Closure;this_0-",
  call$0: function() {
    var t1 = this.this_0;
    return J.get$parameters$x(E.MemberElement.prototype.get$item.call(J.getInterceptor$x(t1), t1));
    "12";
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+TypedefElement_parameters_closure": [100],

TypedefElement_required_closure: {"": "Closure;",
  call$1: function(parameter) {
    return parameter.get$isOptional() !== true;
    "12,198,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+TypedefElement_required_closure": [100],

TypedefElement_optional_closure: {"": "Closure;",
  call$1: function(parameter) {
    return parameter.get$isOptional();
    "12,198,12";
  },
  "+call:1:0": 1,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
},

"+TypedefElement_optional_closure": [100],

TypedefElement_annotations_closure: {"": "Closure;this_0-",
  call$0: function() {
    var t1 = this.this_0;
    return J.get$annotations$x(E.MemberElement.prototype.get$item.call(J.getInterceptor$x(t1), t1));
    "12";
  },
  "+call:0:0": 1,
  $isFunction: true,
  $is_void_: true
},

"+TypedefElement_annotations_closure": [100]}],
["unmodifiable_collection", "package:unmodifiable_collection/unmodifiable_collection.dart", , F, {
UnmodifiableMapView0: {"": "Object;_unmodifiable_collection$_source",
  get$length: function(_) {
    return this._unmodifiable_collection$_source._collection$_length;
  },
  "+length": 0,
  get$isEmpty: function(_) {
    return this._unmodifiable_collection$_source._collection$_length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    return this._unmodifiable_collection$_source._collection$_length !== 0;
  },
  "+isNotEmpty": 0,
  $index: function(_, key) {
    var t1 = this._unmodifiable_collection$_source;
    return t1.$index(t1, key);
  },
  "+[]:1:0": 0,
  containsKey$1: function(key) {
    return this._unmodifiable_collection$_source.containsKey$1(key);
  },
  "+containsKey:1:0": 0,
  containsValue$1: function(value) {
    return this._unmodifiable_collection$_source.containsValue$1(value);
  },
  "+containsValue:1:0": 0,
  forEach$1: function(_, f) {
    var t1 = this._unmodifiable_collection$_source;
    return t1.forEach$1(t1, f);
  },
  get$keys: function() {
    var t1, t2;
    t1 = this._unmodifiable_collection$_source;
    t2 = new P.LinkedHashMapKeyIterable(t1);
    H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(t1, 0)]);
    return t2;
  },
  "+keys": 0,
  get$values: function(_) {
    var t1 = this._unmodifiable_collection$_source;
    return t1.get$values(t1);
  },
  "+values": 0,
  $indexSet: function(_, key, value) {
    return F.UnmodifiableMapView__throw0();
  },
  "+[]=:2:0": 0,
  putIfAbsent$2: function(key, ifAbsent) {
    F.UnmodifiableMapView__throw0();
  },
  addAll$1: function(_, other) {
    return F.UnmodifiableMapView__throw0();
  },
  remove$1: function(_, key) {
    F.UnmodifiableMapView__throw0();
  },
  clear$0: function(_) {
    return F.UnmodifiableMapView__throw0();
  },
  $isMap: true,
  static: {
UnmodifiableMapView__throw0: function() {
  throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable Map"));
}}

}}],
["utils", "package:yaml/src/utils.dart", , N, {
hashCodeFor: function(obj, parents) {
  var hash, e, t1, t2;
  if (parents == null)
    parents = [];
  else {
    t1 = parents;
    t1.toString;
    if (H.IterableMixinWorkaround_any(t1, new N.hashCodeFor_closure(obj)))
      return -1;
  }
  J.add$1$ax(parents, obj);
  try {
    if (obj == null)
      return 0;
    if (J.$eq(obj, true) === true)
      return 1;
    if (J.$eq(obj, false) === true)
      return 2;
    t1 = obj;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isMap) {
      t1 = N.hashCodeFor(obj.get$keys(), parents);
      t2 = N.hashCodeFor(J.get$values$x(obj), parents);
      if (typeof t1 !== "number")
        throw t1.$xor();
      if (typeof t2 !== "number")
        throw H.iae(t2);
      return (t1 ^ t2) >>> 0;
    }
    t1 = obj;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!t2.$isIterable)) {
      hash = 0;
      for (t1 = J.get$iterator$ax(obj); t1.moveNext$0();) {
        e = t1.get$current();
        hash = J.$xor$n(hash, N.hashCodeFor(e, parents));
      }
      return hash;
    }
    t1 = J.get$hashCode$(obj);
    return t1;
  } finally {
    J.removeLast$0$ax(parents);
  }
},

hashCodeFor_closure: {"": "Closure;obj_0",
  call$1: function(p) {
    var t1 = this.obj_0;
    return p == null ? t1 == null : p === t1;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["variable", "variable.dart", , Y, {
VariableElement: {"": ["InheritedElement;_member$__$inheritedFrom-,_member$__$commentFrom-,_changes,_records,_item-,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$observables: function(receiver) {
    return this.concat$2(receiver, E.InheritedElement.prototype.get$observables.call(this, receiver), C.List_Symbol_annotations);
    "12";
  },
  "+observables": 1,
  get$defaultItem: function(receiver) {
    return E.Variable$(H.fillLiteralMap(["type", [null], "name", "loading"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), "", "", false, false);
    "12";
  },
  "+defaultItem": 1,
  wrongClass$1: function(receiver, newItem) {
    var t1 = J.getInterceptor(newItem);
    return typeof newItem !== "object" || newItem === null || !t1.$isVariable;
    "12,132,12";
  },
  "+wrongClass:1:0": 1,
  get$item: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver);
    "12";
  },
  "+item": 1,
  set$item: function(receiver, newItem) {
    E.MemberElement.prototype.set$item.call(this, receiver, newItem);
    return newItem;
    "12,132,12";
  },
  "+item=": 1,
  get$annotations: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver) == null ? E.AnnotationGroup$([]) : J.get$annotations$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "12,101";
  },
  "+annotations": 1,
  VariableElement$created$0: function(receiver) {
    J.setProperty$2$x(receiver.style, "display", "block");
    "12";
  },
  "@": function() {
    return [C.CustomTag_9IG];
  },
  static: {
VariableElement$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.VariableElement_methods.Element$created$0(receiver);
  C.VariableElement_methods.PolymerElement$created$0(receiver);
  C.VariableElement_methods.MemberElement$created$0(receiver);
  C.VariableElement_methods.VariableElement$created$0(receiver);
  return receiver;
  "96";
},

"+new VariableElement$created:0:0": 1}

},

"+VariableElement": [70]}],
["variable_heading", "variable-heading.dart", , T, {
VariableHeading: {"": ["MemberElement;_item-,_cachedMirror-,_pathname-,_changes,_records,_declaration,_observers,_unbound,_unbindAllJob,_propertyObserver,syntax,_shadowRoots,$$-", null, null, null, null, null, null, null, null, null, null, null, null, function() {
    return [C.C_Reflectable];
  }],
  get$observables: function(receiver) {
    return this.concat$2(receiver, E.MemberElement.prototype.get$observables.call(this, receiver), C.List_4AN);
    "12";
  },
  "+observables": 1,
  get$defaultItem: function(receiver) {
    return E.Variable$(H.fillLiteralMap(["type", [null], "name", "loading"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), "", "", false, false);
    "12";
  },
  "+defaultItem": 1,
  wrongClass$1: function(receiver, newItem) {
    var t1 = J.getInterceptor(newItem);
    return typeof newItem !== "object" || newItem === null || !t1.$isVariable;
    "12,132,12";
  },
  "+wrongClass:1:0": 1,
  get$item: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver);
    "12";
  },
  "+item": 1,
  set$item: function(receiver, newItem) {
    E.MemberElement.prototype.set$item.call(this, receiver, newItem);
    return newItem;
    "12,132,12";
  },
  "+item=": 1,
  get$getter: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver) != null && E.MemberElement.prototype.get$item.call(this, receiver).get$isGetter() === true ? "get" : "";
    "7,101";
  },
  "+getter": 1,
  get$setterParameter: function(receiver) {
    return J.get$setterParameter$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "52,101";
  },
  "+setterParameter": 1,
  get$type: function(receiver) {
    return J.get$type$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "56,101";
  },
  "+type": 1,
  get$name: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver) == null ? "" : this.get$nameWithoutSetter(receiver);
    "7,101";
  },
  "+name": 1,
  get$nameWithoutSetter: function(receiver) {
    return E.MemberElement.prototype.get$item.call(this, receiver).get$isSetter() === true ? J.substring$2$s(J.get$name$x(E.MemberElement.prototype.get$item.call(this, receiver)), 0, J.$sub$n(J.get$length$asx(J.get$name$x(E.MemberElement.prototype.get$item.call(this, receiver))), 1)) : J.get$name$x(E.MemberElement.prototype.get$item.call(this, receiver));
    "7,101";
  },
  "+nameWithoutSetter": 1,
  "@": function() {
    return [C.CustomTag_lnn];
  },
  static: {
VariableHeading$created: function(receiver) {
  var t1, t2, t3, t4, t5, t6;
  t1 = J.get$pathname$x(C.Window_methods.get$location(window));
  t2 = $.get$Polymer__polymerSyntax();
  t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
  t4 = J.JSString;
  t5 = W.Element;
  t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null);
  H.setRuntimeTypeInfo(t6, [t4, t5]);
  receiver._pathname = t1;
  receiver.syntax = t2;
  receiver._shadowRoots = t3;
  receiver.$$ = t6;
  C.VariableHeading_methods.Element$created$0(receiver);
  C.VariableHeading_methods.PolymerElement$created$0(receiver);
  C.VariableHeading_methods.MemberElement$created$0(receiver);
  return receiver;
  "97";
},

"+new VariableHeading$created:0:0": 1}

},

"+VariableHeading": [68]}],
["visitor", "package:yaml/src/visitor.dart", , O, {
Visitor: {"": "Object;",
  visitAlias$1: function(alias) {
    return alias;
  },
  visitScalar$1: function(scalar) {
    return scalar;
  },
  visitSequence$1: function(seq) {
    var t1 = J.map$1$ax(seq.content, new O.Visitor_visitSequence_closure(this));
    return t1.toList$0(t1);
  },
  visitMapping$1: function(map) {
    var out, t1, t2, key, t3, t4;
    out = new L.YamlMap(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    for (t1 = J.get$iterator$ax(map.content.get$keys()), t2 = out._yaml_map$_map; t1.moveNext$0();) {
      key = t1.get$current();
      t3 = key.visit$1(this);
      t4 = J.$index$asx(map.content, key).visit$1(this);
      t2.$indexSet(t2, out._wrapKey$1(t3), t4);
    }
    return out;
  }
},

Visitor_visitSequence_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return e.visit$1(this.this_0);
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["yaml", "package:yaml/yaml.dart", , O, {
loadYaml: function(yaml) {
  var stream, t1;
  stream = O.loadYamlStream(yaml);
  t1 = stream.length;
  if (t1 !== 1)
    throw H.wrapException(K.YamlException$("Expected 1 document, were " + t1));
  if (0 >= t1)
    throw H.ioore(stream, 0);
  return stream[0];
},

loadYamlStream: function(yaml) {
  var t1 = new H.MappedListIterable(V.Parser$0(yaml).l_yamlStream$0(), new O.loadYamlStream_closure());
  H.setRuntimeTypeInfo(t1, [null, null]);
  return t1.toList$0(t1);
},

loadYamlStream_closure: {"": "Closure;",
  call$1: function(doc) {
    var t1, t2;
    t1 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    H.setRuntimeTypeInfo(t1, [J.JSString, R.Node0]);
    t1 = doc.visit$1(new T.Composer(doc, t1, 0));
    t2 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    H.setRuntimeTypeInfo(t2, [J.JSString, null]);
    return t1.visit$1(new T.Constructor(t1, t2));
  },
  "+call:1:0": 0,
  $isFunction: true,
  $is_Object__Object: true,
  $is_args1: true
}}],
["yaml_exception", "package:yaml/src/yaml_exception.dart", , K, {
YamlException: {"": "Object;_msg",
  toString$0: function(_) {
    return this._msg;
  },
  "+toString:0:0": 0,
  static: {
YamlException$: function(_msg) {
  return new K.YamlException(_msg);
}}

}}],
["yaml_map", "package:yaml/src/yaml_map.dart", , L, {
YamlMap: {"": "Object;_yaml_map$_map",
  addAll$1: function(_, other) {
    J.forEach$1$ax(other, new L.YamlMap_addAll_closure(this));
  },
  containsValue$1: function(value) {
    return this._yaml_map$_map.containsValue$1(value);
  },
  "+containsValue:1:0": 0,
  containsKey$1: function(key) {
    return this._yaml_map$_map.containsKey$1(this._wrapKey$1(key));
  },
  "+containsKey:1:0": 0,
  $index: function(_, key) {
    var t1 = this._yaml_map$_map;
    return t1.$index(t1, this._wrapKey$1(key));
  },
  "+[]:1:0": 0,
  $indexSet: function(_, key, value) {
    var t1 = this._yaml_map$_map;
    t1.$indexSet(t1, this._wrapKey$1(key), value);
  },
  "+[]=:2:0": 0,
  putIfAbsent$2: function(key, ifAbsent) {
    return this._yaml_map$_map.putIfAbsent$2(this._wrapKey$1(key), ifAbsent);
  },
  remove$1: function(_, key) {
    var t1 = this._yaml_map$_map;
    return t1.remove$1(t1, this._wrapKey$1(key));
  },
  clear$0: function(_) {
    var t1 = this._yaml_map$_map;
    return t1.clear$0(t1);
  },
  forEach$1: function(_, f) {
    var t1 = this._yaml_map$_map;
    return t1.forEach$1(t1, new L.YamlMap_forEach_closure(this, f));
  },
  get$keys: function() {
    return J.map$1$ax(this._yaml_map$_map.get$keys(), this.get$_unwrapKey());
  },
  "+keys": 0,
  get$values: function(_) {
    var t1 = this._yaml_map$_map;
    return t1.get$values(t1);
  },
  "+values": 0,
  get$length: function(_) {
    var t1 = this._yaml_map$_map;
    return t1.get$length(t1);
  },
  "+length": 0,
  get$isEmpty: function(_) {
    var t1 = this._yaml_map$_map;
    return t1.get$isEmpty(t1);
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(_) {
    var t1 = this._yaml_map$_map;
    return t1.get$isNotEmpty(t1);
  },
  "+isNotEmpty": 0,
  toString$0: function(_) {
    var t1 = this._yaml_map$_map;
    return t1.toString$0(t1);
  },
  "+toString:0:0": 0,
  get$hashCode: function(_) {
    return N.hashCodeFor(this._yaml_map$_map, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isYamlMap)
      return false;
    return G.deepEquals(this, other, null, null);
  },
  _wrapKey$1: function(obj) {
    var t1;
    if (obj != null)
      if (typeof obj !== "boolean") {
        t1 = J.getInterceptor(obj);
        if (typeof obj !== "object" || obj === null || obj.constructor !== Array && !t1.$isList) {
          if (typeof obj === "number")
            obj.isNan$0();
          t1 = typeof obj !== "object" || obj === null || !t1.$isMap || typeof obj === "object" && obj !== null && !!t1.$isYamlMap;
        } else
          t1 = false;
      } else
        t1 = false;
    else
      t1 = false;
    if (t1)
      return obj;
    else {
      t1 = J.getInterceptor(obj);
      if (typeof obj === "object" && obj !== null && !!t1.$isMap)
        return new L.YamlMap(obj);
    }
    return new L._WrappedHashKey(obj);
  },
  _unwrapKey$1: function(obj) {
    var t1 = J.getInterceptor(obj);
    return typeof obj === "object" && obj !== null && !!t1.$is_WrappedHashKey ? obj.value : obj;
  },
  get$_unwrapKey: function() {
    return new H.BoundClosure$1(this, L.YamlMap.prototype._unwrapKey$1, null, "_unwrapKey$1");
  },
  $isYamlMap: true,
  $isMap: true,
  $asMap: function() {
    return [null, null];
  }
},

YamlMap_addAll_closure: {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1._yaml_map$_map;
    t2.$indexSet(t2, t1._wrapKey$1(key), value);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

YamlMap_forEach_closure: {"": "Closure;this_0,f_1",
  call$2: function(k, v) {
    var t1 = J.getInterceptor(k);
    t1 = typeof k === "object" && k !== null && !!t1.$is_WrappedHashKey ? k.value : k;
    return this.f_1.call$2(t1, v);
  },
  "+call:2:0": 0,
  $isFunction: true,
  $is_args2: true
},

_WrappedHashKey: {"": "Object;value>",
  get$hashCode: function(_) {
    return N.hashCodeFor(this.value, null);
  },
  toString$0: function(_) {
    return J.toString$0(this.value);
  },
  "+toString:0:0": 0,
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$is_WrappedHashKey)
      return false;
    return G.deepEquals(this.value, other.value, null, null);
  },
  $is_WrappedHashKey: true
}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Static function getters
init.globalFunctions.IsolateNatives__processWorkerMessage$closure = H.IsolateNatives__processWorkerMessage$closure = new H.Closure$2(H.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
init.globalFunctions.Primitives__throwFormatException$closure = H.Primitives__throwFormatException$closure = new H.Closure$1(H.Primitives__throwFormatException, "Primitives__throwFormatException$closure");
init.globalFunctions.toStringWrapper$closure = H.toStringWrapper$closure = new H.Closure$0(H.toStringWrapper, "toStringWrapper$closure");
init.globalFunctions.invokeClosure$closure = H.invokeClosure$closure = new H.Closure$7(H.invokeClosure, "invokeClosure$closure");
init.globalFunctions.isAssignable$closure = H.isAssignable$closure = new H.Closure$2(H.isAssignable, "isAssignable$closure");
init.globalFunctions.main$closure = E.main$closure = new H.Closure$0(E.main, "main$closure");
init.globalFunctions.nothing$closure = E.nothing$closure = new H.Closure$0(E.nothing, "nothing$closure");
init.globalFunctions.reflect$closure = H.reflect$closure = new H.Closure$1(H.reflect, "reflect$closure");
init.globalFunctions._asyncRunCallback$closure = P._asyncRunCallback$closure = new H.Closure$0(P._asyncRunCallback, "_asyncRunCallback$closure");
init.globalFunctions._nullDataHandler$closure = P._nullDataHandler$closure = new H.Closure$1(P._nullDataHandler, "_nullDataHandler$closure");
init.globalFunctions._nullErrorHandler$closure = P._nullErrorHandler$closure = new P.Closure$21(P._nullErrorHandler, "_nullErrorHandler$closure");
init.globalFunctions._nullDoneHandler$closure = P._nullDoneHandler$closure = new H.Closure$0(P._nullDoneHandler, "_nullDoneHandler$closure");
init.globalFunctions._rootHandleUncaughtError$closure = P._rootHandleUncaughtError$closure = new P.Closure$5(P._rootHandleUncaughtError, "_rootHandleUncaughtError$closure");
init.globalFunctions._rootRun$closure = P._rootRun$closure = new P.Closure$4(P._rootRun, "_rootRun$closure");
init.globalFunctions._rootRunUnary$closure = P._rootRunUnary$closure = new P.Closure$5(P._rootRunUnary, "_rootRunUnary$closure");
init.globalFunctions._rootRunBinary$closure = P._rootRunBinary$closure = new P.Closure$6(P._rootRunBinary, "_rootRunBinary$closure");
init.globalFunctions._rootRegisterCallback$closure = P._rootRegisterCallback$closure = new P.Closure$4(P._rootRegisterCallback, "_rootRegisterCallback$closure");
init.globalFunctions._rootRegisterUnaryCallback$closure = P._rootRegisterUnaryCallback$closure = new P.Closure$4(P._rootRegisterUnaryCallback, "_rootRegisterUnaryCallback$closure");
init.globalFunctions._rootRegisterBinaryCallback$closure = P._rootRegisterBinaryCallback$closure = new P.Closure$4(P._rootRegisterBinaryCallback, "_rootRegisterBinaryCallback$closure");
init.globalFunctions._rootScheduleMicrotask$closure = P._rootScheduleMicrotask$closure = new P.Closure$4(P._rootScheduleMicrotask, "_rootScheduleMicrotask$closure");
init.globalFunctions._rootCreateTimer$closure = P._rootCreateTimer$closure = new P.Closure$5(P._rootCreateTimer, "_rootCreateTimer$closure");
init.globalFunctions._rootPrint$closure = P._rootPrint$closure = new P.Closure$4(P._rootPrint, "_rootPrint$closure");
init.globalFunctions._printToZone$closure = P._printToZone$closure = new H.Closure$1(P._printToZone, "_printToZone$closure");
init.globalFunctions._rootFork$closure = P._rootFork$closure = new P.Closure$5(P._rootFork, "_rootFork$closure");
init.globalFunctions._defaultEquals$closure = P._defaultEquals$closure = new H.Closure$2(P._defaultEquals, "_defaultEquals$closure");
init.globalFunctions._defaultHashCode$closure = P._defaultHashCode$closure = new H.Closure$1(P._defaultHashCode, "_defaultHashCode$closure");
init.globalFunctions.Comparable_compare$closure = P.Comparable_compare$closure = new H.Closure$2(P.Comparable_compare, "Comparable_compare$closure");
init.globalFunctions.identical$closure = P.identical$closure = new H.Closure$2(P.identical, "identical$closure");
init.globalFunctions.identityHashCode$closure = P.identityHashCode$closure = new H.Closure$1(P.identityHashCode, "identityHashCode$closure");
init.globalFunctions.int_parse$closure = P.int_parse$closure = new P.Closure$3(P.int_parse, "int_parse$closure");
init.globalFunctions.Element__determineTransitionEventType$closure = W.Element__determineTransitionEventType$closure = new H.Closure$1(W.Element__determineTransitionEventType, "Element__determineTransitionEventType$closure");
init.globalFunctions._Html5NodeValidator__standardAttributeValidator$closure = W._Html5NodeValidator__standardAttributeValidator$closure = new P.Closure$4(W._Html5NodeValidator__standardAttributeValidator, "_Html5NodeValidator__standardAttributeValidator$closure");
init.globalFunctions._Html5NodeValidator__uriAttributeValidator$closure = W._Html5NodeValidator__uriAttributeValidator$closure = new P.Closure$4(W._Html5NodeValidator__uriAttributeValidator, "_Html5NodeValidator__uriAttributeValidator$closure");
init.globalFunctions._callEnteredView$closure = W._callEnteredView$closure = new H.Closure$1(W._callEnteredView, "_callEnteredView$closure");
init.globalFunctions._callLeftView$closure = W._callLeftView$closure = new H.Closure$1(W._callLeftView, "_callLeftView$closure");
init.globalFunctions._callAttributeChanged$closure = W._callAttributeChanged$closure = new P.Closure$4(W._callAttributeChanged, "_callAttributeChanged$closure");
init.globalFunctions._callDartFunction$closure = P._callDartFunction$closure = new P.Closure$4(P._callDartFunction, "_callDartFunction$closure");
init.globalFunctions._convertToJS$closure = P._convertToJS$closure = new H.Closure$1(P._convertToJS, "_convertToJS$closure");
init.globalFunctions._convertToDart$closure = P._convertToDart$closure = new H.Closure$1(P._convertToDart, "_convertToDart$closure");
init.globalFunctions.navigate$closure = N.navigate$closure = new H.Closure$1(N.navigate, "navigate$closure");
init.globalFunctions._initPolymerOptimized$closure = A._initPolymerOptimized$closure = new H.Closure$0(A._initPolymerOptimized, "_initPolymerOptimized$closure");
init.globalFunctions._classAttributeConverter$closure = T._classAttributeConverter$closure = new H.Closure$1(T._classAttributeConverter, "_classAttributeConverter$closure");
init.globalFunctions._styleAttributeConverter$closure = T._styleAttributeConverter$closure = new H.Closure$1(T._styleAttributeConverter, "_styleAttributeConverter$closure");
init.globalFunctions.enumerate$closure = K.enumerate$closure = new H.Closure$1(K.enumerate, "enumerate$closure");
// Runtime type support
J.JSString.$isString = true;
J.JSString.$isComparable = true;
J.JSString.$asComparable = [J.JSString];
J.JSString.$isObject = true;
J.JSInt.$isint = true;
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isObject = true;
W.Node.$isNode = true;
W.Node.$isEventTarget = true;
W.Node.$isObject = true;
W.Entry.$isObject = true;
J.JSDouble.$isdouble = true;
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isObject = true;
W.SpeechInputResult.$isSpeechInputResult = true;
W.SpeechInputResult.$isObject = true;
W.SpeechRecognitionResult.$isSpeechRecognitionResult = true;
W.SpeechRecognitionResult.$isObject = true;
J.JSNumber.$isComparable = true;
J.JSNumber.$asComparable = [J.JSNumber];
J.JSNumber.$isObject = true;
P.Duration.$isDuration = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
P.Match.$isObject = true;
J.JSArray.$isList = true;
J.JSArray.$isIterable = true;
J.JSArray.$isObject = true;
N.Level.$isComparable = true;
N.Level.$asComparable = [N.Level];
N.Level.$isObject = true;
P.Object.$isObject = true;
W.Element.$isElement = true;
W.Element.$isNode = true;
W.Element.$isEventTarget = true;
W.Element.$isObject = true;
U.EmptyExpression.$isExpression = true;
U.EmptyExpression.$isObject = true;
U.Invoke.$isExpression = true;
U.Invoke.$isObject = true;
U.BinaryOperator.$isExpression = true;
U.BinaryOperator.$isObject = true;
U.InExpression.$isExpression = true;
U.InExpression.$isObject = true;
U.Literal.$isExpression = true;
U.Literal.$isObject = true;
U.UnaryOperator.$isExpression = true;
U.UnaryOperator.$isObject = true;
U.Identifier.$isIdentifier = true;
U.Identifier.$isExpression = true;
U.Identifier.$isObject = true;
U.MapLiteralEntry.$isExpression = true;
U.MapLiteralEntry.$isObject = true;
U.MapLiteral.$isExpression = true;
U.MapLiteral.$isObject = true;
K.IndexedValue.$isIndexedValue = true;
K.IndexedValue.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
W.TransitionEvent.$isEvent = true;
W.TransitionEvent.$isObject = true;
A.PolymerDeclaration.$isPolymerDeclaration = true;
A.PolymerDeclaration.$isElement = true;
A.PolymerDeclaration.$isNode = true;
A.PolymerDeclaration.$isEventTarget = true;
A.PolymerDeclaration.$isObject = true;
P.InstanceMirror.$isInstanceMirror = true;
P.InstanceMirror.$isMirror = true;
P.InstanceMirror.$isObject = true;
P.LibraryMirror.$isLibraryMirror = true;
P.LibraryMirror.$isMirror = true;
P.LibraryMirror.$isMirror = true;
P.LibraryMirror.$isObject = true;
P.MethodMirror.$isMirror = true;
P.MethodMirror.$isObject = true;
H.JsMethodMirror.$isMirror = true;
H.JsMethodMirror.$isMirror = true;
H.JsMethodMirror.$isMirror = true;
H.JsMethodMirror.$isObject = true;
P.ParameterMirror.$isMirror = true;
P.ParameterMirror.$isObject = true;
P.ClassMirror.$isClassMirror = true;
P.ClassMirror.$isMirror = true;
P.ClassMirror.$isMirror = true;
P.ClassMirror.$isObject = true;
N.Logger.$isObject = true;
P.DeclarationMirror.$isMirror = true;
P.DeclarationMirror.$isObject = true;
P.VariableMirror.$isMirror = true;
P.VariableMirror.$isObject = true;
P.Mirror.$isMirror = true;
P.Mirror.$isObject = true;
T.ChangeRecord.$isChangeRecord = true;
T.ChangeRecord.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
W.HttpRequest.$isEventTarget = true;
W.HttpRequest.$isObject = true;
W.ProgressEvent.$isEvent = true;
W.ProgressEvent.$isObject = true;
P.Uri.$isUri = true;
P.Uri.$isObject = true;
P.TypeVariableMirror.$isMirror = true;
P.TypeVariableMirror.$isObject = true;
P.TypeMirror.$isMirror = true;
P.TypeMirror.$isObject = true;
X.NodeBinding.$isObject = true;
F.Observable.$isObject = true;
W.Event.$isEvent = true;
W.Event.$isObject = true;
P.Stream.$isStream = true;
P.Stream.$isObject = true;
W.MouseEvent.$isMouseEvent = true;
W.MouseEvent.$isEvent = true;
W.MouseEvent.$isObject = true;
M._BoundNodes.$isObject = true;
G.ListChangeRecord.$isListChangeRecord = true;
G.ListChangeRecord.$isObject = true;
Y.Token.$isObject = true;
U.Expression.$isExpression = true;
U.Expression.$isObject = true;
A.Polymer.$isElement = true;
A.Polymer.$isNode = true;
A.Polymer.$isEventTarget = true;
A.Polymer.$isObject = true;
A._PropertyValue.$isObject = true;
V._Range.$is_Range = true;
V._Range.$isObject = true;
R.Node0.$isNode0 = true;
R.Node0.$isObject = true;
V._Pair.$isObject = true;
W.NodeValidator.$isNodeValidator = true;
W.NodeValidator.$isObject = true;
W.KeyboardEvent.$isKeyboardEvent = true;
W.KeyboardEvent.$isEvent = true;
W.KeyboardEvent.$isObject = true;
B.SearchResult.$isComparable = true;
B.SearchResult.$asComparable = [null];
B.SearchResult.$isObject = true;
P.Type.$isObject = true;
W.Document.$isNode = true;
W.Document.$isEventTarget = true;
W.Document.$isObject = true;
P.ReceivePort.$isStream = true;
P.ReceivePort.$asStream = [null];
P.ReceivePort.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
W.ShadowRoot.$isNode = true;
W.ShadowRoot.$isEventTarget = true;
W.ShadowRoot.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
P._BufferingStreamSubscription.$is_BufferingStreamSubscription = true;
P._BufferingStreamSubscription.$is_EventSink = true;
P._BufferingStreamSubscription.$isStreamSubscription = true;
P._BufferingStreamSubscription.$isObject = true;
E.Item.$isItem = true;
E.Item.$isObject = true;
P._BroadcastSubscription.$is_BroadcastSubscription = true;
P._BroadcastSubscription.$is_BufferingStreamSubscription = true;
P._BroadcastSubscription.$is_EventSink = true;
P._BroadcastSubscription.$isStreamSubscription = true;
P._BroadcastSubscription.$isObject = true;
H.JsLibraryMirror.$isJsLibraryMirror = true;
H.JsLibraryMirror.$isLibraryMirror = true;
H.JsLibraryMirror.$isMirror = true;
H.JsLibraryMirror.$isMirror = true;
H.JsLibraryMirror.$isMirror = true;
H.JsLibraryMirror.$isMirror = true;
H.JsLibraryMirror.$isMirror = true;
H.JsLibraryMirror.$isObject = true;
P.ZoneDelegate.$isZoneDelegate = true;
P.ZoneDelegate.$isObject = true;
P.Zone.$isZone = true;
P.Zone.$isObject = true;
P.ZoneSpecification.$isZoneSpecification = true;
P.ZoneSpecification.$isObject = true;
P.Map.$isMap = true;
P.Map.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
W.EventTarget.$isEventTarget = true;
W.EventTarget.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
P.Timer.$isTimer = true;
P.Timer.$isObject = true;
W._Html5NodeValidator.$is_Html5NodeValidator = true;
W._Html5NodeValidator.$isNodeValidator = true;
W._Html5NodeValidator.$isObject = true;
P.Iterable.$isIterable = true;
P.Iterable.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.DateTime.$isDateTime = true;
P.DateTime.$isComparable = true;
P.DateTime.$asComparable = [null];
P.DateTime.$isObject = true;
P._DelayedEvent.$is_DelayedEvent = true;
P._DelayedEvent.$isObject = true;
W.SpeechRecognitionAlternative.$isSpeechRecognitionAlternative = true;
W.SpeechRecognitionAlternative.$isObject = true;
Y.DocsLocation.$isDocsLocation = true;
Y.DocsLocation.$isObject = true;
R.ScalarNode.$isScalarNode = true;
R.ScalarNode.$isNode0 = true;
R.ScalarNode.$isObject = true;
O.Visitor.$isVisitor = true;
O.Visitor.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
C.AnnotationElement_methods = Q.AnnotationElement.prototype;
C.C_EmptyExpression = new U.EmptyExpression();
C.C_EmptyIterator = new H.EmptyIterator();
C.C_JSArray = new J.JSArray();
C.C_JSBool = new J.JSBool();
C.C_JSDouble = new J.JSDouble();
C.C_JSInt = new J.JSInt();
C.C_JSNumber = new J.JSNumber();
C.C_JSString = new J.JSString();
C.C_JsonCodec = new P.JsonCodec();
C.C_ObservableProperty = new K.ObservableProperty();
C.C_PublishedProperty = new A.PublishedProperty();
C.C_Reflectable = new K.Reflectable();
C.C__DelayedDone = new P._DelayedDone();
C.C__InitMethodAnnotation = new A._InitMethodAnnotation();
C.C__RootZone = new P._RootZone();
C.C__RootZoneSpecification = new P._RootZoneSpecification();
C.CategoryElement_methods = N.CategoryElement.prototype;
C.ClassElement_methods = U.ClassElement.prototype;
C.CustomTag_8h9 = new A.CustomTag("dartdoc-annotation");
C.CustomTag_9IG = new A.CustomTag("dartdoc-variable");
C.CustomTag_CbU = new A.CustomTag("search-box");
C.CustomTag_KD4 = new A.CustomTag("dartdoc-library");
C.CustomTag_M4k = new A.CustomTag("method-panel");
C.CustomTag_QKd = new A.CustomTag("dartdoc-library-panel");
C.CustomTag_UBp = new A.CustomTag("dartdoc-minimap");
C.CustomTag_VO9 = new A.CustomTag("dartdoc-homepage");
C.CustomTag_W3i = new A.CustomTag("dartdoc-page");
C.CustomTag_Why = new A.CustomTag("dartdoc-category");
C.CustomTag_bh5 = new A.CustomTag("dartdoc-minimap-class");
C.CustomTag_dsQ = new A.CustomTag("dartdoc-parameter");
C.CustomTag_h3l = new A.CustomTag("dartdoc-item");
C.CustomTag_iPa = new A.CustomTag("dartdoc-method");
C.CustomTag_lnn = new A.CustomTag("variable-heading");
C.CustomTag_mLm = new A.CustomTag("dartdoc-typedef");
C.CustomTag_o0y = new A.CustomTag("search-result");
C.CustomTag_qRH = new A.CustomTag("dartdoc-class");
C.CustomTag_qRa = new A.CustomTag("dartdoc-main");
C.CustomTag_txY = new A.CustomTag("dartdoc-minimap-library");
C.DartdocElement_methods = E.DartdocElement.prototype;
C.DartdocMethod_methods = N.DartdocMethod.prototype;
C.Duration_0 = new P.Duration(0);
C.EventStreamProvider_blur = H.setRuntimeTypeInfo(new W.EventStreamProvider("blur"), [W.Event]);
C.EventStreamProvider_change = H.setRuntimeTypeInfo(new W.EventStreamProvider("change"), [W.Event]);
C.EventStreamProvider_click = H.setRuntimeTypeInfo(new W.EventStreamProvider("click"), [W.MouseEvent]);
C.EventStreamProvider_error = H.setRuntimeTypeInfo(new W.EventStreamProvider("error"), [W.ProgressEvent]);
C.EventStreamProvider_focus = H.setRuntimeTypeInfo(new W.EventStreamProvider("focus"), [W.Event]);
C.EventStreamProvider_hashchange = H.setRuntimeTypeInfo(new W.EventStreamProvider("hashchange"), [W.Event]);
C.EventStreamProvider_input = H.setRuntimeTypeInfo(new W.EventStreamProvider("input"), [W.Event]);
C.EventStreamProvider_keydown = H.setRuntimeTypeInfo(new W.EventStreamProvider("keydown"), [W.KeyboardEvent]);
C.EventStreamProvider_load = H.setRuntimeTypeInfo(new W.EventStreamProvider("load"), [W.ProgressEvent]);
C.EventStreamProvider_resize = H.setRuntimeTypeInfo(new W.EventStreamProvider("resize"), [W.Event]);
C.HomeElement_methods = A.HomeElement.prototype;
C.HttpRequest_methods = W.HttpRequest.prototype;
C.IndexElement_methods = B.IndexElement.prototype;
C.InheritedElement_methods = E.InheritedElement.prototype;
C.ItemElement_methods = A.ItemElement.prototype;
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_6qb = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_86y = function getTagFallback(o) {
  if (o == null) return "Null";
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.builtin$cls;
    if (typeof name == "string") return name;
    name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Cbr = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (userAgent.indexOf("Chrome") >= 0 ||
        userAgent.indexOf("DumpRenderTree") >= 0) {
      return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_TtD = function() {
  function typeNameInChrome(obj) { return obj.constructor.name; }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_ZYJ =     ((typeof version == "function" && typeof os == "object" && "system" in os)
    || (typeof navigator == "object"
        && navigator.userAgent.indexOf('Chrome') != -1))
        ? function(x) { return x.$dartCachedLength || x.length; }
        : function(x) { return x.length; };
;
C.JS_CONST_rD3 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    if (tag == "Document") return null;
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JsonDecoder_null = new P.JsonDecoder(null);
C.Level_FINER_400 = new N.Level("FINER", 400);
C.Level_FINE_500 = new N.Level("FINE", 500);
C.Level_INFO_800 = new N.Level("INFO", 800);
C.Level_WARNING_900 = new N.Level("WARNING", 900);
C.LibraryElement_methods = X.LibraryElement.prototype;
C.LibraryPanel_methods = Y.LibraryPanel.prototype;
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
C.List_127_2047_65535_1114111 = H.setRuntimeTypeInfo(Isolate.makeConstantList([127, 2047, 65535, 1114111]), [J.JSInt]);
C.List_1GN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [J.JSString]);
C.Symbol_required = new H.Symbol0("required");
C.Symbol_optional = new H.Symbol0("optional");
C.Symbol_annotations = new H.Symbol0("annotations");
C.Symbol_name = new H.Symbol0("name");
C.Symbol_location = new H.Symbol0("location");
C.Symbol_simpleType = new H.Symbol0("simpleType");
C.Symbol_parameters = new H.Symbol0("parameters");
C.List_2Sa = Isolate.makeConstantList([C.Symbol_required, C.Symbol_optional, C.Symbol_annotations, C.Symbol_name, C.Symbol_location, C.Symbol_simpleType, C.Symbol_parameters]);
C.Symbol_getter = new H.Symbol0("getter");
C.Symbol_setterParameter = new H.Symbol0("setterParameter");
C.Symbol_type = new H.Symbol0("type");
C.Symbol_idName = new H.Symbol0("idName");
C.List_4AN = Isolate.makeConstantList([C.Symbol_getter, C.Symbol_setterParameter, C.Symbol_type, C.Symbol_name, C.Symbol_idName]);
C.List_6Pr = Isolate.makeConstantList([0, 0, 26624, 1023, 0, 0, 65534, 2047]);
C.List_CVk = Isolate.makeConstantList([0, 0, 63450, 45055, 65535, 34815, 65534, 18431]);
C.List_JYB = Isolate.makeConstantList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]);
C.Symbol_operatorItems = new H.Symbol0("operatorItems");
C.Symbol_variableItems = new H.Symbol0("variableItems");
C.Symbol_constructorItems = new H.Symbol0("constructorItems");
C.Symbol_functionItems = new H.Symbol0("functionItems");
C.Symbol_operators = new H.Symbol0("operators");
C.Symbol_variables = new H.Symbol0("variables");
C.Symbol_constructors = new H.Symbol0("constructors");
C.Symbol_functions = new H.Symbol0("functions");
C.Symbol_staticVariables = new H.Symbol0("staticVariables");
C.Symbol_staticFunctions = new H.Symbol0("staticFunctions");
C.Symbol_staticFunctionItems = new H.Symbol0("staticFunctionItems");
C.Symbol_staticVariableItems = new H.Symbol0("staticVariableItems");
C.Symbol_operatorItemsIsNotEmpty = new H.Symbol0("operatorItemsIsNotEmpty");
C.Symbol_variableItemsIsNotEmpty = new H.Symbol0("variableItemsIsNotEmpty");
C.Symbol_staticVariableItemsIsNotEmpty = new H.Symbol0("staticVariableItemsIsNotEmpty");
C.Symbol_staticFunctionItemsIsNotEmpty = new H.Symbol0("staticFunctionItemsIsNotEmpty");
C.Symbol_constructorItemsIsNotEmpty = new H.Symbol0("constructorItemsIsNotEmpty");
C.Symbol_functionItemsIsNotEmpty = new H.Symbol0("functionItemsIsNotEmpty");
C.Symbol_page = new H.Symbol0("page");
C.Symbol_shouldShowConstructors = new H.Symbol0("shouldShowConstructors");
C.Symbol_shouldShowFunctions = new H.Symbol0("shouldShowFunctions");
C.Symbol_shouldShowVariables = new H.Symbol0("shouldShowVariables");
C.Symbol_shouldShowOperators = new H.Symbol0("shouldShowOperators");
C.Symbol_shouldShowStaticFunctions = new H.Symbol0("shouldShowStaticFunctions");
C.Symbol_shouldShowStaticVariables = new H.Symbol0("shouldShowStaticVariables");
C.Symbol_currentLocation = new H.Symbol0("currentLocation");
C.Symbol_linkHref = new H.Symbol0("linkHref");
C.List_Om5 = Isolate.makeConstantList([C.Symbol_operatorItems, C.Symbol_variableItems, C.Symbol_constructorItems, C.Symbol_functionItems, C.Symbol_operators, C.Symbol_variables, C.Symbol_constructors, C.Symbol_functions, C.Symbol_staticVariables, C.Symbol_staticFunctions, C.Symbol_staticFunctionItems, C.Symbol_staticVariableItems, C.Symbol_operatorItemsIsNotEmpty, C.Symbol_variableItemsIsNotEmpty, C.Symbol_staticVariableItemsIsNotEmpty, C.Symbol_staticFunctionItemsIsNotEmpty, C.Symbol_constructorItemsIsNotEmpty, C.Symbol_functionItemsIsNotEmpty, C.Symbol_page, C.Symbol_shouldShowConstructors, C.Symbol_shouldShowFunctions, C.Symbol_shouldShowVariables, C.Symbol_shouldShowOperators, C.Symbol_shouldShowStaticFunctions, C.Symbol_shouldShowStaticVariables, C.Symbol_name, C.Symbol_currentLocation, C.Symbol_linkHref]);
C.Symbol_modifiers = new H.Symbol0("modifiers");
C.Symbol_shouldShowMethodComment = new H.Symbol0("shouldShowMethodComment");
C.Symbol_isInherited = new H.Symbol0("isInherited");
C.Symbol_hasInheritedComment = new H.Symbol0("hasInheritedComment");
C.List_Rzl = Isolate.makeConstantList([C.Symbol_annotations, C.Symbol_modifiers, C.Symbol_shouldShowMethodComment, C.Symbol_parameters, C.Symbol_isInherited, C.Symbol_hasInheritedComment]);
C.List_Ss1 = Isolate.makeConstantList(["method", "operator", "getter", "setter", "variable", "constructor", "property"]);
C.Symbol_addAllParameters = new H.Symbol0("addAllParameters");
C.List_Symbol_addAllParameters = Isolate.makeConstantList([C.Symbol_addAllParameters]);
C.Symbol_addAnnotations = new H.Symbol0("addAnnotations");
C.List_Symbol_addAnnotations = Isolate.makeConstantList([C.Symbol_addAnnotations]);
C.Symbol_addChildren = new H.Symbol0("addChildren");
C.List_Symbol_addChildren = Isolate.makeConstantList([C.Symbol_addChildren]);
C.Symbol_addComment = new H.Symbol0("addComment");
C.List_Symbol_addComment = Isolate.makeConstantList([C.Symbol_addComment]);
C.List_Symbol_annotations = Isolate.makeConstantList([C.Symbol_annotations]);
C.Symbol_createMethodType = new H.Symbol0("createMethodType");
C.List_Symbol_createMethodType = Isolate.makeConstantList([C.Symbol_createMethodType]);
C.Symbol_createType = new H.Symbol0("createType");
C.List_Symbol_createType = Isolate.makeConstantList([C.Symbol_createType]);
C.Symbol_decoratedName = new H.Symbol0("decoratedName");
C.List_Symbol_decoratedName = Isolate.makeConstantList([C.Symbol_decoratedName]);
C.Symbol_item = new H.Symbol0("item");
C.List_Symbol_item_Symbol_idName = Isolate.makeConstantList([C.Symbol_item, C.Symbol_idName]);
C.Symbol_itemsToShow = new H.Symbol0("itemsToShow");
C.List_Symbol_itemsToShow = Isolate.makeConstantList([C.Symbol_itemsToShow]);
C.List_UiL = Isolate.makeConstantList([43, 45, 42, 47, 33, 38, 60, 61, 62, 63, 94, 124]);
C.List_Ynd = Isolate.makeConstantList(["==", "!=", "<=", ">=", "||", "&&"]);
C.Symbol_inheritedFrom = new H.Symbol0("inheritedFrom");
C.Symbol_commentFrom = new H.Symbol0("commentFrom");
C.List_chs = Isolate.makeConstantList([C.Symbol_inheritedFrom, C.Symbol_commentFrom, C.Symbol_isInherited, C.Symbol_hasInheritedComment]);
C.Symbol_optionalOpeningDelimiter = new H.Symbol0("optionalOpeningDelimiter");
C.Symbol_optionalClosingDelimiter = new H.Symbol0("optionalClosingDelimiter");
C.List_daG = Isolate.makeConstantList([C.Symbol_required, C.Symbol_optional, C.Symbol_optionalOpeningDelimiter, C.Symbol_optionalClosingDelimiter]);
C.List_empty = Isolate.makeConstantList([]);
C.List_empty0 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.TypeVariableMirror]);
C.List_empty1 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.TypeMirror]);
C.List_empty2 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.ClassMirror]);
C.Symbol_category = new H.Symbol0("category");
C.Symbol_categoryContent = new H.Symbol0("categoryContent");
C.Symbol_categoryVariables = new H.Symbol0("categoryVariables");
C.Symbol_categoryMethods = new H.Symbol0("categoryMethods");
C.Symbol_categoryEverythingElse = new H.Symbol0("categoryEverythingElse");
C.Symbol_title = new H.Symbol0("title");
C.Symbol_stylizedName = new H.Symbol0("stylizedName");
C.List_gc6 = Isolate.makeConstantList([C.Symbol_category, C.Symbol_categoryContent, C.Symbol_categoryVariables, C.Symbol_categoryMethods, C.Symbol_categoryEverythingElse, C.Symbol_currentLocation, C.Symbol_title, C.Symbol_stylizedName]);
C.Symbol_methods = new H.Symbol0("methods");
C.Symbol_staticMethods = new H.Symbol0("staticMethods");
C.Symbol_interfaces = new H.Symbol0("interfaces");
C.Symbol_subclasses = new H.Symbol0("subclasses");
C.Symbol_superClass = new H.Symbol0("superClass");
C.Symbol_nameWithGeneric = new H.Symbol0("nameWithGeneric");
C.Symbol_isNotObject = new H.Symbol0("isNotObject");
C.Symbol_shouldShowMethods = new H.Symbol0("shouldShowMethods");
C.Symbol_shouldShowStaticMethods = new H.Symbol0("shouldShowStaticMethods");
C.List_h00 = Isolate.makeConstantList([C.Symbol_variables, C.Symbol_operators, C.Symbol_constructors, C.Symbol_methods, C.Symbol_staticMethods, C.Symbol_staticVariables, C.Symbol_annotations, C.Symbol_interfaces, C.Symbol_subclasses, C.Symbol_superClass, C.Symbol_nameWithGeneric, C.Symbol_name, C.Symbol_isNotObject, C.Symbol_shouldShowOperators, C.Symbol_shouldShowVariables, C.Symbol_shouldShowConstructors, C.Symbol_shouldShowMethods, C.Symbol_shouldShowStaticMethods, C.Symbol_shouldShowStaticVariables]);
C.List_in_this = Isolate.makeConstantList(["in", "this"]);
C.Symbol_classes = new H.Symbol0("classes");
C.Symbol_typedefs = new H.Symbol0("typedefs");
C.Symbol_errors = new H.Symbol0("errors");
C.Symbol_operatorsIsNotEmpty = new H.Symbol0("operatorsIsNotEmpty");
C.Symbol_variablesIsNotEmpty = new H.Symbol0("variablesIsNotEmpty");
C.Symbol_functionsIsNotEmpty = new H.Symbol0("functionsIsNotEmpty");
C.Symbol_classesIsNotEmpty = new H.Symbol0("classesIsNotEmpty");
C.Symbol_typedefsIsNotEmpty = new H.Symbol0("typedefsIsNotEmpty");
C.Symbol_errorsIsNotEmpty = new H.Symbol0("errorsIsNotEmpty");
C.List_kjl = Isolate.makeConstantList([C.Symbol_operators, C.Symbol_variables, C.Symbol_functions, C.Symbol_classes, C.Symbol_typedefs, C.Symbol_errors, C.Symbol_operatorsIsNotEmpty, C.Symbol_variablesIsNotEmpty, C.Symbol_functionsIsNotEmpty, C.Symbol_classesIsNotEmpty, C.Symbol_typedefsIsNotEmpty, C.Symbol_errorsIsNotEmpty]);
C.List_nNJ = Isolate.makeConstantList([C.Symbol_annotations, C.Symbol_modifiers, C.Symbol_shouldShowMethodComment]);
C.List_nxB = Isolate.makeConstantList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]);
C.Symbol_classItems = new H.Symbol0("classItems");
C.Symbol_typedefItems = new H.Symbol0("typedefItems");
C.Symbol_errorItems = new H.Symbol0("errorItems");
C.Symbol_classItemsIsNotEmpty = new H.Symbol0("classItemsIsNotEmpty");
C.Symbol_typedefItemsIsNotEmpty = new H.Symbol0("typedefItemsIsNotEmpty");
C.Symbol_errorItemsIsNotEmpty = new H.Symbol0("errorItemsIsNotEmpty");
C.List_oSr = Isolate.makeConstantList([C.Symbol_operatorItems, C.Symbol_variableItems, C.Symbol_functionItems, C.Symbol_classItems, C.Symbol_typedefItems, C.Symbol_errorItems, C.Symbol_operatorItemsIsNotEmpty, C.Symbol_variableItemsIsNotEmpty, C.Symbol_functionItemsIsNotEmpty, C.Symbol_classItemsIsNotEmpty, C.Symbol_typedefItemsIsNotEmpty, C.Symbol_errorItemsIsNotEmpty, C.Symbol_name, C.Symbol_linkHref, C.Symbol_currentLocation, C.Symbol_idName]);
C.Symbol_libraries = new H.Symbol0("libraries");
C.List_od9 = Isolate.makeConstantList([C.Symbol_libraries, C.Symbol_addChildren]);
C.List_qg4 = Isolate.makeConstantList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]);
C.Symbol_isMethod = new H.Symbol0("isMethod");
C.Symbol_Mi7 = new H.Symbol0("shouldShowClassOrLibraryComment");
C.List_sAO = Isolate.makeConstantList([C.Symbol_title, C.Symbol_parameters, C.Symbol_type, C.Symbol_linkHref, C.Symbol_isMethod, C.Symbol_modifiers, C.Symbol_Mi7, C.Symbol_shouldShowMethodComment, C.Symbol_idName]);
C.Symbol_addInterfaceLinks = new H.Symbol0("addInterfaceLinks");
C.Symbol_addSubclassLinks = new H.Symbol0("addSubclassLinks");
C.List_sYh = Isolate.makeConstantList([C.Symbol_addInterfaceLinks, C.Symbol_addSubclassLinks]);
C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [J.JSString]);
C.List_ww8 = Isolate.makeConstantList([40, 41, 91, 93, 123, 125]);
C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [J.JSString]);
C.List_05B = Isolate.makeConstantList(["caption", "col", "colgroup", "option", "optgroup", "tbody", "td", "tfoot", "th", "thead", "tr"]);
C.Map_05eTF = new H.ConstantStringMap(11, {caption: null, col: null, colgroup: null, option: null, optgroup: null, tbody: null, td: null, tfoot: null, th: null, thead: null, tr: null}, C.List_05B);
C.List_48l = Isolate.makeConstantList(["webkitanimationstart", "webkitanimationend", "webkittransitionend", "domfocusout", "domfocusin", "animationend", "animationiteration", "animationstart", "doubleclick", "fullscreenchange", "fullscreenerror", "keyadded", "keyerror", "keymessage", "needkey", "speechchange"]);
C.Map_484CA = new H.ConstantStringMap(16, {webkitanimationstart: "webkitAnimationStart", webkitanimationend: "webkitAnimationEnd", webkittransitionend: "webkitTransitionEnd", domfocusout: "DOMFocusOut", domfocusin: "DOMFocusIn", animationend: "webkitAnimationEnd", animationiteration: "webkitAnimationIteration", animationstart: "webkitAnimationStart", doubleclick: "dblclick", fullscreenchange: "webkitfullscreenchange", fullscreenerror: "webkitfullscreenerror", keyadded: "webkitkeyadded", keyerror: "webkitkeyerror", keymessage: "webkitkeymessage", needkey: "webkitneedkey", speechchange: "webkitSpeechChange"}, C.List_48l);
C.List_FKi = Isolate.makeConstantList(["!", ":", ",", ")", "]", "}", "?", "||", "&&", "|", "^", "&", "!=", "==", ">=", ">", "<=", "<", "+", "-", "%", "/", "*", "(", "[", ".", "{"]);
C.Map_FKtZ4 = new H.ConstantStringMap(27, {"!": 0, ":": 0, ",": 0, ")": 0, "]": 0, "}": 0, "?": 1, "||": 2, "&&": 3, "|": 4, "^": 5, "&": 6, "!=": 7, "==": 7, ">=": 8, ">": 8, "<=": 8, "<": 8, "+": 9, "-": 9, "%": 10, "/": 10, "*": 10, "(": 11, "[": 11, ".": 11, "{": 11}, C.List_FKi);
C.List_c9P = Isolate.makeConstantList(["name", "extends", "constructor", "noscript", "attributes"]);
C.Map_c94aj = new H.ConstantStringMap(5, {name: 1, extends: 1, constructor: 1, noscript: 1, attributes: 1}, C.List_c9P);
C.List_enumerate = Isolate.makeConstantList(["enumerate"]);
C.Map_wgEsG = new H.ConstantStringMap(1, {enumerate: K.enumerate$closure}, C.List_enumerate);
C.MemberElement_methods = E.MemberElement.prototype;
C.MethodElement_methods = E.MethodElement.prototype;
C.MethodPanel_methods = D.MethodPanel.prototype;
C.MinimapElementClass_methods = M.MinimapElementClass.prototype;
C.MinimapElementLibrary_methods = B.MinimapElementLibrary.prototype;
C.MinimapElement_methods = A.MinimapElement.prototype;
C.NodeList_methods = W.NodeList.prototype;
C.PageElement_methods = Y.PageElement.prototype;
C.ParameterElement_methods = R.ParameterElement.prototype;
C.PolymerDeclaration_methods = A.PolymerDeclaration.prototype;
C.PolymerElement_methods = A.PolymerElement.prototype;
C.Result_methods = L.Result.prototype;
C.ScrollAlignment_BOTTOM = new W.ScrollAlignment("BOTTOM");
C.ScrollAlignment_CENTER = new W.ScrollAlignment("CENTER");
C.ScrollAlignment_TOP = new W.ScrollAlignment("TOP");
C.Search_methods = B.Search.prototype;
C.Symbol_46c = new H.Symbol0("dart.core.Object");
C.Symbol_4YB = new H.Symbol0("dart.core.DateTime");
C.Symbol_6TA = new H.Symbol0("dart.core.bool");
C.Symbol_Directory = new H.Symbol0("Directory");
C.Symbol_Platform = new H.Symbol0("Platform");
C.Symbol_Qyo = new H.Symbol0("[]");
C.Symbol_accordionParent = new H.Symbol0("accordionParent");
C.Symbol_accordionStyle = new H.Symbol0("accordionStyle");
C.Symbol_breadcrumbs = new H.Symbol0("breadcrumbs");
C.Symbol_buildIdentifier = new H.Symbol0("buildIdentifier");
C.Symbol_call = new H.Symbol0("call");
C.Symbol_comment = new H.Symbol0("comment");
C.Symbol_createEntries = new H.Symbol0("createEntries");
C.Symbol_createRuntimeType = new H.Symbol0("createRuntimeType");
C.Symbol_crumbs = new H.Symbol0("crumbs");
C.Symbol_current = new H.Symbol0("current");
C.Symbol_currentPage = new H.Symbol0("currentPage");
C.Symbol_currentPageIsClass = new H.Symbol0("currentPageIsClass");
C.Symbol_currentPageIsLibrary = new H.Symbol0("currentPageIsLibrary");
C.Symbol_currentPageIsMethod = new H.Symbol0("currentPageIsMethod");
C.Symbol_currentPageIsTypedef = new H.Symbol0("currentPageIsTypedef");
C.Symbol_descriptiveName = new H.Symbol0("descriptiveName");
C.Symbol_descriptiveType = new H.Symbol0("descriptiveType");
C.Symbol_divClass = new H.Symbol0("divClass");
C.Symbol_dropdownOpen = new H.Symbol0("dropdownOpen");
C.Symbol_dynamic = new H.Symbol0("dynamic");
C.Symbol_hasHomePage = new H.Symbol0("hasHomePage");
C.Symbol_hasNoResults = new H.Symbol0("hasNoResults");
C.Symbol_home = new H.Symbol0("home");
C.Symbol_homePage = new H.Symbol0("homePage");
C.Symbol_iC9 = new H.Symbol0("dart.core.String");
C.Symbol_isDesktop = new H.Symbol0("isDesktop");
C.Symbol_isFocused = new H.Symbol0("isFocused");
C.Symbol_isHome = new H.Symbol0("isHome");
C.Symbol_isMinimap = new H.Symbol0("isMinimap");
C.Symbol_isPanel = new H.Symbol0("isPanel");
C.Symbol_length = new H.Symbol0("length");
C.Symbol_mdn = new H.Symbol0("dart.core.int");
C.Symbol_noSuchMethod = new H.Symbol0("noSuchMethod");
C.Symbol_operatingSystem = new H.Symbol0("operatingSystem");
C.Symbol_outerLibrary = new H.Symbol0("outerLibrary");
C.Symbol_pageContentClass = new H.Symbol0("pageContentClass");
C.Symbol_registerCallback = new H.Symbol0("registerCallback");
C.Symbol_results = new H.Symbol0("results");
C.Symbol_s2s = new H.Symbol0("dart.core.Null");
C.Symbol_sMO = new H.Symbol0("dart.core.double");
C.Symbol_sgp = new H.Symbol0("[]=");
C.Symbol_shouldShowClassMinimap = new H.Symbol0("shouldShowClassMinimap");
C.Symbol_shouldShowLibraryMinimap = new H.Symbol0("shouldShowLibraryMinimap");
C.Symbol_showPkgLibraries = new H.Symbol0("showPkgLibraries");
C.Symbol_value = new H.Symbol0("value");
C.Symbol_window = new H.Symbol0("window");
C.Type_2Vk = H.createRuntimeType('IndexedValue');
C.TypeVariable_bBG = new H.TypeVariable(C.Type_2Vk, "V", 0);
C.Type_ejQ = H.createRuntimeType('ObservableBox');
C.TypeVariable_mDP = new H.TypeVariable(C.Type_ejQ, "T", 0);
C.Type_caQ = H.createRuntimeType('ObservableMap');
C.TypeVariable_pea = new H.TypeVariable(C.Type_caQ, "V", 0);
C.TypeVariable_wAg = new H.TypeVariable(C.Type_caQ, "K", 0);
C.Type_3JM = H.createRuntimeType('MinimapElementClass');
C.Type_71F = H.createRuntimeType('Search');
C.Type_7dl = H.createRuntimeType('MethodElement');
C.Type_8aB = H.createRuntimeType('InheritedElement');
C.Type_A4h = H.createRuntimeType('LibraryElement');
C.Type_AGr = H.createRuntimeType('JsTypeVariableMirror');
C.Type_Auo = H.createRuntimeType('IndexElement');
C.Type_E34 = H.createRuntimeType('ClassElement');
C.Type_E8w = H.createRuntimeType('VariableHeading');
C.Type_EjN = H.createRuntimeType('Function');
C.Type_Ejg = H.createRuntimeType('String');
C.Type_EsU = H.createRuntimeType('bool');
C.Type_Fut = H.createRuntimeType('LibraryPanel');
C.Type_HqF = H.createRuntimeType('Object');
C.Type_I2I = H.createRuntimeType('PolymerElement');
C.Type_I42 = H.createRuntimeType('DartdocElement');
C.Type_I6W = H.createRuntimeType('CategoryElement');
C.Type_OLv = H.createRuntimeType('AnnotationElement');
C.Type_Q7f = H.createRuntimeType('MethodPanel');
C.Type_SnA = H.createRuntimeType('int');
C.Type_WvL = H.createRuntimeType('DartdocMethod');
C.Type_XXD = H.createRuntimeType('JSObject');
C.Type_Y1G = H.createRuntimeType('HomeElement');
C.Type_YnA = H.createRuntimeType('PolymerDeclaration');
C.Type_Zuq = H.createRuntimeType('ItemElement');
C.Type_ah5 = H.createRuntimeType('ClassMirror');
C.Type_alO = H.createRuntimeType('ParameterElement');
C.Type_apa = H.createRuntimeType('MinimapElement');
C.Type_dVs = H.createRuntimeType('DateTime');
C.Type_e5Z = H.createRuntimeType('dynamic');
C.Type_eZO = H.createRuntimeType('Null');
C.Type_maL = H.createRuntimeType('PageElement');
C.Type_mqB = H.createRuntimeType('MinimapElementLibrary');
C.Type_o2w = H.createRuntimeType('TypedefElement');
C.Type_ohR = H.createRuntimeType('MemberElement');
C.Type_oqh = H.createRuntimeType('Uint64List');
C.Type_qq1 = H.createRuntimeType('double');
C.Type_qx4 = H.createRuntimeType('Result');
C.Type_qxd = H.createRuntimeType('Int64List');
C.Type_ytw = H.createRuntimeType('VariableElement');
C.TypedefElement_methods = M.TypedefElement.prototype;
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Utf8Codec_false = new P.Utf8Codec(false);
C.VariableElement_methods = Y.VariableElement.prototype;
C.VariableHeading_methods = T.VariableHeading.prototype;
C.Window_methods = W.Window.prototype;
C._CustomEventStreamProvider__determineTransitionEventType = H.setRuntimeTypeInfo(new W._CustomEventStreamProvider(W.Element__determineTransitionEventType$closure), [W.TransitionEvent]);
C._ZoneSpecification_woc = new P._ZoneSpecification(null, null, null, null, null, null, null, null, null, null, null, null);
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.printToZone = null;
$.classMirrors = null;
$._callbacksAreEnqueued = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Element__parseDocument = null;
$.Element__parseRange = null;
$.Element__defaultValidator = null;
$.Element__defaultSanitizer = null;
$.sourcePath = "docs/library_list.json";
$._dartdocMain = null;
$.location = null;
$.isYaml = false;
$.Device__isOpera = null;
$.Device__isWebKit = null;
$.hierarchicalLoggingEnabled = false;
$._rootLevel = C.Level_INFO_800;
$.LogRecord__nextNumber = 0;
$._allObservablesCount = 0;
$._allObservables = null;
$._delivering = false;
$.Polymer__preparingElements = 0;
$._useDirtyChecking = true;
$.TemplateBindExtension__initStyles = null;
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return J.getInterceptor$n(receiver).$and(receiver, a0);
};
J.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return J.getInterceptor$n(receiver).$div(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return J.getInterceptor$n(receiver).$le(receiver, a0);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$n(receiver).$mul(receiver, a0);
};
J.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return J.getInterceptor$n(receiver).$negate(receiver);
};
J.$shl$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$shl(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.$tdiv$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
J.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return J.getInterceptor$n(receiver).$xor(receiver, a0);
};
J._initMouseEvent$15$x = function(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
  return J.getInterceptor$x(receiver)._initMouseEvent$15(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
};
J._publish$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver)._publish$1(receiver, a0);
};
J._replaceChild$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
};
J.accept$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).accept$1(receiver, a0);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addAll$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.any$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).any$1(receiver, a0);
};
J.append$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).append$1(receiver, a0);
};
J.attributeChanged$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).attributeChanged$3(receiver, a0, a1, a2);
};
J.bind$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).bind$3(receiver, a0, a1, a2);
};
J.clear$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).clear$0(receiver);
};
J.clone$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).clone$1(receiver, a0);
};
J.close$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).close$0(receiver);
};
J.codeUnitAt$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.createDocumentFragment$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createDocumentFragment$0(receiver);
};
J.createFragment$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).createFragment$1(receiver, a0);
};
J.createFragment$2$treeSanitizer$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).createFragment$2$treeSanitizer(receiver, a0, a1);
};
J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.endsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
};
J.enteredView$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).enteredView$0(receiver);
};
J.firstWhere$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).firstWhere$1(receiver, a0);
};
J.firstWhere$2$orElse$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).firstWhere$2$orElse(receiver, a0, a1);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$_children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_children(receiver);
};
J.get$_eventDelegates$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_eventDelegates(receiver);
};
J.get$_instanceAttributes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_instanceAttributes(receiver);
};
J.get$_name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_name(receiver);
};
J.get$_polymer$_observe$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_polymer$_observe(receiver);
};
J.get$_polymer$_publish$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_polymer$_publish(receiver);
};
J.get$_publishLC$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_publishLC(receiver);
};
J.get$addChildren$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$addChildren(receiver);
};
J.get$annotations$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$annotations(receiver);
};
J.get$attributes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$attributes(receiver);
};
J.get$bindings$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$bindings(receiver);
};
J.get$bound$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$bound(receiver);
};
J.get$changes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$changes(receiver);
};
J.get$checked$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$checked(receiver);
};
J.get$children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$children(receiver);
};
J.get$className$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$className(receiver);
};
J.get$classes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$classes(receiver);
};
J.get$codeUnits$s = function(receiver) {
  return J.getInterceptor$s(receiver).get$codeUnits(receiver);
};
J.get$commentFrom$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$commentFrom(receiver);
};
J.get$constructors$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$constructors(receiver);
};
J.get$content$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$content(receiver);
};
J.get$dataset$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$dataset(receiver);
};
J.get$decoratedName$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$decoratedName(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$errors$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$errors(receiver);
};
J.get$first$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$first(receiver);
};
J.get$functions$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$functions(receiver);
};
J.get$hash$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$hash(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$home$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$home(receiver);
};
J.get$host$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$host(receiver);
};
J.get$href$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$href(receiver);
};
J.get$id$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$id(receiver);
};
J.get$inheritedFrom$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$inheritedFrom(receiver);
};
J.get$isConstructor$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$isConstructor(receiver);
};
J.get$isEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
J.get$isFinal$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$isFinal(receiver);
};
J.get$isInherited$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$isInherited(receiver);
};
J.get$isNotEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
};
J.get$item$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$item(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$key$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$key(receiver);
};
J.get$kind$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$kind(receiver);
};
J.get$last$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$last(receiver);
};
J.get$lastChild$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lastChild(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$libraries$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$libraries(receiver);
};
J.get$linkHref$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$linkHref(receiver);
};
J.get$localName$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$localName(receiver);
};
J.get$location$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$location(receiver);
};
J.get$message$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$message(receiver);
};
J.get$methods$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$methods(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$nameWithGeneric$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nameWithGeneric(receiver);
};
J.get$newValue$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$newValue(receiver);
};
J.get$nextNode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nextNode(receiver);
};
J.get$nodes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodes(receiver);
};
J.get$oldValue$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$oldValue(receiver);
};
J.get$on$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$on(receiver);
};
J.get$operators$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$operators(receiver);
};
J.get$optional$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$optional(receiver);
};
J.get$ownerDocument$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$ownerDocument(receiver);
};
J.get$parameters$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parameters(receiver);
};
J.get$parent$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parent(receiver);
};
J.get$parentNode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parentNode(receiver);
};
J.get$path$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$path(receiver);
};
J.get$pathname$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$pathname(receiver);
};
J.get$protocol$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$protocol(receiver);
};
J.get$responseText$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$responseText(receiver);
};
J.get$reversed$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$reversed(receiver);
};
J.get$runtimeType$ = function(receiver) {
  return J.getInterceptor(receiver).get$runtimeType(receiver);
};
J.get$selectedIndex$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$selectedIndex(receiver);
};
J.get$setterParameter$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$setterParameter(receiver);
};
J.get$simpleType$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$simpleType(receiver);
};
J.get$staticFunctions$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$staticFunctions(receiver);
};
J.get$staticVariables$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$staticVariables(receiver);
};
J.get$subclasses$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$subclasses(receiver);
};
J.get$superClass$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$superClass(receiver);
};
J.get$superDeclaration$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$superDeclaration(receiver);
};
J.get$tagName$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$tagName(receiver);
};
J.get$target$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$target(receiver);
};
J.get$timeStamp$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$timeStamp(receiver);
};
J.get$type$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$type(receiver);
};
J.get$typedefs$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$typedefs(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$values$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$values(receiver);
};
J.get$variables$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$variables(receiver);
};
J.getElementById$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getElementById$1(receiver, a0);
};
J.indexOf$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
};
J.insert$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).insert$2(receiver, a0, a1);
};
J.insertAdjacentText$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).insertAdjacentText$2(receiver, a0, a1);
};
J.join$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).join$1(receiver, a0);
};
J.leftView$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).leftView$0(receiver);
};
J.load$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).load$0(receiver);
};
J.map$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).map$1(receiver, a0);
};
J.matchAsPrefix$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
};
J.matches$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).matches$1(receiver, a0);
};
J.matchesWithAncestors$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).matchesWithAncestors$1(receiver, a0);
};
J.noSuchMethod$1 = function(receiver, a0) {
  return J.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
};
J.normalCrumb$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).normalCrumb$1(receiver, a0);
};
J.notifyPropertyChange$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).notifyPropertyChange$3(receiver, a0, a1, a2);
};
J.observeArrayValue$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).observeArrayValue$3(receiver, a0, a1, a2);
};
J.print$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).print$1(receiver, a0);
};
J.queryAll$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).queryAll$1(receiver, a0);
};
J.querySelectorAll$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).querySelectorAll$1(receiver, a0);
};
J.reflectPropertyToAttribute$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).reflectPropertyToAttribute$1(receiver, a0);
};
J.registerWhenReady$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).registerWhenReady$0(receiver);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.removeLast$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).removeLast$0(receiver);
};
J.replaceAll$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
J.replaceFirst$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceFirst$2(receiver, a0, a1);
};
J.replaceWith$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
J.round$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).round$0(receiver);
};
J.searchSubmitted$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).searchSubmitted$0(receiver);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$_annotations$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$_annotations(receiver, value);
};
J.set$_item$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$_item(receiver, value);
};
J.set$_items$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$_items(receiver, value);
};
J.set$_parameters$_parameters$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$_parameters$_parameters(receiver, value);
};
J.set$_selector$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$_selector(receiver, value);
};
J.set$checked$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$checked(receiver, value);
};
J.set$className$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$className(receiver, value);
};
J.set$classes$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$classes(receiver, value);
};
J.set$content$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$content(receiver, value);
};
J.set$height$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$height(receiver, value);
};
J.set$href$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$href(receiver, value);
};
J.set$length$asx = function(receiver, value) {
  return J.getInterceptor$asx(receiver).set$length(receiver, value);
};
J.set$newValue$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$newValue(receiver, value);
};
J.set$parameters$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$parameters(receiver, value);
};
J.set$position$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$position(receiver, value);
};
J.set$selectedIndex$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$selectedIndex(receiver, value);
};
J.set$tag$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$tag(receiver, value);
};
J.set$text$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$text(receiver, value);
};
J.set$type$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$type(receiver, value);
};
J.set$value$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$value(receiver, value);
};
J.setProperty$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).setProperty$2(receiver, a0, a1);
};
J.skip$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
};
J.sort$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.startsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
J.substring$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).substring$1(receiver, a0);
};
J.substring$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
J.take$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).take$1(receiver, a0);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.toStringAsExponential$1$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).toStringAsExponential$1(receiver, a0);
};
J.toUpperCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toUpperCase$0(receiver);
};
J.trim$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).trim$0(receiver);
};
J.unbind$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).unbind$1(receiver, a0);
};
J.unbindAll$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).unbindAll$0(receiver);
};
J.where$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).where$1(receiver, a0);
};
$.interceptedNames = ["$add", "$and", "$div", "$eq", "$ge", "$gt", "$index", "$indexSet", "$le", "$lt", "$mul", "$negate", "$shl", "$shr", "$sub", "$tdiv", "$xor", "CategoryElement$created$0", "ClassElement$created$0", "Element$created$0", "HomeElement$created$0", "ItemElement$created$0", "LibraryPanel$created$0", "MemberElement$created$0", "MethodPanel$created$0", "MinimapElement$created$0", "MinimapElementClass$created$0", "PolymerDeclaration$created$0", "PolymerElement$created$0", "VariableElement$created$0", "_checkIndex$2", "_checkSublistArguments$3", "_ensureRequestAnimationFrame$0", "_flushCache$0", "_initMouseEvent$15", "_insertAdjacentNode$2", "_invalidIndex$2", "_isNotEmpty$1", "_lowerCaseMap$1", "_observe$1", "_publish$1", "_rangeCheck$2", "_replaceChild$2", "_requestAnimationFrame$1", "abs$0", "accept$1", "accordionParentFor$1", "accordionStyleFor$1", "accumulateInstanceAttributes$0", "add$1", "addAll$1", "addAllParameters$0", "addAnnotations$0", "addAttributeDelegates$1", "addChildren$0", "addComment$1", "addComment$2", "addComment$3", "addEventListener$3", "addExtraSubclassLinks$0", "addHostListeners$0", "addInterfaceLinks$0", "addNodeListeners$3", "addParameters$3", "addSubclassLinks$0", "allMatches$1", "any$1", "append$1", "asyncUnbindAll$0", "attributeChanged$3", "attributeToProperty$2", "bind$3", "buildType$2", "cacheSheets$0", "cacheStyles$0", "cancelUnbindAll$0", "cancelUnbindAll$1$preventCascade", "check$1", "check$2", "clear$0", "clone$1", "close$0", "codeUnitAt$1", "compareTo$1", "complete$0", "complete$1", "concat$2", "contains$1", "contains$2", "contents$1", "copyInstanceAttributes$0", "createDocumentFragment$0", "createEntries$0", "createFragment$1", "createFragment$2$treeSanitizer", "createFragment$2$validator", "createFragment$3$treeSanitizer$validator", "createMethodType$0", "createShadowRoot$0", "createType$3", "crumbs$0", "cssTextForScope$1", "cssTextToScopeStyle$2", "decoratedName$1", "deliverChanges$0", "desugar$2", "dispatchMethod$3", "divClassFor$1", "elementAt$1", "endsWith$1", "enteredView$0", "error$1", "exists$1", "finalCrumb$1", "findNodes$1", "findNodes$2", "firstWhere$1", "firstWhere$2$defaultValue", "firstWhere$2$orElse", "focus$0", "fold$2", "forEach$1", "get$$$", "get$_annotations", "get$_buildIdentifier", "get$_cachedMirror", "get$_category", "get$_children", "get$_customTagName", "get$_eventDelegates", "get$_everythingElseCache", "get$_instanceAttributes", "get$_item", "get$_items", "get$_member$__$commentFrom", "get$_member$__$inheritedFrom", "get$_methodsCache", "get$_name", "get$_openedAt", "get$_page$__$home", "get$_parameters$_parameters", "get$_pathname", "get$_polymer$_observe", "get$_polymer$_publish", "get$_publishLC", "get$_results$_item", "get$_search$__$isFocused", "get$_searchQuery", "get$_variablesCache", "get$abstractModifier", "get$accordionParent", "get$accordionStyle", "get$addChildren", "get$annotations", "get$applyAuthorStyles", "get$attributes", "get$bindings", "get$bound", "get$breadcrumbs", "get$bubbles", "get$buildIdentifier", "get$category", "get$categoryContent", "get$categoryEverythingElse", "get$categoryMethods", "get$categoryVariables", "get$changes", "get$checked", "get$children", "get$classItems", "get$classItemsIsNotEmpty", "get$className", "get$classes", "get$classesIsNotEmpty", "get$clear", "get$codeUnits", "get$commentFrom", "get$constantModifier", "get$constructorItems", "get$constructorItemsIsNotEmpty", "get$constructors", "get$content", "get$ctrlKey", "get$currentIndex", "get$currentLocation", "get$currentPage", "get$currentPageIsClass", "get$currentPageIsLibrary", "get$currentPageIsMethod", "get$currentPageIsTypedef", "get$dataset", "get$decoratedName", "get$defaultItem", "get$defaultValue", "get$descriptiveName", "get$descriptiveType", "get$detail", "get$divClass", "get$dropdownOpen", "get$entries", "get$error", "get$errorItems", "get$errorItemsIsNotEmpty", "get$errors", "get$errorsIsNotEmpty", "get$first", "get$firstChild", "get$form", "get$functionItems", "get$functionItemsIsNotEmpty", "get$functions", "get$functionsIsNotEmpty", "get$getter", "get$hasHomePage", "get$hasInheritedComment", "get$hasNoResults", "get$hasObservers", "get$hash", "get$hashCode", "get$home", "get$homePage", "get$host", "get$hostname", "get$href", "get$id", "get$idName", "get$index", "get$inheritedFrom", "get$interfaces", "get$isConstructor", "get$isEmpty", "get$isFinal", "get$isFocused", "get$isHome", "get$isInherited", "get$isMethod", "get$isNaN", "get$isNegative", "get$isNotEmpty", "get$isNotObject", "get$item", "get$items", "get$itemsToShow", "get$iterator", "get$key", "get$keyCode", "get$kind", "get$last", "get$lastChild", "get$left", "get$length", "get$libraries", "get$link", "get$linkHref", "get$localName", "get$location", "get$membertype", "get$message", "get$method", "get$methods", "get$methodsToCall", "get$mirror", "get$modifiers", "get$name", "get$nameWithGeneric", "get$nameWithoutSetter", "get$newValue", "get$nextNode", "get$nodeType", "get$nodes", "get$observableValues", "get$observables", "get$oldValue", "get$on", "get$onChange", "get$onClick", "get$onInput", "get$operator", "get$operatorItems", "get$operatorItemsIsNotEmpty", "get$operators", "get$operatorsIsNotEmpty", "get$optional", "get$optionalClosingDelimiter", "get$optionalOpeningDelimiter", "get$outerLibrary", "get$ownerDocument", "get$page", "get$pageContentClass", "get$pageNameSeparator", "get$parameters", "get$parent", "get$parentNode", "get$path", "get$pathname", "get$port", "get$position", "get$print", "get$protocol", "get$qualifiedname", "get$required", "get$responseText", "get$results", "get$reversed", "get$right", "get$runtimeType", "get$searchBox", "get$searchQuery", "get$selectedIndex", "get$setterParameter", "get$shadowRoot", "get$shouldShowClassMinimap", "get$shouldShowClassOrLibraryComment", "get$shouldShowConstructors", "get$shouldShowFunctions", "get$shouldShowLibraryMinimap", "get$shouldShowMethodComment", "get$shouldShowMethods", "get$shouldShowOperators", "get$shouldShowStaticFunctions", "get$shouldShowStaticMethods", "get$shouldShowStaticVariables", "get$shouldShowVariables", "get$simpleType", "get$single", "get$src", "get$staticFunctionItems", "get$staticFunctionItemsIsNotEmpty", "get$staticFunctions", "get$staticMethods", "get$staticModifier", "get$staticVariableItems", "get$staticVariableItemsIsNotEmpty", "get$staticVariables", "get$stylizedName", "get$subclasses", "get$superClass", "get$superDeclaration", "get$tagName", "get$target", "get$templateContent", "get$text", "get$timeStamp", "get$title", "get$type", "get$typedefItems", "get$typedefItemsIsNotEmpty", "get$typedefs", "get$typedefsIsNotEmpty", "get$url", "get$validator", "get$value", "get$values", "get$variableItems", "get$variableItemsIsNotEmpty", "get$variables", "get$variablesIsNotEmpty", "get$viewer", "get$x", "get$y", "getElementById$1", "getPropertyValue$1", "getRange$2", "handleClick$1", "handleUpDown$1", "hideOptionsMenu$0", "hideOptionsMenuWhenClickedOutside$1", "hideShow$3", "hostEventListener$1", "indexOf$1", "indexOf$2", "inferObservers$1", "insert$2", "insertAdjacentText$2", "insertBefore$2", "installGlobalStyles$0", "installLocalSheets$0", "item$1", "items$1", "join$0", "join$1", "join$8", "lastIndexOf$1", "lastIndexOf$2", "leftView$0", "lightFromTemplate$1", "link$1", "linkHref$1", "load$0", "locationValidInContext$1", "makeLinks$1", "map$1", "marshalNodeReferences$1", "matchAsPrefix$1", "matchAsPrefix$2", "matches$1", "matchesWithAncestors$1", "navHideShow$3", "newElement$2", "noSuchMethod$1", "normalCrumb$1", "notifyChange$1", "notifyObservables$1", "notifyPropertyChange$3", "notifyPropertyChanges$1", "observeArrayValue$3", "observeProperties$0", "observed$0", "onBlurCallback$1", "onError$1", "onFocusCallback$1", "onSubmitCallback$3", "open$3$async", "open$5$async$password$user", "parseDeclaration$1", "parseDeclarations$1", "pause$0", "pause$1", "polymerCreated$0", "prepareElement$0", "preventDefault$0", "print$1", "print$2", "propertyForAttribute$1", "publishAttributes$2", "query$1", "queryAll$1", "querySelector$1", "querySelectorAll$1", "reflectPropertyToAttribute$1", "register$2", "registerType$1", "registerWhenReady$0", "remainder$1", "remove$0", "remove$1", "removeEventListener$3", "removeLast$0", "removeRange$2", "replaceAll$2", "replaceFirst$2", "replaceWith$1", "reset$0", "round$0", "roundToDouble$0", "scrollIntoView$1", "searchSubmitted$0", "send$1", "send$2", "serializeValue$1", "set$_annotations", "set$_buildIdentifier", "set$_cachedMirror", "set$_category", "set$_everythingElseCache", "set$_item", "set$_items", "set$_member$__$commentFrom", "set$_member$__$inheritedFrom", "set$_methodsCache", "set$_openedAt", "set$_page$__$home", "set$_parameters$_parameters", "set$_pathname", "set$_results$_item", "set$_search$__$isFocused", "set$_searchQuery", "set$_selector", "set$_variablesCache", "set$annotations", "set$category", "set$checked", "set$className", "set$classes", "set$commentFrom", "set$content", "set$currentIndex", "set$currentPage", "set$defaultValue", "set$errors", "set$functions", "set$hash", "set$height", "set$home", "set$homePage", "set$href", "set$inheritedFrom", "set$isConstructor", "set$isFinal", "set$isFocused", "set$isInherited", "set$item", "set$items", "set$length", "set$libraries", "set$link", "set$name", "set$newValue", "set$operators", "set$parameters", "set$path", "set$position", "set$results", "set$searchQuery", "set$selectedIndex", "set$setterParameter", "set$subclasses", "set$superClass", "set$tag", "set$text", "set$type", "set$typedefs", "set$validator", "set$value", "set$variables", "setProperty$2", "setProperty$3", "setRange$4", "shadowFromTemplate$1", "shortcutHandler$1", "shouldShow$1", "shouldShowClassMinimapFor$1", "shouldShowLibraryMinimapFor$1", "showSubclass$3", "skip$1", "sort$1", "split$1", "start$0", "startsWith$1", "startsWith$2", "stop$0", "sublist$1", "sublist$2", "substring$1", "substring$2", "take$1", "takeAttributes$0", "takeWhile$1", "timeStamp$1", "toInt$0", "toList$0", "toList$1$growable", "toLowerCase$0", "toRadixString$1", "toString$0", "toStringAsExponential$1", "toUpperCase$0", "toggleInherited$3", "toggleMinimap$0", "toggleMinimap$3", "toggleOptionsMenu$3", "togglePanel$0", "togglePanel$3", "togglePkg$3", "trim$0", "unbind$1", "unbindAll$0", "unbindAllProperties$0", "unobserved$0", "unregisterObservers$0", "updateResults$0", "waitingForExtendee$1", "waitingForType$1", "where$1", "wrongClass$1"];
$.mapTypeToInterceptor = [C.Type_3JM, M.MinimapElementClass, {created: M.MinimapElementClass$created}, C.Type_71F, B.Search, {created: B.Search$created}, C.Type_7dl, E.MethodElement, {created: E.MethodElement$created}, C.Type_8aB, E.InheritedElement, {created: E.InheritedElement$created}, C.Type_A4h, X.LibraryElement, {created: X.LibraryElement$created}, C.Type_Auo, B.IndexElement, {created: B.IndexElement$created}, C.Type_E34, U.ClassElement, {created: U.ClassElement$created}, C.Type_E8w, T.VariableHeading, {created: T.VariableHeading$created}, C.Type_Fut, Y.LibraryPanel, {created: Y.LibraryPanel$created}, C.Type_I2I, A.PolymerElement, {created: A.PolymerElement$created}, C.Type_I42, E.DartdocElement, {created: E.DartdocElement$created}, C.Type_I6W, N.CategoryElement, {created: N.CategoryElement$created}, C.Type_OLv, Q.AnnotationElement, {created: Q.AnnotationElement$created}, C.Type_Q7f, D.MethodPanel, {created: D.MethodPanel$created}, C.Type_WvL, N.DartdocMethod, {created: N.DartdocMethod$created}, C.Type_Y1G, A.HomeElement, {created: A.HomeElement$created}, C.Type_YnA, A.PolymerDeclaration, {created: A.PolymerDeclaration$created}, C.Type_Zuq, A.ItemElement, {created: A.ItemElement$created}, C.Type_alO, R.ParameterElement, {created: R.ParameterElement$created}, C.Type_apa, A.MinimapElement, {created: A.MinimapElement$created}, C.Type_maL, Y.PageElement, {created: Y.PageElement$created}, C.Type_mqB, B.MinimapElementLibrary, {created: B.MinimapElementLibrary$created}, C.Type_o2w, M.TypedefElement, {created: M.TypedefElement$created}, C.Type_ohR, E.MemberElement, {created: E.MemberElement$created}, C.Type_oqh, P.Uint64List, {}, C.Type_qx4, L.Result, {created: L.Result$created}, C.Type_qxd, P.Int64List, {}, C.Type_ytw, Y.VariableElement, {created: Y.VariableElement$created}];
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  var t1 = new P.Expando(null);
  H.setRuntimeTypeInfo(t1, [J.JSInt]);
  return t1;
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined());
});
Isolate.$lazy($, "customElementsReady", "customElementsReady", "get$customElementsReady", function() {
  return new B.closure().call$0();
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "validationPattern", "Symbol_validationPattern", "get$Symbol_validationPattern", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^(?:[a-zA-Z$][a-zA-Z$0-9_]*\\.)*(?:[a-zA-Z$][a-zA-Z$0-9_]*=?|-|unary-|\\[\\]=|~|==|\\[\\]|\\*|/|%|~/|\\+|<<|>>|>=|>|<=|<|&|\\^|\\|)$", false, true, false), null, null);
});
Isolate.$lazy($, "_dynamicType", "JsMirrorSystem__dynamicType", "get$JsMirrorSystem__dynamicType", function() {
  return new H.JsTypeMirror(C.Symbol_dynamic);
});
Isolate.$lazy($, "librariesByName", "JsMirrorSystem_librariesByName", "get$JsMirrorSystem_librariesByName", function() {
  return H.JsMirrorSystem_computeLibrariesByName();
});
Isolate.$lazy($, "currentJsMirrorSystem", "currentJsMirrorSystem", "get$currentJsMirrorSystem", function() {
  return new H.JsMirrorSystem(null, new H.JsIsolateMirror($globalState.currentContext));
});
Isolate.$lazy($, "mangledNames", "mangledNames", "get$mangledNames", function() {
  return H.computeMangledNames(init.mangledNames, false);
});
Isolate.$lazy($, "reflectiveNames", "reflectiveNames", "get$reflectiveNames", function() {
  return H.computeReflectiveNames($.get$mangledNames());
});
Isolate.$lazy($, "mangledGlobalNames", "mangledGlobalNames", "get$mangledGlobalNames", function() {
  return H.computeMangledNames(init.mangledGlobalNames, true);
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return P.ListQueue$(null, {func: "void_", void: true});
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_splitRe", "Uri__splitRe", "get$Uri__splitRe", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^(?:([^:/?#]+):)?(?://(?:([^/?#]*)@)?(?:([\\w\\d\\-\\u0100-\\uffff.%]*)|\\[([A-Fa-f0-9:.]*)\\])(?::([0-9]+))?)?([^?#[]+)?(?:\\?([^#]*))?(?:#(.*))?$", false, true, false), null, null);
});
Isolate.$lazy($, "_safeConsole", "Console__safeConsole", "get$Console__safeConsole", function() {
  return new W.Console();
});
Isolate.$lazy($, "webkitEvents", "ElementEvents_webkitEvents", "get$ElementEvents_webkitEvents", function() {
  return H.fillLiteralMap(["animationend", "webkitAnimationEnd", "animationiteration", "webkitAnimationIteration", "animationstart", "webkitAnimationStart", "fullscreenchange", "webkitfullscreenchange", "fullscreenerror", "webkitfullscreenerror", "keyadded", "webkitkeyadded", "keyerror", "webkitkeyerror", "keymessage", "webkitkeymessage", "needkey", "webkitneedkey", "pointerlockchange", "webkitpointerlockchange", "pointerlockerror", "webkitpointerlockerror", "resourcetimingbufferfull", "webkitresourcetimingbufferfull", "transitionend", "webkitTransitionEnd", "speechchange", "webkitSpeechChange"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_allowedElements", "_Html5NodeValidator__allowedElements", "get$_Html5NodeValidator__allowedElements", function() {
  var t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t1.addAll$1(t1, ["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"]);
  return t1;
});
Isolate.$lazy($, "_attributeValidators", "_Html5NodeValidator__attributeValidators", "get$_Html5NodeValidator__attributeValidators", function() {
  return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "context", "context", "get$context", function() {
  return P._wrapToDart(function() { return this; }());
});
Isolate.$lazy($, "viewer", "viewer", "get$viewer", function() {
  return N.Viewer$_();
});
Isolate.$lazy($, "dartdocMain", "dartdocMain", "get$dartdocMain", function() {
  var t1, t2;
  if ($._dartdocMain == null) {
    t1 = document.querySelector("#dartdoc-main");
    t2 = t1._xtag;
    if (t2 != null)
      t1 = t2;
    $._dartdocMain = t1;
  } else
    t1 = null;
  return t1;
});
Isolate.$lazy($, "pageIndex", "pageIndex", "get$pageIndex", function() {
  return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "packageMatch", "packageMatch", "get$packageMatch", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("(\\w+)/", false, true, false), null, null);
});
Isolate.$lazy($, "libraryMatch", "libraryMatch", "get$libraryMatch", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("([\\w\\-\\:]+)", false, true, false), null, null);
});
Isolate.$lazy($, "memberMatch", "memberMatch", "get$memberMatch", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("\\.(\\w+)", false, true, false), null, null);
});
Isolate.$lazy($, "subMemberMatch", "subMemberMatch", "get$subMemberMatch", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("\\.([\\w\\<\\+\\|\\[\\]\\>\\/\\^\\=\\&\\~\\*\\-\\%]+)", false, true, false), null, null);
});
Isolate.$lazy($, "anchorMatch", "anchorMatch", "get$anchorMatch", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("\\@(\\w+)", false, true, false), null, null);
});
Isolate.$lazy($, "_loggers", "Logger__loggers", "get$Logger__loggers", function() {
  var t1 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  H.setRuntimeTypeInfo(t1, [J.JSString, N.Logger]);
  return t1;
});
Isolate.$lazy($, "uriPolicy", "uriPolicy", "get$uriPolicy", function() {
  return new E.SameProtocolUriPolicy(W.AnchorElement_AnchorElement(null), C.Window_methods.get$location(window));
});
Isolate.$lazy($, "validator", "validator", "get$validator", function() {
  var t1 = [];
  H.setRuntimeTypeInfo(t1, [W.NodeValidator]);
  t1.push(W._Html5NodeValidator$($.get$uriPolicy()));
  return new W.NodeValidatorBuilder(t1);
});
Isolate.$lazy($, "_logger", "_logger0", "get$_logger0", function() {
  return N.Logger_Logger("Observable.dirtyCheck");
});
Isolate.$lazy($, "objectType", "objectType", "get$objectType", function() {
  return P.reflectClass(C.Type_HqF);
});
Isolate.$lazy($, "_pathRegExp", "_pathRegExp", "get$_pathRegExp", function() {
  return new L.closure0().call$0();
});
Isolate.$lazy($, "_spacesRegExp", "_spacesRegExp", "get$_spacesRegExp", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("\\s", false, true, false), null, null);
});
Isolate.$lazy($, "_logger", "_logger", "get$_logger", function() {
  return N.Logger_Logger("observe.PathObserver");
});
Isolate.$lazy($, "_builder", "_builder", "get$_builder", function() {
  return B.Builder_Builder(null, null);
});
Isolate.$lazy($, "posix", "Style_posix", "get$Style_posix", function() {
  return new B._PosixStyle("posix", "/", new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("/", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("[^/]$", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^/", false, true, false), null, null), null);
});
Isolate.$lazy($, "windows", "Style_windows", "get$Style_windows", function() {
  return new B._WindowsStyle("windows", "\\", new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("[/\\\\]", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("[^/\\\\]$", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^(\\\\\\\\|[a-zA-Z]:[/\\\\])", false, true, false), null, null), null);
});
Isolate.$lazy($, "url", "Style_url", "get$Style_url", function() {
  return new B._UrlStyle("url", "/", new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("/", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", false, true, false), null, null), new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^/", false, true, false), null, null), null);
});
Isolate.$lazy($, "platform", "Style_platform", "get$Style_platform", function() {
  return B.Style__getPlatformStyle();
});
Isolate.$lazy($, "_typesByName", "_typesByName", "get$_typesByName", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, P.Type);
});
Isolate.$lazy($, "_waitType", "_waitType", "get$_waitType", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, A.PolymerDeclaration);
});
Isolate.$lazy($, "_waitSuper", "_waitSuper", "get$_waitSuper", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, [J.JSArray, A.PolymerDeclaration]);
});
Isolate.$lazy($, "_declarations", "_declarations", "get$_declarations", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, A.PolymerDeclaration);
});
Isolate.$lazy($, "_objectType", "_objectType", "get$_objectType", function() {
  return P.reflectClass(C.Type_HqF);
});
Isolate.$lazy($, "_reverseEventTranslations", "_reverseEventTranslations", "get$_reverseEventTranslations", function() {
  return new A.closure20().call$0();
});
Isolate.$lazy($, "bindPattern", "Polymer_bindPattern", "get$Polymer_bindPattern", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("\\{\\{([^{}]*)}}", false, true, false), null, null);
});
Isolate.$lazy($, "_polymerSyntax", "Polymer__polymerSyntax", "get$Polymer__polymerSyntax", function() {
  var t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, P.Object);
  t1.addAll$1(t1, C.Map_wgEsG);
  return new A._PolymerExpressionsWithEventDelegate(t1);
});
Isolate.$lazy($, "_ready", "Polymer__ready", "get$Polymer__ready", function() {
  var t1 = new P._AsyncCompleter(P._Future$(null));
  H.setRuntimeTypeInfo(t1, [null]);
  return t1;
});
Isolate.$lazy($, "veiledElements", "Polymer_veiledElements", "get$Polymer_veiledElements", function() {
  return ["body"];
});
Isolate.$lazy($, "_eventsLog", "_eventsLog", "get$_eventsLog", function() {
  return N.Logger_Logger("polymer.events");
});
Isolate.$lazy($, "_unbindLog", "_unbindLog", "get$_unbindLog", function() {
  return N.Logger_Logger("polymer.unbind");
});
Isolate.$lazy($, "_bindLog", "_bindLog", "get$_bindLog", function() {
  return N.Logger_Logger("polymer.bind");
});
Isolate.$lazy($, "_shadowHost", "_shadowHost", "get$_shadowHost", function() {
  var t1 = new P.Expando(null);
  H.setRuntimeTypeInfo(t1, [A.Polymer]);
  return t1;
});
Isolate.$lazy($, "_librariesToLoad", "_librariesToLoad", "get$_librariesToLoad", function() {
  return A._discoverScripts(document, J.get$href$x(C.Window_methods.get$location(window)), null, null);
});
Isolate.$lazy($, "_libs", "_libs", "get$_libs", function() {
  var t1 = $.get$currentJsMirrorSystem();
  return t1.get$libraries(t1);
});
Isolate.$lazy($, "_rootUri", "_rootUri", "get$_rootUri", function() {
  return $.get$currentJsMirrorSystem().isolate.get$rootLibrary().get$uri();
});
Isolate.$lazy($, "_packageRoot", "_packageRoot", "get$_packageRoot", function() {
  var t1 = J.get$href$x(C.Window_methods.get$location(window));
  t1 = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(t1))._path;
  return H.S($.get$_builder().dirname$1(t1)) + "/packages/";
});
Isolate.$lazy($, "_typeHandlers", "_typeHandlers", "get$_typeHandlers", function() {
  return new Z.closure1().call$0();
});
Isolate.$lazy($, "_jsHelper", "_jsHelper", "get$_jsHelper", function() {
  var t1, t2;
  t1 = $.get$currentJsMirrorSystem();
  t1 = t1.get$libraries(t1);
  t2 = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1("dart:_js_helper"));
  t1 = t1.__js_mirrors$_source;
  return t1.$index(t1, t2);
});
Isolate.$lazy($, "_mangledNameField", "_mangledNameField", "get$_mangledNameField", function() {
  return new M.closure21().call$0();
});
Isolate.$lazy($, "_logger", "_logger1", "get$_logger1", function() {
  return N.Logger_Logger("polymer_expressions");
});
Isolate.$lazy($, "_BINARY_OPERATORS", "_BINARY_OPERATORS", "get$_BINARY_OPERATORS", function() {
  return H.fillLiteralMap(["+", new K.closure4(), "-", new K.closure5(), "*", new K.closure6(), "/", new K.closure7(), "==", new K.closure8(), "!=", new K.closure9(), ">", new K.closure10(), ">=", new K.closure11(), "<", new K.closure12(), "<=", new K.closure13(), "||", new K.closure14(), "&&", new K.closure15(), "|", new K.closure16()], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_UNARY_OPERATORS", "_UNARY_OPERATORS", "get$_UNARY_OPERATORS", function() {
  return H.fillLiteralMap(["+", new K.closure17(), "-", new K.closure18(), "!", new K.closure19()], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "index", "index", "get$index", function() {
  return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "value", "value", "get$value", function() {
  return H.fillLiteralMap(["library", 1, "class", 2, "typedef", 3, "method", 4, "getter", 4, "setter", 4, "operator", 4, "property", 4, "constructor", 4], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_checkboxEventType", "_InputBinding__checkboxEventType", "get$_InputBinding__checkboxEventType", function() {
  return new M.closure3().call$0();
});
Isolate.$lazy($, "_contentsOwner", "TemplateBindExtension__contentsOwner", "get$TemplateBindExtension__contentsOwner", function() {
  var t1 = new P.Expando(null);
  H.setRuntimeTypeInfo(t1, [null]);
  return t1;
});
Isolate.$lazy($, "_allTemplatesSelectors", "TemplateBindExtension__allTemplatesSelectors", "get$TemplateBindExtension__allTemplatesSelectors", function() {
  var t1 = J.map$1$ax(C.Map_05eTF.get$keys(), new M.closure2());
  return "template, " + t1.join$1(t1, ", ");
});
Isolate.$lazy($, "_expando", "_expando", "get$_expando", function() {
  var t1 = new P.Expando("template_binding");
  H.setRuntimeTypeInfo(t1, [null]);
  return t1;
});
// Native classes

init.functionAliases = {};
;
init.metadata = [P.Object,
C.TypeVariable_wAg,
C.TypeVariable_pea,
C.TypeVariable_mDP,
C.TypeVariable_bBG,
P.Type,
"name",
J.JSString,
Q.AnnotationElement,
N.CategoryElement,
E.Container,
"comment",
,
C.C_Reflectable,
E.Category,
"classes",
[J.JSArray, P.Map],
"isAbstract",
J.JSBool,
false,
"variables",
P.Map,
"getters",
"setters",
"members",
J.JSArray,
"yaml",
"isConstructor",
"className",
"isOperator",
"",
E.Item,
"qualifiedName",
"items",
[J.JSArray, [J.JSArray, E.Item]],
E.Home,
"page",
"previous",
E.LazyItem,
"previewComment",
E.Library,
"library",
E.Class,
"location",
E.AnnotationGroup,
"annotes",
E.Annotation,
E.Parameterized,
E.Typedef,
E.Method,
"inheritedFrom",
"commentFrom",
E.Parameter,
E.Variable,
"isGetter",
"isSetter",
E.NestedType,
E.LinkableType,
"type",
U.ClassElement,
W.Window,
C.C__InitMethodAnnotation,
A.HomeElement,
B.IndexElement,
A.ItemElement,
X.LibraryElement,
Y.LibraryPanel,
E.DartdocElement,
E.MemberElement,
W.Element,
E.InheritedElement,
E.MethodElement,
N.DartdocMethod,
D.MethodPanel,
M.MinimapElementClass,
A.MinimapElement,
B.MinimapElementLibrary,
Y.PageElement,
R.ParameterElement,
[K.IndexedValue, 4],
"index",
J.JSInt,
"value",
4,
L.Result,
B.Search,
B.SearchResult,
"element",
"score",
[J.JSArray, B.SearchResult],
"query",
"maxResults",
"filter",
P.Function,
"list",
M.TypedefElement,
Y.VariableElement,
T.VariableHeading,
C.C_PublishedProperty,
"newAnnotations",
H.Closure,
C.C_ObservableProperty,
"newCategory",
"isDesktop",
"event",
"detail",
"target",
W.AnchorElement,
"changes",
"tagName",
"each",
O.ChangeNotifier,
"orElse",
E.nothing$closure,
"clazz",
"item",
"x",
"key",
"innerItem",
P.Future,
Y.DocsLocation,
"a",
"b",
"packageName",
"libraries",
"response",
"category",
"generic",
"annotation",
[J.JSArray, E.Parameter],
"parameters",
"data",
"newItem",
"thing",
"_",
[J.JSArray, E.LinkableType],
P.Iterable,
"cls",
[P.Map, P.Symbol, P.MethodMirror],
[J.JSArray, H.JsMethodMirror],
"methodOwner",
P.DeclarationMirror,
[J.JSArray, P.VariableMirror],
"fieldOwner",
[P.Map, P.Symbol, P.VariableMirror],
[P.Map, P.Symbol, P.Mirror],
[P.Map, P.Symbol, P.DeclarationMirror],
P.InstanceMirror,
"fieldName",
P.Symbol,
"arg",
H.JsLibraryMirror,
[J.JSArray, P.InstanceMirror],
P.ClassMirror,
"memberName",
"positionalArguments",
"namedArguments",
[P.Map, P.Symbol, null],
[J.JSArray, P.ClassMirror],
"owner",
[J.JSArray, P.TypeVariableMirror],
[J.JSArray, P.TypeMirror],
H.JsTypeMirror_JsObjectMirror0,
P.Mirror,
"tv",
"i",
"newValue",
[J.JSArray, E.Item],
"json",
"selectors",
"isMinimap",
W.MouseEvent,
"e",
"version",
"isActive",
"thingToDo",
[J.JSArray, P.Symbol],
"list1",
"list2",
W.Event,
A.PolymerElement,
"symbol",
[P.Iterable, P.Symbol],
"elementName",
"preview",
"commentLocation",
E.MemberElement_ChangeNotifier,
"f",
"newItems",
"linkItem",
3,
[P.Iterable, 1],
[P.Iterable, 2],
2,
1,
Y.DartdocElement_ChangeNotifier,
"newParameters",
"elements",
"parameter",
"v",
L.AnchorElement_Polymer_ChangeNotifier,
"newQuery",
W.KeyboardEvent,
B.DartdocElement_ChangeNotifier0,
"other",
P.Comparable,
"q",
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { H.startRootIsolate(E.main$closure); });
  } else {
    H.startRootIsolate(E.main$closure);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, accessors, cls) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable = false;
    if (code == 45) {
      len--;
      code = field.charCodeAt(len - 1);
      field = field.substring(0, len);
      reflectable = true;
    }
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "object" && classData instanceof Array) {
          classData = fields = classData[0];
        }
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      constructor["@"] = desc;
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    if (!init.lazies)
      init.lazies = {};
    init.lazies[fieldName] = getterName;
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()
function dart_precompiled($collectedClasses) {
  var $desc;
  function HtmlElement() {
  }
  HtmlElement.builtin$cls = "HtmlElement";
  if (!"name" in HtmlElement)
    HtmlElement.name = "HtmlElement";
  $desc = $collectedClasses.HtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement.prototype = $desc;
  function _EntryArray() {
  }
  _EntryArray.builtin$cls = "_EntryArray";
  if (!"name" in _EntryArray)
    _EntryArray.name = "_EntryArray";
  $desc = $collectedClasses._EntryArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EntryArray.prototype = $desc;
  function AnchorElement() {
  }
  AnchorElement.builtin$cls = "AnchorElement";
  if (!"name" in AnchorElement)
    AnchorElement.name = "AnchorElement";
  $desc = $collectedClasses.AnchorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnchorElement.prototype = $desc;
  AnchorElement.prototype.get$hash = function(receiver) {
    return receiver.hash;
  };
  AnchorElement.prototype.set$hash = function(receiver, v) {
    return receiver.hash = v;
  };
  AnchorElement.prototype.get$host = function(receiver) {
    return receiver.host;
  };
  AnchorElement.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  AnchorElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  AnchorElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  AnchorElement.prototype.get$pathname = function(receiver) {
    return receiver.pathname;
  };
  AnchorElement.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  AnchorElement.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  AnchorElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  AnchorElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  AnchorElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function AnimationEvent() {
  }
  AnimationEvent.builtin$cls = "AnimationEvent";
  if (!"name" in AnimationEvent)
    AnimationEvent.name = "AnimationEvent";
  $desc = $collectedClasses.AnimationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationEvent.prototype = $desc;
  function AreaElement() {
  }
  AreaElement.builtin$cls = "AreaElement";
  if (!"name" in AreaElement)
    AreaElement.name = "AreaElement";
  $desc = $collectedClasses.AreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AreaElement.prototype = $desc;
  AreaElement.prototype.get$hash = function(receiver) {
    return receiver.hash;
  };
  AreaElement.prototype.get$host = function(receiver) {
    return receiver.host;
  };
  AreaElement.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  AreaElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  AreaElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  AreaElement.prototype.get$pathname = function(receiver) {
    return receiver.pathname;
  };
  AreaElement.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  AreaElement.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  AreaElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  function AudioElement() {
  }
  AudioElement.builtin$cls = "AudioElement";
  if (!"name" in AudioElement)
    AudioElement.name = "AudioElement";
  $desc = $collectedClasses.AudioElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioElement.prototype = $desc;
  function AutocompleteErrorEvent() {
  }
  AutocompleteErrorEvent.builtin$cls = "AutocompleteErrorEvent";
  if (!"name" in AutocompleteErrorEvent)
    AutocompleteErrorEvent.name = "AutocompleteErrorEvent";
  $desc = $collectedClasses.AutocompleteErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AutocompleteErrorEvent.prototype = $desc;
  function BRElement() {
  }
  BRElement.builtin$cls = "BRElement";
  if (!"name" in BRElement)
    BRElement.name = "BRElement";
  $desc = $collectedClasses.BRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BRElement.prototype = $desc;
  function BaseElement() {
  }
  BaseElement.builtin$cls = "BaseElement";
  if (!"name" in BaseElement)
    BaseElement.name = "BaseElement";
  $desc = $collectedClasses.BaseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseElement.prototype = $desc;
  BaseElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  BaseElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  BaseElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  function BeforeLoadEvent() {
  }
  BeforeLoadEvent.builtin$cls = "BeforeLoadEvent";
  if (!"name" in BeforeLoadEvent)
    BeforeLoadEvent.name = "BeforeLoadEvent";
  $desc = $collectedClasses.BeforeLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeLoadEvent.prototype = $desc;
  BeforeLoadEvent.prototype.get$url = function(receiver) {
    return receiver.url;
  };
  function BeforeUnloadEvent() {
  }
  BeforeUnloadEvent.builtin$cls = "BeforeUnloadEvent";
  if (!"name" in BeforeUnloadEvent)
    BeforeUnloadEvent.name = "BeforeUnloadEvent";
  $desc = $collectedClasses.BeforeUnloadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeUnloadEvent.prototype = $desc;
  function Blob() {
  }
  Blob.builtin$cls = "Blob";
  if (!"name" in Blob)
    Blob.name = "Blob";
  $desc = $collectedClasses.Blob;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Blob.prototype = $desc;
  Blob.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function BodyElement() {
  }
  BodyElement.builtin$cls = "BodyElement";
  if (!"name" in BodyElement)
    BodyElement.name = "BodyElement";
  $desc = $collectedClasses.BodyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BodyElement.prototype = $desc;
  function ButtonElement() {
  }
  ButtonElement.builtin$cls = "ButtonElement";
  if (!"name" in ButtonElement)
    ButtonElement.name = "ButtonElement";
  $desc = $collectedClasses.ButtonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ButtonElement.prototype = $desc;
  ButtonElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  ButtonElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ButtonElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  ButtonElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ButtonElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  ButtonElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  ButtonElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function CDataSection() {
  }
  CDataSection.builtin$cls = "CDataSection";
  if (!"name" in CDataSection)
    CDataSection.name = "CDataSection";
  $desc = $collectedClasses.CDataSection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CDataSection.prototype = $desc;
  function CanvasElement() {
  }
  CanvasElement.builtin$cls = "CanvasElement";
  if (!"name" in CanvasElement)
    CanvasElement.name = "CanvasElement";
  $desc = $collectedClasses.CanvasElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasElement.prototype = $desc;
  function CharacterData() {
  }
  CharacterData.builtin$cls = "CharacterData";
  if (!"name" in CharacterData)
    CharacterData.name = "CharacterData";
  $desc = $collectedClasses.CharacterData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CharacterData.prototype = $desc;
  CharacterData.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CloseEvent() {
  }
  CloseEvent.builtin$cls = "CloseEvent";
  if (!"name" in CloseEvent)
    CloseEvent.name = "CloseEvent";
  $desc = $collectedClasses.CloseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CloseEvent.prototype = $desc;
  function Comment() {
  }
  Comment.builtin$cls = "Comment";
  if (!"name" in Comment)
    Comment.name = "Comment";
  $desc = $collectedClasses.Comment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comment.prototype = $desc;
  function CompositionEvent() {
  }
  CompositionEvent.builtin$cls = "CompositionEvent";
  if (!"name" in CompositionEvent)
    CompositionEvent.name = "CompositionEvent";
  $desc = $collectedClasses.CompositionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompositionEvent.prototype = $desc;
  function ContentElement() {
  }
  ContentElement.builtin$cls = "ContentElement";
  if (!"name" in ContentElement)
    ContentElement.name = "ContentElement";
  $desc = $collectedClasses.ContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContentElement.prototype = $desc;
  function CssFontFaceLoadEvent() {
  }
  CssFontFaceLoadEvent.builtin$cls = "CssFontFaceLoadEvent";
  if (!"name" in CssFontFaceLoadEvent)
    CssFontFaceLoadEvent.name = "CssFontFaceLoadEvent";
  $desc = $collectedClasses.CssFontFaceLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssFontFaceLoadEvent.prototype = $desc;
  function CssStyleDeclaration() {
  }
  CssStyleDeclaration.builtin$cls = "CssStyleDeclaration";
  if (!"name" in CssStyleDeclaration)
    CssStyleDeclaration.name = "CssStyleDeclaration";
  $desc = $collectedClasses.CssStyleDeclaration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclaration.prototype = $desc;
  CssStyleDeclaration.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function BoundClosure$i1(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$i1.builtin$cls = "BoundClosure$i1";
  $desc = $collectedClasses.BoundClosure$i1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$i1.prototype = $desc;
  function CustomEvent() {
  }
  CustomEvent.builtin$cls = "CustomEvent";
  if (!"name" in CustomEvent)
    CustomEvent.name = "CustomEvent";
  $desc = $collectedClasses.CustomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CustomEvent.prototype = $desc;
  function DListElement() {
  }
  DListElement.builtin$cls = "DListElement";
  if (!"name" in DListElement)
    DListElement.name = "DListElement";
  $desc = $collectedClasses.DListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DListElement.prototype = $desc;
  function DataListElement() {
  }
  DataListElement.builtin$cls = "DataListElement";
  if (!"name" in DataListElement)
    DataListElement.name = "DataListElement";
  $desc = $collectedClasses.DataListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DataListElement.prototype = $desc;
  function DetailsElement() {
  }
  DetailsElement.builtin$cls = "DetailsElement";
  if (!"name" in DetailsElement)
    DetailsElement.name = "DetailsElement";
  $desc = $collectedClasses.DetailsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DetailsElement.prototype = $desc;
  function DeviceMotionEvent() {
  }
  DeviceMotionEvent.builtin$cls = "DeviceMotionEvent";
  if (!"name" in DeviceMotionEvent)
    DeviceMotionEvent.name = "DeviceMotionEvent";
  $desc = $collectedClasses.DeviceMotionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceMotionEvent.prototype = $desc;
  function DeviceOrientationEvent() {
  }
  DeviceOrientationEvent.builtin$cls = "DeviceOrientationEvent";
  if (!"name" in DeviceOrientationEvent)
    DeviceOrientationEvent.name = "DeviceOrientationEvent";
  $desc = $collectedClasses.DeviceOrientationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceOrientationEvent.prototype = $desc;
  function DialogElement() {
  }
  DialogElement.builtin$cls = "DialogElement";
  if (!"name" in DialogElement)
    DialogElement.name = "DialogElement";
  $desc = $collectedClasses.DialogElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DialogElement.prototype = $desc;
  function DivElement() {
  }
  DivElement.builtin$cls = "DivElement";
  if (!"name" in DivElement)
    DivElement.name = "DivElement";
  $desc = $collectedClasses.DivElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DivElement.prototype = $desc;
  function Document() {
  }
  Document.builtin$cls = "Document";
  if (!"name" in Document)
    Document.name = "Document";
  $desc = $collectedClasses.Document;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Document.prototype = $desc;
  function DocumentFragment() {
  }
  DocumentFragment.builtin$cls = "DocumentFragment";
  if (!"name" in DocumentFragment)
    DocumentFragment.name = "DocumentFragment";
  $desc = $collectedClasses.DocumentFragment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentFragment.prototype = $desc;
  function DocumentType() {
  }
  DocumentType.builtin$cls = "DocumentType";
  if (!"name" in DocumentType)
    DocumentType.name = "DocumentType";
  $desc = $collectedClasses.DocumentType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentType.prototype = $desc;
  function DomError() {
  }
  DomError.builtin$cls = "DomError";
  if (!"name" in DomError)
    DomError.name = "DomError";
  $desc = $collectedClasses.DomError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomError.prototype = $desc;
  DomError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  DomError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function DomException() {
  }
  DomException.builtin$cls = "DomException";
  if (!"name" in DomException)
    DomException.name = "DomException";
  $desc = $collectedClasses.DomException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomException.prototype = $desc;
  DomException.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function DomImplementation() {
  }
  DomImplementation.builtin$cls = "DomImplementation";
  if (!"name" in DomImplementation)
    DomImplementation.name = "DomImplementation";
  $desc = $collectedClasses.DomImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomImplementation.prototype = $desc;
  function Element() {
  }
  Element.builtin$cls = "Element";
  if (!"name" in Element)
    Element.name = "Element";
  $desc = $collectedClasses.Element;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element.prototype = $desc;
  Element.prototype.get$title = function(receiver) {
    return receiver.title;
  };
  Element.prototype.get$className = function(receiver) {
    return receiver.className;
  };
  Element.prototype.set$className = function(receiver, v) {
    return receiver.className = v;
  };
  Element.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  Element.prototype.get$tagName = function(receiver) {
    return receiver.tagName;
  };
  function EmbedElement() {
  }
  EmbedElement.builtin$cls = "EmbedElement";
  if (!"name" in EmbedElement)
    EmbedElement.name = "EmbedElement";
  $desc = $collectedClasses.EmbedElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmbedElement.prototype = $desc;
  EmbedElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  EmbedElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  EmbedElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  EmbedElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  EmbedElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function ErrorEvent() {
  }
  ErrorEvent.builtin$cls = "ErrorEvent";
  if (!"name" in ErrorEvent)
    ErrorEvent.name = "ErrorEvent";
  $desc = $collectedClasses.ErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ErrorEvent.prototype = $desc;
  ErrorEvent.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  ErrorEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function Event() {
  }
  Event.builtin$cls = "Event";
  if (!"name" in Event)
    Event.name = "Event";
  $desc = $collectedClasses.Event;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Event.prototype = $desc;
  Event.prototype.set$_selector = function(receiver, v) {
    return receiver._selector = v;
  };
  Event.prototype.get$bubbles = function(receiver) {
    return receiver.bubbles;
  };
  Event.prototype.get$path = function(receiver) {
    return receiver.path;
  };
  Event.prototype.get$timeStamp = function(receiver) {
    return receiver.timeStamp;
  };
  Event.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function EventTarget() {
  }
  EventTarget.builtin$cls = "EventTarget";
  if (!"name" in EventTarget)
    EventTarget.name = "EventTarget";
  $desc = $collectedClasses.EventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventTarget.prototype = $desc;
  function FieldSetElement() {
  }
  FieldSetElement.builtin$cls = "FieldSetElement";
  if (!"name" in FieldSetElement)
    FieldSetElement.name = "FieldSetElement";
  $desc = $collectedClasses.FieldSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FieldSetElement.prototype = $desc;
  FieldSetElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  FieldSetElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  FieldSetElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  FieldSetElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function File() {
  }
  File.builtin$cls = "File";
  if (!"name" in File)
    File.name = "File";
  $desc = $collectedClasses.File;
  if ($desc instanceof Array)
    $desc = $desc[1];
  File.prototype = $desc;
  File.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function FileError() {
  }
  FileError.builtin$cls = "FileError";
  if (!"name" in FileError)
    FileError.name = "FileError";
  $desc = $collectedClasses.FileError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FileError.prototype = $desc;
  function FocusEvent() {
  }
  FocusEvent.builtin$cls = "FocusEvent";
  if (!"name" in FocusEvent)
    FocusEvent.name = "FocusEvent";
  $desc = $collectedClasses.FocusEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FocusEvent.prototype = $desc;
  function FormElement() {
  }
  FormElement.builtin$cls = "FormElement";
  if (!"name" in FormElement)
    FormElement.name = "FormElement";
  $desc = $collectedClasses.FormElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormElement.prototype = $desc;
  FormElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  FormElement.prototype.get$method = function(receiver) {
    return receiver.method;
  };
  FormElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  FormElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  FormElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  function HRElement() {
  }
  HRElement.builtin$cls = "HRElement";
  if (!"name" in HRElement)
    HRElement.name = "HRElement";
  $desc = $collectedClasses.HRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HRElement.prototype = $desc;
  function HashChangeEvent() {
  }
  HashChangeEvent.builtin$cls = "HashChangeEvent";
  if (!"name" in HashChangeEvent)
    HashChangeEvent.name = "HashChangeEvent";
  $desc = $collectedClasses.HashChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashChangeEvent.prototype = $desc;
  function HeadElement() {
  }
  HeadElement.builtin$cls = "HeadElement";
  if (!"name" in HeadElement)
    HeadElement.name = "HeadElement";
  $desc = $collectedClasses.HeadElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadElement.prototype = $desc;
  function HeadingElement() {
  }
  HeadingElement.builtin$cls = "HeadingElement";
  if (!"name" in HeadingElement)
    HeadingElement.name = "HeadingElement";
  $desc = $collectedClasses.HeadingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadingElement.prototype = $desc;
  function History() {
  }
  History.builtin$cls = "History";
  if (!"name" in History)
    History.name = "History";
  $desc = $collectedClasses.History;
  if ($desc instanceof Array)
    $desc = $desc[1];
  History.prototype = $desc;
  History.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function HtmlCollection() {
  }
  HtmlCollection.builtin$cls = "HtmlCollection";
  if (!"name" in HtmlCollection)
    HtmlCollection.name = "HtmlCollection";
  $desc = $collectedClasses.HtmlCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlCollection.prototype = $desc;
  function HtmlDocument() {
  }
  HtmlDocument.builtin$cls = "HtmlDocument";
  if (!"name" in HtmlDocument)
    HtmlDocument.name = "HtmlDocument";
  $desc = $collectedClasses.HtmlDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlDocument.prototype = $desc;
  function HtmlFormControlsCollection() {
  }
  HtmlFormControlsCollection.builtin$cls = "HtmlFormControlsCollection";
  if (!"name" in HtmlFormControlsCollection)
    HtmlFormControlsCollection.name = "HtmlFormControlsCollection";
  $desc = $collectedClasses.HtmlFormControlsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlFormControlsCollection.prototype = $desc;
  function HtmlHtmlElement() {
  }
  HtmlHtmlElement.builtin$cls = "HtmlHtmlElement";
  if (!"name" in HtmlHtmlElement)
    HtmlHtmlElement.name = "HtmlHtmlElement";
  $desc = $collectedClasses.HtmlHtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlHtmlElement.prototype = $desc;
  function HtmlOptionsCollection() {
  }
  HtmlOptionsCollection.builtin$cls = "HtmlOptionsCollection";
  if (!"name" in HtmlOptionsCollection)
    HtmlOptionsCollection.name = "HtmlOptionsCollection";
  $desc = $collectedClasses.HtmlOptionsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlOptionsCollection.prototype = $desc;
  function HttpRequest() {
  }
  HttpRequest.builtin$cls = "HttpRequest";
  if (!"name" in HttpRequest)
    HttpRequest.name = "HttpRequest";
  $desc = $collectedClasses.HttpRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest.prototype = $desc;
  HttpRequest.prototype.get$responseText = function(receiver) {
    return receiver.responseText;
  };
  function HttpRequestEventTarget() {
  }
  HttpRequestEventTarget.builtin$cls = "HttpRequestEventTarget";
  if (!"name" in HttpRequestEventTarget)
    HttpRequestEventTarget.name = "HttpRequestEventTarget";
  $desc = $collectedClasses.HttpRequestEventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequestEventTarget.prototype = $desc;
  function IFrameElement() {
  }
  IFrameElement.builtin$cls = "IFrameElement";
  if (!"name" in IFrameElement)
    IFrameElement.name = "IFrameElement";
  $desc = $collectedClasses.IFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IFrameElement.prototype = $desc;
  IFrameElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  IFrameElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  IFrameElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  function ImageData() {
  }
  ImageData.builtin$cls = "ImageData";
  if (!"name" in ImageData)
    ImageData.name = "ImageData";
  $desc = $collectedClasses.ImageData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageData.prototype = $desc;
  function ImageElement() {
  }
  ImageElement.builtin$cls = "ImageElement";
  if (!"name" in ImageElement)
    ImageElement.name = "ImageElement";
  $desc = $collectedClasses.ImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement.prototype = $desc;
  ImageElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  function InputElement() {
  }
  InputElement.builtin$cls = "InputElement";
  if (!"name" in InputElement)
    InputElement.name = "InputElement";
  $desc = $collectedClasses.InputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InputElement.prototype = $desc;
  InputElement.prototype.get$checked = function(receiver) {
    return receiver.checked;
  };
  InputElement.prototype.set$checked = function(receiver, v) {
    return receiver.checked = v;
  };
  InputElement.prototype.get$defaultValue = function(receiver) {
    return receiver.defaultValue;
  };
  InputElement.prototype.set$defaultValue = function(receiver, v) {
    return receiver.defaultValue = v;
  };
  InputElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  InputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  InputElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  InputElement.prototype.get$required = function(receiver) {
    return receiver.required;
  };
  InputElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  InputElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  InputElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  InputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  InputElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function KeyboardEvent() {
  }
  KeyboardEvent.builtin$cls = "KeyboardEvent";
  if (!"name" in KeyboardEvent)
    KeyboardEvent.name = "KeyboardEvent";
  $desc = $collectedClasses.KeyboardEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeyboardEvent.prototype = $desc;
  KeyboardEvent.prototype.get$ctrlKey = function(receiver) {
    return receiver.ctrlKey;
  };
  KeyboardEvent.prototype.get$location = function(receiver) {
    return receiver.location;
  };
  function KeygenElement() {
  }
  KeygenElement.builtin$cls = "KeygenElement";
  if (!"name" in KeygenElement)
    KeygenElement.name = "KeygenElement";
  $desc = $collectedClasses.KeygenElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeygenElement.prototype = $desc;
  KeygenElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  KeygenElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  KeygenElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  KeygenElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function LIElement() {
  }
  LIElement.builtin$cls = "LIElement";
  if (!"name" in LIElement)
    LIElement.name = "LIElement";
  $desc = $collectedClasses.LIElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LIElement.prototype = $desc;
  LIElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  LIElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function LabelElement() {
  }
  LabelElement.builtin$cls = "LabelElement";
  if (!"name" in LabelElement)
    LabelElement.name = "LabelElement";
  $desc = $collectedClasses.LabelElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LabelElement.prototype = $desc;
  LabelElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  function LegendElement() {
  }
  LegendElement.builtin$cls = "LegendElement";
  if (!"name" in LegendElement)
    LegendElement.name = "LegendElement";
  $desc = $collectedClasses.LegendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LegendElement.prototype = $desc;
  LegendElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  function LinkElement() {
  }
  LinkElement.builtin$cls = "LinkElement";
  if (!"name" in LinkElement)
    LinkElement.name = "LinkElement";
  $desc = $collectedClasses.LinkElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkElement.prototype = $desc;
  LinkElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  LinkElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  LinkElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  LinkElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function Location() {
  }
  Location.builtin$cls = "Location";
  if (!"name" in Location)
    Location.name = "Location";
  $desc = $collectedClasses.Location;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Location.prototype = $desc;
  Location.prototype.get$hash = function(receiver) {
    return receiver.hash;
  };
  Location.prototype.set$hash = function(receiver, v) {
    return receiver.hash = v;
  };
  Location.prototype.get$host = function(receiver) {
    return receiver.host;
  };
  Location.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  Location.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  Location.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  Location.prototype.get$pathname = function(receiver) {
    return receiver.pathname;
  };
  Location.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  Location.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  function MapElement() {
  }
  MapElement.builtin$cls = "MapElement";
  if (!"name" in MapElement)
    MapElement.name = "MapElement";
  $desc = $collectedClasses.MapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapElement.prototype = $desc;
  MapElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  MapElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  function MediaElement() {
  }
  MediaElement.builtin$cls = "MediaElement";
  if (!"name" in MediaElement)
    MediaElement.name = "MediaElement";
  $desc = $collectedClasses.MediaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaElement.prototype = $desc;
  MediaElement.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  MediaElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  function MediaError() {
  }
  MediaError.builtin$cls = "MediaError";
  if (!"name" in MediaError)
    MediaError.name = "MediaError";
  $desc = $collectedClasses.MediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaError.prototype = $desc;
  function MediaKeyError() {
  }
  MediaKeyError.builtin$cls = "MediaKeyError";
  if (!"name" in MediaKeyError)
    MediaKeyError.name = "MediaKeyError";
  $desc = $collectedClasses.MediaKeyError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyError.prototype = $desc;
  function MediaKeyEvent() {
  }
  MediaKeyEvent.builtin$cls = "MediaKeyEvent";
  if (!"name" in MediaKeyEvent)
    MediaKeyEvent.name = "MediaKeyEvent";
  $desc = $collectedClasses.MediaKeyEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyEvent.prototype = $desc;
  MediaKeyEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function MediaKeyMessageEvent() {
  }
  MediaKeyMessageEvent.builtin$cls = "MediaKeyMessageEvent";
  if (!"name" in MediaKeyMessageEvent)
    MediaKeyMessageEvent.name = "MediaKeyMessageEvent";
  $desc = $collectedClasses.MediaKeyMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyMessageEvent.prototype = $desc;
  MediaKeyMessageEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function MediaKeyNeededEvent() {
  }
  MediaKeyNeededEvent.builtin$cls = "MediaKeyNeededEvent";
  if (!"name" in MediaKeyNeededEvent)
    MediaKeyNeededEvent.name = "MediaKeyNeededEvent";
  $desc = $collectedClasses.MediaKeyNeededEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyNeededEvent.prototype = $desc;
  function MediaStream() {
  }
  MediaStream.builtin$cls = "MediaStream";
  if (!"name" in MediaStream)
    MediaStream.name = "MediaStream";
  $desc = $collectedClasses.MediaStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStream.prototype = $desc;
  MediaStream.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  function MediaStreamEvent() {
  }
  MediaStreamEvent.builtin$cls = "MediaStreamEvent";
  if (!"name" in MediaStreamEvent)
    MediaStreamEvent.name = "MediaStreamEvent";
  $desc = $collectedClasses.MediaStreamEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamEvent.prototype = $desc;
  function MediaStreamTrackEvent() {
  }
  MediaStreamTrackEvent.builtin$cls = "MediaStreamTrackEvent";
  if (!"name" in MediaStreamTrackEvent)
    MediaStreamTrackEvent.name = "MediaStreamTrackEvent";
  $desc = $collectedClasses.MediaStreamTrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamTrackEvent.prototype = $desc;
  function MenuElement() {
  }
  MenuElement.builtin$cls = "MenuElement";
  if (!"name" in MenuElement)
    MenuElement.name = "MenuElement";
  $desc = $collectedClasses.MenuElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuElement.prototype = $desc;
  function MessageEvent() {
  }
  MessageEvent.builtin$cls = "MessageEvent";
  if (!"name" in MessageEvent)
    MessageEvent.name = "MessageEvent";
  $desc = $collectedClasses.MessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MessageEvent.prototype = $desc;
  function MetaElement() {
  }
  MetaElement.builtin$cls = "MetaElement";
  if (!"name" in MetaElement)
    MetaElement.name = "MetaElement";
  $desc = $collectedClasses.MetaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetaElement.prototype = $desc;
  MetaElement.prototype.get$content = function(receiver) {
    return receiver.content;
  };
  MetaElement.prototype.set$content = function(receiver, v) {
    return receiver.content = v;
  };
  MetaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  MetaElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  function MeterElement() {
  }
  MeterElement.builtin$cls = "MeterElement";
  if (!"name" in MeterElement)
    MeterElement.name = "MeterElement";
  $desc = $collectedClasses.MeterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MeterElement.prototype = $desc;
  MeterElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  MeterElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function MidiConnectionEvent() {
  }
  MidiConnectionEvent.builtin$cls = "MidiConnectionEvent";
  if (!"name" in MidiConnectionEvent)
    MidiConnectionEvent.name = "MidiConnectionEvent";
  $desc = $collectedClasses.MidiConnectionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiConnectionEvent.prototype = $desc;
  MidiConnectionEvent.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  function MidiInput() {
  }
  MidiInput.builtin$cls = "MidiInput";
  if (!"name" in MidiInput)
    MidiInput.name = "MidiInput";
  $desc = $collectedClasses.MidiInput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiInput.prototype = $desc;
  function MidiMessageEvent() {
  }
  MidiMessageEvent.builtin$cls = "MidiMessageEvent";
  if (!"name" in MidiMessageEvent)
    MidiMessageEvent.name = "MidiMessageEvent";
  $desc = $collectedClasses.MidiMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiMessageEvent.prototype = $desc;
  function MidiOutput() {
  }
  MidiOutput.builtin$cls = "MidiOutput";
  if (!"name" in MidiOutput)
    MidiOutput.name = "MidiOutput";
  $desc = $collectedClasses.MidiOutput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiOutput.prototype = $desc;
  function MidiPort() {
  }
  MidiPort.builtin$cls = "MidiPort";
  if (!"name" in MidiPort)
    MidiPort.name = "MidiPort";
  $desc = $collectedClasses.MidiPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiPort.prototype = $desc;
  MidiPort.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  MidiPort.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  MidiPort.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function ModElement() {
  }
  ModElement.builtin$cls = "ModElement";
  if (!"name" in ModElement)
    ModElement.name = "ModElement";
  $desc = $collectedClasses.ModElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ModElement.prototype = $desc;
  function MouseEvent() {
  }
  MouseEvent.builtin$cls = "MouseEvent";
  if (!"name" in MouseEvent)
    MouseEvent.name = "MouseEvent";
  $desc = $collectedClasses.MouseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MouseEvent.prototype = $desc;
  MouseEvent.prototype.get$ctrlKey = function(receiver) {
    return receiver.ctrlKey;
  };
  function Navigator() {
  }
  Navigator.builtin$cls = "Navigator";
  if (!"name" in Navigator)
    Navigator.name = "Navigator";
  $desc = $collectedClasses.Navigator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Navigator.prototype = $desc;
  function NavigatorUserMediaError() {
  }
  NavigatorUserMediaError.builtin$cls = "NavigatorUserMediaError";
  if (!"name" in NavigatorUserMediaError)
    NavigatorUserMediaError.name = "NavigatorUserMediaError";
  $desc = $collectedClasses.NavigatorUserMediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NavigatorUserMediaError.prototype = $desc;
  NavigatorUserMediaError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  NavigatorUserMediaError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function Node() {
  }
  Node.builtin$cls = "Node";
  if (!"name" in Node)
    Node.name = "Node";
  $desc = $collectedClasses.Node;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Node.prototype = $desc;
  Node.prototype.get$firstChild = function(receiver) {
    return receiver.firstChild;
  };
  Node.prototype.get$lastChild = function(receiver) {
    return receiver.lastChild;
  };
  Node.prototype.get$nextNode = function(receiver) {
    return receiver.nextSibling;
  };
  Node.prototype.get$nodeType = function(receiver) {
    return receiver.nodeType;
  };
  Node.prototype.get$ownerDocument = function(receiver) {
    return receiver.ownerDocument;
  };
  Node.prototype.get$parent = function(receiver) {
    return receiver.parentElement;
  };
  Node.prototype.get$parentNode = function(receiver) {
    return receiver.parentNode;
  };
  Node.prototype.get$text = function(receiver) {
    return receiver.textContent;
  };
  Node.prototype.set$text = function(receiver, v) {
    return receiver.textContent = v;
  };
  function NodeList() {
  }
  NodeList.builtin$cls = "NodeList";
  if (!"name" in NodeList)
    NodeList.name = "NodeList";
  $desc = $collectedClasses.NodeList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeList.prototype = $desc;
  function OListElement() {
  }
  OListElement.builtin$cls = "OListElement";
  if (!"name" in OListElement)
    OListElement.name = "OListElement";
  $desc = $collectedClasses.OListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OListElement.prototype = $desc;
  OListElement.prototype.get$reversed = function(receiver) {
    return receiver.reversed;
  };
  OListElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  OListElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function ObjectElement() {
  }
  ObjectElement.builtin$cls = "ObjectElement";
  if (!"name" in ObjectElement)
    ObjectElement.name = "ObjectElement";
  $desc = $collectedClasses.ObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObjectElement.prototype = $desc;
  ObjectElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  ObjectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ObjectElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  ObjectElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ObjectElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function OptGroupElement() {
  }
  OptGroupElement.builtin$cls = "OptGroupElement";
  if (!"name" in OptGroupElement)
    OptGroupElement.name = "OptGroupElement";
  $desc = $collectedClasses.OptGroupElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptGroupElement.prototype = $desc;
  function OptionElement() {
  }
  OptionElement.builtin$cls = "OptionElement";
  if (!"name" in OptionElement)
    OptionElement.name = "OptionElement";
  $desc = $collectedClasses.OptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptionElement.prototype = $desc;
  OptionElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  OptionElement.prototype.get$index = function(receiver) {
    return receiver.index;
  };
  OptionElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  OptionElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function OutputElement() {
  }
  OutputElement.builtin$cls = "OutputElement";
  if (!"name" in OutputElement)
    OutputElement.name = "OutputElement";
  $desc = $collectedClasses.OutputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OutputElement.prototype = $desc;
  OutputElement.prototype.get$defaultValue = function(receiver) {
    return receiver.defaultValue;
  };
  OutputElement.prototype.set$defaultValue = function(receiver, v) {
    return receiver.defaultValue = v;
  };
  OutputElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  OutputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  OutputElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  OutputElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  OutputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  OutputElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function OverflowEvent() {
  }
  OverflowEvent.builtin$cls = "OverflowEvent";
  if (!"name" in OverflowEvent)
    OverflowEvent.name = "OverflowEvent";
  $desc = $collectedClasses.OverflowEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OverflowEvent.prototype = $desc;
  function PageTransitionEvent() {
  }
  PageTransitionEvent.builtin$cls = "PageTransitionEvent";
  if (!"name" in PageTransitionEvent)
    PageTransitionEvent.name = "PageTransitionEvent";
  $desc = $collectedClasses.PageTransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PageTransitionEvent.prototype = $desc;
  function ParagraphElement() {
  }
  ParagraphElement.builtin$cls = "ParagraphElement";
  if (!"name" in ParagraphElement)
    ParagraphElement.name = "ParagraphElement";
  $desc = $collectedClasses.ParagraphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParagraphElement.prototype = $desc;
  function ParamElement() {
  }
  ParamElement.builtin$cls = "ParamElement";
  if (!"name" in ParamElement)
    ParamElement.name = "ParamElement";
  $desc = $collectedClasses.ParamElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParamElement.prototype = $desc;
  ParamElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ParamElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  ParamElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  ParamElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function PopStateEvent() {
  }
  PopStateEvent.builtin$cls = "PopStateEvent";
  if (!"name" in PopStateEvent)
    PopStateEvent.name = "PopStateEvent";
  $desc = $collectedClasses.PopStateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PopStateEvent.prototype = $desc;
  function PositionError() {
  }
  PositionError.builtin$cls = "PositionError";
  if (!"name" in PositionError)
    PositionError.name = "PositionError";
  $desc = $collectedClasses.PositionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PositionError.prototype = $desc;
  PositionError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function PreElement() {
  }
  PreElement.builtin$cls = "PreElement";
  if (!"name" in PreElement)
    PreElement.name = "PreElement";
  $desc = $collectedClasses.PreElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PreElement.prototype = $desc;
  function ProcessingInstruction() {
  }
  ProcessingInstruction.builtin$cls = "ProcessingInstruction";
  if (!"name" in ProcessingInstruction)
    ProcessingInstruction.name = "ProcessingInstruction";
  $desc = $collectedClasses.ProcessingInstruction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProcessingInstruction.prototype = $desc;
  ProcessingInstruction.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  function ProgressElement() {
  }
  ProgressElement.builtin$cls = "ProgressElement";
  if (!"name" in ProgressElement)
    ProgressElement.name = "ProgressElement";
  $desc = $collectedClasses.ProgressElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressElement.prototype = $desc;
  ProgressElement.prototype.get$position = function(receiver) {
    return receiver.position;
  };
  ProgressElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  ProgressElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function ProgressEvent() {
  }
  ProgressEvent.builtin$cls = "ProgressEvent";
  if (!"name" in ProgressEvent)
    ProgressEvent.name = "ProgressEvent";
  $desc = $collectedClasses.ProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressEvent.prototype = $desc;
  function QuoteElement() {
  }
  QuoteElement.builtin$cls = "QuoteElement";
  if (!"name" in QuoteElement)
    QuoteElement.name = "QuoteElement";
  $desc = $collectedClasses.QuoteElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  QuoteElement.prototype = $desc;
  function Range() {
  }
  Range.builtin$cls = "Range";
  if (!"name" in Range)
    Range.name = "Range";
  $desc = $collectedClasses.Range;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Range.prototype = $desc;
  function ResourceProgressEvent() {
  }
  ResourceProgressEvent.builtin$cls = "ResourceProgressEvent";
  if (!"name" in ResourceProgressEvent)
    ResourceProgressEvent.name = "ResourceProgressEvent";
  $desc = $collectedClasses.ResourceProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ResourceProgressEvent.prototype = $desc;
  ResourceProgressEvent.prototype.get$url = function(receiver) {
    return receiver.url;
  };
  function RtcDataChannelEvent() {
  }
  RtcDataChannelEvent.builtin$cls = "RtcDataChannelEvent";
  if (!"name" in RtcDataChannelEvent)
    RtcDataChannelEvent.name = "RtcDataChannelEvent";
  $desc = $collectedClasses.RtcDataChannelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDataChannelEvent.prototype = $desc;
  function RtcDtmfToneChangeEvent() {
  }
  RtcDtmfToneChangeEvent.builtin$cls = "RtcDtmfToneChangeEvent";
  if (!"name" in RtcDtmfToneChangeEvent)
    RtcDtmfToneChangeEvent.name = "RtcDtmfToneChangeEvent";
  $desc = $collectedClasses.RtcDtmfToneChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDtmfToneChangeEvent.prototype = $desc;
  function RtcIceCandidateEvent() {
  }
  RtcIceCandidateEvent.builtin$cls = "RtcIceCandidateEvent";
  if (!"name" in RtcIceCandidateEvent)
    RtcIceCandidateEvent.name = "RtcIceCandidateEvent";
  $desc = $collectedClasses.RtcIceCandidateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcIceCandidateEvent.prototype = $desc;
  function ScriptElement() {
  }
  ScriptElement.builtin$cls = "ScriptElement";
  if (!"name" in ScriptElement)
    ScriptElement.name = "ScriptElement";
  $desc = $collectedClasses.ScriptElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement.prototype = $desc;
  ScriptElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  ScriptElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ScriptElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SecurityPolicyViolationEvent() {
  }
  SecurityPolicyViolationEvent.builtin$cls = "SecurityPolicyViolationEvent";
  if (!"name" in SecurityPolicyViolationEvent)
    SecurityPolicyViolationEvent.name = "SecurityPolicyViolationEvent";
  $desc = $collectedClasses.SecurityPolicyViolationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SecurityPolicyViolationEvent.prototype = $desc;
  function SelectElement() {
  }
  SelectElement.builtin$cls = "SelectElement";
  if (!"name" in SelectElement)
    SelectElement.name = "SelectElement";
  $desc = $collectedClasses.SelectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SelectElement.prototype = $desc;
  SelectElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  SelectElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  SelectElement.prototype.set$length = function(receiver, v) {
    return receiver.length = v;
  };
  SelectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  SelectElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  SelectElement.prototype.get$required = function(receiver) {
    return receiver.required;
  };
  SelectElement.prototype.get$selectedIndex = function(receiver) {
    return receiver.selectedIndex;
  };
  SelectElement.prototype.set$selectedIndex = function(receiver, v) {
    return receiver.selectedIndex = v;
  };
  SelectElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  SelectElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  SelectElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function ShadowElement() {
  }
  ShadowElement.builtin$cls = "ShadowElement";
  if (!"name" in ShadowElement)
    ShadowElement.name = "ShadowElement";
  $desc = $collectedClasses.ShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowElement.prototype = $desc;
  function ShadowRoot() {
  }
  ShadowRoot.builtin$cls = "ShadowRoot";
  if (!"name" in ShadowRoot)
    ShadowRoot.name = "ShadowRoot";
  $desc = $collectedClasses.ShadowRoot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowRoot.prototype = $desc;
  ShadowRoot.prototype.get$applyAuthorStyles = function(receiver) {
    return receiver.applyAuthorStyles;
  };
  function SourceElement() {
  }
  SourceElement.builtin$cls = "SourceElement";
  if (!"name" in SourceElement)
    SourceElement.name = "SourceElement";
  $desc = $collectedClasses.SourceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceElement.prototype = $desc;
  SourceElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  SourceElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  SourceElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SpanElement() {
  }
  SpanElement.builtin$cls = "SpanElement";
  if (!"name" in SpanElement)
    SpanElement.name = "SpanElement";
  $desc = $collectedClasses.SpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpanElement.prototype = $desc;
  function SpeechInputEvent() {
  }
  SpeechInputEvent.builtin$cls = "SpeechInputEvent";
  if (!"name" in SpeechInputEvent)
    SpeechInputEvent.name = "SpeechInputEvent";
  $desc = $collectedClasses.SpeechInputEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechInputEvent.prototype = $desc;
  SpeechInputEvent.prototype.get$results = function(receiver) {
    return receiver.results;
  };
  function SpeechInputResult() {
  }
  SpeechInputResult.builtin$cls = "SpeechInputResult";
  if (!"name" in SpeechInputResult)
    SpeechInputResult.name = "SpeechInputResult";
  $desc = $collectedClasses.SpeechInputResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechInputResult.prototype = $desc;
  function SpeechRecognitionAlternative() {
  }
  SpeechRecognitionAlternative.builtin$cls = "SpeechRecognitionAlternative";
  if (!"name" in SpeechRecognitionAlternative)
    SpeechRecognitionAlternative.name = "SpeechRecognitionAlternative";
  $desc = $collectedClasses.SpeechRecognitionAlternative;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionAlternative.prototype = $desc;
  function SpeechRecognitionError() {
  }
  SpeechRecognitionError.builtin$cls = "SpeechRecognitionError";
  if (!"name" in SpeechRecognitionError)
    SpeechRecognitionError.name = "SpeechRecognitionError";
  $desc = $collectedClasses.SpeechRecognitionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionError.prototype = $desc;
  SpeechRecognitionError.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  SpeechRecognitionError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function SpeechRecognitionEvent() {
  }
  SpeechRecognitionEvent.builtin$cls = "SpeechRecognitionEvent";
  if (!"name" in SpeechRecognitionEvent)
    SpeechRecognitionEvent.name = "SpeechRecognitionEvent";
  $desc = $collectedClasses.SpeechRecognitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionEvent.prototype = $desc;
  SpeechRecognitionEvent.prototype.get$results = function(receiver) {
    return receiver.results;
  };
  function SpeechRecognitionResult() {
  }
  SpeechRecognitionResult.builtin$cls = "SpeechRecognitionResult";
  if (!"name" in SpeechRecognitionResult)
    SpeechRecognitionResult.name = "SpeechRecognitionResult";
  $desc = $collectedClasses.SpeechRecognitionResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionResult.prototype = $desc;
  SpeechRecognitionResult.prototype.get$isFinal = function(receiver) {
    return receiver.isFinal;
  };
  SpeechRecognitionResult.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function SpeechSynthesisEvent() {
  }
  SpeechSynthesisEvent.builtin$cls = "SpeechSynthesisEvent";
  if (!"name" in SpeechSynthesisEvent)
    SpeechSynthesisEvent.name = "SpeechSynthesisEvent";
  $desc = $collectedClasses.SpeechSynthesisEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechSynthesisEvent.prototype = $desc;
  SpeechSynthesisEvent.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function StorageEvent() {
  }
  StorageEvent.builtin$cls = "StorageEvent";
  if (!"name" in StorageEvent)
    StorageEvent.name = "StorageEvent";
  $desc = $collectedClasses.StorageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StorageEvent.prototype = $desc;
  StorageEvent.prototype.get$key = function(receiver) {
    return receiver.key;
  };
  StorageEvent.prototype.get$newValue = function(receiver) {
    return receiver.newValue;
  };
  StorageEvent.prototype.get$oldValue = function(receiver) {
    return receiver.oldValue;
  };
  StorageEvent.prototype.get$url = function(receiver) {
    return receiver.url;
  };
  function StyleElement() {
  }
  StyleElement.builtin$cls = "StyleElement";
  if (!"name" in StyleElement)
    StyleElement.name = "StyleElement";
  $desc = $collectedClasses.StyleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement.prototype = $desc;
  StyleElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  StyleElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function TableCaptionElement() {
  }
  TableCaptionElement.builtin$cls = "TableCaptionElement";
  if (!"name" in TableCaptionElement)
    TableCaptionElement.name = "TableCaptionElement";
  $desc = $collectedClasses.TableCaptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCaptionElement.prototype = $desc;
  function TableCellElement() {
  }
  TableCellElement.builtin$cls = "TableCellElement";
  if (!"name" in TableCellElement)
    TableCellElement.name = "TableCellElement";
  $desc = $collectedClasses.TableCellElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCellElement.prototype = $desc;
  function TableColElement() {
  }
  TableColElement.builtin$cls = "TableColElement";
  if (!"name" in TableColElement)
    TableColElement.name = "TableColElement";
  $desc = $collectedClasses.TableColElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableColElement.prototype = $desc;
  function TableElement() {
  }
  TableElement.builtin$cls = "TableElement";
  if (!"name" in TableElement)
    TableElement.name = "TableElement";
  $desc = $collectedClasses.TableElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableElement.prototype = $desc;
  function TableRowElement() {
  }
  TableRowElement.builtin$cls = "TableRowElement";
  if (!"name" in TableRowElement)
    TableRowElement.name = "TableRowElement";
  $desc = $collectedClasses.TableRowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableRowElement.prototype = $desc;
  function TableSectionElement() {
  }
  TableSectionElement.builtin$cls = "TableSectionElement";
  if (!"name" in TableSectionElement)
    TableSectionElement.name = "TableSectionElement";
  $desc = $collectedClasses.TableSectionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableSectionElement.prototype = $desc;
  function TemplateElement() {
  }
  TemplateElement.builtin$cls = "TemplateElement";
  if (!"name" in TemplateElement)
    TemplateElement.name = "TemplateElement";
  $desc = $collectedClasses.TemplateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateElement.prototype = $desc;
  TemplateElement.prototype.get$content = function(receiver) {
    return receiver.content;
  };
  function Text() {
  }
  Text.builtin$cls = "Text";
  if (!"name" in Text)
    Text.name = "Text";
  $desc = $collectedClasses.Text;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Text.prototype = $desc;
  function TextAreaElement() {
  }
  TextAreaElement.builtin$cls = "TextAreaElement";
  if (!"name" in TextAreaElement)
    TextAreaElement.name = "TextAreaElement";
  $desc = $collectedClasses.TextAreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextAreaElement.prototype = $desc;
  TextAreaElement.prototype.get$defaultValue = function(receiver) {
    return receiver.defaultValue;
  };
  TextAreaElement.prototype.set$defaultValue = function(receiver, v) {
    return receiver.defaultValue = v;
  };
  TextAreaElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  TextAreaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  TextAreaElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  TextAreaElement.prototype.get$required = function(receiver) {
    return receiver.required;
  };
  TextAreaElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  TextAreaElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  TextAreaElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function TextEvent() {
  }
  TextEvent.builtin$cls = "TextEvent";
  if (!"name" in TextEvent)
    TextEvent.name = "TextEvent";
  $desc = $collectedClasses.TextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextEvent.prototype = $desc;
  function TitleElement() {
  }
  TitleElement.builtin$cls = "TitleElement";
  if (!"name" in TitleElement)
    TitleElement.name = "TitleElement";
  $desc = $collectedClasses.TitleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement.prototype = $desc;
  function TouchEvent() {
  }
  TouchEvent.builtin$cls = "TouchEvent";
  if (!"name" in TouchEvent)
    TouchEvent.name = "TouchEvent";
  $desc = $collectedClasses.TouchEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TouchEvent.prototype = $desc;
  TouchEvent.prototype.get$ctrlKey = function(receiver) {
    return receiver.ctrlKey;
  };
  function TrackElement() {
  }
  TrackElement.builtin$cls = "TrackElement";
  if (!"name" in TrackElement)
    TrackElement.name = "TrackElement";
  $desc = $collectedClasses.TrackElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackElement.prototype = $desc;
  TrackElement.prototype.get$defaultValue = function(receiver) {
    return receiver.default;
  };
  TrackElement.prototype.set$defaultValue = function(receiver, v) {
    return receiver.default = v;
  };
  TrackElement.prototype.get$kind = function(receiver) {
    return receiver.kind;
  };
  TrackElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  function TrackEvent() {
  }
  TrackEvent.builtin$cls = "TrackEvent";
  if (!"name" in TrackEvent)
    TrackEvent.name = "TrackEvent";
  $desc = $collectedClasses.TrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackEvent.prototype = $desc;
  function TransitionEvent() {
  }
  TransitionEvent.builtin$cls = "TransitionEvent";
  if (!"name" in TransitionEvent)
    TransitionEvent.name = "TransitionEvent";
  $desc = $collectedClasses.TransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TransitionEvent.prototype = $desc;
  function UIEvent() {
  }
  UIEvent.builtin$cls = "UIEvent";
  if (!"name" in UIEvent)
    UIEvent.name = "UIEvent";
  $desc = $collectedClasses.UIEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UIEvent.prototype = $desc;
  function UListElement() {
  }
  UListElement.builtin$cls = "UListElement";
  if (!"name" in UListElement)
    UListElement.name = "UListElement";
  $desc = $collectedClasses.UListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UListElement.prototype = $desc;
  function UnknownElement() {
  }
  UnknownElement.builtin$cls = "UnknownElement";
  if (!"name" in UnknownElement)
    UnknownElement.name = "UnknownElement";
  $desc = $collectedClasses.UnknownElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownElement.prototype = $desc;
  function VideoElement() {
  }
  VideoElement.builtin$cls = "VideoElement";
  if (!"name" in VideoElement)
    VideoElement.name = "VideoElement";
  $desc = $collectedClasses.VideoElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VideoElement.prototype = $desc;
  function WheelEvent() {
  }
  WheelEvent.builtin$cls = "WheelEvent";
  if (!"name" in WheelEvent)
    WheelEvent.name = "WheelEvent";
  $desc = $collectedClasses.WheelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WheelEvent.prototype = $desc;
  function Window() {
  }
  Window.builtin$cls = "Window";
  if (!"name" in Window)
    Window.name = "Window";
  $desc = $collectedClasses.Window;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Window.prototype = $desc;
  Window.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  Window.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  function _Attr() {
  }
  _Attr.builtin$cls = "_Attr";
  if (!"name" in _Attr)
    _Attr.name = "_Attr";
  $desc = $collectedClasses._Attr;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Attr.prototype = $desc;
  _Attr.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  _Attr.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  _Attr.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function _Entity() {
  }
  _Entity.builtin$cls = "_Entity";
  if (!"name" in _Entity)
    _Entity.name = "_Entity";
  $desc = $collectedClasses._Entity;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Entity.prototype = $desc;
  function _HTMLAppletElement() {
  }
  _HTMLAppletElement.builtin$cls = "_HTMLAppletElement";
  if (!"name" in _HTMLAppletElement)
    _HTMLAppletElement.name = "_HTMLAppletElement";
  $desc = $collectedClasses._HTMLAppletElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLAppletElement.prototype = $desc;
  function _HTMLBaseFontElement() {
  }
  _HTMLBaseFontElement.builtin$cls = "_HTMLBaseFontElement";
  if (!"name" in _HTMLBaseFontElement)
    _HTMLBaseFontElement.name = "_HTMLBaseFontElement";
  $desc = $collectedClasses._HTMLBaseFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLBaseFontElement.prototype = $desc;
  function _HTMLDirectoryElement() {
  }
  _HTMLDirectoryElement.builtin$cls = "_HTMLDirectoryElement";
  if (!"name" in _HTMLDirectoryElement)
    _HTMLDirectoryElement.name = "_HTMLDirectoryElement";
  $desc = $collectedClasses._HTMLDirectoryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLDirectoryElement.prototype = $desc;
  function _HTMLFontElement() {
  }
  _HTMLFontElement.builtin$cls = "_HTMLFontElement";
  if (!"name" in _HTMLFontElement)
    _HTMLFontElement.name = "_HTMLFontElement";
  $desc = $collectedClasses._HTMLFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFontElement.prototype = $desc;
  function _HTMLFrameElement() {
  }
  _HTMLFrameElement.builtin$cls = "_HTMLFrameElement";
  if (!"name" in _HTMLFrameElement)
    _HTMLFrameElement.name = "_HTMLFrameElement";
  $desc = $collectedClasses._HTMLFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameElement.prototype = $desc;
  function _HTMLFrameSetElement() {
  }
  _HTMLFrameSetElement.builtin$cls = "_HTMLFrameSetElement";
  if (!"name" in _HTMLFrameSetElement)
    _HTMLFrameSetElement.name = "_HTMLFrameSetElement";
  $desc = $collectedClasses._HTMLFrameSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameSetElement.prototype = $desc;
  function _HTMLMarqueeElement() {
  }
  _HTMLMarqueeElement.builtin$cls = "_HTMLMarqueeElement";
  if (!"name" in _HTMLMarqueeElement)
    _HTMLMarqueeElement.name = "_HTMLMarqueeElement";
  $desc = $collectedClasses._HTMLMarqueeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLMarqueeElement.prototype = $desc;
  function _MutationEvent() {
  }
  _MutationEvent.builtin$cls = "_MutationEvent";
  if (!"name" in _MutationEvent)
    _MutationEvent.name = "_MutationEvent";
  $desc = $collectedClasses._MutationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MutationEvent.prototype = $desc;
  function _NamedNodeMap() {
  }
  _NamedNodeMap.builtin$cls = "_NamedNodeMap";
  if (!"name" in _NamedNodeMap)
    _NamedNodeMap.name = "_NamedNodeMap";
  $desc = $collectedClasses._NamedNodeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NamedNodeMap.prototype = $desc;
  function _Notation() {
  }
  _Notation.builtin$cls = "_Notation";
  if (!"name" in _Notation)
    _Notation.name = "_Notation";
  $desc = $collectedClasses._Notation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Notation.prototype = $desc;
  function _SpeechInputResultList() {
  }
  _SpeechInputResultList.builtin$cls = "_SpeechInputResultList";
  if (!"name" in _SpeechInputResultList)
    _SpeechInputResultList.name = "_SpeechInputResultList";
  $desc = $collectedClasses._SpeechInputResultList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SpeechInputResultList.prototype = $desc;
  function _SpeechRecognitionResultList() {
  }
  _SpeechRecognitionResultList.builtin$cls = "_SpeechRecognitionResultList";
  if (!"name" in _SpeechRecognitionResultList)
    _SpeechRecognitionResultList.name = "_SpeechRecognitionResultList";
  $desc = $collectedClasses._SpeechRecognitionResultList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SpeechRecognitionResultList.prototype = $desc;
  function _XMLHttpRequestProgressEvent() {
  }
  _XMLHttpRequestProgressEvent.builtin$cls = "_XMLHttpRequestProgressEvent";
  if (!"name" in _XMLHttpRequestProgressEvent)
    _XMLHttpRequestProgressEvent.name = "_XMLHttpRequestProgressEvent";
  $desc = $collectedClasses._XMLHttpRequestProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _XMLHttpRequestProgressEvent.prototype = $desc;
  function KeyRange() {
  }
  KeyRange.builtin$cls = "KeyRange";
  if (!"name" in KeyRange)
    KeyRange.name = "KeyRange";
  $desc = $collectedClasses.KeyRange;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeyRange.prototype = $desc;
  function VersionChangeEvent() {
  }
  VersionChangeEvent.builtin$cls = "VersionChangeEvent";
  if (!"name" in VersionChangeEvent)
    VersionChangeEvent.name = "VersionChangeEvent";
  $desc = $collectedClasses.VersionChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VersionChangeEvent.prototype = $desc;
  function AElement() {
  }
  AElement.builtin$cls = "AElement";
  if (!"name" in AElement)
    AElement.name = "AElement";
  $desc = $collectedClasses.AElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AElement.prototype = $desc;
  AElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  AElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function AltGlyphElement() {
  }
  AltGlyphElement.builtin$cls = "AltGlyphElement";
  if (!"name" in AltGlyphElement)
    AltGlyphElement.name = "AltGlyphElement";
  $desc = $collectedClasses.AltGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AltGlyphElement.prototype = $desc;
  AltGlyphElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function AnimateElement() {
  }
  AnimateElement.builtin$cls = "AnimateElement";
  if (!"name" in AnimateElement)
    AnimateElement.name = "AnimateElement";
  $desc = $collectedClasses.AnimateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateElement.prototype = $desc;
  function AnimateMotionElement() {
  }
  AnimateMotionElement.builtin$cls = "AnimateMotionElement";
  if (!"name" in AnimateMotionElement)
    AnimateMotionElement.name = "AnimateMotionElement";
  $desc = $collectedClasses.AnimateMotionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateMotionElement.prototype = $desc;
  function AnimateTransformElement() {
  }
  AnimateTransformElement.builtin$cls = "AnimateTransformElement";
  if (!"name" in AnimateTransformElement)
    AnimateTransformElement.name = "AnimateTransformElement";
  $desc = $collectedClasses.AnimateTransformElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateTransformElement.prototype = $desc;
  function AnimatedEnumeration() {
  }
  AnimatedEnumeration.builtin$cls = "AnimatedEnumeration";
  if (!"name" in AnimatedEnumeration)
    AnimatedEnumeration.name = "AnimatedEnumeration";
  $desc = $collectedClasses.AnimatedEnumeration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedEnumeration.prototype = $desc;
  function AnimatedLength() {
  }
  AnimatedLength.builtin$cls = "AnimatedLength";
  if (!"name" in AnimatedLength)
    AnimatedLength.name = "AnimatedLength";
  $desc = $collectedClasses.AnimatedLength;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLength.prototype = $desc;
  function AnimatedLengthList() {
  }
  AnimatedLengthList.builtin$cls = "AnimatedLengthList";
  if (!"name" in AnimatedLengthList)
    AnimatedLengthList.name = "AnimatedLengthList";
  $desc = $collectedClasses.AnimatedLengthList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLengthList.prototype = $desc;
  function AnimatedNumber() {
  }
  AnimatedNumber.builtin$cls = "AnimatedNumber";
  if (!"name" in AnimatedNumber)
    AnimatedNumber.name = "AnimatedNumber";
  $desc = $collectedClasses.AnimatedNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumber.prototype = $desc;
  function AnimatedNumberList() {
  }
  AnimatedNumberList.builtin$cls = "AnimatedNumberList";
  if (!"name" in AnimatedNumberList)
    AnimatedNumberList.name = "AnimatedNumberList";
  $desc = $collectedClasses.AnimatedNumberList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumberList.prototype = $desc;
  function AnimatedString() {
  }
  AnimatedString.builtin$cls = "AnimatedString";
  if (!"name" in AnimatedString)
    AnimatedString.name = "AnimatedString";
  $desc = $collectedClasses.AnimatedString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedString.prototype = $desc;
  function AnimationElement() {
  }
  AnimationElement.builtin$cls = "AnimationElement";
  if (!"name" in AnimationElement)
    AnimationElement.name = "AnimationElement";
  $desc = $collectedClasses.AnimationElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationElement.prototype = $desc;
  function CircleElement() {
  }
  CircleElement.builtin$cls = "CircleElement";
  if (!"name" in CircleElement)
    CircleElement.name = "CircleElement";
  $desc = $collectedClasses.CircleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CircleElement.prototype = $desc;
  function ClipPathElement() {
  }
  ClipPathElement.builtin$cls = "ClipPathElement";
  if (!"name" in ClipPathElement)
    ClipPathElement.name = "ClipPathElement";
  $desc = $collectedClasses.ClipPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClipPathElement.prototype = $desc;
  function DefsElement() {
  }
  DefsElement.builtin$cls = "DefsElement";
  if (!"name" in DefsElement)
    DefsElement.name = "DefsElement";
  $desc = $collectedClasses.DefsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DefsElement.prototype = $desc;
  function DescElement() {
  }
  DescElement.builtin$cls = "DescElement";
  if (!"name" in DescElement)
    DescElement.name = "DescElement";
  $desc = $collectedClasses.DescElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DescElement.prototype = $desc;
  function EllipseElement() {
  }
  EllipseElement.builtin$cls = "EllipseElement";
  if (!"name" in EllipseElement)
    EllipseElement.name = "EllipseElement";
  $desc = $collectedClasses.EllipseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EllipseElement.prototype = $desc;
  function FEBlendElement() {
  }
  FEBlendElement.builtin$cls = "FEBlendElement";
  if (!"name" in FEBlendElement)
    FEBlendElement.name = "FEBlendElement";
  $desc = $collectedClasses.FEBlendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEBlendElement.prototype = $desc;
  FEBlendElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEBlendElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEColorMatrixElement() {
  }
  FEColorMatrixElement.builtin$cls = "FEColorMatrixElement";
  if (!"name" in FEColorMatrixElement)
    FEColorMatrixElement.name = "FEColorMatrixElement";
  $desc = $collectedClasses.FEColorMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEColorMatrixElement.prototype = $desc;
  FEColorMatrixElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  FEColorMatrixElement.prototype.get$values = function(receiver) {
    return receiver.values;
  };
  FEColorMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEColorMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEComponentTransferElement() {
  }
  FEComponentTransferElement.builtin$cls = "FEComponentTransferElement";
  if (!"name" in FEComponentTransferElement)
    FEComponentTransferElement.name = "FEComponentTransferElement";
  $desc = $collectedClasses.FEComponentTransferElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEComponentTransferElement.prototype = $desc;
  FEComponentTransferElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEComponentTransferElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FECompositeElement() {
  }
  FECompositeElement.builtin$cls = "FECompositeElement";
  if (!"name" in FECompositeElement)
    FECompositeElement.name = "FECompositeElement";
  $desc = $collectedClasses.FECompositeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FECompositeElement.prototype = $desc;
  FECompositeElement.prototype.get$operator = function(receiver) {
    return receiver.operator;
  };
  FECompositeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FECompositeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEConvolveMatrixElement() {
  }
  FEConvolveMatrixElement.builtin$cls = "FEConvolveMatrixElement";
  if (!"name" in FEConvolveMatrixElement)
    FEConvolveMatrixElement.name = "FEConvolveMatrixElement";
  $desc = $collectedClasses.FEConvolveMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEConvolveMatrixElement.prototype = $desc;
  FEConvolveMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEConvolveMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDiffuseLightingElement() {
  }
  FEDiffuseLightingElement.builtin$cls = "FEDiffuseLightingElement";
  if (!"name" in FEDiffuseLightingElement)
    FEDiffuseLightingElement.name = "FEDiffuseLightingElement";
  $desc = $collectedClasses.FEDiffuseLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDiffuseLightingElement.prototype = $desc;
  FEDiffuseLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDiffuseLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDisplacementMapElement() {
  }
  FEDisplacementMapElement.builtin$cls = "FEDisplacementMapElement";
  if (!"name" in FEDisplacementMapElement)
    FEDisplacementMapElement.name = "FEDisplacementMapElement";
  $desc = $collectedClasses.FEDisplacementMapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDisplacementMapElement.prototype = $desc;
  FEDisplacementMapElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDisplacementMapElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDistantLightElement() {
  }
  FEDistantLightElement.builtin$cls = "FEDistantLightElement";
  if (!"name" in FEDistantLightElement)
    FEDistantLightElement.name = "FEDistantLightElement";
  $desc = $collectedClasses.FEDistantLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDistantLightElement.prototype = $desc;
  function FEFloodElement() {
  }
  FEFloodElement.builtin$cls = "FEFloodElement";
  if (!"name" in FEFloodElement)
    FEFloodElement.name = "FEFloodElement";
  $desc = $collectedClasses.FEFloodElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFloodElement.prototype = $desc;
  FEFloodElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEFloodElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEFuncAElement() {
  }
  FEFuncAElement.builtin$cls = "FEFuncAElement";
  if (!"name" in FEFuncAElement)
    FEFuncAElement.name = "FEFuncAElement";
  $desc = $collectedClasses.FEFuncAElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncAElement.prototype = $desc;
  function FEFuncBElement() {
  }
  FEFuncBElement.builtin$cls = "FEFuncBElement";
  if (!"name" in FEFuncBElement)
    FEFuncBElement.name = "FEFuncBElement";
  $desc = $collectedClasses.FEFuncBElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncBElement.prototype = $desc;
  function FEFuncGElement() {
  }
  FEFuncGElement.builtin$cls = "FEFuncGElement";
  if (!"name" in FEFuncGElement)
    FEFuncGElement.name = "FEFuncGElement";
  $desc = $collectedClasses.FEFuncGElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncGElement.prototype = $desc;
  function FEFuncRElement() {
  }
  FEFuncRElement.builtin$cls = "FEFuncRElement";
  if (!"name" in FEFuncRElement)
    FEFuncRElement.name = "FEFuncRElement";
  $desc = $collectedClasses.FEFuncRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncRElement.prototype = $desc;
  function FEGaussianBlurElement() {
  }
  FEGaussianBlurElement.builtin$cls = "FEGaussianBlurElement";
  if (!"name" in FEGaussianBlurElement)
    FEGaussianBlurElement.name = "FEGaussianBlurElement";
  $desc = $collectedClasses.FEGaussianBlurElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEGaussianBlurElement.prototype = $desc;
  FEGaussianBlurElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEGaussianBlurElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEImageElement() {
  }
  FEImageElement.builtin$cls = "FEImageElement";
  if (!"name" in FEImageElement)
    FEImageElement.name = "FEImageElement";
  $desc = $collectedClasses.FEImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEImageElement.prototype = $desc;
  FEImageElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEImageElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  FEImageElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function FEMergeElement() {
  }
  FEMergeElement.builtin$cls = "FEMergeElement";
  if (!"name" in FEMergeElement)
    FEMergeElement.name = "FEMergeElement";
  $desc = $collectedClasses.FEMergeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeElement.prototype = $desc;
  FEMergeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMergeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeNodeElement() {
  }
  FEMergeNodeElement.builtin$cls = "FEMergeNodeElement";
  if (!"name" in FEMergeNodeElement)
    FEMergeNodeElement.name = "FEMergeNodeElement";
  $desc = $collectedClasses.FEMergeNodeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeNodeElement.prototype = $desc;
  function FEMorphologyElement() {
  }
  FEMorphologyElement.builtin$cls = "FEMorphologyElement";
  if (!"name" in FEMorphologyElement)
    FEMorphologyElement.name = "FEMorphologyElement";
  $desc = $collectedClasses.FEMorphologyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMorphologyElement.prototype = $desc;
  FEMorphologyElement.prototype.get$operator = function(receiver) {
    return receiver.operator;
  };
  FEMorphologyElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMorphologyElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEOffsetElement() {
  }
  FEOffsetElement.builtin$cls = "FEOffsetElement";
  if (!"name" in FEOffsetElement)
    FEOffsetElement.name = "FEOffsetElement";
  $desc = $collectedClasses.FEOffsetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEOffsetElement.prototype = $desc;
  FEOffsetElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEOffsetElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEPointLightElement() {
  }
  FEPointLightElement.builtin$cls = "FEPointLightElement";
  if (!"name" in FEPointLightElement)
    FEPointLightElement.name = "FEPointLightElement";
  $desc = $collectedClasses.FEPointLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEPointLightElement.prototype = $desc;
  FEPointLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEPointLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpecularLightingElement() {
  }
  FESpecularLightingElement.builtin$cls = "FESpecularLightingElement";
  if (!"name" in FESpecularLightingElement)
    FESpecularLightingElement.name = "FESpecularLightingElement";
  $desc = $collectedClasses.FESpecularLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpecularLightingElement.prototype = $desc;
  FESpecularLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpecularLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpotLightElement() {
  }
  FESpotLightElement.builtin$cls = "FESpotLightElement";
  if (!"name" in FESpotLightElement)
    FESpotLightElement.name = "FESpotLightElement";
  $desc = $collectedClasses.FESpotLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpotLightElement.prototype = $desc;
  FESpotLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpotLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETileElement() {
  }
  FETileElement.builtin$cls = "FETileElement";
  if (!"name" in FETileElement)
    FETileElement.name = "FETileElement";
  $desc = $collectedClasses.FETileElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETileElement.prototype = $desc;
  FETileElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETileElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETurbulenceElement() {
  }
  FETurbulenceElement.builtin$cls = "FETurbulenceElement";
  if (!"name" in FETurbulenceElement)
    FETurbulenceElement.name = "FETurbulenceElement";
  $desc = $collectedClasses.FETurbulenceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETurbulenceElement.prototype = $desc;
  FETurbulenceElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  FETurbulenceElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETurbulenceElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FilterElement() {
  }
  FilterElement.builtin$cls = "FilterElement";
  if (!"name" in FilterElement)
    FilterElement.name = "FilterElement";
  $desc = $collectedClasses.FilterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilterElement.prototype = $desc;
  FilterElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FilterElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  FilterElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function ForeignObjectElement() {
  }
  ForeignObjectElement.builtin$cls = "ForeignObjectElement";
  if (!"name" in ForeignObjectElement)
    ForeignObjectElement.name = "ForeignObjectElement";
  $desc = $collectedClasses.ForeignObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ForeignObjectElement.prototype = $desc;
  ForeignObjectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ForeignObjectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function GElement() {
  }
  GElement.builtin$cls = "GElement";
  if (!"name" in GElement)
    GElement.name = "GElement";
  $desc = $collectedClasses.GElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GElement.prototype = $desc;
  function GraphicsElement() {
  }
  GraphicsElement.builtin$cls = "GraphicsElement";
  if (!"name" in GraphicsElement)
    GraphicsElement.name = "GraphicsElement";
  $desc = $collectedClasses.GraphicsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GraphicsElement.prototype = $desc;
  function ImageElement0() {
  }
  ImageElement0.builtin$cls = "ImageElement0";
  if (!"name" in ImageElement0)
    ImageElement0.name = "ImageElement0";
  $desc = $collectedClasses.ImageElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement0.prototype = $desc;
  ImageElement0.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ImageElement0.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  ImageElement0.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function LineElement() {
  }
  LineElement.builtin$cls = "LineElement";
  if (!"name" in LineElement)
    LineElement.name = "LineElement";
  $desc = $collectedClasses.LineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LineElement.prototype = $desc;
  function LinearGradientElement() {
  }
  LinearGradientElement.builtin$cls = "LinearGradientElement";
  if (!"name" in LinearGradientElement)
    LinearGradientElement.name = "LinearGradientElement";
  $desc = $collectedClasses.LinearGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinearGradientElement.prototype = $desc;
  function MarkerElement() {
  }
  MarkerElement.builtin$cls = "MarkerElement";
  if (!"name" in MarkerElement)
    MarkerElement.name = "MarkerElement";
  $desc = $collectedClasses.MarkerElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MarkerElement.prototype = $desc;
  function MaskElement() {
  }
  MaskElement.builtin$cls = "MaskElement";
  if (!"name" in MaskElement)
    MaskElement.name = "MaskElement";
  $desc = $collectedClasses.MaskElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MaskElement.prototype = $desc;
  MaskElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  MaskElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function MetadataElement() {
  }
  MetadataElement.builtin$cls = "MetadataElement";
  if (!"name" in MetadataElement)
    MetadataElement.name = "MetadataElement";
  $desc = $collectedClasses.MetadataElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetadataElement.prototype = $desc;
  function PathElement() {
  }
  PathElement.builtin$cls = "PathElement";
  if (!"name" in PathElement)
    PathElement.name = "PathElement";
  $desc = $collectedClasses.PathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathElement.prototype = $desc;
  function PatternElement() {
  }
  PatternElement.builtin$cls = "PatternElement";
  if (!"name" in PatternElement)
    PatternElement.name = "PatternElement";
  $desc = $collectedClasses.PatternElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PatternElement.prototype = $desc;
  PatternElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PatternElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  PatternElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function PolygonElement() {
  }
  PolygonElement.builtin$cls = "PolygonElement";
  if (!"name" in PolygonElement)
    PolygonElement.name = "PolygonElement";
  $desc = $collectedClasses.PolygonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonElement.prototype = $desc;
  function PolylineElement() {
  }
  PolylineElement.builtin$cls = "PolylineElement";
  if (!"name" in PolylineElement)
    PolylineElement.name = "PolylineElement";
  $desc = $collectedClasses.PolylineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolylineElement.prototype = $desc;
  function RadialGradientElement() {
  }
  RadialGradientElement.builtin$cls = "RadialGradientElement";
  if (!"name" in RadialGradientElement)
    RadialGradientElement.name = "RadialGradientElement";
  $desc = $collectedClasses.RadialGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RadialGradientElement.prototype = $desc;
  function RectElement() {
  }
  RectElement.builtin$cls = "RectElement";
  if (!"name" in RectElement)
    RectElement.name = "RectElement";
  $desc = $collectedClasses.RectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RectElement.prototype = $desc;
  RectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  RectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ScriptElement0() {
  }
  ScriptElement0.builtin$cls = "ScriptElement0";
  if (!"name" in ScriptElement0)
    ScriptElement0.name = "ScriptElement0";
  $desc = $collectedClasses.ScriptElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement0.prototype = $desc;
  ScriptElement0.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ScriptElement0.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  ScriptElement0.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function SetElement() {
  }
  SetElement.builtin$cls = "SetElement";
  if (!"name" in SetElement)
    SetElement.name = "SetElement";
  $desc = $collectedClasses.SetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SetElement.prototype = $desc;
  function StopElement() {
  }
  StopElement.builtin$cls = "StopElement";
  if (!"name" in StopElement)
    StopElement.name = "StopElement";
  $desc = $collectedClasses.StopElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StopElement.prototype = $desc;
  function StyleElement0() {
  }
  StyleElement0.builtin$cls = "StyleElement0";
  if (!"name" in StyleElement0)
    StyleElement0.name = "StyleElement0";
  $desc = $collectedClasses.StyleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement0.prototype = $desc;
  StyleElement0.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  StyleElement0.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SvgDocument() {
  }
  SvgDocument.builtin$cls = "SvgDocument";
  if (!"name" in SvgDocument)
    SvgDocument.name = "SvgDocument";
  $desc = $collectedClasses.SvgDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgDocument.prototype = $desc;
  function SvgElement() {
  }
  SvgElement.builtin$cls = "SvgElement";
  if (!"name" in SvgElement)
    SvgElement.name = "SvgElement";
  $desc = $collectedClasses.SvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgElement.prototype = $desc;
  function SvgSvgElement() {
  }
  SvgSvgElement.builtin$cls = "SvgSvgElement";
  if (!"name" in SvgSvgElement)
    SvgSvgElement.name = "SvgSvgElement";
  $desc = $collectedClasses.SvgSvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgSvgElement.prototype = $desc;
  SvgSvgElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  SvgSvgElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function SwitchElement() {
  }
  SwitchElement.builtin$cls = "SwitchElement";
  if (!"name" in SwitchElement)
    SwitchElement.name = "SwitchElement";
  $desc = $collectedClasses.SwitchElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SwitchElement.prototype = $desc;
  function SymbolElement() {
  }
  SymbolElement.builtin$cls = "SymbolElement";
  if (!"name" in SymbolElement)
    SymbolElement.name = "SymbolElement";
  $desc = $collectedClasses.SymbolElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SymbolElement.prototype = $desc;
  function TSpanElement() {
  }
  TSpanElement.builtin$cls = "TSpanElement";
  if (!"name" in TSpanElement)
    TSpanElement.name = "TSpanElement";
  $desc = $collectedClasses.TSpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TSpanElement.prototype = $desc;
  function TextContentElement() {
  }
  TextContentElement.builtin$cls = "TextContentElement";
  if (!"name" in TextContentElement)
    TextContentElement.name = "TextContentElement";
  $desc = $collectedClasses.TextContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextContentElement.prototype = $desc;
  function TextElement() {
  }
  TextElement.builtin$cls = "TextElement";
  if (!"name" in TextElement)
    TextElement.name = "TextElement";
  $desc = $collectedClasses.TextElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextElement.prototype = $desc;
  function TextPathElement() {
  }
  TextPathElement.builtin$cls = "TextPathElement";
  if (!"name" in TextPathElement)
    TextPathElement.name = "TextPathElement";
  $desc = $collectedClasses.TextPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPathElement.prototype = $desc;
  TextPathElement.prototype.get$method = function(receiver) {
    return receiver.method;
  };
  TextPathElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function TextPositioningElement() {
  }
  TextPositioningElement.builtin$cls = "TextPositioningElement";
  if (!"name" in TextPositioningElement)
    TextPositioningElement.name = "TextPositioningElement";
  $desc = $collectedClasses.TextPositioningElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPositioningElement.prototype = $desc;
  TextPositioningElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  TextPositioningElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function TitleElement0() {
  }
  TitleElement0.builtin$cls = "TitleElement0";
  if (!"name" in TitleElement0)
    TitleElement0.name = "TitleElement0";
  $desc = $collectedClasses.TitleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement0.prototype = $desc;
  function UseElement() {
  }
  UseElement.builtin$cls = "UseElement";
  if (!"name" in UseElement)
    UseElement.name = "UseElement";
  $desc = $collectedClasses.UseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UseElement.prototype = $desc;
  UseElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  UseElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  UseElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function ViewElement() {
  }
  ViewElement.builtin$cls = "ViewElement";
  if (!"name" in ViewElement)
    ViewElement.name = "ViewElement";
  $desc = $collectedClasses.ViewElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ViewElement.prototype = $desc;
  function ZoomEvent() {
  }
  ZoomEvent.builtin$cls = "ZoomEvent";
  if (!"name" in ZoomEvent)
    ZoomEvent.name = "ZoomEvent";
  $desc = $collectedClasses.ZoomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZoomEvent.prototype = $desc;
  function _GradientElement() {
  }
  _GradientElement.builtin$cls = "_GradientElement";
  if (!"name" in _GradientElement)
    _GradientElement.name = "_GradientElement";
  $desc = $collectedClasses._GradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GradientElement.prototype = $desc;
  _GradientElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function _SVGAltGlyphDefElement() {
  }
  _SVGAltGlyphDefElement.builtin$cls = "_SVGAltGlyphDefElement";
  if (!"name" in _SVGAltGlyphDefElement)
    _SVGAltGlyphDefElement.name = "_SVGAltGlyphDefElement";
  $desc = $collectedClasses._SVGAltGlyphDefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphDefElement.prototype = $desc;
  function _SVGAltGlyphItemElement() {
  }
  _SVGAltGlyphItemElement.builtin$cls = "_SVGAltGlyphItemElement";
  if (!"name" in _SVGAltGlyphItemElement)
    _SVGAltGlyphItemElement.name = "_SVGAltGlyphItemElement";
  $desc = $collectedClasses._SVGAltGlyphItemElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphItemElement.prototype = $desc;
  function _SVGAnimateColorElement() {
  }
  _SVGAnimateColorElement.builtin$cls = "_SVGAnimateColorElement";
  if (!"name" in _SVGAnimateColorElement)
    _SVGAnimateColorElement.name = "_SVGAnimateColorElement";
  $desc = $collectedClasses._SVGAnimateColorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAnimateColorElement.prototype = $desc;
  function _SVGComponentTransferFunctionElement() {
  }
  _SVGComponentTransferFunctionElement.builtin$cls = "_SVGComponentTransferFunctionElement";
  if (!"name" in _SVGComponentTransferFunctionElement)
    _SVGComponentTransferFunctionElement.name = "_SVGComponentTransferFunctionElement";
  $desc = $collectedClasses._SVGComponentTransferFunctionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGComponentTransferFunctionElement.prototype = $desc;
  function _SVGCursorElement() {
  }
  _SVGCursorElement.builtin$cls = "_SVGCursorElement";
  if (!"name" in _SVGCursorElement)
    _SVGCursorElement.name = "_SVGCursorElement";
  $desc = $collectedClasses._SVGCursorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGCursorElement.prototype = $desc;
  function _SVGFEDropShadowElement() {
  }
  _SVGFEDropShadowElement.builtin$cls = "_SVGFEDropShadowElement";
  if (!"name" in _SVGFEDropShadowElement)
    _SVGFEDropShadowElement.name = "_SVGFEDropShadowElement";
  $desc = $collectedClasses._SVGFEDropShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFEDropShadowElement.prototype = $desc;
  function _SVGFontElement() {
  }
  _SVGFontElement.builtin$cls = "_SVGFontElement";
  if (!"name" in _SVGFontElement)
    _SVGFontElement.name = "_SVGFontElement";
  $desc = $collectedClasses._SVGFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontElement.prototype = $desc;
  function _SVGFontFaceElement() {
  }
  _SVGFontFaceElement.builtin$cls = "_SVGFontFaceElement";
  if (!"name" in _SVGFontFaceElement)
    _SVGFontFaceElement.name = "_SVGFontFaceElement";
  $desc = $collectedClasses._SVGFontFaceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceElement.prototype = $desc;
  function _SVGFontFaceFormatElement() {
  }
  _SVGFontFaceFormatElement.builtin$cls = "_SVGFontFaceFormatElement";
  if (!"name" in _SVGFontFaceFormatElement)
    _SVGFontFaceFormatElement.name = "_SVGFontFaceFormatElement";
  $desc = $collectedClasses._SVGFontFaceFormatElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceFormatElement.prototype = $desc;
  function _SVGFontFaceNameElement() {
  }
  _SVGFontFaceNameElement.builtin$cls = "_SVGFontFaceNameElement";
  if (!"name" in _SVGFontFaceNameElement)
    _SVGFontFaceNameElement.name = "_SVGFontFaceNameElement";
  $desc = $collectedClasses._SVGFontFaceNameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceNameElement.prototype = $desc;
  function _SVGFontFaceSrcElement() {
  }
  _SVGFontFaceSrcElement.builtin$cls = "_SVGFontFaceSrcElement";
  if (!"name" in _SVGFontFaceSrcElement)
    _SVGFontFaceSrcElement.name = "_SVGFontFaceSrcElement";
  $desc = $collectedClasses._SVGFontFaceSrcElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceSrcElement.prototype = $desc;
  function _SVGFontFaceUriElement() {
  }
  _SVGFontFaceUriElement.builtin$cls = "_SVGFontFaceUriElement";
  if (!"name" in _SVGFontFaceUriElement)
    _SVGFontFaceUriElement.name = "_SVGFontFaceUriElement";
  $desc = $collectedClasses._SVGFontFaceUriElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceUriElement.prototype = $desc;
  function _SVGGlyphElement() {
  }
  _SVGGlyphElement.builtin$cls = "_SVGGlyphElement";
  if (!"name" in _SVGGlyphElement)
    _SVGGlyphElement.name = "_SVGGlyphElement";
  $desc = $collectedClasses._SVGGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphElement.prototype = $desc;
  function _SVGGlyphRefElement() {
  }
  _SVGGlyphRefElement.builtin$cls = "_SVGGlyphRefElement";
  if (!"name" in _SVGGlyphRefElement)
    _SVGGlyphRefElement.name = "_SVGGlyphRefElement";
  $desc = $collectedClasses._SVGGlyphRefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphRefElement.prototype = $desc;
  function _SVGHKernElement() {
  }
  _SVGHKernElement.builtin$cls = "_SVGHKernElement";
  if (!"name" in _SVGHKernElement)
    _SVGHKernElement.name = "_SVGHKernElement";
  $desc = $collectedClasses._SVGHKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGHKernElement.prototype = $desc;
  function _SVGMPathElement() {
  }
  _SVGMPathElement.builtin$cls = "_SVGMPathElement";
  if (!"name" in _SVGMPathElement)
    _SVGMPathElement.name = "_SVGMPathElement";
  $desc = $collectedClasses._SVGMPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMPathElement.prototype = $desc;
  function _SVGMissingGlyphElement() {
  }
  _SVGMissingGlyphElement.builtin$cls = "_SVGMissingGlyphElement";
  if (!"name" in _SVGMissingGlyphElement)
    _SVGMissingGlyphElement.name = "_SVGMissingGlyphElement";
  $desc = $collectedClasses._SVGMissingGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMissingGlyphElement.prototype = $desc;
  function _SVGVKernElement() {
  }
  _SVGVKernElement.builtin$cls = "_SVGVKernElement";
  if (!"name" in _SVGVKernElement)
    _SVGVKernElement.name = "_SVGVKernElement";
  $desc = $collectedClasses._SVGVKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGVKernElement.prototype = $desc;
  function AudioProcessingEvent() {
  }
  AudioProcessingEvent.builtin$cls = "AudioProcessingEvent";
  if (!"name" in AudioProcessingEvent)
    AudioProcessingEvent.name = "AudioProcessingEvent";
  $desc = $collectedClasses.AudioProcessingEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioProcessingEvent.prototype = $desc;
  function OfflineAudioCompletionEvent() {
  }
  OfflineAudioCompletionEvent.builtin$cls = "OfflineAudioCompletionEvent";
  if (!"name" in OfflineAudioCompletionEvent)
    OfflineAudioCompletionEvent.name = "OfflineAudioCompletionEvent";
  $desc = $collectedClasses.OfflineAudioCompletionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OfflineAudioCompletionEvent.prototype = $desc;
  function ContextEvent() {
  }
  ContextEvent.builtin$cls = "ContextEvent";
  if (!"name" in ContextEvent)
    ContextEvent.name = "ContextEvent";
  $desc = $collectedClasses.ContextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContextEvent.prototype = $desc;
  function SqlError() {
  }
  SqlError.builtin$cls = "SqlError";
  if (!"name" in SqlError)
    SqlError.name = "SqlError";
  $desc = $collectedClasses.SqlError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SqlError.prototype = $desc;
  SqlError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function TypedData() {
  }
  TypedData.builtin$cls = "TypedData";
  if (!"name" in TypedData)
    TypedData.name = "TypedData";
  $desc = $collectedClasses.TypedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData.prototype = $desc;
  function ByteData() {
  }
  ByteData.builtin$cls = "ByteData";
  if (!"name" in ByteData)
    ByteData.name = "ByteData";
  $desc = $collectedClasses.ByteData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ByteData.prototype = $desc;
  function Float32List() {
  }
  Float32List.builtin$cls = "Float32List";
  if (!"name" in Float32List)
    Float32List.name = "Float32List";
  $desc = $collectedClasses.Float32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Float32List.prototype = $desc;
  function Float64List() {
  }
  Float64List.builtin$cls = "Float64List";
  if (!"name" in Float64List)
    Float64List.name = "Float64List";
  $desc = $collectedClasses.Float64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Float64List.prototype = $desc;
  function Int16List() {
  }
  Int16List.builtin$cls = "Int16List";
  if (!"name" in Int16List)
    Int16List.name = "Int16List";
  $desc = $collectedClasses.Int16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int16List.prototype = $desc;
  function Int32List() {
  }
  Int32List.builtin$cls = "Int32List";
  if (!"name" in Int32List)
    Int32List.name = "Int32List";
  $desc = $collectedClasses.Int32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int32List.prototype = $desc;
  function Int8List() {
  }
  Int8List.builtin$cls = "Int8List";
  if (!"name" in Int8List)
    Int8List.name = "Int8List";
  $desc = $collectedClasses.Int8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int8List.prototype = $desc;
  function Uint16List() {
  }
  Uint16List.builtin$cls = "Uint16List";
  if (!"name" in Uint16List)
    Uint16List.name = "Uint16List";
  $desc = $collectedClasses.Uint16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint16List.prototype = $desc;
  function Uint32List() {
  }
  Uint32List.builtin$cls = "Uint32List";
  if (!"name" in Uint32List)
    Uint32List.name = "Uint32List";
  $desc = $collectedClasses.Uint32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint32List.prototype = $desc;
  function Uint8ClampedList() {
  }
  Uint8ClampedList.builtin$cls = "Uint8ClampedList";
  if (!"name" in Uint8ClampedList)
    Uint8ClampedList.name = "Uint8ClampedList";
  $desc = $collectedClasses.Uint8ClampedList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint8ClampedList.prototype = $desc;
  function Uint8List() {
  }
  Uint8List.builtin$cls = "Uint8List";
  if (!"name" in Uint8List)
    Uint8List.name = "Uint8List";
  $desc = $collectedClasses.Uint8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint8List.prototype = $desc;
  function JS_CONST(code) {
    this.code = code;
  }
  JS_CONST.builtin$cls = "JS_CONST";
  if (!"name" in JS_CONST)
    JS_CONST.name = "JS_CONST";
  $desc = $collectedClasses.JS_CONST;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JS_CONST.prototype = $desc;
  function Interceptor() {
  }
  Interceptor.builtin$cls = "Interceptor";
  if (!"name" in Interceptor)
    Interceptor.name = "Interceptor";
  $desc = $collectedClasses.Interceptor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor.prototype = $desc;
  function JSBool() {
  }
  JSBool.builtin$cls = "bool";
  if (!"name" in JSBool)
    JSBool.name = "JSBool";
  $desc = $collectedClasses.JSBool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSBool.prototype = $desc;
  function JSNull() {
  }
  JSNull.builtin$cls = "JSNull";
  if (!"name" in JSNull)
    JSNull.name = "JSNull";
  $desc = $collectedClasses.JSNull;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNull.prototype = $desc;
  function JavaScriptObject() {
  }
  JavaScriptObject.builtin$cls = "JavaScriptObject";
  if (!"name" in JavaScriptObject)
    JavaScriptObject.name = "JavaScriptObject";
  $desc = $collectedClasses.JavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JavaScriptObject.prototype = $desc;
  function PlainJavaScriptObject() {
  }
  PlainJavaScriptObject.builtin$cls = "PlainJavaScriptObject";
  if (!"name" in PlainJavaScriptObject)
    PlainJavaScriptObject.name = "PlainJavaScriptObject";
  $desc = $collectedClasses.PlainJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PlainJavaScriptObject.prototype = $desc;
  function UnknownJavaScriptObject() {
  }
  UnknownJavaScriptObject.builtin$cls = "UnknownJavaScriptObject";
  if (!"name" in UnknownJavaScriptObject)
    UnknownJavaScriptObject.name = "UnknownJavaScriptObject";
  $desc = $collectedClasses.UnknownJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJavaScriptObject.prototype = $desc;
  function JSArray() {
  }
  JSArray.builtin$cls = "List";
  if (!"name" in JSArray)
    JSArray.name = "JSArray";
  $desc = $collectedClasses.JSArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSArray.prototype = $desc;
  function JSMutableArray() {
  }
  JSMutableArray.builtin$cls = "JSMutableArray";
  if (!"name" in JSMutableArray)
    JSMutableArray.name = "JSMutableArray";
  $desc = $collectedClasses.JSMutableArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSMutableArray.prototype = $desc;
  function JSFixedArray() {
  }
  JSFixedArray.builtin$cls = "JSFixedArray";
  if (!"name" in JSFixedArray)
    JSFixedArray.name = "JSFixedArray";
  $desc = $collectedClasses.JSFixedArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSFixedArray.prototype = $desc;
  function JSExtendableArray() {
  }
  JSExtendableArray.builtin$cls = "JSExtendableArray";
  if (!"name" in JSExtendableArray)
    JSExtendableArray.name = "JSExtendableArray";
  $desc = $collectedClasses.JSExtendableArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSExtendableArray.prototype = $desc;
  function JSNumber() {
  }
  JSNumber.builtin$cls = "num";
  if (!"name" in JSNumber)
    JSNumber.name = "JSNumber";
  $desc = $collectedClasses.JSNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNumber.prototype = $desc;
  function JSInt() {
  }
  JSInt.builtin$cls = "int";
  if (!"name" in JSInt)
    JSInt.name = "JSInt";
  $desc = $collectedClasses.JSInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSInt.prototype = $desc;
  function JSDouble() {
  }
  JSDouble.builtin$cls = "double";
  if (!"name" in JSDouble)
    JSDouble.name = "JSDouble";
  $desc = $collectedClasses.JSDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSDouble.prototype = $desc;
  function JSString() {
  }
  JSString.builtin$cls = "String";
  if (!"name" in JSString)
    JSString.name = "JSString";
  $desc = $collectedClasses.JSString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSString.prototype = $desc;
  function _CodeUnits(__interceptors$_string) {
    this.__interceptors$_string = __interceptors$_string;
  }
  _CodeUnits.builtin$cls = "_CodeUnits";
  if (!"name" in _CodeUnits)
    _CodeUnits.name = "_CodeUnits";
  $desc = $collectedClasses._CodeUnits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CodeUnits.prototype = $desc;
  function startRootIsolate_closure(entry_0) {
    this.entry_0 = entry_0;
  }
  startRootIsolate_closure.builtin$cls = "startRootIsolate_closure";
  if (!"name" in startRootIsolate_closure)
    startRootIsolate_closure.name = "startRootIsolate_closure";
  $desc = $collectedClasses.startRootIsolate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure.prototype = $desc;
  function startRootIsolate_closure0(entry_1) {
    this.entry_1 = entry_1;
  }
  startRootIsolate_closure0.builtin$cls = "startRootIsolate_closure0";
  if (!"name" in startRootIsolate_closure0)
    startRootIsolate_closure0.name = "startRootIsolate_closure0";
  $desc = $collectedClasses.startRootIsolate_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure0.prototype = $desc;
  function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers, entry) {
    this.nextIsolateId = nextIsolateId;
    this.currentManagerId = currentManagerId;
    this.nextManagerId = nextManagerId;
    this.currentContext = currentContext;
    this.rootContext = rootContext;
    this.topEventLoop = topEventLoop;
    this.fromCommandLine = fromCommandLine;
    this.isWorker = isWorker;
    this.supportsWorkers = supportsWorkers;
    this.isolates = isolates;
    this.mainManager = mainManager;
    this.managers = managers;
    this.entry = entry;
  }
  _Manager.builtin$cls = "_Manager";
  if (!"name" in _Manager)
    _Manager.name = "_Manager";
  $desc = $collectedClasses._Manager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Manager.prototype = $desc;
  function _IsolateContext(id, ports, isolateStatics) {
    this.id = id;
    this.ports = ports;
    this.isolateStatics = isolateStatics;
  }
  _IsolateContext.builtin$cls = "_IsolateContext";
  if (!"name" in _IsolateContext)
    _IsolateContext.name = "_IsolateContext";
  $desc = $collectedClasses._IsolateContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateContext.prototype = $desc;
  _IsolateContext.prototype.get$id = function(receiver) {
    return this.id;
  };
  _IsolateContext.prototype.get$isolateStatics = function() {
    return this.isolateStatics;
  };
  function _EventLoop(events, activeTimerCount) {
    this.events = events;
    this.activeTimerCount = activeTimerCount;
  }
  _EventLoop.builtin$cls = "_EventLoop";
  if (!"name" in _EventLoop)
    _EventLoop.name = "_EventLoop";
  $desc = $collectedClasses._EventLoop;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop.prototype = $desc;
  function _EventLoop__runHelper_next(this_0) {
    this.this_0 = this_0;
  }
  _EventLoop__runHelper_next.builtin$cls = "_EventLoop__runHelper_next";
  if (!"name" in _EventLoop__runHelper_next)
    _EventLoop__runHelper_next.name = "_EventLoop__runHelper_next";
  $desc = $collectedClasses._EventLoop__runHelper_next;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop__runHelper_next.prototype = $desc;
  function _IsolateEvent(isolate, fn, message) {
    this.isolate = isolate;
    this.fn = fn;
    this.message = message;
  }
  _IsolateEvent.builtin$cls = "_IsolateEvent";
  if (!"name" in _IsolateEvent)
    _IsolateEvent.name = "_IsolateEvent";
  $desc = $collectedClasses._IsolateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateEvent.prototype = $desc;
  _IsolateEvent.prototype.get$message = function(receiver) {
    return this.message;
  };
  function _MainManagerStub() {
  }
  _MainManagerStub.builtin$cls = "_MainManagerStub";
  if (!"name" in _MainManagerStub)
    _MainManagerStub.name = "_MainManagerStub";
  $desc = $collectedClasses._MainManagerStub;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MainManagerStub.prototype = $desc;
  function IsolateNatives__processWorkerMessage_closure(entryPoint_0, args_1, message_2, isSpawnUri_3, replyTo_4) {
    this.entryPoint_0 = entryPoint_0;
    this.args_1 = args_1;
    this.message_2 = message_2;
    this.isSpawnUri_3 = isSpawnUri_3;
    this.replyTo_4 = replyTo_4;
  }
  IsolateNatives__processWorkerMessage_closure.builtin$cls = "IsolateNatives__processWorkerMessage_closure";
  if (!"name" in IsolateNatives__processWorkerMessage_closure)
    IsolateNatives__processWorkerMessage_closure.name = "IsolateNatives__processWorkerMessage_closure";
  $desc = $collectedClasses.IsolateNatives__processWorkerMessage_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IsolateNatives__processWorkerMessage_closure.prototype = $desc;
  function _BaseSendPort() {
  }
  _BaseSendPort.builtin$cls = "_BaseSendPort";
  if (!"name" in _BaseSendPort)
    _BaseSendPort.name = "_BaseSendPort";
  $desc = $collectedClasses._BaseSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseSendPort.prototype = $desc;
  function _NativeJsSendPort(_receivePort, _isolateId) {
    this._receivePort = _receivePort;
    this._isolateId = _isolateId;
  }
  _NativeJsSendPort.builtin$cls = "_NativeJsSendPort";
  if (!"name" in _NativeJsSendPort)
    _NativeJsSendPort.name = "_NativeJsSendPort";
  $desc = $collectedClasses._NativeJsSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort.prototype = $desc;
  function _NativeJsSendPort_send_closure(this_1, message_2) {
    this.this_1 = this_1;
    this.message_2 = message_2;
  }
  _NativeJsSendPort_send_closure.builtin$cls = "_NativeJsSendPort_send_closure";
  if (!"name" in _NativeJsSendPort_send_closure)
    _NativeJsSendPort_send_closure.name = "_NativeJsSendPort_send_closure";
  $desc = $collectedClasses._NativeJsSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send_closure.prototype = $desc;
  function _NativeJsSendPort_send__closure(box_0, this_3, shouldSerialize_4) {
    this.box_0 = box_0;
    this.this_3 = this_3;
    this.shouldSerialize_4 = shouldSerialize_4;
  }
  _NativeJsSendPort_send__closure.builtin$cls = "_NativeJsSendPort_send__closure";
  if (!"name" in _NativeJsSendPort_send__closure)
    _NativeJsSendPort_send__closure.name = "_NativeJsSendPort_send__closure";
  $desc = $collectedClasses._NativeJsSendPort_send__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send__closure.prototype = $desc;
  function _WorkerSendPort(_workerId, _receivePortId, _isolateId) {
    this._workerId = _workerId;
    this._receivePortId = _receivePortId;
    this._isolateId = _isolateId;
  }
  _WorkerSendPort.builtin$cls = "_WorkerSendPort";
  if (!"name" in _WorkerSendPort)
    _WorkerSendPort.name = "_WorkerSendPort";
  $desc = $collectedClasses._WorkerSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort.prototype = $desc;
  function _WorkerSendPort_send_closure(this_0, message_1) {
    this.this_0 = this_0;
    this.message_1 = message_1;
  }
  _WorkerSendPort_send_closure.builtin$cls = "_WorkerSendPort_send_closure";
  if (!"name" in _WorkerSendPort_send_closure)
    _WorkerSendPort_send_closure.name = "_WorkerSendPort_send_closure";
  $desc = $collectedClasses._WorkerSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort_send_closure.prototype = $desc;
  function ReceivePortImpl(_id, __isolate_helper$_controller) {
    this._id = _id;
    this.__isolate_helper$_controller = __isolate_helper$_controller;
  }
  ReceivePortImpl.builtin$cls = "ReceivePortImpl";
  if (!"name" in ReceivePortImpl)
    ReceivePortImpl.name = "ReceivePortImpl";
  $desc = $collectedClasses.ReceivePortImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReceivePortImpl.prototype = $desc;
  ReceivePortImpl.prototype.get$_id = function() {
    return this._id;
  };
  ReceivePortImpl.prototype.get$__isolate_helper$_controller = function() {
    return this.__isolate_helper$_controller;
  };
  function BoundClosure$i0(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$i0.builtin$cls = "BoundClosure$i0";
  $desc = $collectedClasses.BoundClosure$i0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$i0.prototype = $desc;
  function _waitForPendingPorts_closure(callback_0) {
    this.callback_0 = callback_0;
  }
  _waitForPendingPorts_closure.builtin$cls = "_waitForPendingPorts_closure";
  if (!"name" in _waitForPendingPorts_closure)
    _waitForPendingPorts_closure.name = "_waitForPendingPorts_closure";
  $desc = $collectedClasses._waitForPendingPorts_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _waitForPendingPorts_closure.prototype = $desc;
  function _PendingSendPortFinder(ports, _visited) {
    this.ports = ports;
    this._visited = _visited;
  }
  _PendingSendPortFinder.builtin$cls = "_PendingSendPortFinder";
  if (!"name" in _PendingSendPortFinder)
    _PendingSendPortFinder.name = "_PendingSendPortFinder";
  $desc = $collectedClasses._PendingSendPortFinder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingSendPortFinder.prototype = $desc;
  function _JsSerializer(_nextFreeRefId, _visited) {
    this._nextFreeRefId = _nextFreeRefId;
    this._visited = _visited;
  }
  _JsSerializer.builtin$cls = "_JsSerializer";
  if (!"name" in _JsSerializer)
    _JsSerializer.name = "_JsSerializer";
  $desc = $collectedClasses._JsSerializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsSerializer.prototype = $desc;
  function _JsCopier(_visited) {
    this._visited = _visited;
  }
  _JsCopier.builtin$cls = "_JsCopier";
  if (!"name" in _JsCopier)
    _JsCopier.name = "_JsCopier";
  $desc = $collectedClasses._JsCopier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsCopier.prototype = $desc;
  function _JsDeserializer(_deserialized) {
    this._deserialized = _deserialized;
  }
  _JsDeserializer.builtin$cls = "_JsDeserializer";
  if (!"name" in _JsDeserializer)
    _JsDeserializer.name = "_JsDeserializer";
  $desc = $collectedClasses._JsDeserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsDeserializer.prototype = $desc;
  function _JsVisitedMap(tagged) {
    this.tagged = tagged;
  }
  _JsVisitedMap.builtin$cls = "_JsVisitedMap";
  if (!"name" in _JsVisitedMap)
    _JsVisitedMap.name = "_JsVisitedMap";
  $desc = $collectedClasses._JsVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsVisitedMap.prototype = $desc;
  function _MessageTraverserVisitedMap() {
  }
  _MessageTraverserVisitedMap.builtin$cls = "_MessageTraverserVisitedMap";
  if (!"name" in _MessageTraverserVisitedMap)
    _MessageTraverserVisitedMap.name = "_MessageTraverserVisitedMap";
  $desc = $collectedClasses._MessageTraverserVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverserVisitedMap.prototype = $desc;
  function _MessageTraverser() {
  }
  _MessageTraverser.builtin$cls = "_MessageTraverser";
  if (!"name" in _MessageTraverser)
    _MessageTraverser.name = "_MessageTraverser";
  $desc = $collectedClasses._MessageTraverser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverser.prototype = $desc;
  function BoundClosure$1(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$1.builtin$cls = "BoundClosure$1";
  $desc = $collectedClasses.BoundClosure$1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$1.prototype = $desc;
  function _Copier() {
  }
  _Copier.builtin$cls = "_Copier";
  if (!"name" in _Copier)
    _Copier.name = "_Copier";
  $desc = $collectedClasses._Copier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier.prototype = $desc;
  function _Copier_visitMap_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  _Copier_visitMap_closure.builtin$cls = "_Copier_visitMap_closure";
  if (!"name" in _Copier_visitMap_closure)
    _Copier_visitMap_closure.name = "_Copier_visitMap_closure";
  $desc = $collectedClasses._Copier_visitMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier_visitMap_closure.prototype = $desc;
  function _Serializer() {
  }
  _Serializer.builtin$cls = "_Serializer";
  if (!"name" in _Serializer)
    _Serializer.name = "_Serializer";
  $desc = $collectedClasses._Serializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Serializer.prototype = $desc;
  function _Deserializer() {
  }
  _Deserializer.builtin$cls = "_Deserializer";
  if (!"name" in _Deserializer)
    _Deserializer.name = "_Deserializer";
  $desc = $collectedClasses._Deserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Deserializer.prototype = $desc;
  function TimerImpl(_once, _inEventLoop, _handle) {
    this._once = _once;
    this._inEventLoop = _inEventLoop;
    this._handle = _handle;
  }
  TimerImpl.builtin$cls = "TimerImpl";
  if (!"name" in TimerImpl)
    TimerImpl.name = "TimerImpl";
  $desc = $collectedClasses.TimerImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl.prototype = $desc;
  function TimerImpl_internalCallback(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  }
  TimerImpl_internalCallback.builtin$cls = "TimerImpl_internalCallback";
  if (!"name" in TimerImpl_internalCallback)
    TimerImpl_internalCallback.name = "TimerImpl_internalCallback";
  $desc = $collectedClasses.TimerImpl_internalCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback.prototype = $desc;
  function TimerImpl_internalCallback0(this_2, callback_3) {
    this.this_2 = this_2;
    this.callback_3 = callback_3;
  }
  TimerImpl_internalCallback0.builtin$cls = "TimerImpl_internalCallback0";
  if (!"name" in TimerImpl_internalCallback0)
    TimerImpl_internalCallback0.name = "TimerImpl_internalCallback0";
  $desc = $collectedClasses.TimerImpl_internalCallback0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback0.prototype = $desc;
  function ConstantMap() {
  }
  ConstantMap.builtin$cls = "ConstantMap";
  if (!"name" in ConstantMap)
    ConstantMap.name = "ConstantMap";
  $desc = $collectedClasses.ConstantMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConstantMap.prototype = $desc;
  function ConstantStringMap(length, __js_helper$_jsObject, __js_helper$_keys) {
    this.length = length;
    this.__js_helper$_jsObject = __js_helper$_jsObject;
    this.__js_helper$_keys = __js_helper$_keys;
  }
  ConstantStringMap.builtin$cls = "ConstantStringMap";
  if (!"name" in ConstantStringMap)
    ConstantStringMap.name = "ConstantStringMap";
  $desc = $collectedClasses.ConstantStringMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConstantStringMap.prototype = $desc;
  ConstantStringMap.prototype.get$length = function(receiver) {
    return this.length;
  };
  function ConstantStringMap_containsValue_closure(this_0, needle_1) {
    this.this_0 = this_0;
    this.needle_1 = needle_1;
  }
  ConstantStringMap_containsValue_closure.builtin$cls = "ConstantStringMap_containsValue_closure";
  if (!"name" in ConstantStringMap_containsValue_closure)
    ConstantStringMap_containsValue_closure.name = "ConstantStringMap_containsValue_closure";
  $desc = $collectedClasses.ConstantStringMap_containsValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConstantStringMap_containsValue_closure.prototype = $desc;
  function ConstantStringMap_forEach_closure(this_0, f_1) {
    this.this_0 = this_0;
    this.f_1 = f_1;
  }
  ConstantStringMap_forEach_closure.builtin$cls = "ConstantStringMap_forEach_closure";
  if (!"name" in ConstantStringMap_forEach_closure)
    ConstantStringMap_forEach_closure.name = "ConstantStringMap_forEach_closure";
  $desc = $collectedClasses.ConstantStringMap_forEach_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConstantStringMap_forEach_closure.prototype = $desc;
  function ConstantStringMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  ConstantStringMap_values_closure.builtin$cls = "ConstantStringMap_values_closure";
  if (!"name" in ConstantStringMap_values_closure)
    ConstantStringMap_values_closure.name = "ConstantStringMap_values_closure";
  $desc = $collectedClasses.ConstantStringMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConstantStringMap_values_closure.prototype = $desc;
  function _ConstantMapKeyIterable(__js_helper$_map) {
    this.__js_helper$_map = __js_helper$_map;
  }
  _ConstantMapKeyIterable.builtin$cls = "_ConstantMapKeyIterable";
  if (!"name" in _ConstantMapKeyIterable)
    _ConstantMapKeyIterable.name = "_ConstantMapKeyIterable";
  $desc = $collectedClasses._ConstantMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ConstantMapKeyIterable.prototype = $desc;
  function JSInvocationMirror(__js_helper$_memberName, _internalName, _kind, _arguments, _namedArgumentNames, _namedIndices) {
    this.__js_helper$_memberName = __js_helper$_memberName;
    this._internalName = _internalName;
    this._kind = _kind;
    this._arguments = _arguments;
    this._namedArgumentNames = _namedArgumentNames;
    this._namedIndices = _namedIndices;
  }
  JSInvocationMirror.builtin$cls = "JSInvocationMirror";
  if (!"name" in JSInvocationMirror)
    JSInvocationMirror.name = "JSInvocationMirror";
  $desc = $collectedClasses.JSInvocationMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSInvocationMirror.prototype = $desc;
  function CachedInvocation(jsFunction, isIntercepted, cachedInterceptor) {
    this.jsFunction = jsFunction;
    this.isIntercepted = isIntercepted;
    this.cachedInterceptor = cachedInterceptor;
  }
  CachedInvocation.builtin$cls = "CachedInvocation";
  if (!"name" in CachedInvocation)
    CachedInvocation.name = "CachedInvocation";
  $desc = $collectedClasses.CachedInvocation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CachedInvocation.prototype = $desc;
  function CachedNoSuchMethodInvocation(interceptor) {
    this.interceptor = interceptor;
  }
  CachedNoSuchMethodInvocation.builtin$cls = "CachedNoSuchMethodInvocation";
  if (!"name" in CachedNoSuchMethodInvocation)
    CachedNoSuchMethodInvocation.name = "CachedNoSuchMethodInvocation";
  $desc = $collectedClasses.CachedNoSuchMethodInvocation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CachedNoSuchMethodInvocation.prototype = $desc;
  function Primitives_applyFunction_closure(allNamedArguments_1) {
    this.allNamedArguments_1 = allNamedArguments_1;
  }
  Primitives_applyFunction_closure.builtin$cls = "Primitives_applyFunction_closure";
  if (!"name" in Primitives_applyFunction_closure)
    Primitives_applyFunction_closure.name = "Primitives_applyFunction_closure";
  $desc = $collectedClasses.Primitives_applyFunction_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Primitives_applyFunction_closure.prototype = $desc;
  function Primitives_applyFunction_closure0(buffer_2, arguments_3, allNamedArguments_4) {
    this.buffer_2 = buffer_2;
    this.arguments_3 = arguments_3;
    this.allNamedArguments_4 = allNamedArguments_4;
  }
  Primitives_applyFunction_closure0.builtin$cls = "Primitives_applyFunction_closure0";
  if (!"name" in Primitives_applyFunction_closure0)
    Primitives_applyFunction_closure0.name = "Primitives_applyFunction_closure0";
  $desc = $collectedClasses.Primitives_applyFunction_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Primitives_applyFunction_closure0.prototype = $desc;
  function Primitives_applyFunction_closure1(box_0, buffer_5, arguments_6) {
    this.box_0 = box_0;
    this.buffer_5 = buffer_5;
    this.arguments_6 = arguments_6;
  }
  Primitives_applyFunction_closure1.builtin$cls = "Primitives_applyFunction_closure1";
  if (!"name" in Primitives_applyFunction_closure1)
    Primitives_applyFunction_closure1.name = "Primitives_applyFunction_closure1";
  $desc = $collectedClasses.Primitives_applyFunction_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Primitives_applyFunction_closure1.prototype = $desc;
  function TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver) {
    this._pattern = _pattern;
    this._arguments = _arguments;
    this._argumentsExpr = _argumentsExpr;
    this._expr = _expr;
    this._method = _method;
    this._receiver = _receiver;
  }
  TypeErrorDecoder.builtin$cls = "TypeErrorDecoder";
  if (!"name" in TypeErrorDecoder)
    TypeErrorDecoder.name = "TypeErrorDecoder";
  $desc = $collectedClasses.TypeErrorDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeErrorDecoder.prototype = $desc;
  function NullError(_message, _method) {
    this._message = _message;
    this._method = _method;
  }
  NullError.builtin$cls = "NullError";
  if (!"name" in NullError)
    NullError.name = "NullError";
  $desc = $collectedClasses.NullError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullError.prototype = $desc;
  function JsNoSuchMethodError(_message, _method, _receiver) {
    this._message = _message;
    this._method = _method;
    this._receiver = _receiver;
  }
  JsNoSuchMethodError.builtin$cls = "JsNoSuchMethodError";
  if (!"name" in JsNoSuchMethodError)
    JsNoSuchMethodError.name = "JsNoSuchMethodError";
  $desc = $collectedClasses.JsNoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsNoSuchMethodError.prototype = $desc;
  function UnknownJsTypeError(_message) {
    this._message = _message;
  }
  UnknownJsTypeError.builtin$cls = "UnknownJsTypeError";
  if (!"name" in UnknownJsTypeError)
    UnknownJsTypeError.name = "UnknownJsTypeError";
  $desc = $collectedClasses.UnknownJsTypeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJsTypeError.prototype = $desc;
  function unwrapException_saveStackTrace(ex_0) {
    this.ex_0 = ex_0;
  }
  unwrapException_saveStackTrace.builtin$cls = "unwrapException_saveStackTrace";
  if (!"name" in unwrapException_saveStackTrace)
    unwrapException_saveStackTrace.name = "unwrapException_saveStackTrace";
  $desc = $collectedClasses.unwrapException_saveStackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  unwrapException_saveStackTrace.prototype = $desc;
  function _StackTrace(_exception, _trace) {
    this._exception = _exception;
    this._trace = _trace;
  }
  _StackTrace.builtin$cls = "_StackTrace";
  if (!"name" in _StackTrace)
    _StackTrace.name = "_StackTrace";
  $desc = $collectedClasses._StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StackTrace.prototype = $desc;
  function invokeClosure_closure(closure_0) {
    this.closure_0 = closure_0;
  }
  invokeClosure_closure.builtin$cls = "invokeClosure_closure";
  if (!"name" in invokeClosure_closure)
    invokeClosure_closure.name = "invokeClosure_closure";
  $desc = $collectedClasses.invokeClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure.prototype = $desc;
  function invokeClosure_closure0(closure_1, arg1_2) {
    this.closure_1 = closure_1;
    this.arg1_2 = arg1_2;
  }
  invokeClosure_closure0.builtin$cls = "invokeClosure_closure0";
  if (!"name" in invokeClosure_closure0)
    invokeClosure_closure0.name = "invokeClosure_closure0";
  $desc = $collectedClasses.invokeClosure_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure0.prototype = $desc;
  function invokeClosure_closure1(closure_3, arg1_4, arg2_5) {
    this.closure_3 = closure_3;
    this.arg1_4 = arg1_4;
    this.arg2_5 = arg2_5;
  }
  invokeClosure_closure1.builtin$cls = "invokeClosure_closure1";
  if (!"name" in invokeClosure_closure1)
    invokeClosure_closure1.name = "invokeClosure_closure1";
  $desc = $collectedClasses.invokeClosure_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure1.prototype = $desc;
  function invokeClosure_closure2(closure_6, arg1_7, arg2_8, arg3_9) {
    this.closure_6 = closure_6;
    this.arg1_7 = arg1_7;
    this.arg2_8 = arg2_8;
    this.arg3_9 = arg3_9;
  }
  invokeClosure_closure2.builtin$cls = "invokeClosure_closure2";
  if (!"name" in invokeClosure_closure2)
    invokeClosure_closure2.name = "invokeClosure_closure2";
  $desc = $collectedClasses.invokeClosure_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure2.prototype = $desc;
  function invokeClosure_closure3(closure_10, arg1_11, arg2_12, arg3_13, arg4_14) {
    this.closure_10 = closure_10;
    this.arg1_11 = arg1_11;
    this.arg2_12 = arg2_12;
    this.arg3_13 = arg3_13;
    this.arg4_14 = arg4_14;
  }
  invokeClosure_closure3.builtin$cls = "invokeClosure_closure3";
  if (!"name" in invokeClosure_closure3)
    invokeClosure_closure3.name = "invokeClosure_closure3";
  $desc = $collectedClasses.invokeClosure_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure3.prototype = $desc;
  function Closure() {
  }
  Closure.builtin$cls = "Closure";
  if (!"name" in Closure)
    Closure.name = "Closure";
  $desc = $collectedClasses.Closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure.prototype = $desc;
  function BoundClosure(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure.builtin$cls = "BoundClosure";
  if (!"name" in BoundClosure)
    BoundClosure.name = "BoundClosure";
  $desc = $collectedClasses.BoundClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure.prototype = $desc;
  function Creates(types) {
    this.types = types;
  }
  Creates.builtin$cls = "Creates";
  if (!"name" in Creates)
    Creates.name = "Creates";
  $desc = $collectedClasses.Creates;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Creates.prototype = $desc;
  function Returns(types) {
    this.types = types;
  }
  Returns.builtin$cls = "Returns";
  if (!"name" in Returns)
    Returns.name = "Returns";
  $desc = $collectedClasses.Returns;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Returns.prototype = $desc;
  function JSName(name) {
    this.name = name;
  }
  JSName.builtin$cls = "JSName";
  if (!"name" in JSName)
    JSName.name = "JSName";
  $desc = $collectedClasses.JSName;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSName.prototype = $desc;
  JSName.prototype.get$name = function(receiver) {
    return this.name;
  };
  function CastErrorImplementation(message) {
    this.message = message;
  }
  CastErrorImplementation.builtin$cls = "CastErrorImplementation";
  if (!"name" in CastErrorImplementation)
    CastErrorImplementation.name = "CastErrorImplementation";
  $desc = $collectedClasses.CastErrorImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CastErrorImplementation.prototype = $desc;
  CastErrorImplementation.prototype.get$message = function(receiver) {
    return this.message;
  };
  function RuntimeError(message) {
    this.message = message;
  }
  RuntimeError.builtin$cls = "RuntimeError";
  if (!"name" in RuntimeError)
    RuntimeError.name = "RuntimeError";
  $desc = $collectedClasses.RuntimeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeError.prototype = $desc;
  RuntimeError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function TypeImpl(_typeName, _unmangledName) {
    this._typeName = _typeName;
    this._unmangledName = _unmangledName;
  }
  TypeImpl.builtin$cls = "TypeImpl";
  if (!"name" in TypeImpl)
    TypeImpl.name = "TypeImpl";
  $desc = $collectedClasses.TypeImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeImpl.prototype = $desc;
  TypeImpl.prototype.get$_typeName = function() {
    return this._typeName;
  };
  function TypeVariable(owner, name, bound) {
    this.owner = owner;
    this.name = name;
    this.bound = bound;
  }
  TypeVariable.builtin$cls = "TypeVariable";
  if (!"name" in TypeVariable)
    TypeVariable.name = "TypeVariable";
  $desc = $collectedClasses.TypeVariable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeVariable.prototype = $desc;
  TypeVariable.prototype.get$owner = function() {
    return this.owner;
  };
  TypeVariable.prototype.get$name = function(receiver) {
    return this.name;
  };
  TypeVariable.prototype.get$bound = function(receiver) {
    return this.bound;
  };
  function initHooks_closure(getTag_0) {
    this.getTag_0 = getTag_0;
  }
  initHooks_closure.builtin$cls = "initHooks_closure";
  if (!"name" in initHooks_closure)
    initHooks_closure.name = "initHooks_closure";
  $desc = $collectedClasses.initHooks_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure.prototype = $desc;
  function initHooks_closure0(getUnknownTag_1) {
    this.getUnknownTag_1 = getUnknownTag_1;
  }
  initHooks_closure0.builtin$cls = "initHooks_closure0";
  if (!"name" in initHooks_closure0)
    initHooks_closure0.name = "initHooks_closure0";
  $desc = $collectedClasses.initHooks_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure0.prototype = $desc;
  function initHooks_closure1(prototypeForTag_2) {
    this.prototypeForTag_2 = prototypeForTag_2;
  }
  initHooks_closure1.builtin$cls = "initHooks_closure1";
  if (!"name" in initHooks_closure1)
    initHooks_closure1.name = "initHooks_closure1";
  $desc = $collectedClasses.initHooks_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure1.prototype = $desc;
  function JSSyntaxRegExp(_nativeRegExp, _nativeGlobalRegExp, _nativeAnchoredRegExp) {
    this._nativeRegExp = _nativeRegExp;
    this._nativeGlobalRegExp = _nativeGlobalRegExp;
    this._nativeAnchoredRegExp = _nativeAnchoredRegExp;
  }
  JSSyntaxRegExp.builtin$cls = "JSSyntaxRegExp";
  if (!"name" in JSSyntaxRegExp)
    JSSyntaxRegExp.name = "JSSyntaxRegExp";
  $desc = $collectedClasses.JSSyntaxRegExp;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSSyntaxRegExp.prototype = $desc;
  function _MatchImplementation(pattern, _match) {
    this.pattern = pattern;
    this._match = _match;
  }
  _MatchImplementation.builtin$cls = "_MatchImplementation";
  if (!"name" in _MatchImplementation)
    _MatchImplementation.name = "_MatchImplementation";
  $desc = $collectedClasses._MatchImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MatchImplementation.prototype = $desc;
  function _AllMatchesIterable(_re, _string) {
    this._re = _re;
    this._string = _string;
  }
  _AllMatchesIterable.builtin$cls = "_AllMatchesIterable";
  if (!"name" in _AllMatchesIterable)
    _AllMatchesIterable.name = "_AllMatchesIterable";
  $desc = $collectedClasses._AllMatchesIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AllMatchesIterable.prototype = $desc;
  function _AllMatchesIterator(_regExp, _string, __js_helper$_current) {
    this._regExp = _regExp;
    this._string = _string;
    this.__js_helper$_current = __js_helper$_current;
  }
  _AllMatchesIterator.builtin$cls = "_AllMatchesIterator";
  if (!"name" in _AllMatchesIterator)
    _AllMatchesIterator.name = "_AllMatchesIterator";
  $desc = $collectedClasses._AllMatchesIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AllMatchesIterator.prototype = $desc;
  function StringMatch(start, input, pattern) {
    this.start = start;
    this.input = input;
    this.pattern = pattern;
  }
  StringMatch.builtin$cls = "StringMatch";
  if (!"name" in StringMatch)
    StringMatch.name = "StringMatch";
  $desc = $collectedClasses.StringMatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringMatch.prototype = $desc;
  function AnnotationElement(_annotations, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._annotations = _annotations;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  AnnotationElement.builtin$cls = "AnnotationElement";
  if (!"name" in AnnotationElement)
    AnnotationElement.name = "AnnotationElement";
  $desc = $collectedClasses.AnnotationElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnnotationElement.prototype = $desc;
  AnnotationElement.prototype.get$_annotations = function(receiver) {
    return receiver._annotations;
  };
  AnnotationElement.prototype.get$_annotations.$reflectable = 1;
  AnnotationElement.prototype.set$_annotations = function(receiver, v) {
    return receiver._annotations = v;
  };
  AnnotationElement.prototype.set$_annotations.$reflectable = 1;
  function AnnotationElement_annotations_closure(this_0, newAnnotations_1) {
    this.this_0 = this_0;
    this.newAnnotations_1 = newAnnotations_1;
  }
  AnnotationElement_annotations_closure.builtin$cls = "AnnotationElement_annotations_closure";
  if (!"name" in AnnotationElement_annotations_closure)
    AnnotationElement_annotations_closure.name = "AnnotationElement_annotations_closure";
  $desc = $collectedClasses.AnnotationElement_annotations_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnnotationElement_annotations_closure.prototype = $desc;
  function CategoryElement(_category, _methodsCache, _variablesCache, _everythingElseCache, validator, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._category = _category;
    this._methodsCache = _methodsCache;
    this._variablesCache = _variablesCache;
    this._everythingElseCache = _everythingElseCache;
    this.validator = validator;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  CategoryElement.builtin$cls = "CategoryElement";
  if (!"name" in CategoryElement)
    CategoryElement.name = "CategoryElement";
  $desc = $collectedClasses.CategoryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CategoryElement.prototype = $desc;
  CategoryElement.prototype.get$_category = function(receiver) {
    return receiver._category;
  };
  CategoryElement.prototype.get$_category.$reflectable = 1;
  CategoryElement.prototype.set$_category = function(receiver, v) {
    return receiver._category = v;
  };
  CategoryElement.prototype.set$_category.$reflectable = 1;
  CategoryElement.prototype.get$_methodsCache = function(receiver) {
    return receiver._methodsCache;
  };
  CategoryElement.prototype.get$_methodsCache.$reflectable = 1;
  CategoryElement.prototype.set$_methodsCache = function(receiver, v) {
    return receiver._methodsCache = v;
  };
  CategoryElement.prototype.set$_methodsCache.$reflectable = 1;
  CategoryElement.prototype.get$_variablesCache = function(receiver) {
    return receiver._variablesCache;
  };
  CategoryElement.prototype.get$_variablesCache.$reflectable = 1;
  CategoryElement.prototype.set$_variablesCache = function(receiver, v) {
    return receiver._variablesCache = v;
  };
  CategoryElement.prototype.set$_variablesCache.$reflectable = 1;
  CategoryElement.prototype.get$_everythingElseCache = function(receiver) {
    return receiver._everythingElseCache;
  };
  CategoryElement.prototype.get$_everythingElseCache.$reflectable = 1;
  CategoryElement.prototype.set$_everythingElseCache = function(receiver, v) {
    return receiver._everythingElseCache = v;
  };
  CategoryElement.prototype.set$_everythingElseCache.$reflectable = 1;
  CategoryElement.prototype.get$validator = function(receiver) {
    return receiver.validator;
  };
  CategoryElement.prototype.get$validator.$reflectable = 1;
  CategoryElement.prototype.set$validator = function(receiver, v) {
    return receiver.validator = v;
  };
  CategoryElement.prototype.set$validator.$reflectable = 1;
  function CategoryElement$created_closure(this_0) {
    this.this_0 = this_0;
  }
  CategoryElement$created_closure.builtin$cls = "CategoryElement$created_closure";
  if (!"name" in CategoryElement$created_closure)
    CategoryElement$created_closure.name = "CategoryElement$created_closure";
  $desc = $collectedClasses.CategoryElement$created_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CategoryElement$created_closure.prototype = $desc;
  function CategoryElement$created_closure0(this_1) {
    this.this_1 = this_1;
  }
  CategoryElement$created_closure0.builtin$cls = "CategoryElement$created_closure0";
  if (!"name" in CategoryElement$created_closure0)
    CategoryElement$created_closure0.name = "CategoryElement$created_closure0";
  $desc = $collectedClasses.CategoryElement$created_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CategoryElement$created_closure0.prototype = $desc;
  function CategoryElement_addChildren_closure(elements_0) {
    this.elements_0 = elements_0;
  }
  CategoryElement_addChildren_closure.builtin$cls = "CategoryElement_addChildren_closure";
  if (!"name" in CategoryElement_addChildren_closure)
    CategoryElement_addChildren_closure.name = "CategoryElement_addChildren_closure";
  $desc = $collectedClasses.CategoryElement_addChildren_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CategoryElement_addChildren_closure.prototype = $desc;
  function CategoryElement_category_closure(this_0, newCategory_1) {
    this.this_0 = this_0;
    this.newCategory_1 = newCategory_1;
  }
  CategoryElement_category_closure.builtin$cls = "CategoryElement_category_closure";
  if (!"name" in CategoryElement_category_closure)
    CategoryElement_category_closure.name = "CategoryElement_category_closure";
  $desc = $collectedClasses.CategoryElement_category_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CategoryElement_category_closure.prototype = $desc;
  function CategoryElement_categoryMethods_closure() {
  }
  CategoryElement_categoryMethods_closure.builtin$cls = "CategoryElement_categoryMethods_closure";
  if (!"name" in CategoryElement_categoryMethods_closure)
    CategoryElement_categoryMethods_closure.name = "CategoryElement_categoryMethods_closure";
  $desc = $collectedClasses.CategoryElement_categoryMethods_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CategoryElement_categoryMethods_closure.prototype = $desc;
  function CategoryElement_categoryVariables_closure() {
  }
  CategoryElement_categoryVariables_closure.builtin$cls = "CategoryElement_categoryVariables_closure";
  if (!"name" in CategoryElement_categoryVariables_closure)
    CategoryElement_categoryVariables_closure.name = "CategoryElement_categoryVariables_closure";
  $desc = $collectedClasses.CategoryElement_categoryVariables_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CategoryElement_categoryVariables_closure.prototype = $desc;
  function CategoryElement_categoryEverythingElse_closure() {
  }
  CategoryElement_categoryEverythingElse_closure.builtin$cls = "CategoryElement_categoryEverythingElse_closure";
  if (!"name" in CategoryElement_categoryEverythingElse_closure)
    CategoryElement_categoryEverythingElse_closure.name = "CategoryElement_categoryEverythingElse_closure";
  $desc = $collectedClasses.CategoryElement_categoryEverythingElse_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CategoryElement_categoryEverythingElse_closure.prototype = $desc;
  function Container(name, _category_item$__$comment, _changes, _records) {
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this._changes = _changes;
    this._records = _records;
  }
  Container.builtin$cls = "Container";
  if (!"name" in Container)
    Container.name = "Container";
  $desc = $collectedClasses.Container;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Container.prototype = $desc;
  Container.prototype.get$name = function(receiver) {
    return this.name;
  };
  Container.prototype.get$name.$reflectable = 1;
  Container.prototype.get$_category_item$__$comment = function() {
    return this._category_item$__$comment;
  };
  Container.prototype.get$_category_item$__$comment.$reflectable = 1;
  Container.prototype.set$_category_item$__$comment = function(v) {
    return this._category_item$__$comment = v;
  };
  Container.prototype.set$_category_item$__$comment.$reflectable = 1;
  function Category(content, memberNames, inheritedCounter, memberCounter, name, _category_item$__$comment, _changes, _records) {
    this.content = content;
    this.memberNames = memberNames;
    this.inheritedCounter = inheritedCounter;
    this.memberCounter = memberCounter;
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this._changes = _changes;
    this._records = _records;
  }
  Category.builtin$cls = "Category";
  if (!"name" in Category)
    Category.name = "Category";
  $desc = $collectedClasses.Category;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Category.prototype = $desc;
  Category.prototype.get$content = function(receiver) {
    return this.content;
  };
  Category.prototype.get$content.$reflectable = 1;
  Category.prototype.set$content = function(receiver, v) {
    return this.content = v;
  };
  Category.prototype.set$content.$reflectable = 1;
  Category.prototype.get$memberNames = function() {
    return this.memberNames;
  };
  Category.prototype.get$memberNames.$reflectable = 1;
  Category.prototype.set$memberNames = function(v) {
    return this.memberNames = v;
  };
  Category.prototype.set$memberNames.$reflectable = 1;
  Category.prototype.get$inheritedCounter = function() {
    return this.inheritedCounter;
  };
  Category.prototype.get$inheritedCounter.$reflectable = 1;
  Category.prototype.set$inheritedCounter = function(v) {
    return this.inheritedCounter = v;
  };
  Category.prototype.set$inheritedCounter.$reflectable = 1;
  Category.prototype.get$memberCounter = function() {
    return this.memberCounter;
  };
  Category.prototype.get$memberCounter.$reflectable = 1;
  Category.prototype.set$memberCounter = function(v) {
    return this.memberCounter = v;
  };
  Category.prototype.set$memberCounter.$reflectable = 1;
  function Category_memberNamed_closure(name_0) {
    this.name_0 = name_0;
  }
  Category_memberNamed_closure.builtin$cls = "Category_memberNamed_closure";
  if (!"name" in Category_memberNamed_closure)
    Category_memberNamed_closure.name = "Category_memberNamed_closure";
  $desc = $collectedClasses.Category_memberNamed_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Category_memberNamed_closure.prototype = $desc;
  function Category$forClasses_closure(this_0) {
    this.this_0 = this_0;
  }
  Category$forClasses_closure.builtin$cls = "Category$forClasses_closure";
  if (!"name" in Category$forClasses_closure)
    Category$forClasses_closure.name = "Category$forClasses_closure";
  $desc = $collectedClasses.Category$forClasses_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Category$forClasses_closure.prototype = $desc;
  function Category$forVariables_closure(this_0, variables_1) {
    this.this_0 = this_0;
    this.variables_1 = variables_1;
  }
  Category$forVariables_closure.builtin$cls = "Category$forVariables_closure";
  if (!"name" in Category$forVariables_closure)
    Category$forVariables_closure.name = "Category$forVariables_closure";
  $desc = $collectedClasses.Category$forVariables_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Category$forVariables_closure.prototype = $desc;
  function Category$forVariables_closure0(this_2, getters_3) {
    this.this_2 = this_2;
    this.getters_3 = getters_3;
  }
  Category$forVariables_closure0.builtin$cls = "Category$forVariables_closure0";
  if (!"name" in Category$forVariables_closure0)
    Category$forVariables_closure0.name = "Category$forVariables_closure0";
  $desc = $collectedClasses.Category$forVariables_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Category$forVariables_closure0.prototype = $desc;
  function Category$forVariables_closure1(this_4, setters_5) {
    this.this_4 = this_4;
    this.setters_5 = setters_5;
  }
  Category$forVariables_closure1.builtin$cls = "Category$forVariables_closure1";
  if (!"name" in Category$forVariables_closure1)
    Category$forVariables_closure1.name = "Category$forVariables_closure1";
  $desc = $collectedClasses.Category$forVariables_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Category$forVariables_closure1.prototype = $desc;
  function Category$forFunctions_closure(this_0, yaml_1, isConstructor_2, className_3, isOperator_4) {
    this.this_0 = this_0;
    this.yaml_1 = yaml_1;
    this.isConstructor_2 = isConstructor_2;
    this.className_3 = className_3;
    this.isOperator_4 = isOperator_4;
  }
  Category$forFunctions_closure.builtin$cls = "Category$forFunctions_closure";
  if (!"name" in Category$forFunctions_closure)
    Category$forFunctions_closure.name = "Category$forFunctions_closure";
  $desc = $collectedClasses.Category$forFunctions_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Category$forFunctions_closure.prototype = $desc;
  function Category$forTypedefs_closure(this_0, yaml_1) {
    this.this_0 = this_0;
    this.yaml_1 = yaml_1;
  }
  Category$forTypedefs_closure.builtin$cls = "Category$forTypedefs_closure";
  if (!"name" in Category$forTypedefs_closure)
    Category$forTypedefs_closure.name = "Category$forTypedefs_closure";
  $desc = $collectedClasses.Category$forTypedefs_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Category$forTypedefs_closure.prototype = $desc;
  function Category_addInheritedItem_closure(item_0) {
    this.item_0 = item_0;
  }
  Category_addInheritedItem_closure.builtin$cls = "Category_addInheritedItem_closure";
  if (!"name" in Category_addInheritedItem_closure)
    Category_addInheritedItem_closure.name = "Category_addInheritedItem_closure";
  $desc = $collectedClasses.Category_addInheritedItem_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Category_addInheritedItem_closure.prototype = $desc;
  function Item(path, qualifiedName, name, _category_item$__$comment, _changes, _records) {
    this.path = path;
    this.qualifiedName = qualifiedName;
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this._changes = _changes;
    this._records = _records;
  }
  Item.builtin$cls = "Item";
  if (!"name" in Item)
    Item.name = "Item";
  $desc = $collectedClasses.Item;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Item.prototype = $desc;
  Item.prototype.get$path = function(receiver) {
    return this.path;
  };
  Item.prototype.get$path.$reflectable = 1;
  Item.prototype.set$path = function(receiver, v) {
    return this.path = v;
  };
  Item.prototype.set$path.$reflectable = 1;
  Item.prototype.get$qualifiedName = function() {
    return this.qualifiedName;
  };
  Item.prototype.get$qualifiedName.$reflectable = 1;
  function _sort_closure() {
  }
  _sort_closure.builtin$cls = "_sort_closure";
  if (!"name" in _sort_closure)
    _sort_closure.name = "_sort_closure";
  $desc = $collectedClasses._sort_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _sort_closure.prototype = $desc;
  function _sort__closure() {
  }
  _sort__closure.builtin$cls = "_sort__closure";
  if (!"name" in _sort__closure)
    _sort__closure.name = "_sort__closure";
  $desc = $collectedClasses._sort__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _sort__closure.prototype = $desc;
  function Home(owner, libraries, path, qualifiedName, name, _category_item$__$comment, _changes, _records) {
    this.owner = owner;
    this.libraries = libraries;
    this.path = path;
    this.qualifiedName = qualifiedName;
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this._changes = _changes;
    this._records = _records;
  }
  Home.builtin$cls = "Home";
  if (!"name" in Home)
    Home.name = "Home";
  $desc = $collectedClasses.Home;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Home.prototype = $desc;
  Home.prototype.get$owner = function() {
    return this.owner;
  };
  Home.prototype.get$owner.$reflectable = 1;
  Home.prototype.set$owner = function(v) {
    return this.owner = v;
  };
  Home.prototype.set$owner.$reflectable = 1;
  Home.prototype.get$libraries = function(receiver) {
    return this.libraries;
  };
  Home.prototype.get$libraries.$reflectable = 1;
  Home.prototype.set$libraries = function(receiver, v) {
    return this.libraries = v;
  };
  Home.prototype.set$libraries.$reflectable = 1;
  function Home_closure(packages_0) {
    this.packages_0 = packages_0;
  }
  Home_closure.builtin$cls = "Home_closure";
  if (!"name" in Home_closure)
    Home_closure.name = "Home_closure";
  $desc = $collectedClasses.Home_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Home_closure.prototype = $desc;
  function Home__closure1() {
  }
  Home__closure1.builtin$cls = "Home__closure1";
  if (!"name" in Home__closure1)
    Home__closure1.name = "Home__closure1";
  $desc = $collectedClasses.Home__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Home__closure1.prototype = $desc;
  function Home_closure0(this_1) {
    this.this_1 = this_1;
  }
  Home_closure0.builtin$cls = "Home_closure0";
  if (!"name" in Home_closure0)
    Home_closure0.name = "Home_closure0";
  $desc = $collectedClasses.Home_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Home_closure0.prototype = $desc;
  function Home__closure(packageName_2) {
    this.packageName_2 = packageName_2;
  }
  Home__closure.builtin$cls = "Home__closure";
  if (!"name" in Home__closure)
    Home__closure.name = "Home__closure";
  $desc = $collectedClasses.Home__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Home__closure.prototype = $desc;
  function Home__closure0(libraries_3) {
    this.libraries_3 = libraries_3;
  }
  Home__closure0.builtin$cls = "Home__closure0";
  if (!"name" in Home__closure0)
    Home__closure0.name = "Home__closure0";
  $desc = $collectedClasses.Home__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Home__closure0.prototype = $desc;
  function Home_makeMainLibrarySpecial_closure(this_0) {
    this.this_0 = this_0;
  }
  Home_makeMainLibrarySpecial_closure.builtin$cls = "Home_makeMainLibrarySpecial_closure";
  if (!"name" in Home_makeMainLibrarySpecial_closure)
    Home_makeMainLibrarySpecial_closure.name = "Home_makeMainLibrarySpecial_closure";
  $desc = $collectedClasses.Home_makeMainLibrarySpecial_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Home_makeMainLibrarySpecial_closure.prototype = $desc;
  function Home_makeMainLibrarySpecial_closure0(mainLib_1) {
    this.mainLib_1 = mainLib_1;
  }
  Home_makeMainLibrarySpecial_closure0.builtin$cls = "Home_makeMainLibrarySpecial_closure0";
  if (!"name" in Home_makeMainLibrarySpecial_closure0)
    Home_makeMainLibrarySpecial_closure0.name = "Home_makeMainLibrarySpecial_closure0";
  $desc = $collectedClasses.Home_makeMainLibrarySpecial_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Home_makeMainLibrarySpecial_closure0.prototype = $desc;
  function Home_memberNamed_closure(name_0) {
    this.name_0 = name_0;
  }
  Home_memberNamed_closure.builtin$cls = "Home_memberNamed_closure";
  if (!"name" in Home_memberNamed_closure)
    Home_memberNamed_closure.name = "Home_memberNamed_closure";
  $desc = $collectedClasses.Home_memberNamed_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Home_memberNamed_closure.prototype = $desc;
  function LazyItem(isLoaded, previewComment, path, qualifiedName, name, _category_item$__$comment, _changes, _records) {
    this.isLoaded = isLoaded;
    this.previewComment = previewComment;
    this.path = path;
    this.qualifiedName = qualifiedName;
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this._changes = _changes;
    this._records = _records;
  }
  LazyItem.builtin$cls = "LazyItem";
  if (!"name" in LazyItem)
    LazyItem.name = "LazyItem";
  $desc = $collectedClasses.LazyItem;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LazyItem.prototype = $desc;
  LazyItem.prototype.get$isLoaded = function() {
    return this.isLoaded;
  };
  LazyItem.prototype.get$isLoaded.$reflectable = 1;
  LazyItem.prototype.set$isLoaded = function(v) {
    return this.isLoaded = v;
  };
  LazyItem.prototype.set$isLoaded.$reflectable = 1;
  LazyItem.prototype.get$previewComment = function() {
    return this.previewComment;
  };
  LazyItem.prototype.get$previewComment.$reflectable = 1;
  LazyItem.prototype.set$previewComment = function(v) {
    return this.previewComment = v;
  };
  LazyItem.prototype.set$previewComment.$reflectable = 1;
  function LazyItem_load_closure(this_0) {
    this.this_0 = this_0;
  }
  LazyItem_load_closure.builtin$cls = "LazyItem_load_closure";
  if (!"name" in LazyItem_load_closure)
    LazyItem_load_closure.name = "LazyItem_load_closure";
  $desc = $collectedClasses.LazyItem_load_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LazyItem_load_closure.prototype = $desc;
  function Library(classes, errors, typedefs, variables, functions, operators, home, isLoaded, previewComment, path, qualifiedName, name, _category_item$__$comment, _changes, _records) {
    this.classes = classes;
    this.errors = errors;
    this.typedefs = typedefs;
    this.variables = variables;
    this.functions = functions;
    this.operators = operators;
    this.home = home;
    this.isLoaded = isLoaded;
    this.previewComment = previewComment;
    this.path = path;
    this.qualifiedName = qualifiedName;
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this._changes = _changes;
    this._records = _records;
  }
  Library.builtin$cls = "Library";
  if (!"name" in Library)
    Library.name = "Library";
  $desc = $collectedClasses.Library;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Library.prototype = $desc;
  Library.prototype.get$classes = function(receiver) {
    return this.classes;
  };
  Library.prototype.get$classes.$reflectable = 1;
  Library.prototype.set$classes = function(receiver, v) {
    return this.classes = v;
  };
  Library.prototype.set$classes.$reflectable = 1;
  Library.prototype.get$errors = function(receiver) {
    return this.errors;
  };
  Library.prototype.get$errors.$reflectable = 1;
  Library.prototype.set$errors = function(receiver, v) {
    return this.errors = v;
  };
  Library.prototype.set$errors.$reflectable = 1;
  Library.prototype.get$typedefs = function(receiver) {
    return this.typedefs;
  };
  Library.prototype.get$typedefs.$reflectable = 1;
  Library.prototype.set$typedefs = function(receiver, v) {
    return this.typedefs = v;
  };
  Library.prototype.set$typedefs.$reflectable = 1;
  Library.prototype.get$variables = function(receiver) {
    return this.variables;
  };
  Library.prototype.get$variables.$reflectable = 1;
  Library.prototype.set$variables = function(receiver, v) {
    return this.variables = v;
  };
  Library.prototype.set$variables.$reflectable = 1;
  Library.prototype.get$functions = function(receiver) {
    return this.functions;
  };
  Library.prototype.get$functions.$reflectable = 1;
  Library.prototype.set$functions = function(receiver, v) {
    return this.functions = v;
  };
  Library.prototype.set$functions.$reflectable = 1;
  Library.prototype.get$operators = function(receiver) {
    return this.operators;
  };
  Library.prototype.get$operators.$reflectable = 1;
  Library.prototype.set$operators = function(receiver, v) {
    return this.operators = v;
  };
  Library.prototype.set$operators.$reflectable = 1;
  Library.prototype.get$home = function(receiver) {
    return this.home;
  };
  Library.prototype.get$home.$reflectable = 1;
  Library.prototype.set$home = function(receiver, v) {
    return this.home = v;
  };
  Library.prototype.set$home.$reflectable = 1;
  function Library_addToHierarchy_closure(this_0) {
    this.this_0 = this_0;
  }
  Library_addToHierarchy_closure.builtin$cls = "Library_addToHierarchy_closure";
  if (!"name" in Library_addToHierarchy_closure)
    Library_addToHierarchy_closure.name = "Library_addToHierarchy_closure";
  $desc = $collectedClasses.Library_addToHierarchy_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Library_addToHierarchy_closure.prototype = $desc;
  function Library_addToHierarchy__closure(this_1) {
    this.this_1 = this_1;
  }
  Library_addToHierarchy__closure.builtin$cls = "Library_addToHierarchy__closure";
  if (!"name" in Library_addToHierarchy__closure)
    Library_addToHierarchy__closure.name = "Library_addToHierarchy__closure";
  $desc = $collectedClasses.Library_addToHierarchy__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Library_addToHierarchy__closure.prototype = $desc;
  function Class(functions, variables, constructs, operators, superClass, isAbstract, previewComment, annotations, $implements, subclasses, generics, _instanceVariables, _staticVariables, _instanceFunctions, _staticFunctions, isLoaded, category_item$LazyItem$previewComment, path, qualifiedName, name, _category_item$__$comment, _changes, _records) {
    this.functions = functions;
    this.variables = variables;
    this.constructs = constructs;
    this.operators = operators;
    this.superClass = superClass;
    this.isAbstract = isAbstract;
    this.previewComment = previewComment;
    this.annotations = annotations;
    this.$implements = $implements;
    this.subclasses = subclasses;
    this.generics = generics;
    this._instanceVariables = _instanceVariables;
    this._staticVariables = _staticVariables;
    this._instanceFunctions = _instanceFunctions;
    this._staticFunctions = _staticFunctions;
    this.isLoaded = isLoaded;
    this.category_item$LazyItem$previewComment = category_item$LazyItem$previewComment;
    this.path = path;
    this.qualifiedName = qualifiedName;
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this._changes = _changes;
    this._records = _records;
  }
  Class.builtin$cls = "Class";
  if (!"name" in Class)
    Class.name = "Class";
  $desc = $collectedClasses.Class;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Class.prototype = $desc;
  Class.prototype.get$functions = function(receiver) {
    return this.functions;
  };
  Class.prototype.get$functions.$reflectable = 1;
  Class.prototype.set$functions = function(receiver, v) {
    return this.functions = v;
  };
  Class.prototype.set$functions.$reflectable = 1;
  Class.prototype.get$variables = function(receiver) {
    return this.variables;
  };
  Class.prototype.get$variables.$reflectable = 1;
  Class.prototype.set$variables = function(receiver, v) {
    return this.variables = v;
  };
  Class.prototype.set$variables.$reflectable = 1;
  Class.prototype.get$constructs = function() {
    return this.constructs;
  };
  Class.prototype.get$constructs.$reflectable = 1;
  Class.prototype.set$constructs = function(v) {
    return this.constructs = v;
  };
  Class.prototype.set$constructs.$reflectable = 1;
  Class.prototype.get$operators = function(receiver) {
    return this.operators;
  };
  Class.prototype.get$operators.$reflectable = 1;
  Class.prototype.set$operators = function(receiver, v) {
    return this.operators = v;
  };
  Class.prototype.set$operators.$reflectable = 1;
  Class.prototype.get$superClass = function(receiver) {
    return this.superClass;
  };
  Class.prototype.get$superClass.$reflectable = 1;
  Class.prototype.set$superClass = function(receiver, v) {
    return this.superClass = v;
  };
  Class.prototype.set$superClass.$reflectable = 1;
  Class.prototype.get$isAbstract = function() {
    return this.isAbstract;
  };
  Class.prototype.get$isAbstract.$reflectable = 1;
  Class.prototype.set$isAbstract = function(v) {
    return this.isAbstract = v;
  };
  Class.prototype.set$isAbstract.$reflectable = 1;
  Class.prototype.get$previewComment = function() {
    return this.previewComment;
  };
  Class.prototype.get$previewComment.$reflectable = 1;
  Class.prototype.set$previewComment = function(v) {
    return this.previewComment = v;
  };
  Class.prototype.set$previewComment.$reflectable = 1;
  Class.prototype.get$annotations = function(receiver) {
    return this.annotations;
  };
  Class.prototype.get$annotations.$reflectable = 1;
  Class.prototype.set$annotations = function(receiver, v) {
    return this.annotations = v;
  };
  Class.prototype.set$annotations.$reflectable = 1;
  Class.prototype.get$$implements = function() {
    return this.$implements;
  };
  Class.prototype.get$$implements.$reflectable = 1;
  Class.prototype.set$$implements = function(v) {
    return this.$implements = v;
  };
  Class.prototype.set$$implements.$reflectable = 1;
  Class.prototype.get$subclasses = function(receiver) {
    return this.subclasses;
  };
  Class.prototype.get$subclasses.$reflectable = 1;
  Class.prototype.set$subclasses = function(receiver, v) {
    return this.subclasses = v;
  };
  Class.prototype.set$subclasses.$reflectable = 1;
  Class.prototype.get$generics = function() {
    return this.generics;
  };
  Class.prototype.get$generics.$reflectable = 1;
  Class.prototype.set$generics = function(v) {
    return this.generics = v;
  };
  Class.prototype.set$generics.$reflectable = 1;
  Class.prototype.get$_instanceVariables = function() {
    return this._instanceVariables;
  };
  Class.prototype.get$_instanceVariables.$reflectable = 1;
  Class.prototype.set$_instanceVariables = function(v) {
    return this._instanceVariables = v;
  };
  Class.prototype.set$_instanceVariables.$reflectable = 1;
  Class.prototype.get$_staticVariables = function() {
    return this._staticVariables;
  };
  Class.prototype.get$_staticVariables.$reflectable = 1;
  Class.prototype.set$_staticVariables = function(v) {
    return this._staticVariables = v;
  };
  Class.prototype.set$_staticVariables.$reflectable = 1;
  Class.prototype.get$_instanceFunctions = function() {
    return this._instanceFunctions;
  };
  Class.prototype.get$_instanceFunctions.$reflectable = 1;
  Class.prototype.set$_instanceFunctions = function(v) {
    return this._instanceFunctions = v;
  };
  Class.prototype.set$_instanceFunctions.$reflectable = 1;
  Class.prototype.get$_staticFunctions = function() {
    return this._staticFunctions;
  };
  Class.prototype.get$_staticFunctions.$reflectable = 1;
  Class.prototype.set$_staticFunctions = function(v) {
    return this._staticFunctions = v;
  };
  Class.prototype.set$_staticFunctions.$reflectable = 1;
  function Class_addToHierarchy_closure(this_0) {
    this.this_0 = this_0;
  }
  Class_addToHierarchy_closure.builtin$cls = "Class_addToHierarchy_closure";
  if (!"name" in Class_addToHierarchy_closure)
    Class_addToHierarchy_closure.name = "Class_addToHierarchy_closure";
  $desc = $collectedClasses.Class_addToHierarchy_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Class_addToHierarchy_closure.prototype = $desc;
  function Class_addToHierarchy__closure(this_1) {
    this.this_1 = this_1;
  }
  Class_addToHierarchy__closure.builtin$cls = "Class_addToHierarchy__closure";
  if (!"name" in Class_addToHierarchy__closure)
    Class_addToHierarchy__closure.name = "Class_addToHierarchy__closure";
  $desc = $collectedClasses.Class_addToHierarchy__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Class_addToHierarchy__closure.prototype = $desc;
  function Class_loadValues_closure() {
  }
  Class_loadValues_closure.builtin$cls = "Class_loadValues_closure";
  if (!"name" in Class_loadValues_closure)
    Class_loadValues_closure.name = "Class_loadValues_closure";
  $desc = $collectedClasses.Class_loadValues_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Class_loadValues_closure.prototype = $desc;
  function Class_loadValues_closure0() {
  }
  Class_loadValues_closure0.builtin$cls = "Class_loadValues_closure0";
  if (!"name" in Class_loadValues_closure0)
    Class_loadValues_closure0.name = "Class_loadValues_closure0";
  $desc = $collectedClasses.Class_loadValues_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Class_loadValues_closure0.prototype = $desc;
  function Class_loadValues_closure1(this_0) {
    this.this_0 = this_0;
  }
  Class_loadValues_closure1.builtin$cls = "Class_loadValues_closure1";
  if (!"name" in Class_loadValues_closure1)
    Class_loadValues_closure1.name = "Class_loadValues_closure1";
  $desc = $collectedClasses.Class_loadValues_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Class_loadValues_closure1.prototype = $desc;
  function Class__addVariable_closure(this_0, isSetter_1, isGetter_2) {
    this.this_0 = this_0;
    this.isSetter_1 = isSetter_1;
    this.isGetter_2 = isGetter_2;
  }
  Class__addVariable_closure.builtin$cls = "Class__addVariable_closure";
  if (!"name" in Class__addVariable_closure)
    Class__addVariable_closure.name = "Class__addVariable_closure";
  $desc = $collectedClasses.Class__addVariable_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Class__addVariable_closure.prototype = $desc;
  function Class__addMethod_closure(this_0, isOperator_1) {
    this.this_0 = this_0;
    this.isOperator_1 = isOperator_1;
  }
  Class__addMethod_closure.builtin$cls = "Class__addMethod_closure";
  if (!"name" in Class__addMethod_closure)
    Class__addMethod_closure.name = "Class__addMethod_closure";
  $desc = $collectedClasses.Class__addMethod_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Class__addMethod_closure.prototype = $desc;
  function AnnotationGroup(supportedBrowsers, annotations, domName) {
    this.supportedBrowsers = supportedBrowsers;
    this.annotations = annotations;
    this.domName = domName;
  }
  AnnotationGroup.builtin$cls = "AnnotationGroup";
  if (!"name" in AnnotationGroup)
    AnnotationGroup.name = "AnnotationGroup";
  $desc = $collectedClasses.AnnotationGroup;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnnotationGroup.prototype = $desc;
  AnnotationGroup.prototype.get$supportedBrowsers = function() {
    return this.supportedBrowsers;
  };
  AnnotationGroup.prototype.get$supportedBrowsers.$reflectable = 1;
  AnnotationGroup.prototype.set$supportedBrowsers = function(v) {
    return this.supportedBrowsers = v;
  };
  AnnotationGroup.prototype.set$supportedBrowsers.$reflectable = 1;
  AnnotationGroup.prototype.get$annotations = function(receiver) {
    return this.annotations;
  };
  AnnotationGroup.prototype.get$annotations.$reflectable = 1;
  AnnotationGroup.prototype.set$annotations = function(receiver, v) {
    return this.annotations = v;
  };
  AnnotationGroup.prototype.set$annotations.$reflectable = 1;
  AnnotationGroup.prototype.get$domName = function() {
    return this.domName;
  };
  AnnotationGroup.prototype.get$domName.$reflectable = 1;
  AnnotationGroup.prototype.set$domName = function(v) {
    return this.domName = v;
  };
  AnnotationGroup.prototype.set$domName.$reflectable = 1;
  function AnnotationGroup_closure(this_0) {
    this.this_0 = this_0;
  }
  AnnotationGroup_closure.builtin$cls = "AnnotationGroup_closure";
  if (!"name" in AnnotationGroup_closure)
    AnnotationGroup_closure.name = "AnnotationGroup_closure";
  $desc = $collectedClasses.AnnotationGroup_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnnotationGroup_closure.prototype = $desc;
  function Annotation(qualifiedName, link, parameters) {
    this.qualifiedName = qualifiedName;
    this.link = link;
    this.parameters = parameters;
  }
  Annotation.builtin$cls = "Annotation";
  if (!"name" in Annotation)
    Annotation.name = "Annotation";
  $desc = $collectedClasses.Annotation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Annotation.prototype = $desc;
  Annotation.prototype.get$qualifiedName = function() {
    return this.qualifiedName;
  };
  Annotation.prototype.get$qualifiedName.$reflectable = 1;
  Annotation.prototype.set$qualifiedName = function(v) {
    return this.qualifiedName = v;
  };
  Annotation.prototype.set$qualifiedName.$reflectable = 1;
  Annotation.prototype.get$link = function(receiver) {
    return this.link;
  };
  Annotation.prototype.get$link.$reflectable = 1;
  Annotation.prototype.set$link = function(receiver, v) {
    return this.link = v;
  };
  Annotation.prototype.set$link.$reflectable = 1;
  Annotation.prototype.get$parameters = function(receiver) {
    return this.parameters;
  };
  Annotation.prototype.get$parameters.$reflectable = 1;
  Annotation.prototype.set$parameters = function(receiver, v) {
    return this.parameters = v;
  };
  Annotation.prototype.set$parameters.$reflectable = 1;
  function Parameterized(parameters, path, qualifiedName, name, _category_item$__$comment, _changes, _records) {
    this.parameters = parameters;
    this.path = path;
    this.qualifiedName = qualifiedName;
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this._changes = _changes;
    this._records = _records;
  }
  Parameterized.builtin$cls = "Parameterized";
  if (!"name" in Parameterized)
    Parameterized.name = "Parameterized";
  $desc = $collectedClasses.Parameterized;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parameterized.prototype = $desc;
  Parameterized.prototype.get$parameters = function(receiver) {
    return this.parameters;
  };
  Parameterized.prototype.get$parameters.$reflectable = 1;
  Parameterized.prototype.set$parameters = function(receiver, v) {
    return this.parameters = v;
  };
  Parameterized.prototype.set$parameters.$reflectable = 1;
  function Parameterized_getParameters_closure(values_0) {
    this.values_0 = values_0;
  }
  Parameterized_getParameters_closure.builtin$cls = "Parameterized_getParameters_closure";
  if (!"name" in Parameterized_getParameters_closure)
    Parameterized_getParameters_closure.name = "Parameterized_getParameters_closure";
  $desc = $collectedClasses.Parameterized_getParameters_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parameterized_getParameters_closure.prototype = $desc;
  function Typedef(type, annotations, parameters, path, qualifiedName, name, _category_item$__$comment, _changes, _records) {
    this.type = type;
    this.annotations = annotations;
    this.parameters = parameters;
    this.path = path;
    this.qualifiedName = qualifiedName;
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this._changes = _changes;
    this._records = _records;
  }
  Typedef.builtin$cls = "Typedef";
  if (!"name" in Typedef)
    Typedef.name = "Typedef";
  $desc = $collectedClasses.Typedef;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Typedef.prototype = $desc;
  Typedef.prototype.get$type = function(receiver) {
    return this.type;
  };
  Typedef.prototype.get$type.$reflectable = 1;
  Typedef.prototype.set$type = function(receiver, v) {
    return this.type = v;
  };
  Typedef.prototype.set$type.$reflectable = 1;
  Typedef.prototype.get$annotations = function(receiver) {
    return this.annotations;
  };
  Typedef.prototype.get$annotations.$reflectable = 1;
  Typedef.prototype.set$annotations = function(receiver, v) {
    return this.annotations = v;
  };
  Typedef.prototype.set$annotations.$reflectable = 1;
  function Method(isStatic, isAbstract, isConstant, isConstructor, inheritedFrom, commentFrom, className, isOperator, annotations, type, parameters, path, qualifiedName, name, _category_item$__$comment, _changes, _records) {
    this.isStatic = isStatic;
    this.isAbstract = isAbstract;
    this.isConstant = isConstant;
    this.isConstructor = isConstructor;
    this.inheritedFrom = inheritedFrom;
    this.commentFrom = commentFrom;
    this.className = className;
    this.isOperator = isOperator;
    this.annotations = annotations;
    this.type = type;
    this.parameters = parameters;
    this.path = path;
    this.qualifiedName = qualifiedName;
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this._changes = _changes;
    this._records = _records;
  }
  Method.builtin$cls = "Method";
  if (!"name" in Method)
    Method.name = "Method";
  $desc = $collectedClasses.Method;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Method.prototype = $desc;
  Method.prototype.get$isStatic = function() {
    return this.isStatic;
  };
  Method.prototype.get$isStatic.$reflectable = 1;
  Method.prototype.set$isStatic = function(v) {
    return this.isStatic = v;
  };
  Method.prototype.set$isStatic.$reflectable = 1;
  Method.prototype.get$isAbstract = function() {
    return this.isAbstract;
  };
  Method.prototype.get$isAbstract.$reflectable = 1;
  Method.prototype.set$isAbstract = function(v) {
    return this.isAbstract = v;
  };
  Method.prototype.set$isAbstract.$reflectable = 1;
  Method.prototype.get$isConstant = function() {
    return this.isConstant;
  };
  Method.prototype.get$isConstant.$reflectable = 1;
  Method.prototype.set$isConstant = function(v) {
    return this.isConstant = v;
  };
  Method.prototype.set$isConstant.$reflectable = 1;
  Method.prototype.get$isConstructor = function(receiver) {
    return this.isConstructor;
  };
  Method.prototype.get$isConstructor.$reflectable = 1;
  Method.prototype.set$isConstructor = function(receiver, v) {
    return this.isConstructor = v;
  };
  Method.prototype.set$isConstructor.$reflectable = 1;
  Method.prototype.get$inheritedFrom = function(receiver) {
    return this.inheritedFrom;
  };
  Method.prototype.get$inheritedFrom.$reflectable = 1;
  Method.prototype.set$inheritedFrom = function(receiver, v) {
    return this.inheritedFrom = v;
  };
  Method.prototype.set$inheritedFrom.$reflectable = 1;
  Method.prototype.get$commentFrom = function(receiver) {
    return this.commentFrom;
  };
  Method.prototype.get$commentFrom.$reflectable = 1;
  Method.prototype.set$commentFrom = function(receiver, v) {
    return this.commentFrom = v;
  };
  Method.prototype.set$commentFrom.$reflectable = 1;
  Method.prototype.get$className = function(receiver) {
    return this.className;
  };
  Method.prototype.get$className.$reflectable = 1;
  Method.prototype.set$className = function(receiver, v) {
    return this.className = v;
  };
  Method.prototype.set$className.$reflectable = 1;
  Method.prototype.get$isOperator = function() {
    return this.isOperator;
  };
  Method.prototype.get$isOperator.$reflectable = 1;
  Method.prototype.set$isOperator = function(v) {
    return this.isOperator = v;
  };
  Method.prototype.set$isOperator.$reflectable = 1;
  Method.prototype.get$annotations = function(receiver) {
    return this.annotations;
  };
  Method.prototype.get$annotations.$reflectable = 1;
  Method.prototype.set$annotations = function(receiver, v) {
    return this.annotations = v;
  };
  Method.prototype.set$annotations.$reflectable = 1;
  Method.prototype.get$type = function(receiver) {
    return this.type;
  };
  Method.prototype.get$type.$reflectable = 1;
  Method.prototype.set$type = function(receiver, v) {
    return this.type = v;
  };
  Method.prototype.set$type.$reflectable = 1;
  function Parameter(name, isOptional, isNamed, hasDefault, type, defaultValue, annotations) {
    this.name = name;
    this.isOptional = isOptional;
    this.isNamed = isNamed;
    this.hasDefault = hasDefault;
    this.type = type;
    this.defaultValue = defaultValue;
    this.annotations = annotations;
  }
  Parameter.builtin$cls = "Parameter";
  if (!"name" in Parameter)
    Parameter.name = "Parameter";
  $desc = $collectedClasses.Parameter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parameter.prototype = $desc;
  Parameter.prototype.get$name = function(receiver) {
    return this.name;
  };
  Parameter.prototype.get$name.$reflectable = 1;
  Parameter.prototype.set$name = function(receiver, v) {
    return this.name = v;
  };
  Parameter.prototype.set$name.$reflectable = 1;
  Parameter.prototype.get$isOptional = function() {
    return this.isOptional;
  };
  Parameter.prototype.get$isOptional.$reflectable = 1;
  Parameter.prototype.set$isOptional = function(v) {
    return this.isOptional = v;
  };
  Parameter.prototype.set$isOptional.$reflectable = 1;
  Parameter.prototype.get$isNamed = function() {
    return this.isNamed;
  };
  Parameter.prototype.get$isNamed.$reflectable = 1;
  Parameter.prototype.set$isNamed = function(v) {
    return this.isNamed = v;
  };
  Parameter.prototype.set$isNamed.$reflectable = 1;
  Parameter.prototype.get$hasDefault = function() {
    return this.hasDefault;
  };
  Parameter.prototype.get$hasDefault.$reflectable = 1;
  Parameter.prototype.set$hasDefault = function(v) {
    return this.hasDefault = v;
  };
  Parameter.prototype.set$hasDefault.$reflectable = 1;
  Parameter.prototype.get$type = function(receiver) {
    return this.type;
  };
  Parameter.prototype.get$type.$reflectable = 1;
  Parameter.prototype.set$type = function(receiver, v) {
    return this.type = v;
  };
  Parameter.prototype.set$type.$reflectable = 1;
  Parameter.prototype.get$defaultValue = function(receiver) {
    return this.defaultValue;
  };
  Parameter.prototype.get$defaultValue.$reflectable = 1;
  Parameter.prototype.set$defaultValue = function(receiver, v) {
    return this.defaultValue = v;
  };
  Parameter.prototype.set$defaultValue.$reflectable = 1;
  Parameter.prototype.get$annotations = function(receiver) {
    return this.annotations;
  };
  Parameter.prototype.get$annotations.$reflectable = 1;
  Parameter.prototype.set$annotations = function(receiver, v) {
    return this.annotations = v;
  };
  Parameter.prototype.set$annotations.$reflectable = 1;
  function Variable(isFinal, isStatic, isAbstract, isConstant, isGetter, isSetter, inheritedFrom, commentFrom, setterParameter, type, annotations, path, qualifiedName, name, _category_item$__$comment, _changes, _records) {
    this.isFinal = isFinal;
    this.isStatic = isStatic;
    this.isAbstract = isAbstract;
    this.isConstant = isConstant;
    this.isGetter = isGetter;
    this.isSetter = isSetter;
    this.inheritedFrom = inheritedFrom;
    this.commentFrom = commentFrom;
    this.setterParameter = setterParameter;
    this.type = type;
    this.annotations = annotations;
    this.path = path;
    this.qualifiedName = qualifiedName;
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this._changes = _changes;
    this._records = _records;
  }
  Variable.builtin$cls = "Variable";
  if (!"name" in Variable)
    Variable.name = "Variable";
  $desc = $collectedClasses.Variable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Variable.prototype = $desc;
  Variable.prototype.get$isFinal = function(receiver) {
    return this.isFinal;
  };
  Variable.prototype.get$isFinal.$reflectable = 1;
  Variable.prototype.set$isFinal = function(receiver, v) {
    return this.isFinal = v;
  };
  Variable.prototype.set$isFinal.$reflectable = 1;
  Variable.prototype.get$isStatic = function() {
    return this.isStatic;
  };
  Variable.prototype.get$isStatic.$reflectable = 1;
  Variable.prototype.set$isStatic = function(v) {
    return this.isStatic = v;
  };
  Variable.prototype.set$isStatic.$reflectable = 1;
  Variable.prototype.get$isAbstract = function() {
    return this.isAbstract;
  };
  Variable.prototype.get$isAbstract.$reflectable = 1;
  Variable.prototype.set$isAbstract = function(v) {
    return this.isAbstract = v;
  };
  Variable.prototype.set$isAbstract.$reflectable = 1;
  Variable.prototype.get$isConstant = function() {
    return this.isConstant;
  };
  Variable.prototype.get$isConstant.$reflectable = 1;
  Variable.prototype.set$isConstant = function(v) {
    return this.isConstant = v;
  };
  Variable.prototype.set$isConstant.$reflectable = 1;
  Variable.prototype.get$isGetter = function() {
    return this.isGetter;
  };
  Variable.prototype.get$isGetter.$reflectable = 1;
  Variable.prototype.set$isGetter = function(v) {
    return this.isGetter = v;
  };
  Variable.prototype.set$isGetter.$reflectable = 1;
  Variable.prototype.get$isSetter = function() {
    return this.isSetter;
  };
  Variable.prototype.get$isSetter.$reflectable = 1;
  Variable.prototype.set$isSetter = function(v) {
    return this.isSetter = v;
  };
  Variable.prototype.set$isSetter.$reflectable = 1;
  Variable.prototype.get$inheritedFrom = function(receiver) {
    return this.inheritedFrom;
  };
  Variable.prototype.get$inheritedFrom.$reflectable = 1;
  Variable.prototype.set$inheritedFrom = function(receiver, v) {
    return this.inheritedFrom = v;
  };
  Variable.prototype.set$inheritedFrom.$reflectable = 1;
  Variable.prototype.get$commentFrom = function(receiver) {
    return this.commentFrom;
  };
  Variable.prototype.get$commentFrom.$reflectable = 1;
  Variable.prototype.set$commentFrom = function(receiver, v) {
    return this.commentFrom = v;
  };
  Variable.prototype.set$commentFrom.$reflectable = 1;
  Variable.prototype.get$setterParameter = function(receiver) {
    return this.setterParameter;
  };
  Variable.prototype.get$setterParameter.$reflectable = 1;
  Variable.prototype.set$setterParameter = function(receiver, v) {
    return this.setterParameter = v;
  };
  Variable.prototype.set$setterParameter.$reflectable = 1;
  Variable.prototype.get$type = function(receiver) {
    return this.type;
  };
  Variable.prototype.get$type.$reflectable = 1;
  Variable.prototype.set$type = function(receiver, v) {
    return this.type = v;
  };
  Variable.prototype.set$type.$reflectable = 1;
  Variable.prototype.get$annotations = function(receiver) {
    return this.annotations;
  };
  Variable.prototype.get$annotations.$reflectable = 1;
  Variable.prototype.set$annotations = function(receiver, v) {
    return this.annotations = v;
  };
  Variable.prototype.set$annotations.$reflectable = 1;
  function NestedType(outer, inner) {
    this.outer = outer;
    this.inner = inner;
  }
  NestedType.builtin$cls = "NestedType";
  if (!"name" in NestedType)
    NestedType.name = "NestedType";
  $desc = $collectedClasses.NestedType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NestedType.prototype = $desc;
  NestedType.prototype.get$outer = function() {
    return this.outer;
  };
  NestedType.prototype.get$outer.$reflectable = 1;
  NestedType.prototype.set$outer = function(v) {
    return this.outer = v;
  };
  NestedType.prototype.set$outer.$reflectable = 1;
  NestedType.prototype.get$inner = function() {
    return this.inner;
  };
  NestedType.prototype.get$inner.$reflectable = 1;
  NestedType.prototype.set$inner = function(v) {
    return this.inner = v;
  };
  NestedType.prototype.set$inner.$reflectable = 1;
  function NestedType_closure(this_0) {
    this.this_0 = this_0;
  }
  NestedType_closure.builtin$cls = "NestedType_closure";
  if (!"name" in NestedType_closure)
    NestedType_closure.name = "NestedType_closure";
  $desc = $collectedClasses.NestedType_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NestedType_closure.prototype = $desc;
  function LinkableType(loc) {
    this.loc = loc;
  }
  LinkableType.builtin$cls = "LinkableType";
  if (!"name" in LinkableType)
    LinkableType.name = "LinkableType";
  $desc = $collectedClasses.LinkableType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkableType.prototype = $desc;
  LinkableType.prototype.get$loc = function() {
    return this.loc;
  };
  LinkableType.prototype.get$loc.$reflectable = 1;
  LinkableType.prototype.set$loc = function(v) {
    return this.loc = v;
  };
  LinkableType.prototype.set$loc.$reflectable = 1;
  function ClassElement(_item, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._item = _item;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  ClassElement.builtin$cls = "ClassElement";
  if (!"name" in ClassElement)
    ClassElement.name = "ClassElement";
  $desc = $collectedClasses.ClassElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClassElement.prototype = $desc;
  function ClassElement$created_closure(this_0) {
    this.this_0 = this_0;
  }
  ClassElement$created_closure.builtin$cls = "ClassElement$created_closure";
  if (!"name" in ClassElement$created_closure)
    ClassElement$created_closure.name = "ClassElement$created_closure";
  $desc = $collectedClasses.ClassElement$created_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClassElement$created_closure.prototype = $desc;
  function ClassElement_makeLinks_closure() {
  }
  ClassElement_makeLinks_closure.builtin$cls = "ClassElement_makeLinks_closure";
  if (!"name" in ClassElement_makeLinks_closure)
    ClassElement_makeLinks_closure.name = "ClassElement_makeLinks_closure";
  $desc = $collectedClasses.ClassElement_makeLinks_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClassElement_makeLinks_closure.prototype = $desc;
  function Composer(_root, _anchors, _idCounter) {
    this._root = _root;
    this._anchors = _anchors;
    this._idCounter = _idCounter;
  }
  Composer.builtin$cls = "Composer";
  if (!"name" in Composer)
    Composer.name = "Composer";
  $desc = $collectedClasses.Composer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Composer.prototype = $desc;
  function Constructor(_$constructor$_root, _$constructor$_anchors) {
    this._$constructor$_root = _$constructor$_root;
    this._$constructor$_anchors = _$constructor$_anchors;
  }
  Constructor.builtin$cls = "Constructor";
  if (!"name" in Constructor)
    Constructor.name = "Constructor";
  $desc = $collectedClasses.Constructor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Constructor.prototype = $desc;
  function Constructor_visitMapping_closure(dartMap_0) {
    this.dartMap_0 = dartMap_0;
  }
  Constructor_visitMapping_closure.builtin$cls = "Constructor_visitMapping_closure";
  if (!"name" in Constructor_visitMapping_closure)
    Constructor_visitMapping_closure.name = "Constructor_visitMapping_closure";
  $desc = $collectedClasses.Constructor_visitMapping_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Constructor_visitMapping_closure.prototype = $desc;
  function closure() {
  }
  closure.builtin$cls = "closure";
  if (!"name" in closure)
    closure.name = "closure";
  $desc = $collectedClasses.closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure.prototype = $desc;
  function ListIterable() {
  }
  ListIterable.builtin$cls = "ListIterable";
  if (!"name" in ListIterable)
    ListIterable.name = "ListIterable";
  $desc = $collectedClasses.ListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterable.prototype = $desc;
  function SubListIterable(_iterable, _start, _endOrLength) {
    this._iterable = _iterable;
    this._start = _start;
    this._endOrLength = _endOrLength;
  }
  SubListIterable.builtin$cls = "SubListIterable";
  if (!"name" in SubListIterable)
    SubListIterable.name = "SubListIterable";
  $desc = $collectedClasses.SubListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SubListIterable.prototype = $desc;
  function ListIterator(_iterable, _length, _index, _current) {
    this._iterable = _iterable;
    this._length = _length;
    this._index = _index;
    this._current = _current;
  }
  ListIterator.builtin$cls = "ListIterator";
  if (!"name" in ListIterator)
    ListIterator.name = "ListIterator";
  $desc = $collectedClasses.ListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterator.prototype = $desc;
  function MappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  MappedIterable.builtin$cls = "MappedIterable";
  if (!"name" in MappedIterable)
    MappedIterable.name = "MappedIterable";
  $desc = $collectedClasses.MappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterable.prototype = $desc;
  function EfficientLengthMappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  EfficientLengthMappedIterable.builtin$cls = "EfficientLengthMappedIterable";
  if (!"name" in EfficientLengthMappedIterable)
    EfficientLengthMappedIterable.name = "EfficientLengthMappedIterable";
  $desc = $collectedClasses.EfficientLengthMappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EfficientLengthMappedIterable.prototype = $desc;
  function MappedIterator(_current, _iterator, _f) {
    this._current = _current;
    this._iterator = _iterator;
    this._f = _f;
  }
  MappedIterator.builtin$cls = "MappedIterator";
  if (!"name" in MappedIterator)
    MappedIterator.name = "MappedIterator";
  $desc = $collectedClasses.MappedIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterator.prototype = $desc;
  function MappedListIterable(_source, _f) {
    this._source = _source;
    this._f = _f;
  }
  MappedListIterable.builtin$cls = "MappedListIterable";
  if (!"name" in MappedListIterable)
    MappedListIterable.name = "MappedListIterable";
  $desc = $collectedClasses.MappedListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedListIterable.prototype = $desc;
  function WhereIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  WhereIterable.builtin$cls = "WhereIterable";
  if (!"name" in WhereIterable)
    WhereIterable.name = "WhereIterable";
  $desc = $collectedClasses.WhereIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterable.prototype = $desc;
  function WhereIterator(_iterator, _f) {
    this._iterator = _iterator;
    this._f = _f;
  }
  WhereIterator.builtin$cls = "WhereIterator";
  if (!"name" in WhereIterator)
    WhereIterator.name = "WhereIterator";
  $desc = $collectedClasses.WhereIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterator.prototype = $desc;
  function ExpandIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  ExpandIterable.builtin$cls = "ExpandIterable";
  if (!"name" in ExpandIterable)
    ExpandIterable.name = "ExpandIterable";
  $desc = $collectedClasses.ExpandIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ExpandIterable.prototype = $desc;
  function ExpandIterator(_iterator, _f, _currentExpansion, _current) {
    this._iterator = _iterator;
    this._f = _f;
    this._currentExpansion = _currentExpansion;
    this._current = _current;
  }
  ExpandIterator.builtin$cls = "ExpandIterator";
  if (!"name" in ExpandIterator)
    ExpandIterator.name = "ExpandIterator";
  $desc = $collectedClasses.ExpandIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ExpandIterator.prototype = $desc;
  function TakeIterable(_iterable, _takeCount) {
    this._iterable = _iterable;
    this._takeCount = _takeCount;
  }
  TakeIterable.builtin$cls = "TakeIterable";
  if (!"name" in TakeIterable)
    TakeIterable.name = "TakeIterable";
  $desc = $collectedClasses.TakeIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TakeIterable.prototype = $desc;
  function EfficientLengthTakeIterable(_iterable, _takeCount) {
    this._iterable = _iterable;
    this._takeCount = _takeCount;
  }
  EfficientLengthTakeIterable.builtin$cls = "EfficientLengthTakeIterable";
  if (!"name" in EfficientLengthTakeIterable)
    EfficientLengthTakeIterable.name = "EfficientLengthTakeIterable";
  $desc = $collectedClasses.EfficientLengthTakeIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EfficientLengthTakeIterable.prototype = $desc;
  function TakeIterator(_iterator, _dev$_remaining) {
    this._iterator = _iterator;
    this._dev$_remaining = _dev$_remaining;
  }
  TakeIterator.builtin$cls = "TakeIterator";
  if (!"name" in TakeIterator)
    TakeIterator.name = "TakeIterator";
  $desc = $collectedClasses.TakeIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TakeIterator.prototype = $desc;
  function TakeWhileIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  TakeWhileIterable.builtin$cls = "TakeWhileIterable";
  if (!"name" in TakeWhileIterable)
    TakeWhileIterable.name = "TakeWhileIterable";
  $desc = $collectedClasses.TakeWhileIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TakeWhileIterable.prototype = $desc;
  function TakeWhileIterator(_iterator, _f, _isFinished) {
    this._iterator = _iterator;
    this._f = _f;
    this._isFinished = _isFinished;
  }
  TakeWhileIterator.builtin$cls = "TakeWhileIterator";
  if (!"name" in TakeWhileIterator)
    TakeWhileIterator.name = "TakeWhileIterator";
  $desc = $collectedClasses.TakeWhileIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TakeWhileIterator.prototype = $desc;
  function SkipIterable(_iterable, _skipCount) {
    this._iterable = _iterable;
    this._skipCount = _skipCount;
  }
  SkipIterable.builtin$cls = "SkipIterable";
  if (!"name" in SkipIterable)
    SkipIterable.name = "SkipIterable";
  $desc = $collectedClasses.SkipIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SkipIterable.prototype = $desc;
  function EfficientLengthSkipIterable(_iterable, _skipCount) {
    this._iterable = _iterable;
    this._skipCount = _skipCount;
  }
  EfficientLengthSkipIterable.builtin$cls = "EfficientLengthSkipIterable";
  if (!"name" in EfficientLengthSkipIterable)
    EfficientLengthSkipIterable.name = "EfficientLengthSkipIterable";
  $desc = $collectedClasses.EfficientLengthSkipIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EfficientLengthSkipIterable.prototype = $desc;
  function SkipIterator(_iterator, _skipCount) {
    this._iterator = _iterator;
    this._skipCount = _skipCount;
  }
  SkipIterator.builtin$cls = "SkipIterator";
  if (!"name" in SkipIterator)
    SkipIterator.name = "SkipIterator";
  $desc = $collectedClasses.SkipIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SkipIterator.prototype = $desc;
  function EmptyIterator() {
  }
  EmptyIterator.builtin$cls = "EmptyIterator";
  if (!"name" in EmptyIterator)
    EmptyIterator.name = "EmptyIterator";
  $desc = $collectedClasses.EmptyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmptyIterator.prototype = $desc;
  function FixedLengthListMixin() {
  }
  FixedLengthListMixin.builtin$cls = "FixedLengthListMixin";
  if (!"name" in FixedLengthListMixin)
    FixedLengthListMixin.name = "FixedLengthListMixin";
  $desc = $collectedClasses.FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedLengthListMixin.prototype = $desc;
  function UnmodifiableListMixin() {
  }
  UnmodifiableListMixin.builtin$cls = "UnmodifiableListMixin";
  if (!"name" in UnmodifiableListMixin)
    UnmodifiableListMixin.name = "UnmodifiableListMixin";
  $desc = $collectedClasses.UnmodifiableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableListMixin.prototype = $desc;
  function UnmodifiableListBase() {
  }
  UnmodifiableListBase.builtin$cls = "UnmodifiableListBase";
  if (!"name" in UnmodifiableListBase)
    UnmodifiableListBase.name = "UnmodifiableListBase";
  $desc = $collectedClasses.UnmodifiableListBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableListBase.prototype = $desc;
  function ReversedListIterable(_source) {
    this._source = _source;
  }
  ReversedListIterable.builtin$cls = "ReversedListIterable";
  if (!"name" in ReversedListIterable)
    ReversedListIterable.name = "ReversedListIterable";
  $desc = $collectedClasses.ReversedListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReversedListIterable.prototype = $desc;
  function Symbol0(_name) {
    this._name = _name;
  }
  Symbol0.builtin$cls = "Symbol0";
  if (!"name" in Symbol0)
    Symbol0.name = "Symbol0";
  $desc = $collectedClasses.Symbol0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Symbol0.prototype = $desc;
  Symbol0.prototype.get$_name = function(receiver) {
    return this._name;
  };
  function JsMirrorSystem(_cachedLibraries, isolate) {
    this._cachedLibraries = _cachedLibraries;
    this.isolate = isolate;
  }
  JsMirrorSystem.builtin$cls = "JsMirrorSystem";
  if (!"name" in JsMirrorSystem)
    JsMirrorSystem.name = "JsMirrorSystem";
  $desc = $collectedClasses.JsMirrorSystem;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsMirrorSystem.prototype = $desc;
  function JsMirrorSystem_computeLibrariesByName_closure() {
  }
  JsMirrorSystem_computeLibrariesByName_closure.builtin$cls = "JsMirrorSystem_computeLibrariesByName_closure";
  if (!"name" in JsMirrorSystem_computeLibrariesByName_closure)
    JsMirrorSystem_computeLibrariesByName_closure.name = "JsMirrorSystem_computeLibrariesByName_closure";
  $desc = $collectedClasses.JsMirrorSystem_computeLibrariesByName_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsMirrorSystem_computeLibrariesByName_closure.prototype = $desc;
  function JsMirror() {
  }
  JsMirror.builtin$cls = "JsMirror";
  if (!"name" in JsMirror)
    JsMirror.name = "JsMirror";
  $desc = $collectedClasses.JsMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsMirror.prototype = $desc;
  function JsIsolateMirror(_isolateContext) {
    this._isolateContext = _isolateContext;
  }
  JsIsolateMirror.builtin$cls = "JsIsolateMirror";
  if (!"name" in JsIsolateMirror)
    JsIsolateMirror.name = "JsIsolateMirror";
  $desc = $collectedClasses.JsIsolateMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsIsolateMirror.prototype = $desc;
  function JsIsolateMirror_rootLibrary_closure() {
  }
  JsIsolateMirror_rootLibrary_closure.builtin$cls = "JsIsolateMirror_rootLibrary_closure";
  if (!"name" in JsIsolateMirror_rootLibrary_closure)
    JsIsolateMirror_rootLibrary_closure.name = "JsIsolateMirror_rootLibrary_closure";
  $desc = $collectedClasses.JsIsolateMirror_rootLibrary_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsIsolateMirror_rootLibrary_closure.prototype = $desc;
  function JsDeclarationMirror(simpleName) {
    this.simpleName = simpleName;
  }
  JsDeclarationMirror.builtin$cls = "JsDeclarationMirror";
  if (!"name" in JsDeclarationMirror)
    JsDeclarationMirror.name = "JsDeclarationMirror";
  $desc = $collectedClasses.JsDeclarationMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsDeclarationMirror.prototype = $desc;
  JsDeclarationMirror.prototype.get$simpleName = function() {
    return this.simpleName;
  };
  function JsTypeVariableMirror(owner, _typeVariable, _cachedUpperBound, simpleName) {
    this.owner = owner;
    this._typeVariable = _typeVariable;
    this._cachedUpperBound = _cachedUpperBound;
    this.simpleName = simpleName;
  }
  JsTypeVariableMirror.builtin$cls = "JsTypeVariableMirror";
  if (!"name" in JsTypeVariableMirror)
    JsTypeVariableMirror.name = "JsTypeVariableMirror";
  $desc = $collectedClasses.JsTypeVariableMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeVariableMirror.prototype = $desc;
  JsTypeVariableMirror.prototype.get$owner = function() {
    return this.owner;
  };
  function JsTypeMirror(simpleName) {
    this.simpleName = simpleName;
  }
  JsTypeMirror.builtin$cls = "JsTypeMirror";
  if (!"name" in JsTypeMirror)
    JsTypeMirror.name = "JsTypeMirror";
  $desc = $collectedClasses.JsTypeMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeMirror.prototype = $desc;
  function JsLibraryMirror(uri, _classes, _functions, _metadata, _compactFieldSpecification, _isRoot, _globalObject, _cachedFunctionMirrors, _cachedFields, _cachedClasses, _cachedFunctions, _cachedGetters, _cachedSetters, _cachedVariables, _cachedMembers, _cachedDeclarations, _cachedMetadata, simpleName) {
    this.uri = uri;
    this._classes = _classes;
    this._functions = _functions;
    this._metadata = _metadata;
    this._compactFieldSpecification = _compactFieldSpecification;
    this._isRoot = _isRoot;
    this._globalObject = _globalObject;
    this._cachedFunctionMirrors = _cachedFunctionMirrors;
    this._cachedFields = _cachedFields;
    this._cachedClasses = _cachedClasses;
    this._cachedFunctions = _cachedFunctions;
    this._cachedGetters = _cachedGetters;
    this._cachedSetters = _cachedSetters;
    this._cachedVariables = _cachedVariables;
    this._cachedMembers = _cachedMembers;
    this._cachedDeclarations = _cachedDeclarations;
    this._cachedMetadata = _cachedMetadata;
    this.simpleName = simpleName;
  }
  JsLibraryMirror.builtin$cls = "JsLibraryMirror";
  if (!"name" in JsLibraryMirror)
    JsLibraryMirror.name = "JsLibraryMirror";
  $desc = $collectedClasses.JsLibraryMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsLibraryMirror.prototype = $desc;
  JsLibraryMirror.prototype.get$uri = function() {
    return this.uri;
  };
  JsLibraryMirror.prototype.get$_isRoot = function() {
    return this._isRoot;
  };
  JsLibraryMirror.prototype.get$_globalObject = function() {
    return this._globalObject;
  };
  function JsDeclarationMirror_JsObjectMirror() {
  }
  JsDeclarationMirror_JsObjectMirror.builtin$cls = "JsDeclarationMirror_JsObjectMirror";
  if (!"name" in JsDeclarationMirror_JsObjectMirror)
    JsDeclarationMirror_JsObjectMirror.name = "JsDeclarationMirror_JsObjectMirror";
  $desc = $collectedClasses.JsDeclarationMirror_JsObjectMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsDeclarationMirror_JsObjectMirror.prototype = $desc;
  function JsLibraryMirror_members_addToResult(result_0) {
    this.result_0 = result_0;
  }
  JsLibraryMirror_members_addToResult.builtin$cls = "JsLibraryMirror_members_addToResult";
  if (!"name" in JsLibraryMirror_members_addToResult)
    JsLibraryMirror_members_addToResult.name = "JsLibraryMirror_members_addToResult";
  $desc = $collectedClasses.JsLibraryMirror_members_addToResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsLibraryMirror_members_addToResult.prototype = $desc;
  function JsLibraryMirror_declarations_addToResult(result_0) {
    this.result_0 = result_0;
  }
  JsLibraryMirror_declarations_addToResult.builtin$cls = "JsLibraryMirror_declarations_addToResult";
  if (!"name" in JsLibraryMirror_declarations_addToResult)
    JsLibraryMirror_declarations_addToResult.name = "JsLibraryMirror_declarations_addToResult";
  $desc = $collectedClasses.JsLibraryMirror_declarations_addToResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsLibraryMirror_declarations_addToResult.prototype = $desc;
  function filterMembers_closure(method_0) {
    this.method_0 = method_0;
  }
  filterMembers_closure.builtin$cls = "filterMembers_closure";
  if (!"name" in filterMembers_closure)
    filterMembers_closure.name = "filterMembers_closure";
  $desc = $collectedClasses.filterMembers_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  filterMembers_closure.prototype = $desc;
  function JsMixinApplication(superclass, mixin, _cachedSimpleName, simpleName) {
    this.superclass = superclass;
    this.mixin = mixin;
    this._cachedSimpleName = _cachedSimpleName;
    this.simpleName = simpleName;
  }
  JsMixinApplication.builtin$cls = "JsMixinApplication";
  if (!"name" in JsMixinApplication)
    JsMixinApplication.name = "JsMixinApplication";
  $desc = $collectedClasses.JsMixinApplication;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsMixinApplication.prototype = $desc;
  JsMixinApplication.prototype.get$superclass = function() {
    return this.superclass;
  };
  function JsTypeMirror_JsObjectMirror() {
  }
  JsTypeMirror_JsObjectMirror.builtin$cls = "JsTypeMirror_JsObjectMirror";
  if (!"name" in JsTypeMirror_JsObjectMirror)
    JsTypeMirror_JsObjectMirror.name = "JsTypeMirror_JsObjectMirror";
  $desc = $collectedClasses.JsTypeMirror_JsObjectMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeMirror_JsObjectMirror.prototype = $desc;
  function JsObjectMirror() {
  }
  JsObjectMirror.builtin$cls = "JsObjectMirror";
  if (!"name" in JsObjectMirror)
    JsObjectMirror.name = "JsObjectMirror";
  $desc = $collectedClasses.JsObjectMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsObjectMirror.prototype = $desc;
  function JsInstanceMirror(reflectee) {
    this.reflectee = reflectee;
  }
  JsInstanceMirror.builtin$cls = "JsInstanceMirror";
  if (!"name" in JsInstanceMirror)
    JsInstanceMirror.name = "JsInstanceMirror";
  $desc = $collectedClasses.JsInstanceMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsInstanceMirror.prototype = $desc;
  JsInstanceMirror.prototype.get$reflectee = function() {
    return this.reflectee;
  };
  function JsInstanceMirror_invoke_closure() {
  }
  JsInstanceMirror_invoke_closure.builtin$cls = "JsInstanceMirror_invoke_closure";
  if (!"name" in JsInstanceMirror_invoke_closure)
    JsInstanceMirror_invoke_closure.name = "JsInstanceMirror_invoke_closure";
  $desc = $collectedClasses.JsInstanceMirror_invoke_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsInstanceMirror_invoke_closure.prototype = $desc;
  function JsInstanceMirror_invoke_closure0(defaultArguments_0) {
    this.defaultArguments_0 = defaultArguments_0;
  }
  JsInstanceMirror_invoke_closure0.builtin$cls = "JsInstanceMirror_invoke_closure0";
  if (!"name" in JsInstanceMirror_invoke_closure0)
    JsInstanceMirror_invoke_closure0.name = "JsInstanceMirror_invoke_closure0";
  $desc = $collectedClasses.JsInstanceMirror_invoke_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsInstanceMirror_invoke_closure0.prototype = $desc;
  function JsTypeBoundClassMirror(_class, _typeArguments, _cachedTypeArguments, _cachedDeclarations, _cachedMembers, _cachedConstructors, _cachedVariables, _cachedGetters, _cachedSetters, _cachedMethodsMap, _cachedMethods, _superclass, _cachedSuperinterfaces, simpleName) {
    this._class = _class;
    this._typeArguments = _typeArguments;
    this._cachedTypeArguments = _cachedTypeArguments;
    this._cachedDeclarations = _cachedDeclarations;
    this._cachedMembers = _cachedMembers;
    this._cachedConstructors = _cachedConstructors;
    this._cachedVariables = _cachedVariables;
    this._cachedGetters = _cachedGetters;
    this._cachedSetters = _cachedSetters;
    this._cachedMethodsMap = _cachedMethodsMap;
    this._cachedMethods = _cachedMethods;
    this._superclass = _superclass;
    this._cachedSuperinterfaces = _cachedSuperinterfaces;
    this.simpleName = simpleName;
  }
  JsTypeBoundClassMirror.builtin$cls = "JsTypeBoundClassMirror";
  if (!"name" in JsTypeBoundClassMirror)
    JsTypeBoundClassMirror.name = "JsTypeBoundClassMirror";
  $desc = $collectedClasses.JsTypeBoundClassMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeBoundClassMirror.prototype = $desc;
  function JsTypeBoundClassMirror_typeArguments_addTypeArgument(result_0) {
    this.result_0 = result_0;
  }
  JsTypeBoundClassMirror_typeArguments_addTypeArgument.builtin$cls = "JsTypeBoundClassMirror_typeArguments_addTypeArgument";
  if (!"name" in JsTypeBoundClassMirror_typeArguments_addTypeArgument)
    JsTypeBoundClassMirror_typeArguments_addTypeArgument.name = "JsTypeBoundClassMirror_typeArguments_addTypeArgument";
  $desc = $collectedClasses.JsTypeBoundClassMirror_typeArguments_addTypeArgument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeBoundClassMirror_typeArguments_addTypeArgument.prototype = $desc;
  function JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure() {
  }
  JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure.builtin$cls = "JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure";
  if (!"name" in JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure)
    JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure.name = "JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure";
  $desc = $collectedClasses.JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure.prototype = $desc;
  function JsTypeBoundClassMirror_typeArguments_closure(addTypeArgument_1) {
    this.addTypeArgument_1 = addTypeArgument_1;
  }
  JsTypeBoundClassMirror_typeArguments_closure.builtin$cls = "JsTypeBoundClassMirror_typeArguments_closure";
  if (!"name" in JsTypeBoundClassMirror_typeArguments_closure)
    JsTypeBoundClassMirror_typeArguments_closure.name = "JsTypeBoundClassMirror_typeArguments_closure";
  $desc = $collectedClasses.JsTypeBoundClassMirror_typeArguments_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeBoundClassMirror_typeArguments_closure.prototype = $desc;
  function JsTypeBoundClassMirror_declarations_closure(result_0) {
    this.result_0 = result_0;
  }
  JsTypeBoundClassMirror_declarations_closure.builtin$cls = "JsTypeBoundClassMirror_declarations_closure";
  if (!"name" in JsTypeBoundClassMirror_declarations_closure)
    JsTypeBoundClassMirror_declarations_closure.name = "JsTypeBoundClassMirror_declarations_closure";
  $desc = $collectedClasses.JsTypeBoundClassMirror_declarations_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeBoundClassMirror_declarations_closure.prototype = $desc;
  function JsClassMirror(_mangledName, _jsConstructorOrInterceptor, _fieldsDescriptor, _fieldsMetadata, _jsConstructorCache, _metadata, _superclass, _cachedMethods, _cachedFields, _cachedConstructors, _cachedMethodsMap, _cachedGetters, _cachedSetters, _cachedVariables, _cachedMembers, _cachedDeclarations, _cachedMetadata, _cachedSuperinterfaces, _cachedTypeVariables, _owner, simpleName) {
    this._mangledName = _mangledName;
    this._jsConstructorOrInterceptor = _jsConstructorOrInterceptor;
    this._fieldsDescriptor = _fieldsDescriptor;
    this._fieldsMetadata = _fieldsMetadata;
    this._jsConstructorCache = _jsConstructorCache;
    this._metadata = _metadata;
    this._superclass = _superclass;
    this._cachedMethods = _cachedMethods;
    this._cachedFields = _cachedFields;
    this._cachedConstructors = _cachedConstructors;
    this._cachedMethodsMap = _cachedMethodsMap;
    this._cachedGetters = _cachedGetters;
    this._cachedSetters = _cachedSetters;
    this._cachedVariables = _cachedVariables;
    this._cachedMembers = _cachedMembers;
    this._cachedDeclarations = _cachedDeclarations;
    this._cachedMetadata = _cachedMetadata;
    this._cachedSuperinterfaces = _cachedSuperinterfaces;
    this._cachedTypeVariables = _cachedTypeVariables;
    this._owner = _owner;
    this.simpleName = simpleName;
  }
  JsClassMirror.builtin$cls = "JsClassMirror";
  if (!"name" in JsClassMirror)
    JsClassMirror.name = "JsClassMirror";
  $desc = $collectedClasses.JsClassMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsClassMirror.prototype = $desc;
  JsClassMirror.prototype.get$_mangledName = function() {
    return this._mangledName;
  };
  JsClassMirror.prototype.get$_mangledName.$reflectable = 1;
  JsClassMirror.prototype.get$_jsConstructorOrInterceptor = function() {
    return this._jsConstructorOrInterceptor;
  };
  JsClassMirror.prototype.get$_jsConstructorOrInterceptor.$reflectable = 1;
  JsClassMirror.prototype.get$_fieldsDescriptor = function() {
    return this._fieldsDescriptor;
  };
  JsClassMirror.prototype.get$_fieldsDescriptor.$reflectable = 1;
  JsClassMirror.prototype.get$_fieldsMetadata = function() {
    return this._fieldsMetadata;
  };
  JsClassMirror.prototype.get$_fieldsMetadata.$reflectable = 1;
  JsClassMirror.prototype.get$_jsConstructorCache = function() {
    return this._jsConstructorCache;
  };
  JsClassMirror.prototype.get$_jsConstructorCache.$reflectable = 1;
  JsClassMirror.prototype.get$_metadata = function() {
    return this._metadata;
  };
  JsClassMirror.prototype.get$_metadata.$reflectable = 1;
  JsClassMirror.prototype.set$_metadata = function(v) {
    return this._metadata = v;
  };
  JsClassMirror.prototype.set$_metadata.$reflectable = 1;
  JsClassMirror.prototype.get$_superclass = function() {
    return this._superclass;
  };
  JsClassMirror.prototype.get$_superclass.$reflectable = 1;
  JsClassMirror.prototype.set$_superclass = function(v) {
    return this._superclass = v;
  };
  JsClassMirror.prototype.set$_superclass.$reflectable = 1;
  JsClassMirror.prototype.get$_cachedMethods = function() {
    return this._cachedMethods;
  };
  JsClassMirror.prototype.get$_cachedMethods.$reflectable = 1;
  JsClassMirror.prototype.set$_cachedMethods = function(v) {
    return this._cachedMethods = v;
  };
  JsClassMirror.prototype.set$_cachedMethods.$reflectable = 1;
  JsClassMirror.prototype.get$_cachedFields = function() {
    return this._cachedFields;
  };
  JsClassMirror.prototype.get$_cachedFields.$reflectable = 1;
  JsClassMirror.prototype.set$_cachedFields = function(v) {
    return this._cachedFields = v;
  };
  JsClassMirror.prototype.set$_cachedFields.$reflectable = 1;
  JsClassMirror.prototype.get$_cachedConstructors = function() {
    return this._cachedConstructors;
  };
  JsClassMirror.prototype.get$_cachedConstructors.$reflectable = 1;
  JsClassMirror.prototype.set$_cachedConstructors = function(v) {
    return this._cachedConstructors = v;
  };
  JsClassMirror.prototype.set$_cachedConstructors.$reflectable = 1;
  JsClassMirror.prototype.get$_cachedMethodsMap = function() {
    return this._cachedMethodsMap;
  };
  JsClassMirror.prototype.get$_cachedMethodsMap.$reflectable = 1;
  JsClassMirror.prototype.set$_cachedMethodsMap = function(v) {
    return this._cachedMethodsMap = v;
  };
  JsClassMirror.prototype.set$_cachedMethodsMap.$reflectable = 1;
  JsClassMirror.prototype.get$_cachedGetters = function() {
    return this._cachedGetters;
  };
  JsClassMirror.prototype.get$_cachedGetters.$reflectable = 1;
  JsClassMirror.prototype.set$_cachedGetters = function(v) {
    return this._cachedGetters = v;
  };
  JsClassMirror.prototype.set$_cachedGetters.$reflectable = 1;
  JsClassMirror.prototype.get$_cachedSetters = function() {
    return this._cachedSetters;
  };
  JsClassMirror.prototype.get$_cachedSetters.$reflectable = 1;
  JsClassMirror.prototype.set$_cachedSetters = function(v) {
    return this._cachedSetters = v;
  };
  JsClassMirror.prototype.set$_cachedSetters.$reflectable = 1;
  JsClassMirror.prototype.get$_cachedVariables = function() {
    return this._cachedVariables;
  };
  JsClassMirror.prototype.get$_cachedVariables.$reflectable = 1;
  JsClassMirror.prototype.set$_cachedVariables = function(v) {
    return this._cachedVariables = v;
  };
  JsClassMirror.prototype.set$_cachedVariables.$reflectable = 1;
  JsClassMirror.prototype.get$_cachedMembers = function() {
    return this._cachedMembers;
  };
  JsClassMirror.prototype.get$_cachedMembers.$reflectable = 1;
  JsClassMirror.prototype.set$_cachedMembers = function(v) {
    return this._cachedMembers = v;
  };
  JsClassMirror.prototype.set$_cachedMembers.$reflectable = 1;
  JsClassMirror.prototype.get$_cachedDeclarations = function() {
    return this._cachedDeclarations;
  };
  JsClassMirror.prototype.get$_cachedDeclarations.$reflectable = 1;
  JsClassMirror.prototype.set$_cachedDeclarations = function(v) {
    return this._cachedDeclarations = v;
  };
  JsClassMirror.prototype.set$_cachedDeclarations.$reflectable = 1;
  JsClassMirror.prototype.get$_cachedMetadata = function() {
    return this._cachedMetadata;
  };
  JsClassMirror.prototype.get$_cachedMetadata.$reflectable = 1;
  JsClassMirror.prototype.set$_cachedMetadata = function(v) {
    return this._cachedMetadata = v;
  };
  JsClassMirror.prototype.set$_cachedMetadata.$reflectable = 1;
  JsClassMirror.prototype.get$_cachedSuperinterfaces = function() {
    return this._cachedSuperinterfaces;
  };
  JsClassMirror.prototype.get$_cachedSuperinterfaces.$reflectable = 1;
  JsClassMirror.prototype.set$_cachedSuperinterfaces = function(v) {
    return this._cachedSuperinterfaces = v;
  };
  JsClassMirror.prototype.set$_cachedSuperinterfaces.$reflectable = 1;
  JsClassMirror.prototype.get$_cachedTypeVariables = function() {
    return this._cachedTypeVariables;
  };
  JsClassMirror.prototype.get$_cachedTypeVariables.$reflectable = 1;
  JsClassMirror.prototype.set$_cachedTypeVariables = function(v) {
    return this._cachedTypeVariables = v;
  };
  JsClassMirror.prototype.set$_cachedTypeVariables.$reflectable = 1;
  JsClassMirror.prototype.get$_owner = function() {
    return this._owner;
  };
  JsClassMirror.prototype.get$_owner.$reflectable = 1;
  JsClassMirror.prototype.set$_owner = function(v) {
    return this._owner = v;
  };
  JsClassMirror.prototype.set$_owner.$reflectable = 1;
  function JsTypeMirror_JsObjectMirror0() {
  }
  JsTypeMirror_JsObjectMirror0.builtin$cls = "JsTypeMirror_JsObjectMirror0";
  if (!"name" in JsTypeMirror_JsObjectMirror0)
    JsTypeMirror_JsObjectMirror0.name = "JsTypeMirror_JsObjectMirror0";
  $desc = $collectedClasses.JsTypeMirror_JsObjectMirror0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeMirror_JsObjectMirror0.prototype = $desc;
  function JsClassMirror_declarations_addToResult(result_0) {
    this.result_0 = result_0;
  }
  JsClassMirror_declarations_addToResult.builtin$cls = "JsClassMirror_declarations_addToResult";
  if (!"name" in JsClassMirror_declarations_addToResult)
    JsClassMirror_declarations_addToResult.name = "JsClassMirror_declarations_addToResult";
  $desc = $collectedClasses.JsClassMirror_declarations_addToResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsClassMirror_declarations_addToResult.prototype = $desc;
  function JsClassMirror_declarations_closure(result_1) {
    this.result_1 = result_1;
  }
  JsClassMirror_declarations_closure.builtin$cls = "JsClassMirror_declarations_closure";
  if (!"name" in JsClassMirror_declarations_closure)
    JsClassMirror_declarations_closure.name = "JsClassMirror_declarations_closure";
  $desc = $collectedClasses.JsClassMirror_declarations_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsClassMirror_declarations_closure.prototype = $desc;
  function JsClassMirror__getSuperinterfacesWithOwner_lookupType(owner_0) {
    this.owner_0 = owner_0;
  }
  JsClassMirror__getSuperinterfacesWithOwner_lookupType.builtin$cls = "JsClassMirror__getSuperinterfacesWithOwner_lookupType";
  if (!"name" in JsClassMirror__getSuperinterfacesWithOwner_lookupType)
    JsClassMirror__getSuperinterfacesWithOwner_lookupType.name = "JsClassMirror__getSuperinterfacesWithOwner_lookupType";
  $desc = $collectedClasses.JsClassMirror__getSuperinterfacesWithOwner_lookupType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsClassMirror__getSuperinterfacesWithOwner_lookupType.prototype = $desc;
  function JsVariableMirror(_jsName, isFinal, isStatic, _metadataFunction, _owner, _metadata, simpleName) {
    this._jsName = _jsName;
    this.isFinal = isFinal;
    this.isStatic = isStatic;
    this._metadataFunction = _metadataFunction;
    this._owner = _owner;
    this._metadata = _metadata;
    this.simpleName = simpleName;
  }
  JsVariableMirror.builtin$cls = "JsVariableMirror";
  if (!"name" in JsVariableMirror)
    JsVariableMirror.name = "JsVariableMirror";
  $desc = $collectedClasses.JsVariableMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsVariableMirror.prototype = $desc;
  JsVariableMirror.prototype.get$_jsName = function() {
    return this._jsName;
  };
  JsVariableMirror.prototype.get$isFinal = function(receiver) {
    return this.isFinal;
  };
  JsVariableMirror.prototype.get$isStatic = function() {
    return this.isStatic;
  };
  function JsClosureMirror(reflectee) {
    this.reflectee = reflectee;
  }
  JsClosureMirror.builtin$cls = "JsClosureMirror";
  if (!"name" in JsClosureMirror)
    JsClosureMirror.name = "JsClosureMirror";
  $desc = $collectedClasses.JsClosureMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsClosureMirror.prototype = $desc;
  function JsMethodMirror(_jsFunction, _parameterCount, isGetter, isSetter, isStatic, isConstructor, isOperator, _owner, _metadata, _returnType, _parameters, simpleName) {
    this._jsFunction = _jsFunction;
    this._parameterCount = _parameterCount;
    this.isGetter = isGetter;
    this.isSetter = isSetter;
    this.isStatic = isStatic;
    this.isConstructor = isConstructor;
    this.isOperator = isOperator;
    this._owner = _owner;
    this._metadata = _metadata;
    this._returnType = _returnType;
    this._parameters = _parameters;
    this.simpleName = simpleName;
  }
  JsMethodMirror.builtin$cls = "JsMethodMirror";
  if (!"name" in JsMethodMirror)
    JsMethodMirror.name = "JsMethodMirror";
  $desc = $collectedClasses.JsMethodMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsMethodMirror.prototype = $desc;
  JsMethodMirror.prototype.get$isGetter = function() {
    return this.isGetter;
  };
  JsMethodMirror.prototype.get$isSetter = function() {
    return this.isSetter;
  };
  JsMethodMirror.prototype.get$isStatic = function() {
    return this.isStatic;
  };
  JsMethodMirror.prototype.get$isConstructor = function(receiver) {
    return this.isConstructor;
  };
  JsMethodMirror.prototype.get$isOperator = function() {
    return this.isOperator;
  };
  function JsParameterMirror(owner, __js_mirrors$_type, simpleName) {
    this.owner = owner;
    this.__js_mirrors$_type = __js_mirrors$_type;
    this.simpleName = simpleName;
  }
  JsParameterMirror.builtin$cls = "JsParameterMirror";
  if (!"name" in JsParameterMirror)
    JsParameterMirror.name = "JsParameterMirror";
  $desc = $collectedClasses.JsParameterMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsParameterMirror.prototype = $desc;
  JsParameterMirror.prototype.get$owner = function() {
    return this.owner;
  };
  function JsTypedefMirror(_mangledName, referent, simpleName) {
    this._mangledName = _mangledName;
    this.referent = referent;
    this.simpleName = simpleName;
  }
  JsTypedefMirror.builtin$cls = "JsTypedefMirror";
  if (!"name" in JsTypedefMirror)
    JsTypedefMirror.name = "JsTypedefMirror";
  $desc = $collectedClasses.JsTypedefMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypedefMirror.prototype = $desc;
  JsTypedefMirror.prototype.get$_mangledName = function() {
    return this._mangledName;
  };
  function JsFunctionTypeMirror(_typeData, _cachedToString, _cachedReturnType, _cachedParameters, owner) {
    this._typeData = _typeData;
    this._cachedToString = _cachedToString;
    this._cachedReturnType = _cachedReturnType;
    this._cachedParameters = _cachedParameters;
    this.owner = owner;
  }
  JsFunctionTypeMirror.builtin$cls = "JsFunctionTypeMirror";
  if (!"name" in JsFunctionTypeMirror)
    JsFunctionTypeMirror.name = "JsFunctionTypeMirror";
  $desc = $collectedClasses.JsFunctionTypeMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsFunctionTypeMirror.prototype = $desc;
  JsFunctionTypeMirror.prototype.get$owner = function() {
    return this.owner;
  };
  JsFunctionTypeMirror.prototype.set$owner = function(v) {
    return this.owner = v;
  };
  function typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable(box_0) {
    this.box_0 = box_0;
  }
  typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable.builtin$cls = "typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable";
  if (!"name" in typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable)
    typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable.name = "typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable";
  $desc = $collectedClasses.typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable.prototype = $desc;
  function extractMetadata_closure() {
  }
  extractMetadata_closure.builtin$cls = "extractMetadata_closure";
  if (!"name" in extractMetadata_closure)
    extractMetadata_closure.name = "extractMetadata_closure";
  $desc = $collectedClasses.extractMetadata_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  extractMetadata_closure.prototype = $desc;
  function UnmodifiableMapView(__js_mirrors$_source) {
    this.__js_mirrors$_source = __js_mirrors$_source;
  }
  UnmodifiableMapView.builtin$cls = "UnmodifiableMapView";
  if (!"name" in UnmodifiableMapView)
    UnmodifiableMapView.name = "UnmodifiableMapView";
  $desc = $collectedClasses.UnmodifiableMapView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableMapView.prototype = $desc;
  function UnimplementedNoSuchMethodError(__js_mirrors$_message) {
    this.__js_mirrors$_message = __js_mirrors$_message;
  }
  UnimplementedNoSuchMethodError.builtin$cls = "UnimplementedNoSuchMethodError";
  if (!"name" in UnimplementedNoSuchMethodError)
    UnimplementedNoSuchMethodError.name = "UnimplementedNoSuchMethodError";
  $desc = $collectedClasses.UnimplementedNoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnimplementedNoSuchMethodError.prototype = $desc;
  function computeReflectiveNames_closure(result_0) {
    this.result_0 = result_0;
  }
  computeReflectiveNames_closure.builtin$cls = "computeReflectiveNames_closure";
  if (!"name" in computeReflectiveNames_closure)
    computeReflectiveNames_closure.name = "computeReflectiveNames_closure";
  $desc = $collectedClasses.computeReflectiveNames_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  computeReflectiveNames_closure.prototype = $desc;
  function _AsyncError(error, stackTrace) {
    this.error = error;
    this.stackTrace = stackTrace;
  }
  _AsyncError.builtin$cls = "_AsyncError";
  if (!"name" in _AsyncError)
    _AsyncError.name = "_AsyncError";
  $desc = $collectedClasses._AsyncError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncError.prototype = $desc;
  _AsyncError.prototype.get$error = function(receiver) {
    return this.error;
  };
  _AsyncError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function _BroadcastStream(_controller) {
    this._controller = _controller;
  }
  _BroadcastStream.builtin$cls = "_BroadcastStream";
  if (!"name" in _BroadcastStream)
    _BroadcastStream.name = "_BroadcastStream";
  $desc = $collectedClasses._BroadcastStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastStream.prototype = $desc;
  function _BroadcastSubscription(_eventState, _async$_next, _async$_previous, _controller, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._eventState = _eventState;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._controller = _controller;
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _BroadcastSubscription.builtin$cls = "_BroadcastSubscription";
  if (!"name" in _BroadcastSubscription)
    _BroadcastSubscription.name = "_BroadcastSubscription";
  $desc = $collectedClasses._BroadcastSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastSubscription.prototype = $desc;
  _BroadcastSubscription.prototype.get$_eventState = function() {
    return this._eventState;
  };
  _BroadcastSubscription.prototype.set$_eventState = function(v) {
    return this._eventState = v;
  };
  _BroadcastSubscription.prototype.get$_async$_next = function() {
    return this._async$_next;
  };
  _BroadcastSubscription.prototype.set$_async$_next = function(v) {
    return this._async$_next = v;
  };
  _BroadcastSubscription.prototype.get$_async$_previous = function() {
    return this._async$_previous;
  };
  _BroadcastSubscription.prototype.set$_async$_previous = function(v) {
    return this._async$_previous = v;
  };
  function BoundClosure$0(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$0.builtin$cls = "BoundClosure$0";
  $desc = $collectedClasses.BoundClosure$0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$0.prototype = $desc;
  function _BroadcastStreamController(_onListen, _onCancel, _async$_next, _async$_previous) {
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
  }
  _BroadcastStreamController.builtin$cls = "_BroadcastStreamController";
  if (!"name" in _BroadcastStreamController)
    _BroadcastStreamController.name = "_BroadcastStreamController";
  $desc = $collectedClasses._BroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastStreamController.prototype = $desc;
  _BroadcastStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _BroadcastStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  _BroadcastStreamController.prototype.get$_async$_next = function() {
    return this._async$_next;
  };
  _BroadcastStreamController.prototype.set$_async$_next = function(v) {
    return this._async$_next = v;
  };
  _BroadcastStreamController.prototype.get$_async$_previous = function() {
    return this._async$_previous;
  };
  _BroadcastStreamController.prototype.set$_async$_previous = function(v) {
    return this._async$_previous = v;
  };
  function BoundClosure$2(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$2.builtin$cls = "BoundClosure$2";
  $desc = $collectedClasses.BoundClosure$2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$2.prototype = $desc;
  function _SyncBroadcastStreamController(_onListen, _onCancel, _state, _async$_next, _async$_previous, _addStreamState, _doneFuture) {
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._state = _state;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._addStreamState = _addStreamState;
    this._doneFuture = _doneFuture;
  }
  _SyncBroadcastStreamController.builtin$cls = "_SyncBroadcastStreamController";
  if (!"name" in _SyncBroadcastStreamController)
    _SyncBroadcastStreamController.name = "_SyncBroadcastStreamController";
  $desc = $collectedClasses._SyncBroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController.prototype = $desc;
  function _SyncBroadcastStreamController__sendData_closure(this_0, data_1) {
    this.this_0 = this_0;
    this.data_1 = data_1;
  }
  _SyncBroadcastStreamController__sendData_closure.builtin$cls = "_SyncBroadcastStreamController__sendData_closure";
  if (!"name" in _SyncBroadcastStreamController__sendData_closure)
    _SyncBroadcastStreamController__sendData_closure.name = "_SyncBroadcastStreamController__sendData_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendData_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendData_closure.prototype = $desc;
  function _SyncBroadcastStreamController__sendError_closure(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _SyncBroadcastStreamController__sendError_closure.builtin$cls = "_SyncBroadcastStreamController__sendError_closure";
  if (!"name" in _SyncBroadcastStreamController__sendError_closure)
    _SyncBroadcastStreamController__sendError_closure.name = "_SyncBroadcastStreamController__sendError_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendError_closure.prototype = $desc;
  function _SyncBroadcastStreamController__sendDone_closure(this_0) {
    this.this_0 = this_0;
  }
  _SyncBroadcastStreamController__sendDone_closure.builtin$cls = "_SyncBroadcastStreamController__sendDone_closure";
  if (!"name" in _SyncBroadcastStreamController__sendDone_closure)
    _SyncBroadcastStreamController__sendDone_closure.name = "_SyncBroadcastStreamController__sendDone_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendDone_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendDone_closure.prototype = $desc;
  function _AsyncBroadcastStreamController(_onListen, _onCancel, _state, _async$_next, _async$_previous, _addStreamState, _doneFuture) {
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._state = _state;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._addStreamState = _addStreamState;
    this._doneFuture = _doneFuture;
  }
  _AsyncBroadcastStreamController.builtin$cls = "_AsyncBroadcastStreamController";
  if (!"name" in _AsyncBroadcastStreamController)
    _AsyncBroadcastStreamController.name = "_AsyncBroadcastStreamController";
  $desc = $collectedClasses._AsyncBroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncBroadcastStreamController.prototype = $desc;
  function Future() {
  }
  Future.builtin$cls = "Future";
  if (!"name" in Future)
    Future.name = "Future";
  $desc = $collectedClasses.Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future.prototype = $desc;
  function Future_wait_handleError(box_0) {
    this.box_0 = box_0;
  }
  Future_wait_handleError.builtin$cls = "Future_wait_handleError";
  if (!"name" in Future_wait_handleError)
    Future_wait_handleError.name = "Future_wait_handleError";
  $desc = $collectedClasses.Future_wait_handleError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_wait_handleError.prototype = $desc;
  function Future_wait_closure(box_0, pos_1) {
    this.box_0 = box_0;
    this.pos_1 = pos_1;
  }
  Future_wait_closure.builtin$cls = "Future_wait_closure";
  if (!"name" in Future_wait_closure)
    Future_wait_closure.name = "Future_wait_closure";
  $desc = $collectedClasses.Future_wait_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_wait_closure.prototype = $desc;
  function _Completer() {
  }
  _Completer.builtin$cls = "_Completer";
  if (!"name" in _Completer)
    _Completer.name = "_Completer";
  $desc = $collectedClasses._Completer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Completer.prototype = $desc;
  function _AsyncCompleter(future) {
    this.future = future;
  }
  _AsyncCompleter.builtin$cls = "_AsyncCompleter";
  if (!"name" in _AsyncCompleter)
    _AsyncCompleter.name = "_AsyncCompleter";
  $desc = $collectedClasses._AsyncCompleter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncCompleter.prototype = $desc;
  function _Future(_state, _zone, _resultOrListeners, _nextListener, _onValueCallback, _errorTestCallback, _onErrorCallback, _whenCompleteActionCallback) {
    this._state = _state;
    this._zone = _zone;
    this._resultOrListeners = _resultOrListeners;
    this._nextListener = _nextListener;
    this._onValueCallback = _onValueCallback;
    this._errorTestCallback = _errorTestCallback;
    this._onErrorCallback = _onErrorCallback;
    this._whenCompleteActionCallback = _whenCompleteActionCallback;
  }
  _Future.builtin$cls = "_Future";
  if (!"name" in _Future)
    _Future.name = "_Future";
  $desc = $collectedClasses._Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future.prototype = $desc;
  _Future.prototype.get$_zone = function() {
    return this._zone;
  };
  _Future.prototype.get$_nextListener = function() {
    return this._nextListener;
  };
  _Future.prototype.set$_nextListener = function(v) {
    return this._nextListener = v;
  };
  function _Future__addListener_closure(this_0, listener_1) {
    this.this_0 = this_0;
    this.listener_1 = listener_1;
  }
  _Future__addListener_closure.builtin$cls = "_Future__addListener_closure";
  if (!"name" in _Future__addListener_closure)
    _Future__addListener_closure.name = "_Future__addListener_closure";
  $desc = $collectedClasses._Future__addListener_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__addListener_closure.prototype = $desc;
  function _Future__chainFutures_closure(target_0) {
    this.target_0 = target_0;
  }
  _Future__chainFutures_closure.builtin$cls = "_Future__chainFutures_closure";
  if (!"name" in _Future__chainFutures_closure)
    _Future__chainFutures_closure.name = "_Future__chainFutures_closure";
  $desc = $collectedClasses._Future__chainFutures_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainFutures_closure.prototype = $desc;
  function _Future__chainFutures_closure0(target_1) {
    this.target_1 = target_1;
  }
  _Future__chainFutures_closure0.builtin$cls = "_Future__chainFutures_closure0";
  if (!"name" in _Future__chainFutures_closure0)
    _Future__chainFutures_closure0.name = "_Future__chainFutures_closure0";
  $desc = $collectedClasses._Future__chainFutures_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainFutures_closure0.prototype = $desc;
  function _Future__asyncComplete_closure(this_0, value_1) {
    this.this_0 = this_0;
    this.value_1 = value_1;
  }
  _Future__asyncComplete_closure.builtin$cls = "_Future__asyncComplete_closure";
  if (!"name" in _Future__asyncComplete_closure)
    _Future__asyncComplete_closure.name = "_Future__asyncComplete_closure";
  $desc = $collectedClasses._Future__asyncComplete_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncComplete_closure.prototype = $desc;
  function _Future__asyncCompleteError_closure(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _Future__asyncCompleteError_closure.builtin$cls = "_Future__asyncCompleteError_closure";
  if (!"name" in _Future__asyncCompleteError_closure)
    _Future__asyncCompleteError_closure.name = "_Future__asyncCompleteError_closure";
  $desc = $collectedClasses._Future__asyncCompleteError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncCompleteError_closure.prototype = $desc;
  function _Future__propagateToListeners_closure(box_2, listener_3) {
    this.box_2 = box_2;
    this.listener_3 = listener_3;
  }
  _Future__propagateToListeners_closure.builtin$cls = "_Future__propagateToListeners_closure";
  if (!"name" in _Future__propagateToListeners_closure)
    _Future__propagateToListeners_closure.name = "_Future__propagateToListeners_closure";
  $desc = $collectedClasses._Future__propagateToListeners_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_closure.prototype = $desc;
  function _Future__propagateToListeners_closure0(box_2, box_1, hasError_4, listener_5) {
    this.box_2 = box_2;
    this.box_1 = box_1;
    this.hasError_4 = hasError_4;
    this.listener_5 = listener_5;
  }
  _Future__propagateToListeners_closure0.builtin$cls = "_Future__propagateToListeners_closure0";
  if (!"name" in _Future__propagateToListeners_closure0)
    _Future__propagateToListeners_closure0.name = "_Future__propagateToListeners_closure0";
  $desc = $collectedClasses._Future__propagateToListeners_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_closure0.prototype = $desc;
  function _Future__propagateToListeners__closure(box_2, listener_6) {
    this.box_2 = box_2;
    this.listener_6 = listener_6;
  }
  _Future__propagateToListeners__closure.builtin$cls = "_Future__propagateToListeners__closure";
  if (!"name" in _Future__propagateToListeners__closure)
    _Future__propagateToListeners__closure.name = "_Future__propagateToListeners__closure";
  $desc = $collectedClasses._Future__propagateToListeners__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners__closure.prototype = $desc;
  function _Future__propagateToListeners__closure0(box_0, listener_7) {
    this.box_0 = box_0;
    this.listener_7 = listener_7;
  }
  _Future__propagateToListeners__closure0.builtin$cls = "_Future__propagateToListeners__closure0";
  if (!"name" in _Future__propagateToListeners__closure0)
    _Future__propagateToListeners__closure0.name = "_Future__propagateToListeners__closure0";
  $desc = $collectedClasses._Future__propagateToListeners__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners__closure0.prototype = $desc;
  function Stream() {
  }
  Stream.builtin$cls = "Stream";
  if (!"name" in Stream)
    Stream.name = "Stream";
  $desc = $collectedClasses.Stream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream.prototype = $desc;
  function Stream_join_closure(box_0, this_1, separator_2, result_3, buffer_4) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.separator_2 = separator_2;
    this.result_3 = result_3;
    this.buffer_4 = buffer_4;
  }
  Stream_join_closure.builtin$cls = "Stream_join_closure";
  if (!"name" in Stream_join_closure)
    Stream_join_closure.name = "Stream_join_closure";
  $desc = $collectedClasses.Stream_join_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_join_closure.prototype = $desc;
  function Stream_join_closure1(result_5) {
    this.result_5 = result_5;
  }
  Stream_join_closure1.builtin$cls = "Stream_join_closure1";
  if (!"name" in Stream_join_closure1)
    Stream_join_closure1.name = "Stream_join_closure1";
  $desc = $collectedClasses.Stream_join_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_join_closure1.prototype = $desc;
  function Stream_join_closure0(result_6, buffer_7) {
    this.result_6 = result_6;
    this.buffer_7 = buffer_7;
  }
  Stream_join_closure0.builtin$cls = "Stream_join_closure0";
  if (!"name" in Stream_join_closure0)
    Stream_join_closure0.name = "Stream_join_closure0";
  $desc = $collectedClasses.Stream_join_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_join_closure0.prototype = $desc;
  function Stream_contains_closure(box_0, this_1, needle_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.needle_2 = needle_2;
    this.future_3 = future_3;
  }
  Stream_contains_closure.builtin$cls = "Stream_contains_closure";
  if (!"name" in Stream_contains_closure)
    Stream_contains_closure.name = "Stream_contains_closure";
  $desc = $collectedClasses.Stream_contains_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains_closure.prototype = $desc;
  function Stream_contains__closure(needle_4, element_5) {
    this.needle_4 = needle_4;
    this.element_5 = element_5;
  }
  Stream_contains__closure.builtin$cls = "Stream_contains__closure";
  if (!"name" in Stream_contains__closure)
    Stream_contains__closure.name = "Stream_contains__closure";
  $desc = $collectedClasses.Stream_contains__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains__closure.prototype = $desc;
  function Stream_contains__closure0(box_0, future_6) {
    this.box_0 = box_0;
    this.future_6 = future_6;
  }
  Stream_contains__closure0.builtin$cls = "Stream_contains__closure0";
  if (!"name" in Stream_contains__closure0)
    Stream_contains__closure0.name = "Stream_contains__closure0";
  $desc = $collectedClasses.Stream_contains__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains__closure0.prototype = $desc;
  function Stream_contains_closure0(future_7) {
    this.future_7 = future_7;
  }
  Stream_contains_closure0.builtin$cls = "Stream_contains_closure0";
  if (!"name" in Stream_contains_closure0)
    Stream_contains_closure0.name = "Stream_contains_closure0";
  $desc = $collectedClasses.Stream_contains_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains_closure0.prototype = $desc;
  function Stream_forEach_closure(box_0, this_1, action_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.action_2 = action_2;
    this.future_3 = future_3;
  }
  Stream_forEach_closure.builtin$cls = "Stream_forEach_closure";
  if (!"name" in Stream_forEach_closure)
    Stream_forEach_closure.name = "Stream_forEach_closure";
  $desc = $collectedClasses.Stream_forEach_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure.prototype = $desc;
  function Stream_forEach__closure(action_4, element_5) {
    this.action_4 = action_4;
    this.element_5 = element_5;
  }
  Stream_forEach__closure.builtin$cls = "Stream_forEach__closure";
  if (!"name" in Stream_forEach__closure)
    Stream_forEach__closure.name = "Stream_forEach__closure";
  $desc = $collectedClasses.Stream_forEach__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure.prototype = $desc;
  function Stream_forEach__closure0() {
  }
  Stream_forEach__closure0.builtin$cls = "Stream_forEach__closure0";
  if (!"name" in Stream_forEach__closure0)
    Stream_forEach__closure0.name = "Stream_forEach__closure0";
  $desc = $collectedClasses.Stream_forEach__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure0.prototype = $desc;
  function Stream_forEach_closure0(future_6) {
    this.future_6 = future_6;
  }
  Stream_forEach_closure0.builtin$cls = "Stream_forEach_closure0";
  if (!"name" in Stream_forEach_closure0)
    Stream_forEach_closure0.name = "Stream_forEach_closure0";
  $desc = $collectedClasses.Stream_forEach_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure0.prototype = $desc;
  function Stream_any_closure(box_0, this_1, test_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.test_2 = test_2;
    this.future_3 = future_3;
  }
  Stream_any_closure.builtin$cls = "Stream_any_closure";
  if (!"name" in Stream_any_closure)
    Stream_any_closure.name = "Stream_any_closure";
  $desc = $collectedClasses.Stream_any_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_any_closure.prototype = $desc;
  function Stream_any__closure(test_4, element_5) {
    this.test_4 = test_4;
    this.element_5 = element_5;
  }
  Stream_any__closure.builtin$cls = "Stream_any__closure";
  if (!"name" in Stream_any__closure)
    Stream_any__closure.name = "Stream_any__closure";
  $desc = $collectedClasses.Stream_any__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_any__closure.prototype = $desc;
  function Stream_any__closure0(box_0, future_6) {
    this.box_0 = box_0;
    this.future_6 = future_6;
  }
  Stream_any__closure0.builtin$cls = "Stream_any__closure0";
  if (!"name" in Stream_any__closure0)
    Stream_any__closure0.name = "Stream_any__closure0";
  $desc = $collectedClasses.Stream_any__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_any__closure0.prototype = $desc;
  function Stream_any_closure0(future_7) {
    this.future_7 = future_7;
  }
  Stream_any_closure0.builtin$cls = "Stream_any_closure0";
  if (!"name" in Stream_any_closure0)
    Stream_any_closure0.name = "Stream_any_closure0";
  $desc = $collectedClasses.Stream_any_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_any_closure0.prototype = $desc;
  function Stream_length_closure(box_0) {
    this.box_0 = box_0;
  }
  Stream_length_closure.builtin$cls = "Stream_length_closure";
  if (!"name" in Stream_length_closure)
    Stream_length_closure.name = "Stream_length_closure";
  $desc = $collectedClasses.Stream_length_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure.prototype = $desc;
  function Stream_length_closure0(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_length_closure0.builtin$cls = "Stream_length_closure0";
  if (!"name" in Stream_length_closure0)
    Stream_length_closure0.name = "Stream_length_closure0";
  $desc = $collectedClasses.Stream_length_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure0.prototype = $desc;
  function Stream_isEmpty_closure(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_isEmpty_closure.builtin$cls = "Stream_isEmpty_closure";
  if (!"name" in Stream_isEmpty_closure)
    Stream_isEmpty_closure.name = "Stream_isEmpty_closure";
  $desc = $collectedClasses.Stream_isEmpty_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_isEmpty_closure.prototype = $desc;
  function Stream_isEmpty_closure0(future_2) {
    this.future_2 = future_2;
  }
  Stream_isEmpty_closure0.builtin$cls = "Stream_isEmpty_closure0";
  if (!"name" in Stream_isEmpty_closure0)
    Stream_isEmpty_closure0.name = "Stream_isEmpty_closure0";
  $desc = $collectedClasses.Stream_isEmpty_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_isEmpty_closure0.prototype = $desc;
  function Stream_toList_closure(this_0, result_1) {
    this.this_0 = this_0;
    this.result_1 = result_1;
  }
  Stream_toList_closure.builtin$cls = "Stream_toList_closure";
  if (!"name" in Stream_toList_closure)
    Stream_toList_closure.name = "Stream_toList_closure";
  $desc = $collectedClasses.Stream_toList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_toList_closure.prototype = $desc;
  function Stream_toList_closure0(result_2, future_3) {
    this.result_2 = result_2;
    this.future_3 = future_3;
  }
  Stream_toList_closure0.builtin$cls = "Stream_toList_closure0";
  if (!"name" in Stream_toList_closure0)
    Stream_toList_closure0.name = "Stream_toList_closure0";
  $desc = $collectedClasses.Stream_toList_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_toList_closure0.prototype = $desc;
  function Stream_first_closure(box_0, this_1, future_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.future_2 = future_2;
  }
  Stream_first_closure.builtin$cls = "Stream_first_closure";
  if (!"name" in Stream_first_closure)
    Stream_first_closure.name = "Stream_first_closure";
  $desc = $collectedClasses.Stream_first_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_first_closure.prototype = $desc;
  function Stream_first_closure0(future_3) {
    this.future_3 = future_3;
  }
  Stream_first_closure0.builtin$cls = "Stream_first_closure0";
  if (!"name" in Stream_first_closure0)
    Stream_first_closure0.name = "Stream_first_closure0";
  $desc = $collectedClasses.Stream_first_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_first_closure0.prototype = $desc;
  function Stream_last_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  Stream_last_closure.builtin$cls = "Stream_last_closure";
  if (!"name" in Stream_last_closure)
    Stream_last_closure.name = "Stream_last_closure";
  $desc = $collectedClasses.Stream_last_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_last_closure.prototype = $desc;
  function Stream_last_closure0(box_0, future_2) {
    this.box_0 = box_0;
    this.future_2 = future_2;
  }
  Stream_last_closure0.builtin$cls = "Stream_last_closure0";
  if (!"name" in Stream_last_closure0)
    Stream_last_closure0.name = "Stream_last_closure0";
  $desc = $collectedClasses.Stream_last_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_last_closure0.prototype = $desc;
  function Stream_firstWhere_closure(box_0, this_1, test_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.test_2 = test_2;
    this.future_3 = future_3;
  }
  Stream_firstWhere_closure.builtin$cls = "Stream_firstWhere_closure";
  if (!"name" in Stream_firstWhere_closure)
    Stream_firstWhere_closure.name = "Stream_firstWhere_closure";
  $desc = $collectedClasses.Stream_firstWhere_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_firstWhere_closure.prototype = $desc;
  function Stream_firstWhere__closure(test_4, value_5) {
    this.test_4 = test_4;
    this.value_5 = value_5;
  }
  Stream_firstWhere__closure.builtin$cls = "Stream_firstWhere__closure";
  if (!"name" in Stream_firstWhere__closure)
    Stream_firstWhere__closure.name = "Stream_firstWhere__closure";
  $desc = $collectedClasses.Stream_firstWhere__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_firstWhere__closure.prototype = $desc;
  function Stream_firstWhere__closure0(box_0, future_6, value_7) {
    this.box_0 = box_0;
    this.future_6 = future_6;
    this.value_7 = value_7;
  }
  Stream_firstWhere__closure0.builtin$cls = "Stream_firstWhere__closure0";
  if (!"name" in Stream_firstWhere__closure0)
    Stream_firstWhere__closure0.name = "Stream_firstWhere__closure0";
  $desc = $collectedClasses.Stream_firstWhere__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_firstWhere__closure0.prototype = $desc;
  function Stream_firstWhere_closure0(defaultValue_8, future_9) {
    this.defaultValue_8 = defaultValue_8;
    this.future_9 = future_9;
  }
  Stream_firstWhere_closure0.builtin$cls = "Stream_firstWhere_closure0";
  if (!"name" in Stream_firstWhere_closure0)
    Stream_firstWhere_closure0.name = "Stream_firstWhere_closure0";
  $desc = $collectedClasses.Stream_firstWhere_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_firstWhere_closure0.prototype = $desc;
  function Stream_elementAt_closure(box_0, this_1, future_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.future_2 = future_2;
  }
  Stream_elementAt_closure.builtin$cls = "Stream_elementAt_closure";
  if (!"name" in Stream_elementAt_closure)
    Stream_elementAt_closure.name = "Stream_elementAt_closure";
  $desc = $collectedClasses.Stream_elementAt_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_elementAt_closure.prototype = $desc;
  function Stream_elementAt_closure0(box_0, future_3) {
    this.box_0 = box_0;
    this.future_3 = future_3;
  }
  Stream_elementAt_closure0.builtin$cls = "Stream_elementAt_closure0";
  if (!"name" in Stream_elementAt_closure0)
    Stream_elementAt_closure0.name = "Stream_elementAt_closure0";
  $desc = $collectedClasses.Stream_elementAt_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_elementAt_closure0.prototype = $desc;
  function StreamSubscription() {
  }
  StreamSubscription.builtin$cls = "StreamSubscription";
  if (!"name" in StreamSubscription)
    StreamSubscription.name = "StreamSubscription";
  $desc = $collectedClasses.StreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamSubscription.prototype = $desc;
  function _StreamController() {
  }
  _StreamController.builtin$cls = "_StreamController";
  if (!"name" in _StreamController)
    _StreamController.name = "_StreamController";
  $desc = $collectedClasses._StreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController.prototype = $desc;
  function _StreamController__subscribe_closure(this_0) {
    this.this_0 = this_0;
  }
  _StreamController__subscribe_closure.builtin$cls = "_StreamController__subscribe_closure";
  if (!"name" in _StreamController__subscribe_closure)
    _StreamController__subscribe_closure.name = "_StreamController__subscribe_closure";
  $desc = $collectedClasses._StreamController__subscribe_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__subscribe_closure.prototype = $desc;
  function _StreamController__recordCancel_complete(this_0) {
    this.this_0 = this_0;
  }
  _StreamController__recordCancel_complete.builtin$cls = "_StreamController__recordCancel_complete";
  if (!"name" in _StreamController__recordCancel_complete)
    _StreamController__recordCancel_complete.name = "_StreamController__recordCancel_complete";
  $desc = $collectedClasses._StreamController__recordCancel_complete;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__recordCancel_complete.prototype = $desc;
  function _SyncStreamControllerDispatch() {
  }
  _SyncStreamControllerDispatch.builtin$cls = "_SyncStreamControllerDispatch";
  if (!"name" in _SyncStreamControllerDispatch)
    _SyncStreamControllerDispatch.name = "_SyncStreamControllerDispatch";
  $desc = $collectedClasses._SyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncStreamControllerDispatch.prototype = $desc;
  function _AsyncStreamControllerDispatch() {
  }
  _AsyncStreamControllerDispatch.builtin$cls = "_AsyncStreamControllerDispatch";
  if (!"name" in _AsyncStreamControllerDispatch)
    _AsyncStreamControllerDispatch.name = "_AsyncStreamControllerDispatch";
  $desc = $collectedClasses._AsyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncStreamControllerDispatch.prototype = $desc;
  function _AsyncStreamController(_onListen, _onPause, _onResume, _onCancel, _varData, _state, _doneFuture) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _AsyncStreamController.builtin$cls = "_AsyncStreamController";
  if (!"name" in _AsyncStreamController)
    _AsyncStreamController.name = "_AsyncStreamController";
  $desc = $collectedClasses._AsyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncStreamController.prototype = $desc;
  _AsyncStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _AsyncStreamController.prototype.get$_onPause = function() {
    return this._onPause;
  };
  _AsyncStreamController.prototype.get$_onResume = function() {
    return this._onResume;
  };
  _AsyncStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  function _StreamController__AsyncStreamControllerDispatch() {
  }
  _StreamController__AsyncStreamControllerDispatch.builtin$cls = "_StreamController__AsyncStreamControllerDispatch";
  if (!"name" in _StreamController__AsyncStreamControllerDispatch)
    _StreamController__AsyncStreamControllerDispatch.name = "_StreamController__AsyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__AsyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__AsyncStreamControllerDispatch.prototype = $desc;
  function _SyncStreamController(_onListen, _onPause, _onResume, _onCancel, _varData, _state, _doneFuture) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _SyncStreamController.builtin$cls = "_SyncStreamController";
  if (!"name" in _SyncStreamController)
    _SyncStreamController.name = "_SyncStreamController";
  $desc = $collectedClasses._SyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncStreamController.prototype = $desc;
  _SyncStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _SyncStreamController.prototype.get$_onPause = function() {
    return this._onPause;
  };
  _SyncStreamController.prototype.get$_onResume = function() {
    return this._onResume;
  };
  _SyncStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  function _StreamController__SyncStreamControllerDispatch() {
  }
  _StreamController__SyncStreamControllerDispatch.builtin$cls = "_StreamController__SyncStreamControllerDispatch";
  if (!"name" in _StreamController__SyncStreamControllerDispatch)
    _StreamController__SyncStreamControllerDispatch.name = "_StreamController__SyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__SyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__SyncStreamControllerDispatch.prototype = $desc;
  function _ControllerStream(_controller) {
    this._controller = _controller;
  }
  _ControllerStream.builtin$cls = "_ControllerStream";
  if (!"name" in _ControllerStream)
    _ControllerStream.name = "_ControllerStream";
  $desc = $collectedClasses._ControllerStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerStream.prototype = $desc;
  function _ControllerSubscription(_controller, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._controller = _controller;
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _ControllerSubscription.builtin$cls = "_ControllerSubscription";
  if (!"name" in _ControllerSubscription)
    _ControllerSubscription.name = "_ControllerSubscription";
  $desc = $collectedClasses._ControllerSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerSubscription.prototype = $desc;
  _ControllerSubscription.prototype.get$_controller = function() {
    return this._controller;
  };
  function _EventSink() {
  }
  _EventSink.builtin$cls = "_EventSink";
  if (!"name" in _EventSink)
    _EventSink.name = "_EventSink";
  $desc = $collectedClasses._EventSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventSink.prototype = $desc;
  function _BufferingStreamSubscription(_async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _BufferingStreamSubscription.builtin$cls = "_BufferingStreamSubscription";
  if (!"name" in _BufferingStreamSubscription)
    _BufferingStreamSubscription.name = "_BufferingStreamSubscription";
  $desc = $collectedClasses._BufferingStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription.prototype = $desc;
  _BufferingStreamSubscription.prototype.get$_onError = function() {
    return this._onError;
  };
  _BufferingStreamSubscription.prototype.get$_zone = function() {
    return this._zone;
  };
  function _BufferingStreamSubscription__sendError_sendError(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _BufferingStreamSubscription__sendError_sendError.builtin$cls = "_BufferingStreamSubscription__sendError_sendError";
  if (!"name" in _BufferingStreamSubscription__sendError_sendError)
    _BufferingStreamSubscription__sendError_sendError.name = "_BufferingStreamSubscription__sendError_sendError";
  $desc = $collectedClasses._BufferingStreamSubscription__sendError_sendError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription__sendError_sendError.prototype = $desc;
  function _BufferingStreamSubscription__sendDone_sendDone(this_0) {
    this.this_0 = this_0;
  }
  _BufferingStreamSubscription__sendDone_sendDone.builtin$cls = "_BufferingStreamSubscription__sendDone_sendDone";
  if (!"name" in _BufferingStreamSubscription__sendDone_sendDone)
    _BufferingStreamSubscription__sendDone_sendDone.name = "_BufferingStreamSubscription__sendDone_sendDone";
  $desc = $collectedClasses._BufferingStreamSubscription__sendDone_sendDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription__sendDone_sendDone.prototype = $desc;
  function _StreamImpl() {
  }
  _StreamImpl.builtin$cls = "_StreamImpl";
  if (!"name" in _StreamImpl)
    _StreamImpl.name = "_StreamImpl";
  $desc = $collectedClasses._StreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImpl.prototype = $desc;
  function _DelayedEvent(next) {
    this.next = next;
  }
  _DelayedEvent.builtin$cls = "_DelayedEvent";
  if (!"name" in _DelayedEvent)
    _DelayedEvent.name = "_DelayedEvent";
  $desc = $collectedClasses._DelayedEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedEvent.prototype = $desc;
  _DelayedEvent.prototype.get$next = function() {
    return this.next;
  };
  _DelayedEvent.prototype.set$next = function(v) {
    return this.next = v;
  };
  function _DelayedData(value, next) {
    this.value = value;
    this.next = next;
  }
  _DelayedData.builtin$cls = "_DelayedData";
  if (!"name" in _DelayedData)
    _DelayedData.name = "_DelayedData";
  $desc = $collectedClasses._DelayedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedData.prototype = $desc;
  _DelayedData.prototype.get$value = function(receiver) {
    return this.value;
  };
  function _DelayedError(error, stackTrace, next) {
    this.error = error;
    this.stackTrace = stackTrace;
    this.next = next;
  }
  _DelayedError.builtin$cls = "_DelayedError";
  if (!"name" in _DelayedError)
    _DelayedError.name = "_DelayedError";
  $desc = $collectedClasses._DelayedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedError.prototype = $desc;
  _DelayedError.prototype.get$error = function(receiver) {
    return this.error;
  };
  _DelayedError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function _DelayedDone() {
  }
  _DelayedDone.builtin$cls = "_DelayedDone";
  if (!"name" in _DelayedDone)
    _DelayedDone.name = "_DelayedDone";
  $desc = $collectedClasses._DelayedDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedDone.prototype = $desc;
  function _PendingEvents() {
  }
  _PendingEvents.builtin$cls = "_PendingEvents";
  if (!"name" in _PendingEvents)
    _PendingEvents.name = "_PendingEvents";
  $desc = $collectedClasses._PendingEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents.prototype = $desc;
  function _PendingEvents_schedule_closure(this_0, dispatch_1) {
    this.this_0 = this_0;
    this.dispatch_1 = dispatch_1;
  }
  _PendingEvents_schedule_closure.builtin$cls = "_PendingEvents_schedule_closure";
  if (!"name" in _PendingEvents_schedule_closure)
    _PendingEvents_schedule_closure.name = "_PendingEvents_schedule_closure";
  $desc = $collectedClasses._PendingEvents_schedule_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents_schedule_closure.prototype = $desc;
  function _StreamImplEvents(firstPendingEvent, lastPendingEvent, _state) {
    this.firstPendingEvent = firstPendingEvent;
    this.lastPendingEvent = lastPendingEvent;
    this._state = _state;
  }
  _StreamImplEvents.builtin$cls = "_StreamImplEvents";
  if (!"name" in _StreamImplEvents)
    _StreamImplEvents.name = "_StreamImplEvents";
  $desc = $collectedClasses._StreamImplEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImplEvents.prototype = $desc;
  function _cancelAndError_closure(future_0, error_1, stackTrace_2) {
    this.future_0 = future_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _cancelAndError_closure.builtin$cls = "_cancelAndError_closure";
  if (!"name" in _cancelAndError_closure)
    _cancelAndError_closure.name = "_cancelAndError_closure";
  $desc = $collectedClasses._cancelAndError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndError_closure.prototype = $desc;
  function _cancelAndErrorClosure_closure(subscription_0, future_1) {
    this.subscription_0 = subscription_0;
    this.future_1 = future_1;
  }
  _cancelAndErrorClosure_closure.builtin$cls = "_cancelAndErrorClosure_closure";
  if (!"name" in _cancelAndErrorClosure_closure)
    _cancelAndErrorClosure_closure.name = "_cancelAndErrorClosure_closure";
  $desc = $collectedClasses._cancelAndErrorClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndErrorClosure_closure.prototype = $desc;
  function _cancelAndValue_closure(future_0, value_1) {
    this.future_0 = future_0;
    this.value_1 = value_1;
  }
  _cancelAndValue_closure.builtin$cls = "_cancelAndValue_closure";
  if (!"name" in _cancelAndValue_closure)
    _cancelAndValue_closure.name = "_cancelAndValue_closure";
  $desc = $collectedClasses._cancelAndValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndValue_closure.prototype = $desc;
  function _ForwardingStream() {
  }
  _ForwardingStream.builtin$cls = "_ForwardingStream";
  if (!"name" in _ForwardingStream)
    _ForwardingStream.name = "_ForwardingStream";
  $desc = $collectedClasses._ForwardingStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ForwardingStream.prototype = $desc;
  function _ForwardingStreamSubscription(_stream, _subscription, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._stream = _stream;
    this._subscription = _subscription;
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _ForwardingStreamSubscription.builtin$cls = "_ForwardingStreamSubscription";
  if (!"name" in _ForwardingStreamSubscription)
    _ForwardingStreamSubscription.name = "_ForwardingStreamSubscription";
  $desc = $collectedClasses._ForwardingStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ForwardingStreamSubscription.prototype = $desc;
  function BoundClosure$20(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$20.builtin$cls = "BoundClosure$20";
  $desc = $collectedClasses.BoundClosure$20;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$20.prototype = $desc;
  function _WhereStream(_test, _async$_source) {
    this._test = _test;
    this._async$_source = _async$_source;
  }
  _WhereStream.builtin$cls = "_WhereStream";
  if (!"name" in _WhereStream)
    _WhereStream.name = "_WhereStream";
  $desc = $collectedClasses._WhereStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WhereStream.prototype = $desc;
  function _MapStream(_transform, _async$_source) {
    this._transform = _transform;
    this._async$_source = _async$_source;
  }
  _MapStream.builtin$cls = "_MapStream";
  if (!"name" in _MapStream)
    _MapStream.name = "_MapStream";
  $desc = $collectedClasses._MapStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MapStream.prototype = $desc;
  function _TakeStream(_remaining, _async$_source) {
    this._remaining = _remaining;
    this._async$_source = _async$_source;
  }
  _TakeStream.builtin$cls = "_TakeStream";
  if (!"name" in _TakeStream)
    _TakeStream.name = "_TakeStream";
  $desc = $collectedClasses._TakeStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TakeStream.prototype = $desc;
  function _SkipStream(_remaining, _async$_source) {
    this._remaining = _remaining;
    this._async$_source = _async$_source;
  }
  _SkipStream.builtin$cls = "_SkipStream";
  if (!"name" in _SkipStream)
    _SkipStream.name = "_SkipStream";
  $desc = $collectedClasses._SkipStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SkipStream.prototype = $desc;
  function Timer() {
  }
  Timer.builtin$cls = "Timer";
  if (!"name" in Timer)
    Timer.name = "Timer";
  $desc = $collectedClasses.Timer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Timer.prototype = $desc;
  function ZoneSpecification() {
  }
  ZoneSpecification.builtin$cls = "ZoneSpecification";
  if (!"name" in ZoneSpecification)
    ZoneSpecification.name = "ZoneSpecification";
  $desc = $collectedClasses.ZoneSpecification;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZoneSpecification.prototype = $desc;
  function _ZoneSpecification(handleUncaughtError, run, runUnary, runBinary, registerCallback, registerUnaryCallback, registerBinaryCallback, scheduleMicrotask, createTimer, createPeriodicTimer, print, fork) {
    this.handleUncaughtError = handleUncaughtError;
    this.run = run;
    this.runUnary = runUnary;
    this.runBinary = runBinary;
    this.registerCallback = registerCallback;
    this.registerUnaryCallback = registerUnaryCallback;
    this.registerBinaryCallback = registerBinaryCallback;
    this.scheduleMicrotask = scheduleMicrotask;
    this.createTimer = createTimer;
    this.createPeriodicTimer = createPeriodicTimer;
    this.print = print;
    this.fork = fork;
  }
  _ZoneSpecification.builtin$cls = "_ZoneSpecification";
  if (!"name" in _ZoneSpecification)
    _ZoneSpecification.name = "_ZoneSpecification";
  $desc = $collectedClasses._ZoneSpecification;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ZoneSpecification.prototype = $desc;
  _ZoneSpecification.prototype.get$handleUncaughtError = function() {
    return this.handleUncaughtError;
  };
  _ZoneSpecification.prototype.get$run = function() {
    return this.run;
  };
  _ZoneSpecification.prototype.get$runUnary = function() {
    return this.runUnary;
  };
  _ZoneSpecification.prototype.get$runBinary = function() {
    return this.runBinary;
  };
  _ZoneSpecification.prototype.get$registerCallback = function() {
    return this.registerCallback;
  };
  _ZoneSpecification.prototype.get$registerUnaryCallback = function() {
    return this.registerUnaryCallback;
  };
  _ZoneSpecification.prototype.get$registerBinaryCallback = function() {
    return this.registerBinaryCallback;
  };
  _ZoneSpecification.prototype.get$scheduleMicrotask = function() {
    return this.scheduleMicrotask;
  };
  _ZoneSpecification.prototype.get$createTimer = function() {
    return this.createTimer;
  };
  _ZoneSpecification.prototype.get$print = function(receiver) {
    return this.print;
  };
  _ZoneSpecification.prototype.get$fork = function() {
    return this.fork;
  };
  function ZoneDelegate() {
  }
  ZoneDelegate.builtin$cls = "ZoneDelegate";
  if (!"name" in ZoneDelegate)
    ZoneDelegate.name = "ZoneDelegate";
  $desc = $collectedClasses.ZoneDelegate;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZoneDelegate.prototype = $desc;
  function Zone() {
  }
  Zone.builtin$cls = "Zone";
  if (!"name" in Zone)
    Zone.name = "Zone";
  $desc = $collectedClasses.Zone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Zone.prototype = $desc;
  function _ZoneDelegate(_degelationTarget) {
    this._degelationTarget = _degelationTarget;
  }
  _ZoneDelegate.builtin$cls = "_ZoneDelegate";
  if (!"name" in _ZoneDelegate)
    _ZoneDelegate.name = "_ZoneDelegate";
  $desc = $collectedClasses._ZoneDelegate;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ZoneDelegate.prototype = $desc;
  function _BaseZone() {
  }
  _BaseZone.builtin$cls = "_BaseZone";
  if (!"name" in _BaseZone)
    _BaseZone.name = "_BaseZone";
  $desc = $collectedClasses._BaseZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone.prototype = $desc;
  function _BaseZone_bindCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindCallback_closure.builtin$cls = "_BaseZone_bindCallback_closure";
  if (!"name" in _BaseZone_bindCallback_closure)
    _BaseZone_bindCallback_closure.name = "_BaseZone_bindCallback_closure";
  $desc = $collectedClasses._BaseZone_bindCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure.prototype = $desc;
  function _BaseZone_bindCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindCallback_closure0.builtin$cls = "_BaseZone_bindCallback_closure0";
  if (!"name" in _BaseZone_bindCallback_closure0)
    _BaseZone_bindCallback_closure0.name = "_BaseZone_bindCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure0.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindUnaryCallback_closure.builtin$cls = "_BaseZone_bindUnaryCallback_closure";
  if (!"name" in _BaseZone_bindUnaryCallback_closure)
    _BaseZone_bindUnaryCallback_closure.name = "_BaseZone_bindUnaryCallback_closure";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindUnaryCallback_closure0.builtin$cls = "_BaseZone_bindUnaryCallback_closure0";
  if (!"name" in _BaseZone_bindUnaryCallback_closure0)
    _BaseZone_bindUnaryCallback_closure0.name = "_BaseZone_bindUnaryCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure0.prototype = $desc;
  function _CustomizedZone(parent, _specification, _map) {
    this.parent = parent;
    this._specification = _specification;
    this._map = _map;
  }
  _CustomizedZone.builtin$cls = "_CustomizedZone";
  if (!"name" in _CustomizedZone)
    _CustomizedZone.name = "_CustomizedZone";
  $desc = $collectedClasses._CustomizedZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomizedZone.prototype = $desc;
  _CustomizedZone.prototype.get$parent = function(receiver) {
    return this.parent;
  };
  _CustomizedZone.prototype.get$_specification = function() {
    return this._specification;
  };
  function _rootHandleUncaughtError_closure(error_0, stackTrace_1) {
    this.error_0 = error_0;
    this.stackTrace_1 = stackTrace_1;
  }
  _rootHandleUncaughtError_closure.builtin$cls = "_rootHandleUncaughtError_closure";
  if (!"name" in _rootHandleUncaughtError_closure)
    _rootHandleUncaughtError_closure.name = "_rootHandleUncaughtError_closure";
  $desc = $collectedClasses._rootHandleUncaughtError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError_closure.prototype = $desc;
  function _rootHandleUncaughtError__closure(error_2, stackTrace_3) {
    this.error_2 = error_2;
    this.stackTrace_3 = stackTrace_3;
  }
  _rootHandleUncaughtError__closure.builtin$cls = "_rootHandleUncaughtError__closure";
  if (!"name" in _rootHandleUncaughtError__closure)
    _rootHandleUncaughtError__closure.name = "_rootHandleUncaughtError__closure";
  $desc = $collectedClasses._rootHandleUncaughtError__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError__closure.prototype = $desc;
  function _rootFork_closure(copiedMap_0) {
    this.copiedMap_0 = copiedMap_0;
  }
  _rootFork_closure.builtin$cls = "_rootFork_closure";
  if (!"name" in _rootFork_closure)
    _rootFork_closure.name = "_rootFork_closure";
  $desc = $collectedClasses._rootFork_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootFork_closure.prototype = $desc;
  function _RootZoneSpecification() {
  }
  _RootZoneSpecification.builtin$cls = "_RootZoneSpecification";
  if (!"name" in _RootZoneSpecification)
    _RootZoneSpecification.name = "_RootZoneSpecification";
  $desc = $collectedClasses._RootZoneSpecification;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZoneSpecification.prototype = $desc;
  function _RootZone() {
  }
  _RootZone.builtin$cls = "_RootZone";
  if (!"name" in _RootZone)
    _RootZone.name = "_RootZone";
  $desc = $collectedClasses._RootZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone.prototype = $desc;
  function _HashMap(_collection$_length, _strings, _nums, _rest, _keys) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._keys = _keys;
  }
  _HashMap.builtin$cls = "_HashMap";
  if (!"name" in _HashMap)
    _HashMap.name = "_HashMap";
  $desc = $collectedClasses._HashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap.prototype = $desc;
  function _HashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _HashMap_values_closure.builtin$cls = "_HashMap_values_closure";
  if (!"name" in _HashMap_values_closure)
    _HashMap_values_closure.name = "_HashMap_values_closure";
  $desc = $collectedClasses._HashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap_values_closure.prototype = $desc;
  function _HashMap_containsValue_closure(this_0, value_1) {
    this.this_0 = this_0;
    this.value_1 = value_1;
  }
  _HashMap_containsValue_closure.builtin$cls = "_HashMap_containsValue_closure";
  if (!"name" in _HashMap_containsValue_closure)
    _HashMap_containsValue_closure.name = "_HashMap_containsValue_closure";
  $desc = $collectedClasses._HashMap_containsValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap_containsValue_closure.prototype = $desc;
  function _HashMap_addAll_closure(this_0) {
    this.this_0 = this_0;
  }
  _HashMap_addAll_closure.builtin$cls = "_HashMap_addAll_closure";
  if (!"name" in _HashMap_addAll_closure)
    _HashMap_addAll_closure.name = "_HashMap_addAll_closure";
  $desc = $collectedClasses._HashMap_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap_addAll_closure.prototype = $desc;
  function _CustomHashMap(_equals, _hashCode, _validKey, _collection$_length, _strings, _nums, _rest, _keys) {
    this._equals = _equals;
    this._hashCode = _hashCode;
    this._validKey = _validKey;
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._keys = _keys;
  }
  _CustomHashMap.builtin$cls = "_CustomHashMap";
  if (!"name" in _CustomHashMap)
    _CustomHashMap.name = "_CustomHashMap";
  $desc = $collectedClasses._CustomHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomHashMap.prototype = $desc;
  function _CustomHashMap_closure(K_0) {
    this.K_0 = K_0;
  }
  _CustomHashMap_closure.builtin$cls = "_CustomHashMap_closure";
  if (!"name" in _CustomHashMap_closure)
    _CustomHashMap_closure.name = "_CustomHashMap_closure";
  $desc = $collectedClasses._CustomHashMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomHashMap_closure.prototype = $desc;
  function HashMapKeyIterable(_collection$_map) {
    this._collection$_map = _collection$_map;
  }
  HashMapKeyIterable.builtin$cls = "HashMapKeyIterable";
  if (!"name" in HashMapKeyIterable)
    HashMapKeyIterable.name = "HashMapKeyIterable";
  $desc = $collectedClasses.HashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterable.prototype = $desc;
  function HashMapKeyIterator(_collection$_map, _keys, _offset, _collection$_current) {
    this._collection$_map = _collection$_map;
    this._keys = _keys;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashMapKeyIterator.builtin$cls = "HashMapKeyIterator";
  if (!"name" in HashMapKeyIterator)
    HashMapKeyIterator.name = "HashMapKeyIterator";
  $desc = $collectedClasses.HashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterator.prototype = $desc;
  function _LinkedHashMap(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashMap.builtin$cls = "_LinkedHashMap";
  if (!"name" in _LinkedHashMap)
    _LinkedHashMap.name = "_LinkedHashMap";
  $desc = $collectedClasses._LinkedHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap.prototype = $desc;
  function _LinkedHashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _LinkedHashMap_values_closure.builtin$cls = "_LinkedHashMap_values_closure";
  if (!"name" in _LinkedHashMap_values_closure)
    _LinkedHashMap_values_closure.name = "_LinkedHashMap_values_closure";
  $desc = $collectedClasses._LinkedHashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap_values_closure.prototype = $desc;
  function _LinkedHashMap_containsValue_closure(this_0, value_1) {
    this.this_0 = this_0;
    this.value_1 = value_1;
  }
  _LinkedHashMap_containsValue_closure.builtin$cls = "_LinkedHashMap_containsValue_closure";
  if (!"name" in _LinkedHashMap_containsValue_closure)
    _LinkedHashMap_containsValue_closure.name = "_LinkedHashMap_containsValue_closure";
  $desc = $collectedClasses._LinkedHashMap_containsValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap_containsValue_closure.prototype = $desc;
  function _LinkedHashMap_addAll_closure(this_0) {
    this.this_0 = this_0;
  }
  _LinkedHashMap_addAll_closure.builtin$cls = "_LinkedHashMap_addAll_closure";
  if (!"name" in _LinkedHashMap_addAll_closure)
    _LinkedHashMap_addAll_closure.name = "_LinkedHashMap_addAll_closure";
  $desc = $collectedClasses._LinkedHashMap_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap_addAll_closure.prototype = $desc;
  function _LinkedIdentityHashMap(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedIdentityHashMap.builtin$cls = "_LinkedIdentityHashMap";
  if (!"name" in _LinkedIdentityHashMap)
    _LinkedIdentityHashMap.name = "_LinkedIdentityHashMap";
  $desc = $collectedClasses._LinkedIdentityHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedIdentityHashMap.prototype = $desc;
  function _LinkedCustomHashMap(_equals, _hashCode, _validKey, _collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._equals = _equals;
    this._hashCode = _hashCode;
    this._validKey = _validKey;
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedCustomHashMap.builtin$cls = "_LinkedCustomHashMap";
  if (!"name" in _LinkedCustomHashMap)
    _LinkedCustomHashMap.name = "_LinkedCustomHashMap";
  $desc = $collectedClasses._LinkedCustomHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedCustomHashMap.prototype = $desc;
  function _LinkedCustomHashMap_closure(K_0) {
    this.K_0 = K_0;
  }
  _LinkedCustomHashMap_closure.builtin$cls = "_LinkedCustomHashMap_closure";
  if (!"name" in _LinkedCustomHashMap_closure)
    _LinkedCustomHashMap_closure.name = "_LinkedCustomHashMap_closure";
  $desc = $collectedClasses._LinkedCustomHashMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedCustomHashMap_closure.prototype = $desc;
  function LinkedHashMapCell(_key, _collection$_value, _next, _previous) {
    this._key = _key;
    this._collection$_value = _collection$_value;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashMapCell.builtin$cls = "LinkedHashMapCell";
  if (!"name" in LinkedHashMapCell)
    LinkedHashMapCell.name = "LinkedHashMapCell";
  $desc = $collectedClasses.LinkedHashMapCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapCell.prototype = $desc;
  LinkedHashMapCell.prototype.get$_key = function() {
    return this._key;
  };
  LinkedHashMapCell.prototype.get$_collection$_value = function() {
    return this._collection$_value;
  };
  LinkedHashMapCell.prototype.set$_collection$_value = function(v) {
    return this._collection$_value = v;
  };
  LinkedHashMapCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashMapCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashMapCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashMapCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashMapKeyIterable(_collection$_map) {
    this._collection$_map = _collection$_map;
  }
  LinkedHashMapKeyIterable.builtin$cls = "LinkedHashMapKeyIterable";
  if (!"name" in LinkedHashMapKeyIterable)
    LinkedHashMapKeyIterable.name = "LinkedHashMapKeyIterable";
  $desc = $collectedClasses.LinkedHashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterable.prototype = $desc;
  function LinkedHashMapKeyIterator(_collection$_map, _modifications, _cell, _collection$_current) {
    this._collection$_map = _collection$_map;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashMapKeyIterator.builtin$cls = "LinkedHashMapKeyIterator";
  if (!"name" in LinkedHashMapKeyIterator)
    LinkedHashMapKeyIterator.name = "LinkedHashMapKeyIterator";
  $desc = $collectedClasses.LinkedHashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterator.prototype = $desc;
  function _HashSet() {
  }
  _HashSet.builtin$cls = "_HashSet";
  if (!"name" in _HashSet)
    _HashSet.name = "_HashSet";
  $desc = $collectedClasses._HashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSet.prototype = $desc;
  function _IdentityHashSet(_collection$_length, _strings, _nums, _rest, _elements) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._elements = _elements;
  }
  _IdentityHashSet.builtin$cls = "_IdentityHashSet";
  if (!"name" in _IdentityHashSet)
    _IdentityHashSet.name = "_IdentityHashSet";
  $desc = $collectedClasses._IdentityHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IdentityHashSet.prototype = $desc;
  function HashSetIterator(_set, _elements, _offset, _collection$_current) {
    this._set = _set;
    this._elements = _elements;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashSetIterator.builtin$cls = "HashSetIterator";
  if (!"name" in HashSetIterator)
    HashSetIterator.name = "HashSetIterator";
  $desc = $collectedClasses.HashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashSetIterator.prototype = $desc;
  function _LinkedHashSet(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashSet.builtin$cls = "_LinkedHashSet";
  if (!"name" in _LinkedHashSet)
    _LinkedHashSet.name = "_LinkedHashSet";
  $desc = $collectedClasses._LinkedHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashSet.prototype = $desc;
  function LinkedHashSetCell(_collection$_element, _next, _previous) {
    this._collection$_element = _collection$_element;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashSetCell.builtin$cls = "LinkedHashSetCell";
  if (!"name" in LinkedHashSetCell)
    LinkedHashSetCell.name = "LinkedHashSetCell";
  $desc = $collectedClasses.LinkedHashSetCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetCell.prototype = $desc;
  LinkedHashSetCell.prototype.get$_collection$_element = function() {
    return this._collection$_element;
  };
  LinkedHashSetCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashSetCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashSetCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashSetCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashSetIterator(_set, _modifications, _cell, _collection$_current) {
    this._set = _set;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashSetIterator.builtin$cls = "LinkedHashSetIterator";
  if (!"name" in LinkedHashSetIterator)
    LinkedHashSetIterator.name = "LinkedHashSetIterator";
  $desc = $collectedClasses.LinkedHashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetIterator.prototype = $desc;
  function UnmodifiableListView(_collection$_source) {
    this._collection$_source = _collection$_source;
  }
  UnmodifiableListView.builtin$cls = "UnmodifiableListView";
  if (!"name" in UnmodifiableListView)
    UnmodifiableListView.name = "UnmodifiableListView";
  $desc = $collectedClasses.UnmodifiableListView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableListView.prototype = $desc;
  function _HashSetBase() {
  }
  _HashSetBase.builtin$cls = "_HashSetBase";
  if (!"name" in _HashSetBase)
    _HashSetBase.name = "_HashSetBase";
  $desc = $collectedClasses._HashSetBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSetBase.prototype = $desc;
  function IterableBase() {
  }
  IterableBase.builtin$cls = "IterableBase";
  if (!"name" in IterableBase)
    IterableBase.name = "IterableBase";
  $desc = $collectedClasses.IterableBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IterableBase.prototype = $desc;
  function ListBase() {
  }
  ListBase.builtin$cls = "ListBase";
  if (!"name" in ListBase)
    ListBase.name = "ListBase";
  $desc = $collectedClasses.ListBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListBase.prototype = $desc;
  function ListMixin() {
  }
  ListMixin.builtin$cls = "ListMixin";
  if (!"name" in ListMixin)
    ListMixin.name = "ListMixin";
  $desc = $collectedClasses.ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListMixin.prototype = $desc;
  function Maps_mapToString_closure(box_0, result_1) {
    this.box_0 = box_0;
    this.result_1 = result_1;
  }
  Maps_mapToString_closure.builtin$cls = "Maps_mapToString_closure";
  if (!"name" in Maps_mapToString_closure)
    Maps_mapToString_closure.name = "Maps_mapToString_closure";
  $desc = $collectedClasses.Maps_mapToString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Maps_mapToString_closure.prototype = $desc;
  function ListQueue(_table, _head, _tail, _modificationCount) {
    this._table = _table;
    this._head = _head;
    this._tail = _tail;
    this._modificationCount = _modificationCount;
  }
  ListQueue.builtin$cls = "ListQueue";
  if (!"name" in ListQueue)
    ListQueue.name = "ListQueue";
  $desc = $collectedClasses.ListQueue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListQueue.prototype = $desc;
  function _ListQueueIterator(_queue, _end, _modificationCount, _collection$_position, _collection$_current) {
    this._queue = _queue;
    this._end = _end;
    this._modificationCount = _modificationCount;
    this._collection$_position = _collection$_position;
    this._collection$_current = _collection$_current;
  }
  _ListQueueIterator.builtin$cls = "_ListQueueIterator";
  if (!"name" in _ListQueueIterator)
    _ListQueueIterator.name = "_ListQueueIterator";
  $desc = $collectedClasses._ListQueueIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ListQueueIterator.prototype = $desc;
  function _convertJsonToDart_closure() {
  }
  _convertJsonToDart_closure.builtin$cls = "_convertJsonToDart_closure";
  if (!"name" in _convertJsonToDart_closure)
    _convertJsonToDart_closure.name = "_convertJsonToDart_closure";
  $desc = $collectedClasses._convertJsonToDart_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertJsonToDart_closure.prototype = $desc;
  function _convertJsonToDart_walk(revive_0) {
    this.revive_0 = revive_0;
  }
  _convertJsonToDart_walk.builtin$cls = "_convertJsonToDart_walk";
  if (!"name" in _convertJsonToDart_walk)
    _convertJsonToDart_walk.name = "_convertJsonToDart_walk";
  $desc = $collectedClasses._convertJsonToDart_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertJsonToDart_walk.prototype = $desc;
  function Codec() {
  }
  Codec.builtin$cls = "Codec";
  if (!"name" in Codec)
    Codec.name = "Codec";
  $desc = $collectedClasses.Codec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Codec.prototype = $desc;
  function Converter() {
  }
  Converter.builtin$cls = "Converter";
  if (!"name" in Converter)
    Converter.name = "Converter";
  $desc = $collectedClasses.Converter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Converter.prototype = $desc;
  function Encoding() {
  }
  Encoding.builtin$cls = "Encoding";
  if (!"name" in Encoding)
    Encoding.name = "Encoding";
  $desc = $collectedClasses.Encoding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Encoding.prototype = $desc;
  function JsonCodec() {
  }
  JsonCodec.builtin$cls = "JsonCodec";
  if (!"name" in JsonCodec)
    JsonCodec.name = "JsonCodec";
  $desc = $collectedClasses.JsonCodec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonCodec.prototype = $desc;
  function JsonDecoder(_reviver) {
    this._reviver = _reviver;
  }
  JsonDecoder.builtin$cls = "JsonDecoder";
  if (!"name" in JsonDecoder)
    JsonDecoder.name = "JsonDecoder";
  $desc = $collectedClasses.JsonDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonDecoder.prototype = $desc;
  function Utf8Codec(_allowMalformed) {
    this._allowMalformed = _allowMalformed;
  }
  Utf8Codec.builtin$cls = "Utf8Codec";
  if (!"name" in Utf8Codec)
    Utf8Codec.name = "Utf8Codec";
  $desc = $collectedClasses.Utf8Codec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Codec.prototype = $desc;
  function Utf8Encoder() {
  }
  Utf8Encoder.builtin$cls = "Utf8Encoder";
  if (!"name" in Utf8Encoder)
    Utf8Encoder.name = "Utf8Encoder";
  $desc = $collectedClasses.Utf8Encoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Encoder.prototype = $desc;
  function _Utf8Encoder(_carry, _bufferIndex, _buffer) {
    this._carry = _carry;
    this._bufferIndex = _bufferIndex;
    this._buffer = _buffer;
  }
  _Utf8Encoder.builtin$cls = "_Utf8Encoder";
  if (!"name" in _Utf8Encoder)
    _Utf8Encoder.name = "_Utf8Encoder";
  $desc = $collectedClasses._Utf8Encoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Utf8Encoder.prototype = $desc;
  function Utf8Decoder(_allowMalformed) {
    this._allowMalformed = _allowMalformed;
  }
  Utf8Decoder.builtin$cls = "Utf8Decoder";
  if (!"name" in Utf8Decoder)
    Utf8Decoder.name = "Utf8Decoder";
  $desc = $collectedClasses.Utf8Decoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Decoder.prototype = $desc;
  function _Utf8Decoder(_allowMalformed, _stringSink, _isFirstCharacter, _convert$_value, _expectedUnits, _extraUnits) {
    this._allowMalformed = _allowMalformed;
    this._stringSink = _stringSink;
    this._isFirstCharacter = _isFirstCharacter;
    this._convert$_value = _convert$_value;
    this._expectedUnits = _expectedUnits;
    this._extraUnits = _extraUnits;
  }
  _Utf8Decoder.builtin$cls = "_Utf8Decoder";
  if (!"name" in _Utf8Decoder)
    _Utf8Decoder.name = "_Utf8Decoder";
  $desc = $collectedClasses._Utf8Decoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Utf8Decoder.prototype = $desc;
  function Function__toMangledNames_closure(result_0) {
    this.result_0 = result_0;
  }
  Function__toMangledNames_closure.builtin$cls = "Function__toMangledNames_closure";
  if (!"name" in Function__toMangledNames_closure)
    Function__toMangledNames_closure.name = "Function__toMangledNames_closure";
  $desc = $collectedClasses.Function__toMangledNames_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Function__toMangledNames_closure.prototype = $desc;
  function NoSuchMethodError_toString_closure(box_0) {
    this.box_0 = box_0;
  }
  NoSuchMethodError_toString_closure.builtin$cls = "NoSuchMethodError_toString_closure";
  if (!"name" in NoSuchMethodError_toString_closure)
    NoSuchMethodError_toString_closure.name = "NoSuchMethodError_toString_closure";
  $desc = $collectedClasses.NoSuchMethodError_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSuchMethodError_toString_closure.prototype = $desc;
  function Deprecated(expires) {
    this.expires = expires;
  }
  Deprecated.builtin$cls = "Deprecated";
  if (!"name" in Deprecated)
    Deprecated.name = "Deprecated";
  $desc = $collectedClasses.Deprecated;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Deprecated.prototype = $desc;
  function bool() {
  }
  bool.builtin$cls = "bool";
  if (!"name" in bool)
    bool.name = "bool";
  $desc = $collectedClasses.bool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  bool.prototype = $desc;
  function Comparable() {
  }
  Comparable.builtin$cls = "Comparable";
  if (!"name" in Comparable)
    Comparable.name = "Comparable";
  $desc = $collectedClasses.Comparable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comparable.prototype = $desc;
  function DateTime(millisecondsSinceEpoch, isUtc) {
    this.millisecondsSinceEpoch = millisecondsSinceEpoch;
    this.isUtc = isUtc;
  }
  DateTime.builtin$cls = "DateTime";
  if (!"name" in DateTime)
    DateTime.name = "DateTime";
  $desc = $collectedClasses.DateTime;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime.prototype = $desc;
  DateTime.prototype.get$millisecondsSinceEpoch = function() {
    return this.millisecondsSinceEpoch;
  };
  function DateTime_parse_parseIntOrZero() {
  }
  DateTime_parse_parseIntOrZero.builtin$cls = "DateTime_parse_parseIntOrZero";
  if (!"name" in DateTime_parse_parseIntOrZero)
    DateTime_parse_parseIntOrZero.name = "DateTime_parse_parseIntOrZero";
  $desc = $collectedClasses.DateTime_parse_parseIntOrZero;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_parse_parseIntOrZero.prototype = $desc;
  function DateTime_parse_parseDoubleOrZero() {
  }
  DateTime_parse_parseDoubleOrZero.builtin$cls = "DateTime_parse_parseDoubleOrZero";
  if (!"name" in DateTime_parse_parseDoubleOrZero)
    DateTime_parse_parseDoubleOrZero.name = "DateTime_parse_parseDoubleOrZero";
  $desc = $collectedClasses.DateTime_parse_parseDoubleOrZero;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_parse_parseDoubleOrZero.prototype = $desc;
  function DateTime_toString_fourDigits() {
  }
  DateTime_toString_fourDigits.builtin$cls = "DateTime_toString_fourDigits";
  if (!"name" in DateTime_toString_fourDigits)
    DateTime_toString_fourDigits.name = "DateTime_toString_fourDigits";
  $desc = $collectedClasses.DateTime_toString_fourDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_toString_fourDigits.prototype = $desc;
  function DateTime_toString_threeDigits() {
  }
  DateTime_toString_threeDigits.builtin$cls = "DateTime_toString_threeDigits";
  if (!"name" in DateTime_toString_threeDigits)
    DateTime_toString_threeDigits.name = "DateTime_toString_threeDigits";
  $desc = $collectedClasses.DateTime_toString_threeDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_toString_threeDigits.prototype = $desc;
  function DateTime_toString_twoDigits() {
  }
  DateTime_toString_twoDigits.builtin$cls = "DateTime_toString_twoDigits";
  if (!"name" in DateTime_toString_twoDigits)
    DateTime_toString_twoDigits.name = "DateTime_toString_twoDigits";
  $desc = $collectedClasses.DateTime_toString_twoDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_toString_twoDigits.prototype = $desc;
  function Duration(_duration) {
    this._duration = _duration;
  }
  Duration.builtin$cls = "Duration";
  if (!"name" in Duration)
    Duration.name = "Duration";
  $desc = $collectedClasses.Duration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration.prototype = $desc;
  Duration.prototype.get$_duration = function() {
    return this._duration;
  };
  function Duration_toString_sixDigits() {
  }
  Duration_toString_sixDigits.builtin$cls = "Duration_toString_sixDigits";
  if (!"name" in Duration_toString_sixDigits)
    Duration_toString_sixDigits.name = "Duration_toString_sixDigits";
  $desc = $collectedClasses.Duration_toString_sixDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_sixDigits.prototype = $desc;
  function Duration_toString_twoDigits() {
  }
  Duration_toString_twoDigits.builtin$cls = "Duration_toString_twoDigits";
  if (!"name" in Duration_toString_twoDigits)
    Duration_toString_twoDigits.name = "Duration_toString_twoDigits";
  $desc = $collectedClasses.Duration_toString_twoDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_twoDigits.prototype = $desc;
  function Error() {
  }
  Error.builtin$cls = "Error";
  if (!"name" in Error)
    Error.name = "Error";
  $desc = $collectedClasses.Error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Error.prototype = $desc;
  function NullThrownError() {
  }
  NullThrownError.builtin$cls = "NullThrownError";
  if (!"name" in NullThrownError)
    NullThrownError.name = "NullThrownError";
  $desc = $collectedClasses.NullThrownError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullThrownError.prototype = $desc;
  function ArgumentError(message) {
    this.message = message;
  }
  ArgumentError.builtin$cls = "ArgumentError";
  if (!"name" in ArgumentError)
    ArgumentError.name = "ArgumentError";
  $desc = $collectedClasses.ArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ArgumentError.prototype = $desc;
  ArgumentError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function RangeError(message) {
    this.message = message;
  }
  RangeError.builtin$cls = "RangeError";
  if (!"name" in RangeError)
    RangeError.name = "RangeError";
  $desc = $collectedClasses.RangeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RangeError.prototype = $desc;
  function NoSuchMethodError(_core$_receiver, _memberName, _core$_arguments, _namedArguments, _existingArgumentNames) {
    this._core$_receiver = _core$_receiver;
    this._memberName = _memberName;
    this._core$_arguments = _core$_arguments;
    this._namedArguments = _namedArguments;
    this._existingArgumentNames = _existingArgumentNames;
  }
  NoSuchMethodError.builtin$cls = "NoSuchMethodError";
  if (!"name" in NoSuchMethodError)
    NoSuchMethodError.name = "NoSuchMethodError";
  $desc = $collectedClasses.NoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSuchMethodError.prototype = $desc;
  function UnsupportedError(message) {
    this.message = message;
  }
  UnsupportedError.builtin$cls = "UnsupportedError";
  if (!"name" in UnsupportedError)
    UnsupportedError.name = "UnsupportedError";
  $desc = $collectedClasses.UnsupportedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnsupportedError.prototype = $desc;
  UnsupportedError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function UnimplementedError(message) {
    this.message = message;
  }
  UnimplementedError.builtin$cls = "UnimplementedError";
  if (!"name" in UnimplementedError)
    UnimplementedError.name = "UnimplementedError";
  $desc = $collectedClasses.UnimplementedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnimplementedError.prototype = $desc;
  UnimplementedError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function StateError(message) {
    this.message = message;
  }
  StateError.builtin$cls = "StateError";
  if (!"name" in StateError)
    StateError.name = "StateError";
  $desc = $collectedClasses.StateError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StateError.prototype = $desc;
  StateError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function ConcurrentModificationError(modifiedObject) {
    this.modifiedObject = modifiedObject;
  }
  ConcurrentModificationError.builtin$cls = "ConcurrentModificationError";
  if (!"name" in ConcurrentModificationError)
    ConcurrentModificationError.name = "ConcurrentModificationError";
  $desc = $collectedClasses.ConcurrentModificationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConcurrentModificationError.prototype = $desc;
  function StackOverflowError() {
  }
  StackOverflowError.builtin$cls = "StackOverflowError";
  if (!"name" in StackOverflowError)
    StackOverflowError.name = "StackOverflowError";
  $desc = $collectedClasses.StackOverflowError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackOverflowError.prototype = $desc;
  function CyclicInitializationError(variableName) {
    this.variableName = variableName;
  }
  CyclicInitializationError.builtin$cls = "CyclicInitializationError";
  if (!"name" in CyclicInitializationError)
    CyclicInitializationError.name = "CyclicInitializationError";
  $desc = $collectedClasses.CyclicInitializationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CyclicInitializationError.prototype = $desc;
  function _ExceptionImplementation(message) {
    this.message = message;
  }
  _ExceptionImplementation.builtin$cls = "_ExceptionImplementation";
  if (!"name" in _ExceptionImplementation)
    _ExceptionImplementation.name = "_ExceptionImplementation";
  $desc = $collectedClasses._ExceptionImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ExceptionImplementation.prototype = $desc;
  _ExceptionImplementation.prototype.get$message = function(receiver) {
    return this.message;
  };
  function FormatException(message) {
    this.message = message;
  }
  FormatException.builtin$cls = "FormatException";
  if (!"name" in FormatException)
    FormatException.name = "FormatException";
  $desc = $collectedClasses.FormatException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormatException.prototype = $desc;
  FormatException.prototype.get$message = function(receiver) {
    return this.message;
  };
  function IntegerDivisionByZeroException() {
  }
  IntegerDivisionByZeroException.builtin$cls = "IntegerDivisionByZeroException";
  if (!"name" in IntegerDivisionByZeroException)
    IntegerDivisionByZeroException.name = "IntegerDivisionByZeroException";
  $desc = $collectedClasses.IntegerDivisionByZeroException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IntegerDivisionByZeroException.prototype = $desc;
  function Expando(name) {
    this.name = name;
  }
  Expando.builtin$cls = "Expando";
  if (!"name" in Expando)
    Expando.name = "Expando";
  $desc = $collectedClasses.Expando;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Expando.prototype = $desc;
  Expando.prototype.get$name = function(receiver) {
    return this.name;
  };
  function Function() {
  }
  Function.builtin$cls = "Function";
  if (!"name" in Function)
    Function.name = "Function";
  $desc = $collectedClasses.Function;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Function.prototype = $desc;
  function Iterable() {
  }
  Iterable.builtin$cls = "Iterable";
  if (!"name" in Iterable)
    Iterable.name = "Iterable";
  $desc = $collectedClasses.Iterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Iterable.prototype = $desc;
  function Iterator() {
  }
  Iterator.builtin$cls = "Iterator";
  if (!"name" in Iterator)
    Iterator.name = "Iterator";
  $desc = $collectedClasses.Iterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Iterator.prototype = $desc;
  function Map() {
  }
  Map.builtin$cls = "Map";
  if (!"name" in Map)
    Map.name = "Map";
  $desc = $collectedClasses.Map;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Map.prototype = $desc;
  function Null() {
  }
  Null.builtin$cls = "Null";
  if (!"name" in Null)
    Null.name = "Null";
  $desc = $collectedClasses.Null;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Null.prototype = $desc;
  function Object() {
  }
  Object.builtin$cls = "Object";
  if (!"name" in Object)
    Object.name = "Object";
  $desc = $collectedClasses.Object;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object.prototype = $desc;
  function Match() {
  }
  Match.builtin$cls = "Match";
  if (!"name" in Match)
    Match.name = "Match";
  $desc = $collectedClasses.Match;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Match.prototype = $desc;
  function StackTrace() {
  }
  StackTrace.builtin$cls = "StackTrace";
  if (!"name" in StackTrace)
    StackTrace.name = "StackTrace";
  $desc = $collectedClasses.StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackTrace.prototype = $desc;
  function Stopwatch(_core$_start, _stop) {
    this._core$_start = _core$_start;
    this._stop = _stop;
  }
  Stopwatch.builtin$cls = "Stopwatch";
  if (!"name" in Stopwatch)
    Stopwatch.name = "Stopwatch";
  $desc = $collectedClasses.Stopwatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stopwatch.prototype = $desc;
  function RuneIterator(string, _core$_position, _nextPosition, _currentCodePoint) {
    this.string = string;
    this._core$_position = _core$_position;
    this._nextPosition = _nextPosition;
    this._currentCodePoint = _currentCodePoint;
  }
  RuneIterator.builtin$cls = "RuneIterator";
  if (!"name" in RuneIterator)
    RuneIterator.name = "RuneIterator";
  $desc = $collectedClasses.RuneIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuneIterator.prototype = $desc;
  function StringBuffer(_contents) {
    this._contents = _contents;
  }
  StringBuffer.builtin$cls = "StringBuffer";
  if (!"name" in StringBuffer)
    StringBuffer.name = "StringBuffer";
  $desc = $collectedClasses.StringBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringBuffer.prototype = $desc;
  StringBuffer.prototype.get$_contents = function() {
    return this._contents;
  };
  function Symbol() {
  }
  Symbol.builtin$cls = "Symbol";
  if (!"name" in Symbol)
    Symbol.name = "Symbol";
  $desc = $collectedClasses.Symbol;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Symbol.prototype = $desc;
  function Type() {
  }
  Type.builtin$cls = "Type";
  if (!"name" in Type)
    Type.name = "Type";
  $desc = $collectedClasses.Type;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Type.prototype = $desc;
  function Uri(_host, _port, _path, scheme, userInfo, query, fragment, _pathSegments, _queryParameters) {
    this._host = _host;
    this._port = _port;
    this._path = _path;
    this.scheme = scheme;
    this.userInfo = userInfo;
    this.query = query;
    this.fragment = fragment;
    this._pathSegments = _pathSegments;
    this._queryParameters = _queryParameters;
  }
  Uri.builtin$cls = "Uri";
  if (!"name" in Uri)
    Uri.name = "Uri";
  $desc = $collectedClasses.Uri;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri.prototype = $desc;
  function Uri__makeScheme_isSchemeLowerCharacter() {
  }
  Uri__makeScheme_isSchemeLowerCharacter.builtin$cls = "Uri__makeScheme_isSchemeLowerCharacter";
  if (!"name" in Uri__makeScheme_isSchemeLowerCharacter)
    Uri__makeScheme_isSchemeLowerCharacter.name = "Uri__makeScheme_isSchemeLowerCharacter";
  $desc = $collectedClasses.Uri__makeScheme_isSchemeLowerCharacter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makeScheme_isSchemeLowerCharacter.prototype = $desc;
  function Uri__makeScheme_isSchemeCharacter() {
  }
  Uri__makeScheme_isSchemeCharacter.builtin$cls = "Uri__makeScheme_isSchemeCharacter";
  if (!"name" in Uri__makeScheme_isSchemeCharacter)
    Uri__makeScheme_isSchemeCharacter.name = "Uri__makeScheme_isSchemeCharacter";
  $desc = $collectedClasses.Uri__makeScheme_isSchemeCharacter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makeScheme_isSchemeCharacter.prototype = $desc;
  function Uri__makePath_closure() {
  }
  Uri__makePath_closure.builtin$cls = "Uri__makePath_closure";
  if (!"name" in Uri__makePath_closure)
    Uri__makePath_closure.name = "Uri__makePath_closure";
  $desc = $collectedClasses.Uri__makePath_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makePath_closure.prototype = $desc;
  function Uri__makeQuery_closure(box_0, result_1) {
    this.box_0 = box_0;
    this.result_1 = result_1;
  }
  Uri__makeQuery_closure.builtin$cls = "Uri__makeQuery_closure";
  if (!"name" in Uri__makeQuery_closure)
    Uri__makeQuery_closure.name = "Uri__makeQuery_closure";
  $desc = $collectedClasses.Uri__makeQuery_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makeQuery_closure.prototype = $desc;
  function Uri__normalize_isNormalizedHexDigit() {
  }
  Uri__normalize_isNormalizedHexDigit.builtin$cls = "Uri__normalize_isNormalizedHexDigit";
  if (!"name" in Uri__normalize_isNormalizedHexDigit)
    Uri__normalize_isNormalizedHexDigit.name = "Uri__normalize_isNormalizedHexDigit";
  $desc = $collectedClasses.Uri__normalize_isNormalizedHexDigit;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_isNormalizedHexDigit.prototype = $desc;
  function Uri__normalize_isLowerCaseHexDigit() {
  }
  Uri__normalize_isLowerCaseHexDigit.builtin$cls = "Uri__normalize_isLowerCaseHexDigit";
  if (!"name" in Uri__normalize_isLowerCaseHexDigit)
    Uri__normalize_isLowerCaseHexDigit.name = "Uri__normalize_isLowerCaseHexDigit";
  $desc = $collectedClasses.Uri__normalize_isLowerCaseHexDigit;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_isLowerCaseHexDigit.prototype = $desc;
  function Uri__normalize_isUnreserved() {
  }
  Uri__normalize_isUnreserved.builtin$cls = "Uri__normalize_isUnreserved";
  if (!"name" in Uri__normalize_isUnreserved)
    Uri__normalize_isUnreserved.name = "Uri__normalize_isUnreserved";
  $desc = $collectedClasses.Uri__normalize_isUnreserved;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_isUnreserved.prototype = $desc;
  function Uri__normalize_normalizeHexDigit(component_1, isNormalizedHexDigit_2, isLowerCaseHexDigit_3) {
    this.component_1 = component_1;
    this.isNormalizedHexDigit_2 = isNormalizedHexDigit_2;
    this.isLowerCaseHexDigit_3 = isLowerCaseHexDigit_3;
  }
  Uri__normalize_normalizeHexDigit.builtin$cls = "Uri__normalize_normalizeHexDigit";
  if (!"name" in Uri__normalize_normalizeHexDigit)
    Uri__normalize_normalizeHexDigit.name = "Uri__normalize_normalizeHexDigit";
  $desc = $collectedClasses.Uri__normalize_normalizeHexDigit;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_normalizeHexDigit.prototype = $desc;
  function Uri__normalize_decodeHexDigitPair(component_4) {
    this.component_4 = component_4;
  }
  Uri__normalize_decodeHexDigitPair.builtin$cls = "Uri__normalize_decodeHexDigitPair";
  if (!"name" in Uri__normalize_decodeHexDigitPair)
    Uri__normalize_decodeHexDigitPair.name = "Uri__normalize_decodeHexDigitPair";
  $desc = $collectedClasses.Uri__normalize_decodeHexDigitPair;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_decodeHexDigitPair.prototype = $desc;
  function Uri__normalize_fillResult(box_0, component_5) {
    this.box_0 = box_0;
    this.component_5 = component_5;
  }
  Uri__normalize_fillResult.builtin$cls = "Uri__normalize_fillResult";
  if (!"name" in Uri__normalize_fillResult)
    Uri__normalize_fillResult.name = "Uri__normalize_fillResult";
  $desc = $collectedClasses.Uri__normalize_fillResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_fillResult.prototype = $desc;
  function Uri_hashCode_combine() {
  }
  Uri_hashCode_combine.builtin$cls = "Uri_hashCode_combine";
  if (!"name" in Uri_hashCode_combine)
    Uri_hashCode_combine.name = "Uri_hashCode_combine";
  $desc = $collectedClasses.Uri_hashCode_combine;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_hashCode_combine.prototype = $desc;
  function Uri_parseIPv4Address_error() {
  }
  Uri_parseIPv4Address_error.builtin$cls = "Uri_parseIPv4Address_error";
  if (!"name" in Uri_parseIPv4Address_error)
    Uri_parseIPv4Address_error.name = "Uri_parseIPv4Address_error";
  $desc = $collectedClasses.Uri_parseIPv4Address_error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv4Address_error.prototype = $desc;
  function Uri_parseIPv4Address_closure(error_0) {
    this.error_0 = error_0;
  }
  Uri_parseIPv4Address_closure.builtin$cls = "Uri_parseIPv4Address_closure";
  if (!"name" in Uri_parseIPv4Address_closure)
    Uri_parseIPv4Address_closure.name = "Uri_parseIPv4Address_closure";
  $desc = $collectedClasses.Uri_parseIPv4Address_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv4Address_closure.prototype = $desc;
  function Uri_parseIPv6Address_error() {
  }
  Uri_parseIPv6Address_error.builtin$cls = "Uri_parseIPv6Address_error";
  if (!"name" in Uri_parseIPv6Address_error)
    Uri_parseIPv6Address_error.name = "Uri_parseIPv6Address_error";
  $desc = $collectedClasses.Uri_parseIPv6Address_error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv6Address_error.prototype = $desc;
  function Uri_parseIPv6Address_parseHex(host_0, error_1) {
    this.host_0 = host_0;
    this.error_1 = error_1;
  }
  Uri_parseIPv6Address_parseHex.builtin$cls = "Uri_parseIPv6Address_parseHex";
  if (!"name" in Uri_parseIPv6Address_parseHex)
    Uri_parseIPv6Address_parseHex.name = "Uri_parseIPv6Address_parseHex";
  $desc = $collectedClasses.Uri_parseIPv6Address_parseHex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv6Address_parseHex.prototype = $desc;
  function Uri_parseIPv6Address_closure(parts_2) {
    this.parts_2 = parts_2;
  }
  Uri_parseIPv6Address_closure.builtin$cls = "Uri_parseIPv6Address_closure";
  if (!"name" in Uri_parseIPv6Address_closure)
    Uri_parseIPv6Address_closure.name = "Uri_parseIPv6Address_closure";
  $desc = $collectedClasses.Uri_parseIPv6Address_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv6Address_closure.prototype = $desc;
  function Uri__uriEncode_byteToHex() {
  }
  Uri__uriEncode_byteToHex.builtin$cls = "Uri__uriEncode_byteToHex";
  if (!"name" in Uri__uriEncode_byteToHex)
    Uri__uriEncode_byteToHex.name = "Uri__uriEncode_byteToHex";
  $desc = $collectedClasses.Uri__uriEncode_byteToHex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__uriEncode_byteToHex.prototype = $desc;
  function Console() {
  }
  Console.builtin$cls = "Console";
  if (!"name" in Console)
    Console.name = "Console";
  $desc = $collectedClasses.Console;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Console.prototype = $desc;
  function Interceptor_CssStyleDeclarationBase() {
  }
  Interceptor_CssStyleDeclarationBase.builtin$cls = "Interceptor_CssStyleDeclarationBase";
  if (!"name" in Interceptor_CssStyleDeclarationBase)
    Interceptor_CssStyleDeclarationBase.name = "Interceptor_CssStyleDeclarationBase";
  $desc = $collectedClasses.Interceptor_CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_CssStyleDeclarationBase.prototype = $desc;
  function CssStyleDeclarationBase() {
  }
  CssStyleDeclarationBase.builtin$cls = "CssStyleDeclarationBase";
  if (!"name" in CssStyleDeclarationBase)
    CssStyleDeclarationBase.name = "CssStyleDeclarationBase";
  $desc = $collectedClasses.CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclarationBase.prototype = $desc;
  function _ChildrenElementList(_element, _childElements) {
    this._element = _element;
    this._childElements = _childElements;
  }
  _ChildrenElementList.builtin$cls = "_ChildrenElementList";
  if (!"name" in _ChildrenElementList)
    _ChildrenElementList.name = "_ChildrenElementList";
  $desc = $collectedClasses._ChildrenElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ChildrenElementList.prototype = $desc;
  function _FrozenElementList(_nodeList, _elementList) {
    this._nodeList = _nodeList;
    this._elementList = _elementList;
  }
  _FrozenElementList.builtin$cls = "_FrozenElementList";
  if (!"name" in _FrozenElementList)
    _FrozenElementList.name = "_FrozenElementList";
  $desc = $collectedClasses._FrozenElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FrozenElementList.prototype = $desc;
  function _FrozenElementList$_wrap_closure() {
  }
  _FrozenElementList$_wrap_closure.builtin$cls = "_FrozenElementList$_wrap_closure";
  if (!"name" in _FrozenElementList$_wrap_closure)
    _FrozenElementList$_wrap_closure.name = "_FrozenElementList$_wrap_closure";
  $desc = $collectedClasses._FrozenElementList$_wrap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FrozenElementList$_wrap_closure.prototype = $desc;
  function _FrozenElementList_classes_closure(value_0) {
    this.value_0 = value_0;
  }
  _FrozenElementList_classes_closure.builtin$cls = "_FrozenElementList_classes_closure";
  if (!"name" in _FrozenElementList_classes_closure)
    _FrozenElementList_classes_closure.name = "_FrozenElementList_classes_closure";
  $desc = $collectedClasses._FrozenElementList_classes_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FrozenElementList_classes_closure.prototype = $desc;
  function Element_Element$html_closure() {
  }
  Element_Element$html_closure.builtin$cls = "Element_Element$html_closure";
  if (!"name" in Element_Element$html_closure)
    Element_Element$html_closure.name = "Element_Element$html_closure";
  $desc = $collectedClasses.Element_Element$html_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element_Element$html_closure.prototype = $desc;
  function ScrollAlignment(_html$_value) {
    this._html$_value = _html$_value;
  }
  ScrollAlignment.builtin$cls = "ScrollAlignment";
  if (!"name" in ScrollAlignment)
    ScrollAlignment.name = "ScrollAlignment";
  $desc = $collectedClasses.ScrollAlignment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScrollAlignment.prototype = $desc;
  function Entry() {
  }
  Entry.builtin$cls = "Entry";
  if (!"name" in Entry)
    Entry.name = "Entry";
  $desc = $collectedClasses.Entry;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Entry.prototype = $desc;
  function Events(_ptr) {
    this._ptr = _ptr;
  }
  Events.builtin$cls = "Events";
  if (!"name" in Events)
    Events.name = "Events";
  $desc = $collectedClasses.Events;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Events.prototype = $desc;
  Events.prototype.get$_ptr = function() {
    return this._ptr;
  };
  function ElementEvents(_ptr, html$Events$_ptr) {
    this._ptr = _ptr;
    this.html$Events$_ptr = html$Events$_ptr;
  }
  ElementEvents.builtin$cls = "ElementEvents";
  if (!"name" in ElementEvents)
    ElementEvents.name = "ElementEvents";
  $desc = $collectedClasses.ElementEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ElementEvents.prototype = $desc;
  ElementEvents.prototype.get$_ptr = function() {
    return this._ptr;
  };
  function Interceptor_ListMixin() {
  }
  Interceptor_ListMixin.builtin$cls = "Interceptor_ListMixin";
  if (!"name" in Interceptor_ListMixin)
    Interceptor_ListMixin.name = "Interceptor_ListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin() {
  }
  Interceptor_ListMixin_ImmutableListMixin.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin)
    Interceptor_ListMixin_ImmutableListMixin.name = "Interceptor_ListMixin_ImmutableListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin.prototype = $desc;
  function HttpRequest_getString_closure() {
  }
  HttpRequest_getString_closure.builtin$cls = "HttpRequest_getString_closure";
  if (!"name" in HttpRequest_getString_closure)
    HttpRequest_getString_closure.name = "HttpRequest_getString_closure";
  $desc = $collectedClasses.HttpRequest_getString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest_getString_closure.prototype = $desc;
  function HttpRequest_request_closure0(xhr_0) {
    this.xhr_0 = xhr_0;
  }
  HttpRequest_request_closure0.builtin$cls = "HttpRequest_request_closure0";
  if (!"name" in HttpRequest_request_closure0)
    HttpRequest_request_closure0.name = "HttpRequest_request_closure0";
  $desc = $collectedClasses.HttpRequest_request_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest_request_closure0.prototype = $desc;
  function HttpRequest_request_closure(completer_1, xhr_2) {
    this.completer_1 = completer_1;
    this.xhr_2 = xhr_2;
  }
  HttpRequest_request_closure.builtin$cls = "HttpRequest_request_closure";
  if (!"name" in HttpRequest_request_closure)
    HttpRequest_request_closure.name = "HttpRequest_request_closure";
  $desc = $collectedClasses.HttpRequest_request_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest_request_closure.prototype = $desc;
  function _ChildNodeListLazy(_this) {
    this._this = _this;
  }
  _ChildNodeListLazy.builtin$cls = "_ChildNodeListLazy";
  if (!"name" in _ChildNodeListLazy)
    _ChildNodeListLazy.name = "_ChildNodeListLazy";
  $desc = $collectedClasses._ChildNodeListLazy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ChildNodeListLazy.prototype = $desc;
  function Interceptor_ListMixin0() {
  }
  Interceptor_ListMixin0.builtin$cls = "Interceptor_ListMixin0";
  if (!"name" in Interceptor_ListMixin0)
    Interceptor_ListMixin0.name = "Interceptor_ListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin0.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin0() {
  }
  Interceptor_ListMixin_ImmutableListMixin0.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin0";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin0)
    Interceptor_ListMixin_ImmutableListMixin0.name = "Interceptor_ListMixin_ImmutableListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin0.prototype = $desc;
  function Interceptor_ListMixin1() {
  }
  Interceptor_ListMixin1.builtin$cls = "Interceptor_ListMixin1";
  if (!"name" in Interceptor_ListMixin1)
    Interceptor_ListMixin1.name = "Interceptor_ListMixin1";
  $desc = $collectedClasses.Interceptor_ListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin1.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin1() {
  }
  Interceptor_ListMixin_ImmutableListMixin1.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin1";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin1)
    Interceptor_ListMixin_ImmutableListMixin1.name = "Interceptor_ListMixin_ImmutableListMixin1";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin1.prototype = $desc;
  function Interceptor_ListMixin2() {
  }
  Interceptor_ListMixin2.builtin$cls = "Interceptor_ListMixin2";
  if (!"name" in Interceptor_ListMixin2)
    Interceptor_ListMixin2.name = "Interceptor_ListMixin2";
  $desc = $collectedClasses.Interceptor_ListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin2.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin2() {
  }
  Interceptor_ListMixin_ImmutableListMixin2.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin2";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin2)
    Interceptor_ListMixin_ImmutableListMixin2.name = "Interceptor_ListMixin_ImmutableListMixin2";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin2.prototype = $desc;
  function Interceptor_ListMixin3() {
  }
  Interceptor_ListMixin3.builtin$cls = "Interceptor_ListMixin3";
  if (!"name" in Interceptor_ListMixin3)
    Interceptor_ListMixin3.name = "Interceptor_ListMixin3";
  $desc = $collectedClasses.Interceptor_ListMixin3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin3.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin3() {
  }
  Interceptor_ListMixin_ImmutableListMixin3.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin3";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin3)
    Interceptor_ListMixin_ImmutableListMixin3.name = "Interceptor_ListMixin_ImmutableListMixin3";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin3.prototype = $desc;
  function _AttributeMap() {
  }
  _AttributeMap.builtin$cls = "_AttributeMap";
  if (!"name" in _AttributeMap)
    _AttributeMap.name = "_AttributeMap";
  $desc = $collectedClasses._AttributeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AttributeMap.prototype = $desc;
  function _ElementAttributeMap(_element) {
    this._element = _element;
  }
  _ElementAttributeMap.builtin$cls = "_ElementAttributeMap";
  if (!"name" in _ElementAttributeMap)
    _ElementAttributeMap.name = "_ElementAttributeMap";
  $desc = $collectedClasses._ElementAttributeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementAttributeMap.prototype = $desc;
  function _DataAttributeMap(_attributes) {
    this._attributes = _attributes;
  }
  _DataAttributeMap.builtin$cls = "_DataAttributeMap";
  if (!"name" in _DataAttributeMap)
    _DataAttributeMap.name = "_DataAttributeMap";
  $desc = $collectedClasses._DataAttributeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DataAttributeMap.prototype = $desc;
  function _DataAttributeMap_containsValue_closure(value_0) {
    this.value_0 = value_0;
  }
  _DataAttributeMap_containsValue_closure.builtin$cls = "_DataAttributeMap_containsValue_closure";
  if (!"name" in _DataAttributeMap_containsValue_closure)
    _DataAttributeMap_containsValue_closure.name = "_DataAttributeMap_containsValue_closure";
  $desc = $collectedClasses._DataAttributeMap_containsValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DataAttributeMap_containsValue_closure.prototype = $desc;
  function _DataAttributeMap_forEach_closure(this_0, f_1) {
    this.this_0 = this_0;
    this.f_1 = f_1;
  }
  _DataAttributeMap_forEach_closure.builtin$cls = "_DataAttributeMap_forEach_closure";
  if (!"name" in _DataAttributeMap_forEach_closure)
    _DataAttributeMap_forEach_closure.name = "_DataAttributeMap_forEach_closure";
  $desc = $collectedClasses._DataAttributeMap_forEach_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DataAttributeMap_forEach_closure.prototype = $desc;
  function _DataAttributeMap_keys_closure(this_0, keys_1) {
    this.this_0 = this_0;
    this.keys_1 = keys_1;
  }
  _DataAttributeMap_keys_closure.builtin$cls = "_DataAttributeMap_keys_closure";
  if (!"name" in _DataAttributeMap_keys_closure)
    _DataAttributeMap_keys_closure.name = "_DataAttributeMap_keys_closure";
  $desc = $collectedClasses._DataAttributeMap_keys_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DataAttributeMap_keys_closure.prototype = $desc;
  function _DataAttributeMap_values_closure(this_0, values_1) {
    this.this_0 = this_0;
    this.values_1 = values_1;
  }
  _DataAttributeMap_values_closure.builtin$cls = "_DataAttributeMap_values_closure";
  if (!"name" in _DataAttributeMap_values_closure)
    _DataAttributeMap_values_closure.name = "_DataAttributeMap_values_closure";
  $desc = $collectedClasses._DataAttributeMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DataAttributeMap_values_closure.prototype = $desc;
  function _MultiElementCssClassSet(_elementIterable, _elementCssClassSetIterable) {
    this._elementIterable = _elementIterable;
    this._elementCssClassSetIterable = _elementCssClassSetIterable;
  }
  _MultiElementCssClassSet.builtin$cls = "_MultiElementCssClassSet";
  if (!"name" in _MultiElementCssClassSet)
    _MultiElementCssClassSet.name = "_MultiElementCssClassSet";
  $desc = $collectedClasses._MultiElementCssClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet.prototype = $desc;
  function _MultiElementCssClassSet_closure() {
  }
  _MultiElementCssClassSet_closure.builtin$cls = "_MultiElementCssClassSet_closure";
  if (!"name" in _MultiElementCssClassSet_closure)
    _MultiElementCssClassSet_closure.name = "_MultiElementCssClassSet_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_closure.prototype = $desc;
  function _MultiElementCssClassSet_readClasses_closure(s_0) {
    this.s_0 = s_0;
  }
  _MultiElementCssClassSet_readClasses_closure.builtin$cls = "_MultiElementCssClassSet_readClasses_closure";
  if (!"name" in _MultiElementCssClassSet_readClasses_closure)
    _MultiElementCssClassSet_readClasses_closure.name = "_MultiElementCssClassSet_readClasses_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_readClasses_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_readClasses_closure.prototype = $desc;
  function _MultiElementCssClassSet_modify_closure(f_0) {
    this.f_0 = f_0;
  }
  _MultiElementCssClassSet_modify_closure.builtin$cls = "_MultiElementCssClassSet_modify_closure";
  if (!"name" in _MultiElementCssClassSet_modify_closure)
    _MultiElementCssClassSet_modify_closure.name = "_MultiElementCssClassSet_modify_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_modify_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_modify_closure.prototype = $desc;
  function _MultiElementCssClassSet_remove_closure(value_0) {
    this.value_0 = value_0;
  }
  _MultiElementCssClassSet_remove_closure.builtin$cls = "_MultiElementCssClassSet_remove_closure";
  if (!"name" in _MultiElementCssClassSet_remove_closure)
    _MultiElementCssClassSet_remove_closure.name = "_MultiElementCssClassSet_remove_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_remove_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_remove_closure.prototype = $desc;
  function _MultiElementCssClassSet__modifyWithReturnValue_closure(f_0) {
    this.f_0 = f_0;
  }
  _MultiElementCssClassSet__modifyWithReturnValue_closure.builtin$cls = "_MultiElementCssClassSet__modifyWithReturnValue_closure";
  if (!"name" in _MultiElementCssClassSet__modifyWithReturnValue_closure)
    _MultiElementCssClassSet__modifyWithReturnValue_closure.name = "_MultiElementCssClassSet__modifyWithReturnValue_closure";
  $desc = $collectedClasses._MultiElementCssClassSet__modifyWithReturnValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet__modifyWithReturnValue_closure.prototype = $desc;
  function _ElementCssClassSet(_element) {
    this._element = _element;
  }
  _ElementCssClassSet.builtin$cls = "_ElementCssClassSet";
  if (!"name" in _ElementCssClassSet)
    _ElementCssClassSet.name = "_ElementCssClassSet";
  $desc = $collectedClasses._ElementCssClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementCssClassSet.prototype = $desc;
  function EventStreamProvider(_eventType) {
    this._eventType = _eventType;
  }
  EventStreamProvider.builtin$cls = "EventStreamProvider";
  if (!"name" in EventStreamProvider)
    EventStreamProvider.name = "EventStreamProvider";
  $desc = $collectedClasses.EventStreamProvider;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventStreamProvider.prototype = $desc;
  function _EventStream(_target, _eventType, _useCapture) {
    this._target = _target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _EventStream.builtin$cls = "_EventStream";
  if (!"name" in _EventStream)
    _EventStream.name = "_EventStream";
  $desc = $collectedClasses._EventStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStream.prototype = $desc;
  function _ElementEventStreamImpl(_target, _eventType, _useCapture) {
    this._target = _target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _ElementEventStreamImpl.builtin$cls = "_ElementEventStreamImpl";
  if (!"name" in _ElementEventStreamImpl)
    _ElementEventStreamImpl.name = "_ElementEventStreamImpl";
  $desc = $collectedClasses._ElementEventStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementEventStreamImpl.prototype = $desc;
  function _ElementEventStreamImpl_matches_closure(selector_0) {
    this.selector_0 = selector_0;
  }
  _ElementEventStreamImpl_matches_closure.builtin$cls = "_ElementEventStreamImpl_matches_closure";
  if (!"name" in _ElementEventStreamImpl_matches_closure)
    _ElementEventStreamImpl_matches_closure.name = "_ElementEventStreamImpl_matches_closure";
  $desc = $collectedClasses._ElementEventStreamImpl_matches_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementEventStreamImpl_matches_closure.prototype = $desc;
  function _ElementEventStreamImpl_matches_closure0(selector_1) {
    this.selector_1 = selector_1;
  }
  _ElementEventStreamImpl_matches_closure0.builtin$cls = "_ElementEventStreamImpl_matches_closure0";
  if (!"name" in _ElementEventStreamImpl_matches_closure0)
    _ElementEventStreamImpl_matches_closure0.name = "_ElementEventStreamImpl_matches_closure0";
  $desc = $collectedClasses._ElementEventStreamImpl_matches_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementEventStreamImpl_matches_closure0.prototype = $desc;
  function _ElementListEventStreamImpl(_targetList, _useCapture, _eventType) {
    this._targetList = _targetList;
    this._useCapture = _useCapture;
    this._eventType = _eventType;
  }
  _ElementListEventStreamImpl.builtin$cls = "_ElementListEventStreamImpl";
  if (!"name" in _ElementListEventStreamImpl)
    _ElementListEventStreamImpl.name = "_ElementListEventStreamImpl";
  $desc = $collectedClasses._ElementListEventStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementListEventStreamImpl.prototype = $desc;
  function _ElementListEventStreamImpl_matches_closure(selector_0) {
    this.selector_0 = selector_0;
  }
  _ElementListEventStreamImpl_matches_closure.builtin$cls = "_ElementListEventStreamImpl_matches_closure";
  if (!"name" in _ElementListEventStreamImpl_matches_closure)
    _ElementListEventStreamImpl_matches_closure.name = "_ElementListEventStreamImpl_matches_closure";
  $desc = $collectedClasses._ElementListEventStreamImpl_matches_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementListEventStreamImpl_matches_closure.prototype = $desc;
  function _ElementListEventStreamImpl_matches_closure0(selector_1) {
    this.selector_1 = selector_1;
  }
  _ElementListEventStreamImpl_matches_closure0.builtin$cls = "_ElementListEventStreamImpl_matches_closure0";
  if (!"name" in _ElementListEventStreamImpl_matches_closure0)
    _ElementListEventStreamImpl_matches_closure0.name = "_ElementListEventStreamImpl_matches_closure0";
  $desc = $collectedClasses._ElementListEventStreamImpl_matches_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementListEventStreamImpl_matches_closure0.prototype = $desc;
  function _EventStreamSubscription(_pauseCount, _target, _eventType, _onData, _useCapture) {
    this._pauseCount = _pauseCount;
    this._target = _target;
    this._eventType = _eventType;
    this._onData = _onData;
    this._useCapture = _useCapture;
  }
  _EventStreamSubscription.builtin$cls = "_EventStreamSubscription";
  if (!"name" in _EventStreamSubscription)
    _EventStreamSubscription.name = "_EventStreamSubscription";
  $desc = $collectedClasses._EventStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStreamSubscription.prototype = $desc;
  function _StreamPool(_html$_controller, _subscriptions) {
    this._html$_controller = _html$_controller;
    this._subscriptions = _subscriptions;
  }
  _StreamPool.builtin$cls = "_StreamPool";
  if (!"name" in _StreamPool)
    _StreamPool.name = "_StreamPool";
  $desc = $collectedClasses._StreamPool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamPool.prototype = $desc;
  function _StreamPool_add_closure(this_0, stream_1) {
    this.this_0 = this_0;
    this.stream_1 = stream_1;
  }
  _StreamPool_add_closure.builtin$cls = "_StreamPool_add_closure";
  if (!"name" in _StreamPool_add_closure)
    _StreamPool_add_closure.name = "_StreamPool_add_closure";
  $desc = $collectedClasses._StreamPool_add_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamPool_add_closure.prototype = $desc;
  function _CustomEventStreamProvider(_eventTypeGetter) {
    this._eventTypeGetter = _eventTypeGetter;
  }
  _CustomEventStreamProvider.builtin$cls = "_CustomEventStreamProvider";
  if (!"name" in _CustomEventStreamProvider)
    _CustomEventStreamProvider.name = "_CustomEventStreamProvider";
  $desc = $collectedClasses._CustomEventStreamProvider;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomEventStreamProvider.prototype = $desc;
  function _Html5NodeValidator(uriPolicy) {
    this.uriPolicy = uriPolicy;
  }
  _Html5NodeValidator.builtin$cls = "_Html5NodeValidator";
  if (!"name" in _Html5NodeValidator)
    _Html5NodeValidator.name = "_Html5NodeValidator";
  $desc = $collectedClasses._Html5NodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Html5NodeValidator.prototype = $desc;
  _Html5NodeValidator.prototype.get$uriPolicy = function() {
    return this.uriPolicy;
  };
  function ImmutableListMixin() {
  }
  ImmutableListMixin.builtin$cls = "ImmutableListMixin";
  if (!"name" in ImmutableListMixin)
    ImmutableListMixin.name = "ImmutableListMixin";
  $desc = $collectedClasses.ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImmutableListMixin.prototype = $desc;
  function NodeValidatorBuilder(_validators) {
    this._validators = _validators;
  }
  NodeValidatorBuilder.builtin$cls = "NodeValidatorBuilder";
  if (!"name" in NodeValidatorBuilder)
    NodeValidatorBuilder.name = "NodeValidatorBuilder";
  $desc = $collectedClasses.NodeValidatorBuilder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder.prototype = $desc;
  function NodeValidatorBuilder_allowCustomElement_closure(tagNameUpper_0) {
    this.tagNameUpper_0 = tagNameUpper_0;
  }
  NodeValidatorBuilder_allowCustomElement_closure.builtin$cls = "NodeValidatorBuilder_allowCustomElement_closure";
  if (!"name" in NodeValidatorBuilder_allowCustomElement_closure)
    NodeValidatorBuilder_allowCustomElement_closure.name = "NodeValidatorBuilder_allowCustomElement_closure";
  $desc = $collectedClasses.NodeValidatorBuilder_allowCustomElement_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowCustomElement_closure.prototype = $desc;
  function NodeValidatorBuilder_allowCustomElement_closure0(tagNameUpper_1) {
    this.tagNameUpper_1 = tagNameUpper_1;
  }
  NodeValidatorBuilder_allowCustomElement_closure0.builtin$cls = "NodeValidatorBuilder_allowCustomElement_closure0";
  if (!"name" in NodeValidatorBuilder_allowCustomElement_closure0)
    NodeValidatorBuilder_allowCustomElement_closure0.name = "NodeValidatorBuilder_allowCustomElement_closure0";
  $desc = $collectedClasses.NodeValidatorBuilder_allowCustomElement_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowCustomElement_closure0.prototype = $desc;
  function NodeValidatorBuilder_allowTagExtension_closure(baseNameUpper_0) {
    this.baseNameUpper_0 = baseNameUpper_0;
  }
  NodeValidatorBuilder_allowTagExtension_closure.builtin$cls = "NodeValidatorBuilder_allowTagExtension_closure";
  if (!"name" in NodeValidatorBuilder_allowTagExtension_closure)
    NodeValidatorBuilder_allowTagExtension_closure.name = "NodeValidatorBuilder_allowTagExtension_closure";
  $desc = $collectedClasses.NodeValidatorBuilder_allowTagExtension_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowTagExtension_closure.prototype = $desc;
  function NodeValidatorBuilder_allowTagExtension_closure0(baseNameUpper_1) {
    this.baseNameUpper_1 = baseNameUpper_1;
  }
  NodeValidatorBuilder_allowTagExtension_closure0.builtin$cls = "NodeValidatorBuilder_allowTagExtension_closure0";
  if (!"name" in NodeValidatorBuilder_allowTagExtension_closure0)
    NodeValidatorBuilder_allowTagExtension_closure0.name = "NodeValidatorBuilder_allowTagExtension_closure0";
  $desc = $collectedClasses.NodeValidatorBuilder_allowTagExtension_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowTagExtension_closure0.prototype = $desc;
  function NodeValidatorBuilder_allowsElement_closure(element_0) {
    this.element_0 = element_0;
  }
  NodeValidatorBuilder_allowsElement_closure.builtin$cls = "NodeValidatorBuilder_allowsElement_closure";
  if (!"name" in NodeValidatorBuilder_allowsElement_closure)
    NodeValidatorBuilder_allowsElement_closure.name = "NodeValidatorBuilder_allowsElement_closure";
  $desc = $collectedClasses.NodeValidatorBuilder_allowsElement_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowsElement_closure.prototype = $desc;
  function NodeValidatorBuilder_allowsAttribute_closure(element_0, attributeName_1, value_2) {
    this.element_0 = element_0;
    this.attributeName_1 = attributeName_1;
    this.value_2 = value_2;
  }
  NodeValidatorBuilder_allowsAttribute_closure.builtin$cls = "NodeValidatorBuilder_allowsAttribute_closure";
  if (!"name" in NodeValidatorBuilder_allowsAttribute_closure)
    NodeValidatorBuilder_allowsAttribute_closure.name = "NodeValidatorBuilder_allowsAttribute_closure";
  $desc = $collectedClasses.NodeValidatorBuilder_allowsAttribute_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowsAttribute_closure.prototype = $desc;
  function _SimpleNodeValidator(uriPolicy) {
    this.uriPolicy = uriPolicy;
  }
  _SimpleNodeValidator.builtin$cls = "_SimpleNodeValidator";
  if (!"name" in _SimpleNodeValidator)
    _SimpleNodeValidator.name = "_SimpleNodeValidator";
  $desc = $collectedClasses._SimpleNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SimpleNodeValidator.prototype = $desc;
  _SimpleNodeValidator.prototype.get$uriPolicy = function() {
    return this.uriPolicy;
  };
  function _CustomElementNodeValidator(allowTypeExtension, allowCustomTag, allowedElements, allowedAttributes, allowedUriAttributes, uriPolicy) {
    this.allowTypeExtension = allowTypeExtension;
    this.allowCustomTag = allowCustomTag;
    this.allowedElements = allowedElements;
    this.allowedAttributes = allowedAttributes;
    this.allowedUriAttributes = allowedUriAttributes;
    this.uriPolicy = uriPolicy;
  }
  _CustomElementNodeValidator.builtin$cls = "_CustomElementNodeValidator";
  if (!"name" in _CustomElementNodeValidator)
    _CustomElementNodeValidator.name = "_CustomElementNodeValidator";
  $desc = $collectedClasses._CustomElementNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomElementNodeValidator.prototype = $desc;
  function _TemplatingNodeValidator(_templateAttrs, allowedElements, allowedAttributes, allowedUriAttributes, uriPolicy) {
    this._templateAttrs = _templateAttrs;
    this.allowedElements = allowedElements;
    this.allowedAttributes = allowedAttributes;
    this.allowedUriAttributes = allowedUriAttributes;
    this.uriPolicy = uriPolicy;
  }
  _TemplatingNodeValidator.builtin$cls = "_TemplatingNodeValidator";
  if (!"name" in _TemplatingNodeValidator)
    _TemplatingNodeValidator.name = "_TemplatingNodeValidator";
  $desc = $collectedClasses._TemplatingNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplatingNodeValidator.prototype = $desc;
  function _TemplatingNodeValidator_closure() {
  }
  _TemplatingNodeValidator_closure.builtin$cls = "_TemplatingNodeValidator_closure";
  if (!"name" in _TemplatingNodeValidator_closure)
    _TemplatingNodeValidator_closure.name = "_TemplatingNodeValidator_closure";
  $desc = $collectedClasses._TemplatingNodeValidator_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplatingNodeValidator_closure.prototype = $desc;
  function _SvgNodeValidator() {
  }
  _SvgNodeValidator.builtin$cls = "_SvgNodeValidator";
  if (!"name" in _SvgNodeValidator)
    _SvgNodeValidator.name = "_SvgNodeValidator";
  $desc = $collectedClasses._SvgNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SvgNodeValidator.prototype = $desc;
  function FixedSizeListIterator(_array, _html$_length, _position, _html$_current) {
    this._array = _array;
    this._html$_length = _html$_length;
    this._position = _position;
    this._html$_current = _html$_current;
  }
  FixedSizeListIterator.builtin$cls = "FixedSizeListIterator";
  if (!"name" in FixedSizeListIterator)
    FixedSizeListIterator.name = "FixedSizeListIterator";
  $desc = $collectedClasses.FixedSizeListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedSizeListIterator.prototype = $desc;
  function _callConstructor_closure(constructor_0, interceptor_1) {
    this.constructor_0 = constructor_0;
    this.interceptor_1 = interceptor_1;
  }
  _callConstructor_closure.builtin$cls = "_callConstructor_closure";
  if (!"name" in _callConstructor_closure)
    _callConstructor_closure.name = "_callConstructor_closure";
  $desc = $collectedClasses._callConstructor_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _callConstructor_closure.prototype = $desc;
  function _DOMWindowCrossFrame(_window) {
    this._window = _window;
  }
  _DOMWindowCrossFrame.builtin$cls = "_DOMWindowCrossFrame";
  if (!"name" in _DOMWindowCrossFrame)
    _DOMWindowCrossFrame.name = "_DOMWindowCrossFrame";
  $desc = $collectedClasses._DOMWindowCrossFrame;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DOMWindowCrossFrame.prototype = $desc;
  function _LocationCrossFrame(_location) {
    this._location = _location;
  }
  _LocationCrossFrame.builtin$cls = "_LocationCrossFrame";
  if (!"name" in _LocationCrossFrame)
    _LocationCrossFrame.name = "_LocationCrossFrame";
  $desc = $collectedClasses._LocationCrossFrame;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LocationCrossFrame.prototype = $desc;
  function _LocationWrapper(_ptr) {
    this._ptr = _ptr;
  }
  _LocationWrapper.builtin$cls = "_LocationWrapper";
  if (!"name" in _LocationWrapper)
    _LocationWrapper.name = "_LocationWrapper";
  $desc = $collectedClasses._LocationWrapper;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LocationWrapper.prototype = $desc;
  function NodeValidator() {
  }
  NodeValidator.builtin$cls = "NodeValidator";
  if (!"name" in NodeValidator)
    NodeValidator.name = "NodeValidator";
  $desc = $collectedClasses.NodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidator.prototype = $desc;
  function _SameOriginUriPolicy(_hiddenAnchor, _loc) {
    this._hiddenAnchor = _hiddenAnchor;
    this._loc = _loc;
  }
  _SameOriginUriPolicy.builtin$cls = "_SameOriginUriPolicy";
  if (!"name" in _SameOriginUriPolicy)
    _SameOriginUriPolicy.name = "_SameOriginUriPolicy";
  $desc = $collectedClasses._SameOriginUriPolicy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SameOriginUriPolicy.prototype = $desc;
  function _ValidatingTreeSanitizer(validator) {
    this.validator = validator;
  }
  _ValidatingTreeSanitizer.builtin$cls = "_ValidatingTreeSanitizer";
  if (!"name" in _ValidatingTreeSanitizer)
    _ValidatingTreeSanitizer.name = "_ValidatingTreeSanitizer";
  $desc = $collectedClasses._ValidatingTreeSanitizer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ValidatingTreeSanitizer.prototype = $desc;
  _ValidatingTreeSanitizer.prototype.get$validator = function(receiver) {
    return this.validator;
  };
  _ValidatingTreeSanitizer.prototype.set$validator = function(receiver, v) {
    return this.validator = v;
  };
  function _ValidatingTreeSanitizer_sanitizeTree_walk(this_0) {
    this.this_0 = this_0;
  }
  _ValidatingTreeSanitizer_sanitizeTree_walk.builtin$cls = "_ValidatingTreeSanitizer_sanitizeTree_walk";
  if (!"name" in _ValidatingTreeSanitizer_sanitizeTree_walk)
    _ValidatingTreeSanitizer_sanitizeTree_walk.name = "_ValidatingTreeSanitizer_sanitizeTree_walk";
  $desc = $collectedClasses._ValidatingTreeSanitizer_sanitizeTree_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ValidatingTreeSanitizer_sanitizeTree_walk.prototype = $desc;
  function _AttributeClassSet(_svg$_element) {
    this._svg$_element = _svg$_element;
  }
  _AttributeClassSet.builtin$cls = "_AttributeClassSet";
  if (!"name" in _AttributeClassSet)
    _AttributeClassSet.name = "_AttributeClassSet";
  $desc = $collectedClasses._AttributeClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AttributeClassSet.prototype = $desc;
  function ReceivePort() {
  }
  ReceivePort.builtin$cls = "ReceivePort";
  if (!"name" in ReceivePort)
    ReceivePort.name = "ReceivePort";
  $desc = $collectedClasses.ReceivePort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReceivePort.prototype = $desc;
  function JsObject(_jsObject) {
    this._jsObject = _jsObject;
  }
  JsObject.builtin$cls = "JsObject";
  if (!"name" in JsObject)
    JsObject.name = "JsObject";
  $desc = $collectedClasses.JsObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsObject.prototype = $desc;
  function JsFunction(_jsObject) {
    this._jsObject = _jsObject;
  }
  JsFunction.builtin$cls = "JsFunction";
  if (!"name" in JsFunction)
    JsFunction.name = "JsFunction";
  $desc = $collectedClasses.JsFunction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsFunction.prototype = $desc;
  function JsArray(_jsObject) {
    this._jsObject = _jsObject;
  }
  JsArray.builtin$cls = "JsArray";
  if (!"name" in JsArray)
    JsArray.name = "JsArray";
  $desc = $collectedClasses.JsArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsArray.prototype = $desc;
  function JsObject_ListMixin() {
  }
  JsObject_ListMixin.builtin$cls = "JsObject_ListMixin";
  if (!"name" in JsObject_ListMixin)
    JsObject_ListMixin.name = "JsObject_ListMixin";
  $desc = $collectedClasses.JsObject_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsObject_ListMixin.prototype = $desc;
  function _convertToJS_closure() {
  }
  _convertToJS_closure.builtin$cls = "_convertToJS_closure";
  if (!"name" in _convertToJS_closure)
    _convertToJS_closure.name = "_convertToJS_closure";
  $desc = $collectedClasses._convertToJS_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertToJS_closure.prototype = $desc;
  function _convertToJS_closure0() {
  }
  _convertToJS_closure0.builtin$cls = "_convertToJS_closure0";
  if (!"name" in _convertToJS_closure0)
    _convertToJS_closure0.name = "_convertToJS_closure0";
  $desc = $collectedClasses._convertToJS_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertToJS_closure0.prototype = $desc;
  function _wrapToDart_closure() {
  }
  _wrapToDart_closure.builtin$cls = "_wrapToDart_closure";
  if (!"name" in _wrapToDart_closure)
    _wrapToDart_closure.name = "_wrapToDart_closure";
  $desc = $collectedClasses._wrapToDart_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _wrapToDart_closure.prototype = $desc;
  function _wrapToDart_closure0() {
  }
  _wrapToDart_closure0.builtin$cls = "_wrapToDart_closure0";
  if (!"name" in _wrapToDart_closure0)
    _wrapToDart_closure0.name = "_wrapToDart_closure0";
  $desc = $collectedClasses._wrapToDart_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _wrapToDart_closure0.prototype = $desc;
  function _wrapToDart_closure1() {
  }
  _wrapToDart_closure1.builtin$cls = "_wrapToDart_closure1";
  if (!"name" in _wrapToDart_closure1)
    _wrapToDart_closure1.name = "_wrapToDart_closure1";
  $desc = $collectedClasses._wrapToDart_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _wrapToDart_closure1.prototype = $desc;
  function Point(x, y) {
    this.x = x;
    this.y = y;
  }
  Point.builtin$cls = "Point";
  if (!"name" in Point)
    Point.name = "Point";
  $desc = $collectedClasses.Point;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Point.prototype = $desc;
  Point.prototype.get$x = function(receiver) {
    return this.x;
  };
  Point.prototype.get$y = function(receiver) {
    return this.y;
  };
  function Mirror() {
  }
  Mirror.builtin$cls = "Mirror";
  if (!"name" in Mirror)
    Mirror.name = "Mirror";
  $desc = $collectedClasses.Mirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Mirror.prototype = $desc;
  function DeclarationMirror() {
  }
  DeclarationMirror.builtin$cls = "DeclarationMirror";
  if (!"name" in DeclarationMirror)
    DeclarationMirror.name = "DeclarationMirror";
  $desc = $collectedClasses.DeclarationMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeclarationMirror.prototype = $desc;
  function InstanceMirror() {
  }
  InstanceMirror.builtin$cls = "InstanceMirror";
  if (!"name" in InstanceMirror)
    InstanceMirror.name = "InstanceMirror";
  $desc = $collectedClasses.InstanceMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InstanceMirror.prototype = $desc;
  function LibraryMirror() {
  }
  LibraryMirror.builtin$cls = "LibraryMirror";
  if (!"name" in LibraryMirror)
    LibraryMirror.name = "LibraryMirror";
  $desc = $collectedClasses.LibraryMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LibraryMirror.prototype = $desc;
  function TypeMirror() {
  }
  TypeMirror.builtin$cls = "TypeMirror";
  if (!"name" in TypeMirror)
    TypeMirror.name = "TypeMirror";
  $desc = $collectedClasses.TypeMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeMirror.prototype = $desc;
  function ClassMirror() {
  }
  ClassMirror.builtin$cls = "ClassMirror";
  if (!"name" in ClassMirror)
    ClassMirror.name = "ClassMirror";
  $desc = $collectedClasses.ClassMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClassMirror.prototype = $desc;
  function TypeVariableMirror() {
  }
  TypeVariableMirror.builtin$cls = "TypeVariableMirror";
  if (!"name" in TypeVariableMirror)
    TypeVariableMirror.name = "TypeVariableMirror";
  $desc = $collectedClasses.TypeVariableMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeVariableMirror.prototype = $desc;
  function MethodMirror() {
  }
  MethodMirror.builtin$cls = "MethodMirror";
  if (!"name" in MethodMirror)
    MethodMirror.name = "MethodMirror";
  $desc = $collectedClasses.MethodMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MethodMirror.prototype = $desc;
  function VariableMirror() {
  }
  VariableMirror.builtin$cls = "VariableMirror";
  if (!"name" in VariableMirror)
    VariableMirror.name = "VariableMirror";
  $desc = $collectedClasses.VariableMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VariableMirror.prototype = $desc;
  function ParameterMirror() {
  }
  ParameterMirror.builtin$cls = "ParameterMirror";
  if (!"name" in ParameterMirror)
    ParameterMirror.name = "ParameterMirror";
  $desc = $collectedClasses.ParameterMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParameterMirror.prototype = $desc;
  function MirrorsUsed(symbols, targets, metaTargets, override) {
    this.symbols = symbols;
    this.targets = targets;
    this.metaTargets = metaTargets;
    this.override = override;
  }
  MirrorsUsed.builtin$cls = "MirrorsUsed";
  if (!"name" in MirrorsUsed)
    MirrorsUsed.name = "MirrorsUsed";
  $desc = $collectedClasses.MirrorsUsed;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MirrorsUsed.prototype = $desc;
  function TypedData_ListMixin() {
  }
  TypedData_ListMixin.builtin$cls = "TypedData_ListMixin";
  if (!"name" in TypedData_ListMixin)
    TypedData_ListMixin.name = "TypedData_ListMixin";
  $desc = $collectedClasses.TypedData_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin() {
  }
  TypedData_ListMixin_FixedLengthListMixin.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin)
    TypedData_ListMixin_FixedLengthListMixin.name = "TypedData_ListMixin_FixedLengthListMixin";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin.prototype = $desc;
  function TypedData_ListMixin0() {
  }
  TypedData_ListMixin0.builtin$cls = "TypedData_ListMixin0";
  if (!"name" in TypedData_ListMixin0)
    TypedData_ListMixin0.name = "TypedData_ListMixin0";
  $desc = $collectedClasses.TypedData_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin0.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin0() {
  }
  TypedData_ListMixin_FixedLengthListMixin0.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin0";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin0)
    TypedData_ListMixin_FixedLengthListMixin0.name = "TypedData_ListMixin_FixedLengthListMixin0";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin0.prototype = $desc;
  function TypedData_ListMixin1() {
  }
  TypedData_ListMixin1.builtin$cls = "TypedData_ListMixin1";
  if (!"name" in TypedData_ListMixin1)
    TypedData_ListMixin1.name = "TypedData_ListMixin1";
  $desc = $collectedClasses.TypedData_ListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin1.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin1() {
  }
  TypedData_ListMixin_FixedLengthListMixin1.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin1";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin1)
    TypedData_ListMixin_FixedLengthListMixin1.name = "TypedData_ListMixin_FixedLengthListMixin1";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin1.prototype = $desc;
  function TypedData_ListMixin2() {
  }
  TypedData_ListMixin2.builtin$cls = "TypedData_ListMixin2";
  if (!"name" in TypedData_ListMixin2)
    TypedData_ListMixin2.name = "TypedData_ListMixin2";
  $desc = $collectedClasses.TypedData_ListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin2.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin2() {
  }
  TypedData_ListMixin_FixedLengthListMixin2.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin2";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin2)
    TypedData_ListMixin_FixedLengthListMixin2.name = "TypedData_ListMixin_FixedLengthListMixin2";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin2.prototype = $desc;
  function TypedData_ListMixin3() {
  }
  TypedData_ListMixin3.builtin$cls = "TypedData_ListMixin3";
  if (!"name" in TypedData_ListMixin3)
    TypedData_ListMixin3.name = "TypedData_ListMixin3";
  $desc = $collectedClasses.TypedData_ListMixin3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin3.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin3() {
  }
  TypedData_ListMixin_FixedLengthListMixin3.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin3";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin3)
    TypedData_ListMixin_FixedLengthListMixin3.name = "TypedData_ListMixin_FixedLengthListMixin3";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin3.prototype = $desc;
  function TypedData_ListMixin4() {
  }
  TypedData_ListMixin4.builtin$cls = "TypedData_ListMixin4";
  if (!"name" in TypedData_ListMixin4)
    TypedData_ListMixin4.name = "TypedData_ListMixin4";
  $desc = $collectedClasses.TypedData_ListMixin4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin4.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin4() {
  }
  TypedData_ListMixin_FixedLengthListMixin4.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin4";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin4)
    TypedData_ListMixin_FixedLengthListMixin4.name = "TypedData_ListMixin_FixedLengthListMixin4";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin4.prototype = $desc;
  function TypedData_ListMixin5() {
  }
  TypedData_ListMixin5.builtin$cls = "TypedData_ListMixin5";
  if (!"name" in TypedData_ListMixin5)
    TypedData_ListMixin5.name = "TypedData_ListMixin5";
  $desc = $collectedClasses.TypedData_ListMixin5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin5.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin5() {
  }
  TypedData_ListMixin_FixedLengthListMixin5.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin5";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin5)
    TypedData_ListMixin_FixedLengthListMixin5.name = "TypedData_ListMixin_FixedLengthListMixin5";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin5.prototype = $desc;
  function TypedData_ListMixin6() {
  }
  TypedData_ListMixin6.builtin$cls = "TypedData_ListMixin6";
  if (!"name" in TypedData_ListMixin6)
    TypedData_ListMixin6.name = "TypedData_ListMixin6";
  $desc = $collectedClasses.TypedData_ListMixin6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin6.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin6() {
  }
  TypedData_ListMixin_FixedLengthListMixin6.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin6";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin6)
    TypedData_ListMixin_FixedLengthListMixin6.name = "TypedData_ListMixin_FixedLengthListMixin6";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin6.prototype = $desc;
  function TypedData_ListMixin7() {
  }
  TypedData_ListMixin7.builtin$cls = "TypedData_ListMixin7";
  if (!"name" in TypedData_ListMixin7)
    TypedData_ListMixin7.name = "TypedData_ListMixin7";
  $desc = $collectedClasses.TypedData_ListMixin7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin7.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin7() {
  }
  TypedData_ListMixin_FixedLengthListMixin7.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin7";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin7)
    TypedData_ListMixin_FixedLengthListMixin7.name = "TypedData_ListMixin_FixedLengthListMixin7";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin7.prototype = $desc;
  function Int64List() {
  }
  Int64List.builtin$cls = "Int64List";
  if (!"name" in Int64List)
    Int64List.name = "Int64List";
  $desc = $collectedClasses.Int64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int64List.prototype = $desc;
  function Uint64List() {
  }
  Uint64List.builtin$cls = "Uint64List";
  if (!"name" in Uint64List)
    Uint64List.name = "Uint64List";
  $desc = $collectedClasses.Uint64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint64List.prototype = $desc;
  function Viewer(_dartdoc_viewer$__$isDesktop, finished, _dartdoc_viewer$__$homePage, _showPkgLibraries, _currentPage, _isPanel, _isMinimap, _dartdoc_viewer$__$isInherited, _hash, _changes, _records) {
    this._dartdoc_viewer$__$isDesktop = _dartdoc_viewer$__$isDesktop;
    this.finished = finished;
    this._dartdoc_viewer$__$homePage = _dartdoc_viewer$__$homePage;
    this._showPkgLibraries = _showPkgLibraries;
    this._currentPage = _currentPage;
    this._isPanel = _isPanel;
    this._isMinimap = _isMinimap;
    this._dartdoc_viewer$__$isInherited = _dartdoc_viewer$__$isInherited;
    this._hash = _hash;
    this._changes = _changes;
    this._records = _records;
  }
  Viewer.builtin$cls = "Viewer";
  if (!"name" in Viewer)
    Viewer.name = "Viewer";
  $desc = $collectedClasses.Viewer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer.prototype = $desc;
  function Viewer_libraries_closure() {
  }
  Viewer_libraries_closure.builtin$cls = "Viewer_libraries_closure";
  if (!"name" in Viewer_libraries_closure)
    Viewer_libraries_closure.name = "Viewer_libraries_closure";
  $desc = $collectedClasses.Viewer_libraries_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer_libraries_closure.prototype = $desc;
  function Viewer$__closure(this_0) {
    this.this_0 = this_0;
  }
  Viewer$__closure.builtin$cls = "Viewer$__closure";
  if (!"name" in Viewer$__closure)
    Viewer$__closure.name = "Viewer$__closure";
  $desc = $collectedClasses.Viewer$__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer$__closure.prototype = $desc;
  function Viewer$__closure0(this_1) {
    this.this_1 = this_1;
  }
  Viewer$__closure0.builtin$cls = "Viewer$__closure0";
  if (!"name" in Viewer$__closure0)
    Viewer$__closure0.name = "Viewer$__closure0";
  $desc = $collectedClasses.Viewer$__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer$__closure0.prototype = $desc;
  function Viewer__scrollScreen_closure() {
  }
  Viewer__scrollScreen_closure.builtin$cls = "Viewer__scrollScreen_closure";
  if (!"name" in Viewer__scrollScreen_closure)
    Viewer__scrollScreen_closure.name = "Viewer__scrollScreen_closure";
  $desc = $collectedClasses.Viewer__scrollScreen_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer__scrollScreen_closure.prototype = $desc;
  function Viewer__scrollScreen_closure0(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  Viewer__scrollScreen_closure0.builtin$cls = "Viewer__scrollScreen_closure0";
  if (!"name" in Viewer__scrollScreen_closure0)
    Viewer__scrollScreen_closure0.name = "Viewer__scrollScreen_closure0";
  $desc = $collectedClasses.Viewer__scrollScreen_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer__scrollScreen_closure0.prototype = $desc;
  function Viewer_queryEverywhere_closure() {
  }
  Viewer_queryEverywhere_closure.builtin$cls = "Viewer_queryEverywhere_closure";
  if (!"name" in Viewer_queryEverywhere_closure)
    Viewer_queryEverywhere_closure.name = "Viewer_queryEverywhere_closure";
  $desc = $collectedClasses.Viewer_queryEverywhere_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer_queryEverywhere_closure.prototype = $desc;
  function Viewer__loadAndUpdatePage_closure(this_0, location_1) {
    this.this_0 = this_0;
    this.location_1 = location_1;
  }
  Viewer__loadAndUpdatePage_closure.builtin$cls = "Viewer__loadAndUpdatePage_closure";
  if (!"name" in Viewer__loadAndUpdatePage_closure)
    Viewer__loadAndUpdatePage_closure.name = "Viewer__loadAndUpdatePage_closure";
  $desc = $collectedClasses.Viewer__loadAndUpdatePage_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer__loadAndUpdatePage_closure.prototype = $desc;
  function Viewer__loadAndUpdatePage_closure0(this_2, location_3, destination_4) {
    this.this_2 = this_2;
    this.location_3 = location_3;
    this.destination_4 = destination_4;
  }
  Viewer__loadAndUpdatePage_closure0.builtin$cls = "Viewer__loadAndUpdatePage_closure0";
  if (!"name" in Viewer__loadAndUpdatePage_closure0)
    Viewer__loadAndUpdatePage_closure0.name = "Viewer__loadAndUpdatePage_closure0";
  $desc = $collectedClasses.Viewer__loadAndUpdatePage_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer__loadAndUpdatePage_closure0.prototype = $desc;
  function Viewer_getItem_closure(this_0, location_1) {
    this.this_0 = this_0;
    this.location_1 = location_1;
  }
  Viewer_getItem_closure.builtin$cls = "Viewer_getItem_closure";
  if (!"name" in Viewer_getItem_closure)
    Viewer_getItem_closure.name = "Viewer_getItem_closure";
  $desc = $collectedClasses.Viewer_getItem_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer_getItem_closure.prototype = $desc;
  function Viewer_getItem_closure0(this_2, location_3) {
    this.this_2 = this_2;
    this.location_3 = location_3;
  }
  Viewer_getItem_closure0.builtin$cls = "Viewer_getItem_closure0";
  if (!"name" in Viewer_getItem_closure0)
    Viewer_getItem_closure0.name = "Viewer_getItem_closure0";
  $desc = $collectedClasses.Viewer_getItem_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer_getItem_closure0.prototype = $desc;
  function Viewer_getMember_closure(lib_0, member_1) {
    this.lib_0 = lib_0;
    this.member_1 = member_1;
  }
  Viewer_getMember_closure.builtin$cls = "Viewer_getMember_closure";
  if (!"name" in Viewer_getMember_closure)
    Viewer_getMember_closure.name = "Viewer_getMember_closure";
  $desc = $collectedClasses.Viewer_getMember_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer_getMember_closure.prototype = $desc;
  function _init_closure() {
  }
  _init_closure.builtin$cls = "_init_closure";
  if (!"name" in _init_closure)
    _init_closure.name = "_init_closure";
  $desc = $collectedClasses._init_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _init_closure.prototype = $desc;
  function _init_closure0() {
  }
  _init_closure0.builtin$cls = "_init_closure0";
  if (!"name" in _init_closure0)
    _init_closure0.name = "_init_closure0";
  $desc = $collectedClasses._init_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _init_closure0.prototype = $desc;
  function _init__closure() {
  }
  _init__closure.builtin$cls = "_init__closure";
  if (!"name" in _init__closure)
    _init__closure.name = "_init__closure";
  $desc = $collectedClasses._init__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _init__closure.prototype = $desc;
  function concat_closure() {
  }
  concat_closure.builtin$cls = "concat_closure";
  if (!"name" in concat_closure)
    concat_closure.name = "concat_closure";
  $desc = $collectedClasses.concat_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  concat_closure.prototype = $desc;
  function HomeElement(_item, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._item = _item;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  HomeElement.builtin$cls = "HomeElement";
  if (!"name" in HomeElement)
    HomeElement.name = "HomeElement";
  $desc = $collectedClasses.HomeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HomeElement.prototype = $desc;
  function HomeElement$created_closure(this_0) {
    this.this_0 = this_0;
  }
  HomeElement$created_closure.builtin$cls = "HomeElement$created_closure";
  if (!"name" in HomeElement$created_closure)
    HomeElement$created_closure.name = "HomeElement$created_closure";
  $desc = $collectedClasses.HomeElement$created_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HomeElement$created_closure.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_findSlot(values_0, copies_1) {
    this.values_0 = values_0;
    this.copies_1 = copies_1;
  }
  convertNativeToDart_AcceptStructuredClone_findSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_findSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_findSlot)
    convertNativeToDart_AcceptStructuredClone_findSlot.name = "convertNativeToDart_AcceptStructuredClone_findSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_findSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_findSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_readSlot(copies_2) {
    this.copies_2 = copies_2;
  }
  convertNativeToDart_AcceptStructuredClone_readSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_readSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_readSlot)
    convertNativeToDart_AcceptStructuredClone_readSlot.name = "convertNativeToDart_AcceptStructuredClone_readSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_readSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_readSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_writeSlot(copies_3) {
    this.copies_3 = copies_3;
  }
  convertNativeToDart_AcceptStructuredClone_writeSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_writeSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_writeSlot)
    convertNativeToDart_AcceptStructuredClone_writeSlot.name = "convertNativeToDart_AcceptStructuredClone_writeSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_writeSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_writeSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_walk(mustCopy_4, findSlot_5, readSlot_6, writeSlot_7) {
    this.mustCopy_4 = mustCopy_4;
    this.findSlot_5 = findSlot_5;
    this.readSlot_6 = readSlot_6;
    this.writeSlot_7 = writeSlot_7;
  }
  convertNativeToDart_AcceptStructuredClone_walk.builtin$cls = "convertNativeToDart_AcceptStructuredClone_walk";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_walk)
    convertNativeToDart_AcceptStructuredClone_walk.name = "convertNativeToDart_AcceptStructuredClone_walk";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_walk.prototype = $desc;
  function CssClassSetImpl() {
  }
  CssClassSetImpl.builtin$cls = "CssClassSetImpl";
  if (!"name" in CssClassSetImpl)
    CssClassSetImpl.name = "CssClassSetImpl";
  $desc = $collectedClasses.CssClassSetImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl.prototype = $desc;
  function CssClassSetImpl_add_closure(value_0) {
    this.value_0 = value_0;
  }
  CssClassSetImpl_add_closure.builtin$cls = "CssClassSetImpl_add_closure";
  if (!"name" in CssClassSetImpl_add_closure)
    CssClassSetImpl_add_closure.name = "CssClassSetImpl_add_closure";
  $desc = $collectedClasses.CssClassSetImpl_add_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl_add_closure.prototype = $desc;
  function CssClassSetImpl_addAll_closure(iterable_0) {
    this.iterable_0 = iterable_0;
  }
  CssClassSetImpl_addAll_closure.builtin$cls = "CssClassSetImpl_addAll_closure";
  if (!"name" in CssClassSetImpl_addAll_closure)
    CssClassSetImpl_addAll_closure.name = "CssClassSetImpl_addAll_closure";
  $desc = $collectedClasses.CssClassSetImpl_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl_addAll_closure.prototype = $desc;
  function CssClassSetImpl_clear_closure() {
  }
  CssClassSetImpl_clear_closure.builtin$cls = "CssClassSetImpl_clear_closure";
  if (!"name" in CssClassSetImpl_clear_closure)
    CssClassSetImpl_clear_closure.name = "CssClassSetImpl_clear_closure";
  $desc = $collectedClasses.CssClassSetImpl_clear_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl_clear_closure.prototype = $desc;
  function FilteredElementList(_html_common$_node, _childNodes) {
    this._html_common$_node = _html_common$_node;
    this._childNodes = _childNodes;
  }
  FilteredElementList.builtin$cls = "FilteredElementList";
  if (!"name" in FilteredElementList)
    FilteredElementList.name = "FilteredElementList";
  $desc = $collectedClasses.FilteredElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList.prototype = $desc;
  function FilteredElementList__filtered_closure() {
  }
  FilteredElementList__filtered_closure.builtin$cls = "FilteredElementList__filtered_closure";
  if (!"name" in FilteredElementList__filtered_closure)
    FilteredElementList__filtered_closure.name = "FilteredElementList__filtered_closure";
  $desc = $collectedClasses.FilteredElementList__filtered_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList__filtered_closure.prototype = $desc;
  function FilteredElementList_removeRange_closure() {
  }
  FilteredElementList_removeRange_closure.builtin$cls = "FilteredElementList_removeRange_closure";
  if (!"name" in FilteredElementList_removeRange_closure)
    FilteredElementList_removeRange_closure.name = "FilteredElementList_removeRange_closure";
  $desc = $collectedClasses.FilteredElementList_removeRange_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList_removeRange_closure.prototype = $desc;
  function IndexElement(_openedAt, _buildIdentifier, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._openedAt = _openedAt;
    this._buildIdentifier = _buildIdentifier;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  IndexElement.builtin$cls = "IndexElement";
  if (!"name" in IndexElement)
    IndexElement.name = "IndexElement";
  $desc = $collectedClasses.IndexElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexElement.prototype = $desc;
  IndexElement.prototype.get$_openedAt = function(receiver) {
    return receiver._openedAt;
  };
  IndexElement.prototype.get$_openedAt.$reflectable = 1;
  IndexElement.prototype.set$_openedAt = function(receiver, v) {
    return receiver._openedAt = v;
  };
  IndexElement.prototype.set$_openedAt.$reflectable = 1;
  IndexElement.prototype.get$_buildIdentifier = function(receiver) {
    return receiver._buildIdentifier;
  };
  IndexElement.prototype.get$_buildIdentifier.$reflectable = 1;
  IndexElement.prototype.set$_buildIdentifier = function(receiver, v) {
    return receiver._buildIdentifier = v;
  };
  IndexElement.prototype.set$_buildIdentifier.$reflectable = 1;
  function IndexElement_enteredView_closure(this_0) {
    this.this_0 = this_0;
  }
  IndexElement_enteredView_closure.builtin$cls = "IndexElement_enteredView_closure";
  if (!"name" in IndexElement_enteredView_closure)
    IndexElement_enteredView_closure.name = "IndexElement_enteredView_closure";
  $desc = $collectedClasses.IndexElement_enteredView_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexElement_enteredView_closure.prototype = $desc;
  function IndexElement_enteredView_closure0(this_1) {
    this.this_1 = this_1;
  }
  IndexElement_enteredView_closure0.builtin$cls = "IndexElement_enteredView_closure0";
  if (!"name" in IndexElement_enteredView_closure0)
    IndexElement_enteredView_closure0.name = "IndexElement_enteredView_closure0";
  $desc = $collectedClasses.IndexElement_enteredView_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexElement_enteredView_closure0.prototype = $desc;
  function IndexElement_enteredView_closure1(this_2) {
    this.this_2 = this_2;
  }
  IndexElement_enteredView_closure1.builtin$cls = "IndexElement_enteredView_closure1";
  if (!"name" in IndexElement_enteredView_closure1)
    IndexElement_enteredView_closure1.name = "IndexElement_enteredView_closure1";
  $desc = $collectedClasses.IndexElement_enteredView_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexElement_enteredView_closure1.prototype = $desc;
  function IndexElement_crumbs_closure(last_0) {
    this.last_0 = last_0;
  }
  IndexElement_crumbs_closure.builtin$cls = "IndexElement_crumbs_closure";
  if (!"name" in IndexElement_crumbs_closure)
    IndexElement_crumbs_closure.name = "IndexElement_crumbs_closure";
  $desc = $collectedClasses.IndexElement_crumbs_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexElement_crumbs_closure.prototype = $desc;
  function IndexElement_crumbs_closure0(this_1, root_2) {
    this.this_1 = this_1;
    this.root_2 = root_2;
  }
  IndexElement_crumbs_closure0.builtin$cls = "IndexElement_crumbs_closure0";
  if (!"name" in IndexElement_crumbs_closure0)
    IndexElement_crumbs_closure0.name = "IndexElement_crumbs_closure0";
  $desc = $collectedClasses.IndexElement_crumbs_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexElement_crumbs_closure0.prototype = $desc;
  function IndexElement_buildIdentifier_closure(this_0) {
    this.this_0 = this_0;
  }
  IndexElement_buildIdentifier_closure.builtin$cls = "IndexElement_buildIdentifier_closure";
  if (!"name" in IndexElement_buildIdentifier_closure)
    IndexElement_buildIdentifier_closure.name = "IndexElement_buildIdentifier_closure";
  $desc = $collectedClasses.IndexElement_buildIdentifier_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexElement_buildIdentifier_closure.prototype = $desc;
  function IndexElement_buildIdentifier_closure0() {
  }
  IndexElement_buildIdentifier_closure0.builtin$cls = "IndexElement_buildIdentifier_closure0";
  if (!"name" in IndexElement_buildIdentifier_closure0)
    IndexElement_buildIdentifier_closure0.name = "IndexElement_buildIdentifier_closure0";
  $desc = $collectedClasses.IndexElement_buildIdentifier_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexElement_buildIdentifier_closure0.prototype = $desc;
  function ItemElement(_item, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._item = _item;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  ItemElement.builtin$cls = "ItemElement";
  if (!"name" in ItemElement)
    ItemElement.name = "ItemElement";
  $desc = $collectedClasses.ItemElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ItemElement.prototype = $desc;
  function LibraryElement(_item, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._item = _item;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  LibraryElement.builtin$cls = "LibraryElement";
  if (!"name" in LibraryElement)
    LibraryElement.name = "LibraryElement";
  $desc = $collectedClasses.LibraryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LibraryElement.prototype = $desc;
  function LibraryPanel(_cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  LibraryPanel.builtin$cls = "LibraryPanel";
  if (!"name" in LibraryPanel)
    LibraryPanel.name = "LibraryPanel";
  $desc = $collectedClasses.LibraryPanel;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LibraryPanel.prototype = $desc;
  function LibraryPanel$created_closure(this_0) {
    this.this_0 = this_0;
  }
  LibraryPanel$created_closure.builtin$cls = "LibraryPanel$created_closure";
  if (!"name" in LibraryPanel$created_closure)
    LibraryPanel$created_closure.name = "LibraryPanel$created_closure";
  $desc = $collectedClasses.LibraryPanel$created_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LibraryPanel$created_closure.prototype = $desc;
  function DocsLocation(packageName, libraryName, memberName, subMemberName, anchor) {
    this.packageName = packageName;
    this.libraryName = libraryName;
    this.memberName = memberName;
    this.subMemberName = subMemberName;
    this.anchor = anchor;
  }
  DocsLocation.builtin$cls = "DocsLocation";
  if (!"name" in DocsLocation)
    DocsLocation.name = "DocsLocation";
  $desc = $collectedClasses.DocsLocation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocsLocation.prototype = $desc;
  DocsLocation.prototype.get$packageName = function() {
    return this.packageName;
  };
  DocsLocation.prototype.get$libraryName = function() {
    return this.libraryName;
  };
  DocsLocation.prototype.get$memberName = function() {
    return this.memberName;
  };
  DocsLocation.prototype.set$anchor = function(v) {
    return this.anchor = v;
  };
  function DocsLocation__extractPieces__check(box_0, uri_1) {
    this.box_0 = box_0;
    this.uri_1 = uri_1;
  }
  DocsLocation__extractPieces__check.builtin$cls = "DocsLocation__extractPieces__check";
  if (!"name" in DocsLocation__extractPieces__check)
    DocsLocation__extractPieces__check.name = "DocsLocation__extractPieces__check";
  $desc = $collectedClasses.DocsLocation__extractPieces__check;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocsLocation__extractPieces__check.prototype = $desc;
  function DocsLocation_componentNames_closure() {
  }
  DocsLocation_componentNames_closure.builtin$cls = "DocsLocation_componentNames_closure";
  if (!"name" in DocsLocation_componentNames_closure)
    DocsLocation_componentNames_closure.name = "DocsLocation_componentNames_closure";
  $desc = $collectedClasses.DocsLocation_componentNames_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocsLocation_componentNames_closure.prototype = $desc;
  function DocsLocation_itemFromList_closure() {
  }
  DocsLocation_itemFromList_closure.builtin$cls = "DocsLocation_itemFromList_closure";
  if (!"name" in DocsLocation_itemFromList_closure)
    DocsLocation_itemFromList_closure.name = "DocsLocation_itemFromList_closure";
  $desc = $collectedClasses.DocsLocation_itemFromList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocsLocation_itemFromList_closure.prototype = $desc;
  function Logger(name, parent, _level, _children, children, _logging$_controller) {
    this.name = name;
    this.parent = parent;
    this._level = _level;
    this._children = _children;
    this.children = children;
    this._logging$_controller = _logging$_controller;
  }
  Logger.builtin$cls = "Logger";
  if (!"name" in Logger)
    Logger.name = "Logger";
  $desc = $collectedClasses.Logger;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Logger.prototype = $desc;
  Logger.prototype.get$name = function(receiver) {
    return this.name;
  };
  Logger.prototype.get$parent = function(receiver) {
    return this.parent;
  };
  Logger.prototype.get$_children = function(receiver) {
    return this._children;
  };
  Logger.prototype.get$children = function(receiver) {
    return this.children;
  };
  function Logger_Logger_closure(name_0) {
    this.name_0 = name_0;
  }
  Logger_Logger_closure.builtin$cls = "Logger_Logger_closure";
  if (!"name" in Logger_Logger_closure)
    Logger_Logger_closure.name = "Logger_Logger_closure";
  $desc = $collectedClasses.Logger_Logger_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Logger_Logger_closure.prototype = $desc;
  function Level(name, value) {
    this.name = name;
    this.value = value;
  }
  Level.builtin$cls = "Level";
  if (!"name" in Level)
    Level.name = "Level";
  $desc = $collectedClasses.Level;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Level.prototype = $desc;
  Level.prototype.get$name = function(receiver) {
    return this.name;
  };
  Level.prototype.get$value = function(receiver) {
    return this.value;
  };
  function LogRecord(level, message, loggerName, time, sequenceNumber, error, stackTrace) {
    this.level = level;
    this.message = message;
    this.loggerName = loggerName;
    this.time = time;
    this.sequenceNumber = sequenceNumber;
    this.error = error;
    this.stackTrace = stackTrace;
  }
  LogRecord.builtin$cls = "LogRecord";
  if (!"name" in LogRecord)
    LogRecord.name = "LogRecord";
  $desc = $collectedClasses.LogRecord;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogRecord.prototype = $desc;
  LogRecord.prototype.get$level = function() {
    return this.level;
  };
  LogRecord.prototype.get$message = function(receiver) {
    return this.message;
  };
  LogRecord.prototype.get$error = function(receiver) {
    return this.error;
  };
  LogRecord.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function SameProtocolUriPolicy(_member$_hiddenAnchor, _member$_loc) {
    this._member$_hiddenAnchor = _member$_hiddenAnchor;
    this._member$_loc = _member$_loc;
  }
  SameProtocolUriPolicy.builtin$cls = "SameProtocolUriPolicy";
  if (!"name" in SameProtocolUriPolicy)
    SameProtocolUriPolicy.name = "SameProtocolUriPolicy";
  $desc = $collectedClasses.SameProtocolUriPolicy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SameProtocolUriPolicy.prototype = $desc;
  function DartdocElement(_cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  DartdocElement.builtin$cls = "DartdocElement";
  if (!"name" in DartdocElement)
    DartdocElement.name = "DartdocElement";
  $desc = $collectedClasses.DartdocElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DartdocElement.prototype = $desc;
  DartdocElement.prototype.get$_cachedMirror = function(receiver) {
    return receiver._cachedMirror;
  };
  DartdocElement.prototype.get$_cachedMirror.$reflectable = 1;
  DartdocElement.prototype.set$_cachedMirror = function(receiver, v) {
    return receiver._cachedMirror = v;
  };
  DartdocElement.prototype.set$_cachedMirror.$reflectable = 1;
  DartdocElement.prototype.get$_pathname = function(receiver) {
    return receiver._pathname;
  };
  DartdocElement.prototype.get$_pathname.$reflectable = 1;
  DartdocElement.prototype.set$_pathname = function(receiver, v) {
    return receiver._pathname = v;
  };
  DartdocElement.prototype.set$_pathname.$reflectable = 1;
  function DartdocElement_notifyObservables_closure(this_0, oldValues_1, newValues_2) {
    this.this_0 = this_0;
    this.oldValues_1 = oldValues_1;
    this.newValues_2 = newValues_2;
  }
  DartdocElement_notifyObservables_closure.builtin$cls = "DartdocElement_notifyObservables_closure";
  if (!"name" in DartdocElement_notifyObservables_closure)
    DartdocElement_notifyObservables_closure.name = "DartdocElement_notifyObservables_closure";
  $desc = $collectedClasses.DartdocElement_notifyObservables_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DartdocElement_notifyObservables_closure.prototype = $desc;
  function DartdocElement_notifyObservables_closure0(this_3) {
    this.this_3 = this_3;
  }
  DartdocElement_notifyObservables_closure0.builtin$cls = "DartdocElement_notifyObservables_closure0";
  if (!"name" in DartdocElement_notifyObservables_closure0)
    DartdocElement_notifyObservables_closure0.name = "DartdocElement_notifyObservables_closure0";
  $desc = $collectedClasses.DartdocElement_notifyObservables_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DartdocElement_notifyObservables_closure0.prototype = $desc;
  function DartdocElement_concat_closure() {
  }
  DartdocElement_concat_closure.builtin$cls = "DartdocElement_concat_closure";
  if (!"name" in DartdocElement_concat_closure)
    DartdocElement_concat_closure.name = "DartdocElement_concat_closure";
  $desc = $collectedClasses.DartdocElement_concat_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DartdocElement_concat_closure.prototype = $desc;
  function DartdocElement_observableValues_closure(this_0) {
    this.this_0 = this_0;
  }
  DartdocElement_observableValues_closure.builtin$cls = "DartdocElement_observableValues_closure";
  if (!"name" in DartdocElement_observableValues_closure)
    DartdocElement_observableValues_closure.name = "DartdocElement_observableValues_closure";
  $desc = $collectedClasses.DartdocElement_observableValues_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DartdocElement_observableValues_closure.prototype = $desc;
  function MemberElement(_item, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._item = _item;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  MemberElement.builtin$cls = "MemberElement";
  if (!"name" in MemberElement)
    MemberElement.name = "MemberElement";
  $desc = $collectedClasses.MemberElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MemberElement.prototype = $desc;
  MemberElement.prototype.get$_item = function(receiver) {
    return receiver._item;
  };
  MemberElement.prototype.get$_item.$reflectable = 1;
  MemberElement.prototype.set$_item = function(receiver, v) {
    return receiver._item = v;
  };
  MemberElement.prototype.set$_item.$reflectable = 1;
  function MemberElement_item_closure(this_0, newItem_1) {
    this.this_0 = this_0;
    this.newItem_1 = newItem_1;
  }
  MemberElement_item_closure.builtin$cls = "MemberElement_item_closure";
  if (!"name" in MemberElement_item_closure)
    MemberElement_item_closure.name = "MemberElement_item_closure";
  $desc = $collectedClasses.MemberElement_item_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MemberElement_item_closure.prototype = $desc;
  function MemberElement_createInner_closure(type_0, span_1) {
    this.type_0 = type_0;
    this.span_1 = span_1;
  }
  MemberElement_createInner_closure.builtin$cls = "MemberElement_createInner_closure";
  if (!"name" in MemberElement_createInner_closure)
    MemberElement_createInner_closure.name = "MemberElement_createInner_closure";
  $desc = $collectedClasses.MemberElement_createInner_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MemberElement_createInner_closure.prototype = $desc;
  function InheritedElement(_member$__$inheritedFrom, _member$__$commentFrom, _changes, _records, _item, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._member$__$inheritedFrom = _member$__$inheritedFrom;
    this._member$__$commentFrom = _member$__$commentFrom;
    this._changes = _changes;
    this._records = _records;
    this._item = _item;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  InheritedElement.builtin$cls = "InheritedElement";
  if (!"name" in InheritedElement)
    InheritedElement.name = "InheritedElement";
  $desc = $collectedClasses.InheritedElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InheritedElement.prototype = $desc;
  InheritedElement.prototype.get$_member$__$inheritedFrom = function(receiver) {
    return receiver._member$__$inheritedFrom;
  };
  InheritedElement.prototype.get$_member$__$inheritedFrom.$reflectable = 1;
  InheritedElement.prototype.set$_member$__$inheritedFrom = function(receiver, v) {
    return receiver._member$__$inheritedFrom = v;
  };
  InheritedElement.prototype.set$_member$__$inheritedFrom.$reflectable = 1;
  InheritedElement.prototype.get$_member$__$commentFrom = function(receiver) {
    return receiver._member$__$commentFrom;
  };
  InheritedElement.prototype.get$_member$__$commentFrom.$reflectable = 1;
  InheritedElement.prototype.set$_member$__$commentFrom = function(receiver, v) {
    return receiver._member$__$commentFrom = v;
  };
  InheritedElement.prototype.set$_member$__$commentFrom.$reflectable = 1;
  function MemberElement_ChangeNotifier() {
  }
  MemberElement_ChangeNotifier.builtin$cls = "MemberElement_ChangeNotifier";
  if (!"name" in MemberElement_ChangeNotifier)
    MemberElement_ChangeNotifier.name = "MemberElement_ChangeNotifier";
  $desc = $collectedClasses.MemberElement_ChangeNotifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MemberElement_ChangeNotifier.prototype = $desc;
  function MethodElement(_member$__$inheritedFrom, _member$__$commentFrom, _changes, _records, _item, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._member$__$inheritedFrom = _member$__$inheritedFrom;
    this._member$__$commentFrom = _member$__$commentFrom;
    this._changes = _changes;
    this._records = _records;
    this._item = _item;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  MethodElement.builtin$cls = "MethodElement";
  if (!"name" in MethodElement)
    MethodElement.name = "MethodElement";
  $desc = $collectedClasses.MethodElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MethodElement.prototype = $desc;
  function SupportedBrowser(browserName, minimumVersion) {
    this.browserName = browserName;
    this.minimumVersion = minimumVersion;
  }
  SupportedBrowser.builtin$cls = "SupportedBrowser";
  if (!"name" in SupportedBrowser)
    SupportedBrowser.name = "SupportedBrowser";
  $desc = $collectedClasses.SupportedBrowser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SupportedBrowser.prototype = $desc;
  function Experimental() {
  }
  Experimental.builtin$cls = "Experimental";
  if (!"name" in Experimental)
    Experimental.name = "Experimental";
  $desc = $collectedClasses.Experimental;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Experimental.prototype = $desc;
  function DomName(name) {
    this.name = name;
  }
  DomName.builtin$cls = "DomName";
  if (!"name" in DomName)
    DomName.name = "DomName";
  $desc = $collectedClasses.DomName;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomName.prototype = $desc;
  DomName.prototype.get$name = function(receiver) {
    return this.name;
  };
  function DocsEditable() {
  }
  DocsEditable.builtin$cls = "DocsEditable";
  if (!"name" in DocsEditable)
    DocsEditable.name = "DocsEditable";
  $desc = $collectedClasses.DocsEditable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocsEditable.prototype = $desc;
  function Unstable() {
  }
  Unstable.builtin$cls = "Unstable";
  if (!"name" in Unstable)
    Unstable.name = "Unstable";
  $desc = $collectedClasses.Unstable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Unstable.prototype = $desc;
  function DartdocMethod(_member$__$inheritedFrom, _member$__$commentFrom, _changes, _records, _item, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._member$__$inheritedFrom = _member$__$inheritedFrom;
    this._member$__$commentFrom = _member$__$commentFrom;
    this._changes = _changes;
    this._records = _records;
    this._item = _item;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  DartdocMethod.builtin$cls = "DartdocMethod";
  if (!"name" in DartdocMethod)
    DartdocMethod.name = "DartdocMethod";
  $desc = $collectedClasses.DartdocMethod;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DartdocMethod.prototype = $desc;
  function MethodPanel(_member$__$inheritedFrom, _member$__$commentFrom, _changes, _records, _item, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._member$__$inheritedFrom = _member$__$inheritedFrom;
    this._member$__$commentFrom = _member$__$commentFrom;
    this._changes = _changes;
    this._records = _records;
    this._item = _item;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  MethodPanel.builtin$cls = "MethodPanel";
  if (!"name" in MethodPanel)
    MethodPanel.name = "MethodPanel";
  $desc = $collectedClasses.MethodPanel;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MethodPanel.prototype = $desc;
  function MinimapElementClass(_item, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._item = _item;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  MinimapElementClass.builtin$cls = "MinimapElementClass";
  if (!"name" in MinimapElementClass)
    MinimapElementClass.name = "MinimapElementClass";
  $desc = $collectedClasses.MinimapElementClass;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MinimapElementClass.prototype = $desc;
  function MinimapElementClass$created_closure(this_0) {
    this.this_0 = this_0;
  }
  MinimapElementClass$created_closure.builtin$cls = "MinimapElementClass$created_closure";
  if (!"name" in MinimapElementClass$created_closure)
    MinimapElementClass$created_closure.name = "MinimapElementClass$created_closure";
  $desc = $collectedClasses.MinimapElementClass$created_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MinimapElementClass$created_closure.prototype = $desc;
  function MinimapElementClass_shouldShowConstructors_closure() {
  }
  MinimapElementClass_shouldShowConstructors_closure.builtin$cls = "MinimapElementClass_shouldShowConstructors_closure";
  if (!"name" in MinimapElementClass_shouldShowConstructors_closure)
    MinimapElementClass_shouldShowConstructors_closure.name = "MinimapElementClass_shouldShowConstructors_closure";
  $desc = $collectedClasses.MinimapElementClass_shouldShowConstructors_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MinimapElementClass_shouldShowConstructors_closure.prototype = $desc;
  function MinimapElementClass_shouldShowFunctions_closure() {
  }
  MinimapElementClass_shouldShowFunctions_closure.builtin$cls = "MinimapElementClass_shouldShowFunctions_closure";
  if (!"name" in MinimapElementClass_shouldShowFunctions_closure)
    MinimapElementClass_shouldShowFunctions_closure.name = "MinimapElementClass_shouldShowFunctions_closure";
  $desc = $collectedClasses.MinimapElementClass_shouldShowFunctions_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MinimapElementClass_shouldShowFunctions_closure.prototype = $desc;
  function MinimapElementClass_shouldShowVariables_closure() {
  }
  MinimapElementClass_shouldShowVariables_closure.builtin$cls = "MinimapElementClass_shouldShowVariables_closure";
  if (!"name" in MinimapElementClass_shouldShowVariables_closure)
    MinimapElementClass_shouldShowVariables_closure.name = "MinimapElementClass_shouldShowVariables_closure";
  $desc = $collectedClasses.MinimapElementClass_shouldShowVariables_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MinimapElementClass_shouldShowVariables_closure.prototype = $desc;
  function MinimapElementClass_shouldShowStaticFunctions_closure() {
  }
  MinimapElementClass_shouldShowStaticFunctions_closure.builtin$cls = "MinimapElementClass_shouldShowStaticFunctions_closure";
  if (!"name" in MinimapElementClass_shouldShowStaticFunctions_closure)
    MinimapElementClass_shouldShowStaticFunctions_closure.name = "MinimapElementClass_shouldShowStaticFunctions_closure";
  $desc = $collectedClasses.MinimapElementClass_shouldShowStaticFunctions_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MinimapElementClass_shouldShowStaticFunctions_closure.prototype = $desc;
  function MinimapElementClass_shouldShowStaticVariables_closure() {
  }
  MinimapElementClass_shouldShowStaticVariables_closure.builtin$cls = "MinimapElementClass_shouldShowStaticVariables_closure";
  if (!"name" in MinimapElementClass_shouldShowStaticVariables_closure)
    MinimapElementClass_shouldShowStaticVariables_closure.name = "MinimapElementClass_shouldShowStaticVariables_closure";
  $desc = $collectedClasses.MinimapElementClass_shouldShowStaticVariables_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MinimapElementClass_shouldShowStaticVariables_closure.prototype = $desc;
  function MinimapElementClass_shouldShowOperators_closure() {
  }
  MinimapElementClass_shouldShowOperators_closure.builtin$cls = "MinimapElementClass_shouldShowOperators_closure";
  if (!"name" in MinimapElementClass_shouldShowOperators_closure)
    MinimapElementClass_shouldShowOperators_closure.name = "MinimapElementClass_shouldShowOperators_closure";
  $desc = $collectedClasses.MinimapElementClass_shouldShowOperators_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MinimapElementClass_shouldShowOperators_closure.prototype = $desc;
  function MinimapElement(_items, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._items = _items;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  MinimapElement.builtin$cls = "MinimapElement";
  if (!"name" in MinimapElement)
    MinimapElement.name = "MinimapElement";
  $desc = $collectedClasses.MinimapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MinimapElement.prototype = $desc;
  MinimapElement.prototype.get$_items = function(receiver) {
    return receiver._items;
  };
  MinimapElement.prototype.get$_items.$reflectable = 1;
  MinimapElement.prototype.set$_items = function(receiver, v) {
    return receiver._items = v;
  };
  MinimapElement.prototype.set$_items.$reflectable = 1;
  function MinimapElement$created_closure(this_0) {
    this.this_0 = this_0;
  }
  MinimapElement$created_closure.builtin$cls = "MinimapElement$created_closure";
  if (!"name" in MinimapElement$created_closure)
    MinimapElement$created_closure.name = "MinimapElement$created_closure";
  $desc = $collectedClasses.MinimapElement$created_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MinimapElement$created_closure.prototype = $desc;
  function MinimapElement_items_closure(this_0, newItems_1) {
    this.this_0 = this_0;
    this.newItems_1 = newItems_1;
  }
  MinimapElement_items_closure.builtin$cls = "MinimapElement_items_closure";
  if (!"name" in MinimapElement_items_closure)
    MinimapElement_items_closure.name = "MinimapElement_items_closure";
  $desc = $collectedClasses.MinimapElement_items_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MinimapElement_items_closure.prototype = $desc;
  function MinimapElement_itemsToShow_closure(this_0) {
    this.this_0 = this_0;
  }
  MinimapElement_itemsToShow_closure.builtin$cls = "MinimapElement_itemsToShow_closure";
  if (!"name" in MinimapElement_itemsToShow_closure)
    MinimapElement_itemsToShow_closure.name = "MinimapElement_itemsToShow_closure";
  $desc = $collectedClasses.MinimapElement_itemsToShow_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MinimapElement_itemsToShow_closure.prototype = $desc;
  function MinimapElementLibrary(_item, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._item = _item;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  MinimapElementLibrary.builtin$cls = "MinimapElementLibrary";
  if (!"name" in MinimapElementLibrary)
    MinimapElementLibrary.name = "MinimapElementLibrary";
  $desc = $collectedClasses.MinimapElementLibrary;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MinimapElementLibrary.prototype = $desc;
  function Tag(name, kind) {
    this.name = name;
    this.kind = kind;
  }
  Tag.builtin$cls = "Tag";
  if (!"name" in Tag)
    Tag.name = "Tag";
  $desc = $collectedClasses.Tag;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Tag.prototype = $desc;
  Tag.prototype.get$name = function(receiver) {
    return this.name;
  };
  Tag.prototype.get$kind = function(receiver) {
    return this.kind;
  };
  function Node0(tag, anchor) {
    this.tag = tag;
    this.anchor = anchor;
  }
  Node0.builtin$cls = "Node0";
  if (!"name" in Node0)
    Node0.name = "Node0";
  $desc = $collectedClasses.Node0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Node0.prototype = $desc;
  Node0.prototype.set$tag = function(receiver, v) {
    return this.tag = v;
  };
  Node0.prototype.set$anchor = function(v) {
    return this.anchor = v;
  };
  function SequenceNode(content, tag, anchor) {
    this.content = content;
    this.tag = tag;
    this.anchor = anchor;
  }
  SequenceNode.builtin$cls = "SequenceNode";
  if (!"name" in SequenceNode)
    SequenceNode.name = "SequenceNode";
  $desc = $collectedClasses.SequenceNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SequenceNode.prototype = $desc;
  SequenceNode.prototype.get$content = function(receiver) {
    return this.content;
  };
  SequenceNode.prototype.set$content = function(receiver, v) {
    return this.content = v;
  };
  function SequenceNode_toString_closure() {
  }
  SequenceNode_toString_closure.builtin$cls = "SequenceNode_toString_closure";
  if (!"name" in SequenceNode_toString_closure)
    SequenceNode_toString_closure.name = "SequenceNode_toString_closure";
  $desc = $collectedClasses.SequenceNode_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SequenceNode_toString_closure.prototype = $desc;
  function AliasNode(tag, anchor) {
    this.tag = tag;
    this.anchor = anchor;
  }
  AliasNode.builtin$cls = "AliasNode";
  if (!"name" in AliasNode)
    AliasNode.name = "AliasNode";
  $desc = $collectedClasses.AliasNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AliasNode.prototype = $desc;
  function ScalarNode(_model$_content, value, tag, anchor) {
    this._model$_content = _model$_content;
    this.value = value;
    this.tag = tag;
    this.anchor = anchor;
  }
  ScalarNode.builtin$cls = "ScalarNode";
  if (!"name" in ScalarNode)
    ScalarNode.name = "ScalarNode";
  $desc = $collectedClasses.ScalarNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScalarNode.prototype = $desc;
  ScalarNode.prototype.get$value = function(receiver) {
    return this.value;
  };
  function ScalarNode_canonicalContent_closure(this_0) {
    this.this_0 = this_0;
  }
  ScalarNode_canonicalContent_closure.builtin$cls = "ScalarNode_canonicalContent_closure";
  if (!"name" in ScalarNode_canonicalContent_closure)
    ScalarNode_canonicalContent_closure.name = "ScalarNode_canonicalContent_closure";
  $desc = $collectedClasses.ScalarNode_canonicalContent_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScalarNode_canonicalContent_closure.prototype = $desc;
  function MappingNode(content, tag, anchor) {
    this.content = content;
    this.tag = tag;
    this.anchor = anchor;
  }
  MappingNode.builtin$cls = "MappingNode";
  if (!"name" in MappingNode)
    MappingNode.name = "MappingNode";
  $desc = $collectedClasses.MappingNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappingNode.prototype = $desc;
  MappingNode.prototype.get$content = function(receiver) {
    return this.content;
  };
  MappingNode.prototype.set$content = function(receiver, v) {
    return this.content = v;
  };
  function MappingNode_toString_closure(this_0) {
    this.this_0 = this_0;
  }
  MappingNode_toString_closure.builtin$cls = "MappingNode_toString_closure";
  if (!"name" in MappingNode_toString_closure)
    MappingNode_toString_closure.name = "MappingNode_toString_closure";
  $desc = $collectedClasses.MappingNode_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappingNode_toString_closure.prototype = $desc;
  function ChangeNotifier() {
  }
  ChangeNotifier.builtin$cls = "ChangeNotifier";
  if (!"name" in ChangeNotifier)
    ChangeNotifier.name = "ChangeNotifier";
  $desc = $collectedClasses.ChangeNotifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ChangeNotifier.prototype = $desc;
  function ChangeRecord() {
  }
  ChangeRecord.builtin$cls = "ChangeRecord";
  if (!"name" in ChangeRecord)
    ChangeRecord.name = "ChangeRecord";
  $desc = $collectedClasses.ChangeRecord;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ChangeRecord.prototype = $desc;
  function PropertyChangeRecord(object, name, oldValue, newValue) {
    this.object = object;
    this.name = name;
    this.oldValue = oldValue;
    this.newValue = newValue;
  }
  PropertyChangeRecord.builtin$cls = "PropertyChangeRecord";
  if (!"name" in PropertyChangeRecord)
    PropertyChangeRecord.name = "PropertyChangeRecord";
  $desc = $collectedClasses.PropertyChangeRecord;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PropertyChangeRecord.prototype = $desc;
  PropertyChangeRecord.prototype.get$name = function(receiver) {
    return this.name;
  };
  PropertyChangeRecord.prototype.get$oldValue = function(receiver) {
    return this.oldValue;
  };
  PropertyChangeRecord.prototype.get$newValue = function(receiver) {
    return this.newValue;
  };
  function CompoundPathObserver(_compound_path_observer$_observers, _compound_path_observer$_subs, _compound_path_observer$_value, _compound_path_observer$_computeValue, _started, _scheduled, _changes, _records) {
    this._compound_path_observer$_observers = _compound_path_observer$_observers;
    this._compound_path_observer$_subs = _compound_path_observer$_subs;
    this._compound_path_observer$_value = _compound_path_observer$_value;
    this._compound_path_observer$_computeValue = _compound_path_observer$_computeValue;
    this._started = _started;
    this._scheduled = _scheduled;
    this._changes = _changes;
    this._records = _records;
  }
  CompoundPathObserver.builtin$cls = "CompoundPathObserver";
  if (!"name" in CompoundPathObserver)
    CompoundPathObserver.name = "CompoundPathObserver";
  $desc = $collectedClasses.CompoundPathObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompoundPathObserver.prototype = $desc;
  function CompoundPathObserver__resolve_closure() {
  }
  CompoundPathObserver__resolve_closure.builtin$cls = "CompoundPathObserver__resolve_closure";
  if (!"name" in CompoundPathObserver__resolve_closure)
    CompoundPathObserver__resolve_closure.name = "CompoundPathObserver__resolve_closure";
  $desc = $collectedClasses.CompoundPathObserver__resolve_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompoundPathObserver__resolve_closure.prototype = $desc;
  function dirtyCheckZoneSpec_enqueueDirtyCheck(box_0) {
    this.box_0 = box_0;
  }
  dirtyCheckZoneSpec_enqueueDirtyCheck.builtin$cls = "dirtyCheckZoneSpec_enqueueDirtyCheck";
  if (!"name" in dirtyCheckZoneSpec_enqueueDirtyCheck)
    dirtyCheckZoneSpec_enqueueDirtyCheck.name = "dirtyCheckZoneSpec_enqueueDirtyCheck";
  $desc = $collectedClasses.dirtyCheckZoneSpec_enqueueDirtyCheck;
  if ($desc instanceof Array)
    $desc = $desc[1];
  dirtyCheckZoneSpec_enqueueDirtyCheck.prototype = $desc;
  function dirtyCheckZoneSpec_enqueueDirtyCheck_closure(box_0) {
    this.box_0 = box_0;
  }
  dirtyCheckZoneSpec_enqueueDirtyCheck_closure.builtin$cls = "dirtyCheckZoneSpec_enqueueDirtyCheck_closure";
  if (!"name" in dirtyCheckZoneSpec_enqueueDirtyCheck_closure)
    dirtyCheckZoneSpec_enqueueDirtyCheck_closure.name = "dirtyCheckZoneSpec_enqueueDirtyCheck_closure";
  $desc = $collectedClasses.dirtyCheckZoneSpec_enqueueDirtyCheck_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  dirtyCheckZoneSpec_enqueueDirtyCheck_closure.prototype = $desc;
  function dirtyCheckZoneSpec_wrapCallback(enqueueDirtyCheck_1) {
    this.enqueueDirtyCheck_1 = enqueueDirtyCheck_1;
  }
  dirtyCheckZoneSpec_wrapCallback.builtin$cls = "dirtyCheckZoneSpec_wrapCallback";
  if (!"name" in dirtyCheckZoneSpec_wrapCallback)
    dirtyCheckZoneSpec_wrapCallback.name = "dirtyCheckZoneSpec_wrapCallback";
  $desc = $collectedClasses.dirtyCheckZoneSpec_wrapCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  dirtyCheckZoneSpec_wrapCallback.prototype = $desc;
  function dirtyCheckZoneSpec_wrapCallback_closure(enqueueDirtyCheck_2, parent_3, zone_4, f_5) {
    this.enqueueDirtyCheck_2 = enqueueDirtyCheck_2;
    this.parent_3 = parent_3;
    this.zone_4 = zone_4;
    this.f_5 = f_5;
  }
  dirtyCheckZoneSpec_wrapCallback_closure.builtin$cls = "dirtyCheckZoneSpec_wrapCallback_closure";
  if (!"name" in dirtyCheckZoneSpec_wrapCallback_closure)
    dirtyCheckZoneSpec_wrapCallback_closure.name = "dirtyCheckZoneSpec_wrapCallback_closure";
  $desc = $collectedClasses.dirtyCheckZoneSpec_wrapCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  dirtyCheckZoneSpec_wrapCallback_closure.prototype = $desc;
  function dirtyCheckZoneSpec_wrapUnaryCallback(enqueueDirtyCheck_6) {
    this.enqueueDirtyCheck_6 = enqueueDirtyCheck_6;
  }
  dirtyCheckZoneSpec_wrapUnaryCallback.builtin$cls = "dirtyCheckZoneSpec_wrapUnaryCallback";
  if (!"name" in dirtyCheckZoneSpec_wrapUnaryCallback)
    dirtyCheckZoneSpec_wrapUnaryCallback.name = "dirtyCheckZoneSpec_wrapUnaryCallback";
  $desc = $collectedClasses.dirtyCheckZoneSpec_wrapUnaryCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  dirtyCheckZoneSpec_wrapUnaryCallback.prototype = $desc;
  function dirtyCheckZoneSpec_wrapUnaryCallback_closure(enqueueDirtyCheck_7, parent_8, zone_9, f_10) {
    this.enqueueDirtyCheck_7 = enqueueDirtyCheck_7;
    this.parent_8 = parent_8;
    this.zone_9 = zone_9;
    this.f_10 = f_10;
  }
  dirtyCheckZoneSpec_wrapUnaryCallback_closure.builtin$cls = "dirtyCheckZoneSpec_wrapUnaryCallback_closure";
  if (!"name" in dirtyCheckZoneSpec_wrapUnaryCallback_closure)
    dirtyCheckZoneSpec_wrapUnaryCallback_closure.name = "dirtyCheckZoneSpec_wrapUnaryCallback_closure";
  $desc = $collectedClasses.dirtyCheckZoneSpec_wrapUnaryCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  dirtyCheckZoneSpec_wrapUnaryCallback_closure.prototype = $desc;
  function ListChangeRecord(object, _unmodifiableRemoved, _removed, _list_diff$_index, _addedCount) {
    this.object = object;
    this._unmodifiableRemoved = _unmodifiableRemoved;
    this._removed = _removed;
    this._list_diff$_index = _list_diff$_index;
    this._addedCount = _addedCount;
  }
  ListChangeRecord.builtin$cls = "ListChangeRecord";
  if (!"name" in ListChangeRecord)
    ListChangeRecord.name = "ListChangeRecord";
  $desc = $collectedClasses.ListChangeRecord;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListChangeRecord.prototype = $desc;
  function ObservableProperty() {
  }
  ObservableProperty.builtin$cls = "ObservableProperty";
  if (!"name" in ObservableProperty)
    ObservableProperty.name = "ObservableProperty";
  $desc = $collectedClasses.ObservableProperty;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObservableProperty.prototype = $desc;
  function Reflectable() {
  }
  Reflectable.builtin$cls = "Reflectable";
  if (!"name" in Reflectable)
    Reflectable.name = "Reflectable";
  $desc = $collectedClasses.Reflectable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Reflectable.prototype = $desc;
  function Observable() {
  }
  Observable.builtin$cls = "Observable";
  if (!"name" in Observable)
    Observable.name = "Observable";
  $desc = $collectedClasses.Observable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Observable.prototype = $desc;
  function Observable_deliverChanges_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  Observable_deliverChanges_closure.builtin$cls = "Observable_deliverChanges_closure";
  if (!"name" in Observable_deliverChanges_closure)
    Observable_deliverChanges_closure.name = "Observable_deliverChanges_closure";
  $desc = $collectedClasses.Observable_deliverChanges_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Observable_deliverChanges_closure.prototype = $desc;
  function ObservableBox() {
  }
  ObservableBox.builtin$cls = "ObservableBox";
  if (!"name" in ObservableBox)
    ObservableBox.name = "ObservableBox";
  $desc = $collectedClasses.ObservableBox;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObservableBox.prototype = $desc;
  function MapChangeRecord(key, oldValue, newValue, isInsert, isRemove) {
    this.key = key;
    this.oldValue = oldValue;
    this.newValue = newValue;
    this.isInsert = isInsert;
    this.isRemove = isRemove;
  }
  MapChangeRecord.builtin$cls = "MapChangeRecord";
  if (!"name" in MapChangeRecord)
    MapChangeRecord.name = "MapChangeRecord";
  $desc = $collectedClasses.MapChangeRecord;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapChangeRecord.prototype = $desc;
  MapChangeRecord.prototype.get$key = function(receiver) {
    return this.key;
  };
  MapChangeRecord.prototype.get$oldValue = function(receiver) {
    return this.oldValue;
  };
  MapChangeRecord.prototype.get$newValue = function(receiver) {
    return this.newValue;
  };
  function ObservableMap(_observable_map$_map, _changes, _records) {
    this._observable_map$_map = _observable_map$_map;
    this._changes = _changes;
    this._records = _records;
  }
  ObservableMap.builtin$cls = "ObservableMap";
  if (!"name" in ObservableMap)
    ObservableMap.name = "ObservableMap";
  $desc = $collectedClasses.ObservableMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObservableMap.prototype = $desc;
  function ObservableMap_addAll_closure(this_0) {
    this.this_0 = this_0;
  }
  ObservableMap_addAll_closure.builtin$cls = "ObservableMap_addAll_closure";
  if (!"name" in ObservableMap_addAll_closure)
    ObservableMap_addAll_closure.name = "ObservableMap_addAll_closure";
  $desc = $collectedClasses.ObservableMap_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObservableMap_addAll_closure.prototype = $desc;
  function ObservableMap_clear_closure(this_0) {
    this.this_0 = this_0;
  }
  ObservableMap_clear_closure.builtin$cls = "ObservableMap_clear_closure";
  if (!"name" in ObservableMap_clear_closure)
    ObservableMap_clear_closure.name = "ObservableMap_clear_closure";
  $desc = $collectedClasses.ObservableMap_clear_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObservableMap_clear_closure.prototype = $desc;
  function PathObserver(path, _isValid, _segments, _values, _subs, _computeValue, _changes, _records) {
    this.path = path;
    this._isValid = _isValid;
    this._segments = _segments;
    this._values = _values;
    this._subs = _subs;
    this._computeValue = _computeValue;
    this._changes = _changes;
    this._records = _records;
  }
  PathObserver.builtin$cls = "PathObserver";
  if (!"name" in PathObserver)
    PathObserver.name = "PathObserver";
  $desc = $collectedClasses.PathObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathObserver.prototype = $desc;
  PathObserver.prototype.get$path = function(receiver) {
    return this.path;
  };
  function PathObserver_closure() {
  }
  PathObserver_closure.builtin$cls = "PathObserver_closure";
  if (!"name" in PathObserver_closure)
    PathObserver_closure.name = "PathObserver_closure";
  $desc = $collectedClasses.PathObserver_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathObserver_closure.prototype = $desc;
  function PathObserver_bindSync_closure(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  }
  PathObserver_bindSync_closure.builtin$cls = "PathObserver_bindSync_closure";
  if (!"name" in PathObserver_bindSync_closure)
    PathObserver_bindSync_closure.name = "PathObserver_bindSync_closure";
  $desc = $collectedClasses.PathObserver_bindSync_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathObserver_bindSync_closure.prototype = $desc;
  function PathObserver__observeIndex_closure0(this_0, i_1, segment_2) {
    this.this_0 = this_0;
    this.i_1 = i_1;
    this.segment_2 = segment_2;
  }
  PathObserver__observeIndex_closure0.builtin$cls = "PathObserver__observeIndex_closure0";
  if (!"name" in PathObserver__observeIndex_closure0)
    PathObserver__observeIndex_closure0.name = "PathObserver__observeIndex_closure0";
  $desc = $collectedClasses.PathObserver__observeIndex_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathObserver__observeIndex_closure0.prototype = $desc;
  function PathObserver__observeIndex_closure(this_3, i_4, segment_5) {
    this.this_3 = this_3;
    this.i_4 = i_4;
    this.segment_5 = segment_5;
  }
  PathObserver__observeIndex_closure.builtin$cls = "PathObserver__observeIndex_closure";
  if (!"name" in PathObserver__observeIndex_closure)
    PathObserver__observeIndex_closure.name = "PathObserver__observeIndex_closure";
  $desc = $collectedClasses.PathObserver__observeIndex_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathObserver__observeIndex_closure.prototype = $desc;
  function closure0() {
  }
  closure0.builtin$cls = "closure0";
  if (!"name" in closure0)
    closure0.name = "closure0";
  $desc = $collectedClasses.closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure0.prototype = $desc;
  function PageElement(_page$__$home, _changes, _records, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._page$__$home = _page$__$home;
    this._changes = _changes;
    this._records = _records;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  PageElement.builtin$cls = "PageElement";
  if (!"name" in PageElement)
    PageElement.name = "PageElement";
  $desc = $collectedClasses.PageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PageElement.prototype = $desc;
  PageElement.prototype.get$_page$__$home = function(receiver) {
    return receiver._page$__$home;
  };
  PageElement.prototype.get$_page$__$home.$reflectable = 1;
  PageElement.prototype.set$_page$__$home = function(receiver, v) {
    return receiver._page$__$home = v;
  };
  PageElement.prototype.set$_page$__$home.$reflectable = 1;
  function DartdocElement_ChangeNotifier() {
  }
  DartdocElement_ChangeNotifier.builtin$cls = "DartdocElement_ChangeNotifier";
  if (!"name" in DartdocElement_ChangeNotifier)
    DartdocElement_ChangeNotifier.name = "DartdocElement_ChangeNotifier";
  $desc = $collectedClasses.DartdocElement_ChangeNotifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DartdocElement_ChangeNotifier.prototype = $desc;
  function PageElement_enteredView_closure(this_0) {
    this.this_0 = this_0;
  }
  PageElement_enteredView_closure.builtin$cls = "PageElement_enteredView_closure";
  if (!"name" in PageElement_enteredView_closure)
    PageElement_enteredView_closure.name = "PageElement_enteredView_closure";
  $desc = $collectedClasses.PageElement_enteredView_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PageElement_enteredView_closure.prototype = $desc;
  function PageElement_enteredView_closure0(this_1) {
    this.this_1 = this_1;
  }
  PageElement_enteredView_closure0.builtin$cls = "PageElement_enteredView_closure0";
  if (!"name" in PageElement_enteredView_closure0)
    PageElement_enteredView_closure0.name = "PageElement_enteredView_closure0";
  $desc = $collectedClasses.PageElement_enteredView_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PageElement_enteredView_closure0.prototype = $desc;
  function ParameterElement(_parameters$_parameters, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._parameters$_parameters = _parameters$_parameters;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  ParameterElement.builtin$cls = "ParameterElement";
  if (!"name" in ParameterElement)
    ParameterElement.name = "ParameterElement";
  $desc = $collectedClasses.ParameterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParameterElement.prototype = $desc;
  ParameterElement.prototype.get$_parameters$_parameters = function(receiver) {
    return receiver._parameters$_parameters;
  };
  ParameterElement.prototype.get$_parameters$_parameters.$reflectable = 1;
  ParameterElement.prototype.set$_parameters$_parameters = function(receiver, v) {
    return receiver._parameters$_parameters = v;
  };
  ParameterElement.prototype.set$_parameters$_parameters.$reflectable = 1;
  function ParameterElement_parameters_closure(this_0, newParameters_1) {
    this.this_0 = this_0;
    this.newParameters_1 = newParameters_1;
  }
  ParameterElement_parameters_closure.builtin$cls = "ParameterElement_parameters_closure";
  if (!"name" in ParameterElement_parameters_closure)
    ParameterElement_parameters_closure.name = "ParameterElement_parameters_closure";
  $desc = $collectedClasses.ParameterElement_parameters_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParameterElement_parameters_closure.prototype = $desc;
  function ParameterElement_required_closure() {
  }
  ParameterElement_required_closure.builtin$cls = "ParameterElement_required_closure";
  if (!"name" in ParameterElement_required_closure)
    ParameterElement_required_closure.name = "ParameterElement_required_closure";
  $desc = $collectedClasses.ParameterElement_required_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParameterElement_required_closure.prototype = $desc;
  function ParameterElement_optional_closure() {
  }
  ParameterElement_optional_closure.builtin$cls = "ParameterElement_optional_closure";
  if (!"name" in ParameterElement_optional_closure)
    ParameterElement_optional_closure.name = "ParameterElement_optional_closure";
  $desc = $collectedClasses.ParameterElement_optional_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParameterElement_optional_closure.prototype = $desc;
  function ParameterElement_addParameters_closure(this_0, elements_1, className_2, outerSpan_3) {
    this.this_0 = this_0;
    this.elements_1 = elements_1;
    this.className_2 = className_2;
    this.outerSpan_3 = outerSpan_3;
  }
  ParameterElement_addParameters_closure.builtin$cls = "ParameterElement_addParameters_closure";
  if (!"name" in ParameterElement_addParameters_closure)
    ParameterElement_addParameters_closure.name = "ParameterElement_addParameters_closure";
  $desc = $collectedClasses.ParameterElement_addParameters_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParameterElement_addParameters_closure.prototype = $desc;
  function ParameterElement_addParameters__closure(outerSpan_4) {
    this.outerSpan_4 = outerSpan_4;
  }
  ParameterElement_addParameters__closure.builtin$cls = "ParameterElement_addParameters__closure";
  if (!"name" in ParameterElement_addParameters__closure)
    ParameterElement_addParameters__closure.name = "ParameterElement_addParameters__closure";
  $desc = $collectedClasses.ParameterElement_addParameters__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParameterElement_addParameters__closure.prototype = $desc;
  function Parser0(_s, _pos, _len, _line, _column, _inBareDocument, _farthestLine, _farthestColumn, _farthestPos, _farthestContext, _contextStack, _errorAnnotations, _capturedString, _captureStart, _capturingAs) {
    this._s = _s;
    this._pos = _pos;
    this._len = _len;
    this._line = _line;
    this._column = _column;
    this._inBareDocument = _inBareDocument;
    this._farthestLine = _farthestLine;
    this._farthestColumn = _farthestColumn;
    this._farthestPos = _farthestPos;
    this._farthestContext = _farthestContext;
    this._contextStack = _contextStack;
    this._errorAnnotations = _errorAnnotations;
    this._capturedString = _capturedString;
    this._captureStart = _captureStart;
    this._capturingAs = _capturingAs;
  }
  Parser0.builtin$cls = "Parser0";
  if (!"name" in Parser0)
    Parser0.name = "Parser0";
  $desc = $collectedClasses.Parser0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser0.prototype = $desc;
  function Parser_consumeChar_closure(char_0) {
    this.char_0 = char_0;
  }
  Parser_consumeChar_closure.builtin$cls = "Parser_consumeChar_closure";
  if (!"name" in Parser_consumeChar_closure)
    Parser_consumeChar_closure.name = "Parser_consumeChar_closure";
  $desc = $collectedClasses.Parser_consumeChar_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_consumeChar_closure.prototype = $desc;
  function Parser_nAtOnce_closure(this_1, n_2, matcher_3) {
    this.this_1 = this_1;
    this.n_2 = n_2;
    this.matcher_3 = matcher_3;
  }
  Parser_nAtOnce_closure.builtin$cls = "Parser_nAtOnce_closure";
  if (!"name" in Parser_nAtOnce_closure)
    Parser_nAtOnce_closure.name = "Parser_nAtOnce_closure";
  $desc = $collectedClasses.Parser_nAtOnce_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nAtOnce_closure.prototype = $desc;
  function Parser_nAtOnce__closure(box_0, matcher_4) {
    this.box_0 = box_0;
    this.matcher_4 = matcher_4;
  }
  Parser_nAtOnce__closure.builtin$cls = "Parser_nAtOnce__closure";
  if (!"name" in Parser_nAtOnce__closure)
    Parser_nAtOnce__closure.name = "Parser_nAtOnce__closure";
  $desc = $collectedClasses.Parser_nAtOnce__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nAtOnce__closure.prototype = $desc;
  function Parser_rawString_closure(str_0) {
    this.str_0 = str_0;
  }
  Parser_rawString_closure.builtin$cls = "Parser_rawString_closure";
  if (!"name" in Parser_rawString_closure)
    Parser_rawString_closure.name = "Parser_rawString_closure";
  $desc = $collectedClasses.Parser_rawString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_rawString_closure.prototype = $desc;
  function Parser_captureAs_closure(replacement_0) {
    this.replacement_0 = replacement_0;
  }
  Parser_captureAs_closure.builtin$cls = "Parser_captureAs_closure";
  if (!"name" in Parser_captureAs_closure)
    Parser_captureAs_closure.name = "Parser_captureAs_closure";
  $desc = $collectedClasses.Parser_captureAs_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_captureAs_closure.prototype = $desc;
  function Parser_map_closure(content_0) {
    this.content_0 = content_0;
  }
  Parser_map_closure.builtin$cls = "Parser_map_closure";
  if (!"name" in Parser_map_closure)
    Parser_map_closure.name = "Parser_map_closure";
  $desc = $collectedClasses.Parser_map_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_map_closure.prototype = $desc;
  function Parser_annotateError_closure(box_0, this_1, fn_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.fn_2 = fn_2;
  }
  Parser_annotateError_closure.builtin$cls = "Parser_annotateError_closure";
  if (!"name" in Parser_annotateError_closure)
    Parser_annotateError_closure.name = "Parser_annotateError_closure";
  $desc = $collectedClasses.Parser_annotateError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_annotateError_closure.prototype = $desc;
  function Parser_blockScalarAdditionalIndentation_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  Parser_blockScalarAdditionalIndentation_closure.builtin$cls = "Parser_blockScalarAdditionalIndentation_closure";
  if (!"name" in Parser_blockScalarAdditionalIndentation_closure)
    Parser_blockScalarAdditionalIndentation_closure.name = "Parser_blockScalarAdditionalIndentation_closure";
  $desc = $collectedClasses.Parser_blockScalarAdditionalIndentation_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_blockScalarAdditionalIndentation_closure.prototype = $desc;
  function Parser_blockScalarAdditionalIndentation__closure(this_2) {
    this.this_2 = this_2;
  }
  Parser_blockScalarAdditionalIndentation__closure.builtin$cls = "Parser_blockScalarAdditionalIndentation__closure";
  if (!"name" in Parser_blockScalarAdditionalIndentation__closure)
    Parser_blockScalarAdditionalIndentation__closure.name = "Parser_blockScalarAdditionalIndentation__closure";
  $desc = $collectedClasses.Parser_blockScalarAdditionalIndentation__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_blockScalarAdditionalIndentation__closure.prototype = $desc;
  function Parser_blockScalarAdditionalIndentation___closure(this_3) {
    this.this_3 = this_3;
  }
  Parser_blockScalarAdditionalIndentation___closure.builtin$cls = "Parser_blockScalarAdditionalIndentation___closure";
  if (!"name" in Parser_blockScalarAdditionalIndentation___closure)
    Parser_blockScalarAdditionalIndentation___closure.name = "Parser_blockScalarAdditionalIndentation___closure";
  $desc = $collectedClasses.Parser_blockScalarAdditionalIndentation___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_blockScalarAdditionalIndentation___closure.prototype = $desc;
  function Parser_c_indicator_closure(this_0, type_1) {
    this.this_0 = this_0;
    this.type_1 = type_1;
  }
  Parser_c_indicator_closure.builtin$cls = "Parser_c_indicator_closure";
  if (!"name" in Parser_c_indicator_closure)
    Parser_c_indicator_closure.name = "Parser_c_indicator_closure";
  $desc = $collectedClasses.Parser_c_indicator_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_indicator_closure.prototype = $desc;
  function Parser_b_break_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_b_break_closure.builtin$cls = "Parser_b_break_closure";
  if (!"name" in Parser_b_break_closure)
    Parser_b_break_closure.name = "Parser_b_break_closure";
  $desc = $collectedClasses.Parser_b_break_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_b_break_closure.prototype = $desc;
  function Parser_b_asLineFeed_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_b_asLineFeed_closure.builtin$cls = "Parser_b_asLineFeed_closure";
  if (!"name" in Parser_b_asLineFeed_closure)
    Parser_b_asLineFeed_closure.name = "Parser_b_asLineFeed_closure";
  $desc = $collectedClasses.Parser_b_asLineFeed_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_b_asLineFeed_closure.prototype = $desc;
  function Parser_b_nonContent_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_b_nonContent_closure.builtin$cls = "Parser_b_nonContent_closure";
  if (!"name" in Parser_b_nonContent_closure)
    Parser_b_nonContent_closure.name = "Parser_b_nonContent_closure";
  $desc = $collectedClasses.Parser_b_nonContent_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_b_nonContent_closure.prototype = $desc;
  function Parser_c_escape_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_c_escape_closure.builtin$cls = "Parser_c_escape_closure";
  if (!"name" in Parser_c_escape_closure)
    Parser_c_escape_closure.name = "Parser_c_escape_closure";
  $desc = $collectedClasses.Parser_c_escape_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_escape_closure.prototype = $desc;
  function Parser_ns_escNull_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_ns_escNull_closure.builtin$cls = "Parser_ns_escNull_closure";
  if (!"name" in Parser_ns_escNull_closure)
    Parser_ns_escNull_closure.name = "Parser_ns_escNull_closure";
  $desc = $collectedClasses.Parser_ns_escNull_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_escNull_closure.prototype = $desc;
  function Parser_ns_escBell_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_ns_escBell_closure.builtin$cls = "Parser_ns_escBell_closure";
  if (!"name" in Parser_ns_escBell_closure)
    Parser_ns_escBell_closure.name = "Parser_ns_escBell_closure";
  $desc = $collectedClasses.Parser_ns_escBell_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_escBell_closure.prototype = $desc;
  function Parser_ns_escBackspace_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_ns_escBackspace_closure.builtin$cls = "Parser_ns_escBackspace_closure";
  if (!"name" in Parser_ns_escBackspace_closure)
    Parser_ns_escBackspace_closure.name = "Parser_ns_escBackspace_closure";
  $desc = $collectedClasses.Parser_ns_escBackspace_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_escBackspace_closure.prototype = $desc;
  function Parser_ns_escHorizontalTab_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_ns_escHorizontalTab_closure.builtin$cls = "Parser_ns_escHorizontalTab_closure";
  if (!"name" in Parser_ns_escHorizontalTab_closure)
    Parser_ns_escHorizontalTab_closure.name = "Parser_ns_escHorizontalTab_closure";
  $desc = $collectedClasses.Parser_ns_escHorizontalTab_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_escHorizontalTab_closure.prototype = $desc;
  function Parser_ns_escHorizontalTab__closure() {
  }
  Parser_ns_escHorizontalTab__closure.builtin$cls = "Parser_ns_escHorizontalTab__closure";
  if (!"name" in Parser_ns_escHorizontalTab__closure)
    Parser_ns_escHorizontalTab__closure.name = "Parser_ns_escHorizontalTab__closure";
  $desc = $collectedClasses.Parser_ns_escHorizontalTab__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_escHorizontalTab__closure.prototype = $desc;
  function Parser_ns_escLineFeed_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_ns_escLineFeed_closure.builtin$cls = "Parser_ns_escLineFeed_closure";
  if (!"name" in Parser_ns_escLineFeed_closure)
    Parser_ns_escLineFeed_closure.name = "Parser_ns_escLineFeed_closure";
  $desc = $collectedClasses.Parser_ns_escLineFeed_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_escLineFeed_closure.prototype = $desc;
  function Parser_ns_escVerticalTab_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_ns_escVerticalTab_closure.builtin$cls = "Parser_ns_escVerticalTab_closure";
  if (!"name" in Parser_ns_escVerticalTab_closure)
    Parser_ns_escVerticalTab_closure.name = "Parser_ns_escVerticalTab_closure";
  $desc = $collectedClasses.Parser_ns_escVerticalTab_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_escVerticalTab_closure.prototype = $desc;
  function Parser_ns_escFormFeed_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_ns_escFormFeed_closure.builtin$cls = "Parser_ns_escFormFeed_closure";
  if (!"name" in Parser_ns_escFormFeed_closure)
    Parser_ns_escFormFeed_closure.name = "Parser_ns_escFormFeed_closure";
  $desc = $collectedClasses.Parser_ns_escFormFeed_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_escFormFeed_closure.prototype = $desc;
  function Parser_ns_escCarriageReturn_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_ns_escCarriageReturn_closure.builtin$cls = "Parser_ns_escCarriageReturn_closure";
  if (!"name" in Parser_ns_escCarriageReturn_closure)
    Parser_ns_escCarriageReturn_closure.name = "Parser_ns_escCarriageReturn_closure";
  $desc = $collectedClasses.Parser_ns_escCarriageReturn_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_escCarriageReturn_closure.prototype = $desc;
  function Parser_ns_escEscape_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_ns_escEscape_closure.builtin$cls = "Parser_ns_escEscape_closure";
  if (!"name" in Parser_ns_escEscape_closure)
    Parser_ns_escEscape_closure.name = "Parser_ns_escEscape_closure";
  $desc = $collectedClasses.Parser_ns_escEscape_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_escEscape_closure.prototype = $desc;
  function Parser_ns_escNextLine_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_ns_escNextLine_closure.builtin$cls = "Parser_ns_escNextLine_closure";
  if (!"name" in Parser_ns_escNextLine_closure)
    Parser_ns_escNextLine_closure.name = "Parser_ns_escNextLine_closure";
  $desc = $collectedClasses.Parser_ns_escNextLine_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_escNextLine_closure.prototype = $desc;
  function Parser_ns_escNonBreakingSpace_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_ns_escNonBreakingSpace_closure.builtin$cls = "Parser_ns_escNonBreakingSpace_closure";
  if (!"name" in Parser_ns_escNonBreakingSpace_closure)
    Parser_ns_escNonBreakingSpace_closure.name = "Parser_ns_escNonBreakingSpace_closure";
  $desc = $collectedClasses.Parser_ns_escNonBreakingSpace_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_escNonBreakingSpace_closure.prototype = $desc;
  function Parser_ns_escLineSeparator_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_ns_escLineSeparator_closure.builtin$cls = "Parser_ns_escLineSeparator_closure";
  if (!"name" in Parser_ns_escLineSeparator_closure)
    Parser_ns_escLineSeparator_closure.name = "Parser_ns_escLineSeparator_closure";
  $desc = $collectedClasses.Parser_ns_escLineSeparator_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_escLineSeparator_closure.prototype = $desc;
  function Parser_ns_escParagraphSeparator_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_ns_escParagraphSeparator_closure.builtin$cls = "Parser_ns_escParagraphSeparator_closure";
  if (!"name" in Parser_ns_escParagraphSeparator_closure)
    Parser_ns_escParagraphSeparator_closure.name = "Parser_ns_escParagraphSeparator_closure";
  $desc = $collectedClasses.Parser_ns_escParagraphSeparator_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_escParagraphSeparator_closure.prototype = $desc;
  function Parser_ns_escNBit_closure(this_0, char_1) {
    this.this_0 = this_0;
    this.char_1 = char_1;
  }
  Parser_ns_escNBit_closure.builtin$cls = "Parser_ns_escNBit_closure";
  if (!"name" in Parser_ns_escNBit_closure)
    Parser_ns_escNBit_closure.name = "Parser_ns_escNBit_closure";
  $desc = $collectedClasses.Parser_ns_escNBit_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_escNBit_closure.prototype = $desc;
  function Parser_ns_escNBit_closure0(this_2, digits_3) {
    this.this_2 = this_2;
    this.digits_3 = digits_3;
  }
  Parser_ns_escNBit_closure0.builtin$cls = "Parser_ns_escNBit_closure0";
  if (!"name" in Parser_ns_escNBit_closure0)
    Parser_ns_escNBit_closure0.name = "Parser_ns_escNBit_closure0";
  $desc = $collectedClasses.Parser_ns_escNBit_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_escNBit_closure0.prototype = $desc;
  function Parser_ns_escNBit__closure(this_4) {
    this.this_4 = this_4;
  }
  Parser_ns_escNBit__closure.builtin$cls = "Parser_ns_escNBit__closure";
  if (!"name" in Parser_ns_escNBit__closure)
    Parser_ns_escNBit__closure.name = "Parser_ns_escNBit__closure";
  $desc = $collectedClasses.Parser_ns_escNBit__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_escNBit__closure.prototype = $desc;
  function Parser_ns_escNBit_closure1() {
  }
  Parser_ns_escNBit_closure1.builtin$cls = "Parser_ns_escNBit_closure1";
  if (!"name" in Parser_ns_escNBit_closure1)
    Parser_ns_escNBit_closure1.name = "Parser_ns_escNBit_closure1";
  $desc = $collectedClasses.Parser_ns_escNBit_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_escNBit_closure1.prototype = $desc;
  function Parser_c_ns_escChar_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_c_ns_escChar_closure.builtin$cls = "Parser_c_ns_escChar_closure";
  if (!"name" in Parser_c_ns_escChar_closure)
    Parser_c_ns_escChar_closure.name = "Parser_c_ns_escChar_closure";
  $desc = $collectedClasses.Parser_c_ns_escChar_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_ns_escChar_closure.prototype = $desc;
  function Parser_c_ns_escChar__closure(this_1) {
    this.this_1 = this_1;
  }
  Parser_c_ns_escChar__closure.builtin$cls = "Parser_c_ns_escChar__closure";
  if (!"name" in Parser_c_ns_escChar__closure)
    Parser_c_ns_escChar__closure.name = "Parser_c_ns_escChar__closure";
  $desc = $collectedClasses.Parser_c_ns_escChar__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_ns_escChar__closure.prototype = $desc;
  function Parser_s_indent_closure() {
  }
  Parser_s_indent_closure.builtin$cls = "Parser_s_indent_closure";
  if (!"name" in Parser_s_indent_closure)
    Parser_s_indent_closure.name = "Parser_s_indent_closure";
  $desc = $collectedClasses.Parser_s_indent_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_indent_closure.prototype = $desc;
  function Parser_s_indent_closure0(this_0) {
    this.this_0 = this_0;
  }
  Parser_s_indent_closure0.builtin$cls = "Parser_s_indent_closure0";
  if (!"name" in Parser_s_indent_closure0)
    Parser_s_indent_closure0.name = "Parser_s_indent_closure0";
  $desc = $collectedClasses.Parser_s_indent_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_indent_closure0.prototype = $desc;
  function Parser_s_indent__closure(this_1) {
    this.this_1 = this_1;
  }
  Parser_s_indent__closure.builtin$cls = "Parser_s_indent__closure";
  if (!"name" in Parser_s_indent__closure)
    Parser_s_indent__closure.name = "Parser_s_indent__closure";
  $desc = $collectedClasses.Parser_s_indent__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_indent__closure.prototype = $desc;
  function Parser_s_indentLessThan_closure(box_0, this_1, indent_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.indent_2 = indent_2;
  }
  Parser_s_indentLessThan_closure.builtin$cls = "Parser_s_indentLessThan_closure";
  if (!"name" in Parser_s_indentLessThan_closure)
    Parser_s_indentLessThan_closure.name = "Parser_s_indentLessThan_closure";
  $desc = $collectedClasses.Parser_s_indentLessThan_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_indentLessThan_closure.prototype = $desc;
  function Parser_s_separateInLine_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_s_separateInLine_closure.builtin$cls = "Parser_s_separateInLine_closure";
  if (!"name" in Parser_s_separateInLine_closure)
    Parser_s_separateInLine_closure.name = "Parser_s_separateInLine_closure";
  $desc = $collectedClasses.Parser_s_separateInLine_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_separateInLine_closure.prototype = $desc;
  function Parser_s_separateInLine__closure(this_1) {
    this.this_1 = this_1;
  }
  Parser_s_separateInLine__closure.builtin$cls = "Parser_s_separateInLine__closure";
  if (!"name" in Parser_s_separateInLine__closure)
    Parser_s_separateInLine__closure.name = "Parser_s_separateInLine__closure";
  $desc = $collectedClasses.Parser_s_separateInLine__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_separateInLine__closure.prototype = $desc;
  function Parser_s_separateInLine___closure(this_2) {
    this.this_2 = this_2;
  }
  Parser_s_separateInLine___closure.builtin$cls = "Parser_s_separateInLine___closure";
  if (!"name" in Parser_s_separateInLine___closure)
    Parser_s_separateInLine___closure.name = "Parser_s_separateInLine___closure";
  $desc = $collectedClasses.Parser_s_separateInLine___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_separateInLine___closure.prototype = $desc;
  function Parser_s_linePrefix_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_s_linePrefix_closure.builtin$cls = "Parser_s_linePrefix_closure";
  if (!"name" in Parser_s_linePrefix_closure)
    Parser_s_linePrefix_closure.name = "Parser_s_linePrefix_closure";
  $desc = $collectedClasses.Parser_s_linePrefix_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_linePrefix_closure.prototype = $desc;
  function Parser_s_flowLinePrefix_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_s_flowLinePrefix_closure.builtin$cls = "Parser_s_flowLinePrefix_closure";
  if (!"name" in Parser_s_flowLinePrefix_closure)
    Parser_s_flowLinePrefix_closure.name = "Parser_s_flowLinePrefix_closure";
  $desc = $collectedClasses.Parser_s_flowLinePrefix_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_flowLinePrefix_closure.prototype = $desc;
  function Parser_l_empty_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_l_empty_closure.builtin$cls = "Parser_l_empty_closure";
  if (!"name" in Parser_l_empty_closure)
    Parser_l_empty_closure.name = "Parser_l_empty_closure";
  $desc = $collectedClasses.Parser_l_empty_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_empty_closure.prototype = $desc;
  function Parser_l_empty__closure(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_l_empty__closure.builtin$cls = "Parser_l_empty__closure";
  if (!"name" in Parser_l_empty__closure)
    Parser_l_empty__closure.name = "Parser_l_empty__closure";
  $desc = $collectedClasses.Parser_l_empty__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_empty__closure.prototype = $desc;
  function Parser_l_empty__closure0(this_6, indent_7) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
  }
  Parser_l_empty__closure0.builtin$cls = "Parser_l_empty__closure0";
  if (!"name" in Parser_l_empty__closure0)
    Parser_l_empty__closure0.name = "Parser_l_empty__closure0";
  $desc = $collectedClasses.Parser_l_empty__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_empty__closure0.prototype = $desc;
  function Parser_b_asSpace_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_b_asSpace_closure.builtin$cls = "Parser_b_asSpace_closure";
  if (!"name" in Parser_b_asSpace_closure)
    Parser_b_asSpace_closure.name = "Parser_b_asSpace_closure";
  $desc = $collectedClasses.Parser_b_asSpace_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_b_asSpace_closure.prototype = $desc;
  function Parser_b_l_trimmed_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_b_l_trimmed_closure.builtin$cls = "Parser_b_l_trimmed_closure";
  if (!"name" in Parser_b_l_trimmed_closure)
    Parser_b_l_trimmed_closure.name = "Parser_b_l_trimmed_closure";
  $desc = $collectedClasses.Parser_b_l_trimmed_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_b_l_trimmed_closure.prototype = $desc;
  function Parser_b_l_trimmed__closure(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_b_l_trimmed__closure.builtin$cls = "Parser_b_l_trimmed__closure";
  if (!"name" in Parser_b_l_trimmed__closure)
    Parser_b_l_trimmed__closure.name = "Parser_b_l_trimmed__closure";
  $desc = $collectedClasses.Parser_b_l_trimmed__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_b_l_trimmed__closure.prototype = $desc;
  function Parser_b_l_trimmed___closure(this_6, indent_7, ctx_8) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
    this.ctx_8 = ctx_8;
  }
  Parser_b_l_trimmed___closure.builtin$cls = "Parser_b_l_trimmed___closure";
  if (!"name" in Parser_b_l_trimmed___closure)
    Parser_b_l_trimmed___closure.name = "Parser_b_l_trimmed___closure";
  $desc = $collectedClasses.Parser_b_l_trimmed___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_b_l_trimmed___closure.prototype = $desc;
  function Parser_b_l_folded_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_b_l_folded_closure.builtin$cls = "Parser_b_l_folded_closure";
  if (!"name" in Parser_b_l_folded_closure)
    Parser_b_l_folded_closure.name = "Parser_b_l_folded_closure";
  $desc = $collectedClasses.Parser_b_l_folded_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_b_l_folded_closure.prototype = $desc;
  function Parser_s_flowFolded_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_s_flowFolded_closure.builtin$cls = "Parser_s_flowFolded_closure";
  if (!"name" in Parser_s_flowFolded_closure)
    Parser_s_flowFolded_closure.name = "Parser_s_flowFolded_closure";
  $desc = $collectedClasses.Parser_s_flowFolded_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_flowFolded_closure.prototype = $desc;
  function Parser_c_nb_commentText_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_c_nb_commentText_closure.builtin$cls = "Parser_c_nb_commentText_closure";
  if (!"name" in Parser_c_nb_commentText_closure)
    Parser_c_nb_commentText_closure.name = "Parser_c_nb_commentText_closure";
  $desc = $collectedClasses.Parser_c_nb_commentText_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_nb_commentText_closure.prototype = $desc;
  function Parser_l_comment_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_l_comment_closure.builtin$cls = "Parser_l_comment_closure";
  if (!"name" in Parser_l_comment_closure)
    Parser_l_comment_closure.name = "Parser_l_comment_closure";
  $desc = $collectedClasses.Parser_l_comment_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_comment_closure.prototype = $desc;
  function Parser_s_separateLines_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_s_separateLines_closure.builtin$cls = "Parser_s_separateLines_closure";
  if (!"name" in Parser_s_separateLines_closure)
    Parser_s_separateLines_closure.name = "Parser_s_separateLines_closure";
  $desc = $collectedClasses.Parser_s_separateLines_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_separateLines_closure.prototype = $desc;
  function Parser_c_ns_properties_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_c_ns_properties_closure.builtin$cls = "Parser_c_ns_properties_closure";
  if (!"name" in Parser_c_ns_properties_closure)
    Parser_c_ns_properties_closure.name = "Parser_c_ns_properties_closure";
  $desc = $collectedClasses.Parser_c_ns_properties_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_ns_properties_closure.prototype = $desc;
  function Parser_c_ns_properties_closure0(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_c_ns_properties_closure0.builtin$cls = "Parser_c_ns_properties_closure0";
  if (!"name" in Parser_c_ns_properties_closure0)
    Parser_c_ns_properties_closure0.name = "Parser_c_ns_properties_closure0";
  $desc = $collectedClasses.Parser_c_ns_properties_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_ns_properties_closure0.prototype = $desc;
  function Parser_ns_anchorName_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_ns_anchorName_closure.builtin$cls = "Parser_ns_anchorName_closure";
  if (!"name" in Parser_ns_anchorName_closure)
    Parser_ns_anchorName_closure.name = "Parser_ns_anchorName_closure";
  $desc = $collectedClasses.Parser_ns_anchorName_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_anchorName_closure.prototype = $desc;
  function Parser_ns_anchorName__closure(this_1) {
    this.this_1 = this_1;
  }
  Parser_ns_anchorName__closure.builtin$cls = "Parser_ns_anchorName__closure";
  if (!"name" in Parser_ns_anchorName__closure)
    Parser_ns_anchorName__closure.name = "Parser_ns_anchorName__closure";
  $desc = $collectedClasses.Parser_ns_anchorName__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_anchorName__closure.prototype = $desc;
  function Parser_nb_doubleChar_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_nb_doubleChar_closure.builtin$cls = "Parser_nb_doubleChar_closure";
  if (!"name" in Parser_nb_doubleChar_closure)
    Parser_nb_doubleChar_closure.name = "Parser_nb_doubleChar_closure";
  $desc = $collectedClasses.Parser_nb_doubleChar_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_doubleChar_closure.prototype = $desc;
  function Parser_nb_doubleChar__closure(this_1) {
    this.this_1 = this_1;
  }
  Parser_nb_doubleChar__closure.builtin$cls = "Parser_nb_doubleChar__closure";
  if (!"name" in Parser_nb_doubleChar__closure)
    Parser_nb_doubleChar__closure.name = "Parser_nb_doubleChar__closure";
  $desc = $collectedClasses.Parser_nb_doubleChar__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_doubleChar__closure.prototype = $desc;
  function Parser_c_doubleQuoted_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_c_doubleQuoted_closure.builtin$cls = "Parser_c_doubleQuoted_closure";
  if (!"name" in Parser_c_doubleQuoted_closure)
    Parser_c_doubleQuoted_closure.name = "Parser_c_doubleQuoted_closure";
  $desc = $collectedClasses.Parser_c_doubleQuoted_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_doubleQuoted_closure.prototype = $desc;
  function Parser_c_doubleQuoted__closure(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_c_doubleQuoted__closure.builtin$cls = "Parser_c_doubleQuoted__closure";
  if (!"name" in Parser_c_doubleQuoted__closure)
    Parser_c_doubleQuoted__closure.name = "Parser_c_doubleQuoted__closure";
  $desc = $collectedClasses.Parser_c_doubleQuoted__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_doubleQuoted__closure.prototype = $desc;
  function Parser_nb_doubleText_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_nb_doubleText_closure.builtin$cls = "Parser_nb_doubleText_closure";
  if (!"name" in Parser_nb_doubleText_closure)
    Parser_nb_doubleText_closure.name = "Parser_nb_doubleText_closure";
  $desc = $collectedClasses.Parser_nb_doubleText_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_doubleText_closure.prototype = $desc;
  function Parser_s_doubleEscaped_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_s_doubleEscaped_closure.builtin$cls = "Parser_s_doubleEscaped_closure";
  if (!"name" in Parser_s_doubleEscaped_closure)
    Parser_s_doubleEscaped_closure.name = "Parser_s_doubleEscaped_closure";
  $desc = $collectedClasses.Parser_s_doubleEscaped_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_doubleEscaped_closure.prototype = $desc;
  function Parser_s_doubleEscaped__closure(this_2) {
    this.this_2 = this_2;
  }
  Parser_s_doubleEscaped__closure.builtin$cls = "Parser_s_doubleEscaped__closure";
  if (!"name" in Parser_s_doubleEscaped__closure)
    Parser_s_doubleEscaped__closure.name = "Parser_s_doubleEscaped__closure";
  $desc = $collectedClasses.Parser_s_doubleEscaped__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_doubleEscaped__closure.prototype = $desc;
  function Parser_s_doubleEscaped__closure0(this_3) {
    this.this_3 = this_3;
  }
  Parser_s_doubleEscaped__closure0.builtin$cls = "Parser_s_doubleEscaped__closure0";
  if (!"name" in Parser_s_doubleEscaped__closure0)
    Parser_s_doubleEscaped__closure0.name = "Parser_s_doubleEscaped__closure0";
  $desc = $collectedClasses.Parser_s_doubleEscaped__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_doubleEscaped__closure0.prototype = $desc;
  function Parser_s_doubleEscaped__closure1(this_4, indent_5) {
    this.this_4 = this_4;
    this.indent_5 = indent_5;
  }
  Parser_s_doubleEscaped__closure1.builtin$cls = "Parser_s_doubleEscaped__closure1";
  if (!"name" in Parser_s_doubleEscaped__closure1)
    Parser_s_doubleEscaped__closure1.name = "Parser_s_doubleEscaped__closure1";
  $desc = $collectedClasses.Parser_s_doubleEscaped__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_doubleEscaped__closure1.prototype = $desc;
  function Parser_s_doubleEscaped___closure(this_6, indent_7) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
  }
  Parser_s_doubleEscaped___closure.builtin$cls = "Parser_s_doubleEscaped___closure";
  if (!"name" in Parser_s_doubleEscaped___closure)
    Parser_s_doubleEscaped___closure.name = "Parser_s_doubleEscaped___closure";
  $desc = $collectedClasses.Parser_s_doubleEscaped___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_doubleEscaped___closure.prototype = $desc;
  function Parser_s_doubleBreak_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_s_doubleBreak_closure.builtin$cls = "Parser_s_doubleBreak_closure";
  if (!"name" in Parser_s_doubleBreak_closure)
    Parser_s_doubleBreak_closure.name = "Parser_s_doubleBreak_closure";
  $desc = $collectedClasses.Parser_s_doubleBreak_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_doubleBreak_closure.prototype = $desc;
  function Parser_s_doubleBreak_closure0(this_2, indent_3) {
    this.this_2 = this_2;
    this.indent_3 = indent_3;
  }
  Parser_s_doubleBreak_closure0.builtin$cls = "Parser_s_doubleBreak_closure0";
  if (!"name" in Parser_s_doubleBreak_closure0)
    Parser_s_doubleBreak_closure0.name = "Parser_s_doubleBreak_closure0";
  $desc = $collectedClasses.Parser_s_doubleBreak_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_doubleBreak_closure0.prototype = $desc;
  function Parser_nb_ns_doubleInLine_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_nb_ns_doubleInLine_closure.builtin$cls = "Parser_nb_ns_doubleInLine_closure";
  if (!"name" in Parser_nb_ns_doubleInLine_closure)
    Parser_nb_ns_doubleInLine_closure.name = "Parser_nb_ns_doubleInLine_closure";
  $desc = $collectedClasses.Parser_nb_ns_doubleInLine_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_ns_doubleInLine_closure.prototype = $desc;
  function Parser_nb_ns_doubleInLine__closure(this_1) {
    this.this_1 = this_1;
  }
  Parser_nb_ns_doubleInLine__closure.builtin$cls = "Parser_nb_ns_doubleInLine__closure";
  if (!"name" in Parser_nb_ns_doubleInLine__closure)
    Parser_nb_ns_doubleInLine__closure.name = "Parser_nb_ns_doubleInLine__closure";
  $desc = $collectedClasses.Parser_nb_ns_doubleInLine__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_ns_doubleInLine__closure.prototype = $desc;
  function Parser_nb_ns_doubleInLine___closure(this_2) {
    this.this_2 = this_2;
  }
  Parser_nb_ns_doubleInLine___closure.builtin$cls = "Parser_nb_ns_doubleInLine___closure";
  if (!"name" in Parser_nb_ns_doubleInLine___closure)
    Parser_nb_ns_doubleInLine___closure.name = "Parser_nb_ns_doubleInLine___closure";
  $desc = $collectedClasses.Parser_nb_ns_doubleInLine___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_ns_doubleInLine___closure.prototype = $desc;
  function Parser_s_doubleNextLine_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_s_doubleNextLine_closure.builtin$cls = "Parser_s_doubleNextLine_closure";
  if (!"name" in Parser_s_doubleNextLine_closure)
    Parser_s_doubleNextLine_closure.name = "Parser_s_doubleNextLine_closure";
  $desc = $collectedClasses.Parser_s_doubleNextLine_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_doubleNextLine_closure.prototype = $desc;
  function Parser_s_doubleNextLine__closure(this_2, indent_3) {
    this.this_2 = this_2;
    this.indent_3 = indent_3;
  }
  Parser_s_doubleNextLine__closure.builtin$cls = "Parser_s_doubleNextLine__closure";
  if (!"name" in Parser_s_doubleNextLine__closure)
    Parser_s_doubleNextLine__closure.name = "Parser_s_doubleNextLine__closure";
  $desc = $collectedClasses.Parser_s_doubleNextLine__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_doubleNextLine__closure.prototype = $desc;
  function Parser_s_doubleNextLine__closure0(this_4) {
    this.this_4 = this_4;
  }
  Parser_s_doubleNextLine__closure0.builtin$cls = "Parser_s_doubleNextLine__closure0";
  if (!"name" in Parser_s_doubleNextLine__closure0)
    Parser_s_doubleNextLine__closure0.name = "Parser_s_doubleNextLine__closure0";
  $desc = $collectedClasses.Parser_s_doubleNextLine__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_doubleNextLine__closure0.prototype = $desc;
  function Parser_s_doubleNextLine___closure(this_5) {
    this.this_5 = this_5;
  }
  Parser_s_doubleNextLine___closure.builtin$cls = "Parser_s_doubleNextLine___closure";
  if (!"name" in Parser_s_doubleNextLine___closure)
    Parser_s_doubleNextLine___closure.name = "Parser_s_doubleNextLine___closure";
  $desc = $collectedClasses.Parser_s_doubleNextLine___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_doubleNextLine___closure.prototype = $desc;
  function Parser_nb_doubleMultiLine_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_nb_doubleMultiLine_closure.builtin$cls = "Parser_nb_doubleMultiLine_closure";
  if (!"name" in Parser_nb_doubleMultiLine_closure)
    Parser_nb_doubleMultiLine_closure.name = "Parser_nb_doubleMultiLine_closure";
  $desc = $collectedClasses.Parser_nb_doubleMultiLine_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_doubleMultiLine_closure.prototype = $desc;
  function Parser_nb_doubleMultiLine_closure0(this_2) {
    this.this_2 = this_2;
  }
  Parser_nb_doubleMultiLine_closure0.builtin$cls = "Parser_nb_doubleMultiLine_closure0";
  if (!"name" in Parser_nb_doubleMultiLine_closure0)
    Parser_nb_doubleMultiLine_closure0.name = "Parser_nb_doubleMultiLine_closure0";
  $desc = $collectedClasses.Parser_nb_doubleMultiLine_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_doubleMultiLine_closure0.prototype = $desc;
  function Parser_nb_doubleMultiLine__closure(this_3) {
    this.this_3 = this_3;
  }
  Parser_nb_doubleMultiLine__closure.builtin$cls = "Parser_nb_doubleMultiLine__closure";
  if (!"name" in Parser_nb_doubleMultiLine__closure)
    Parser_nb_doubleMultiLine__closure.name = "Parser_nb_doubleMultiLine__closure";
  $desc = $collectedClasses.Parser_nb_doubleMultiLine__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_doubleMultiLine__closure.prototype = $desc;
  function Parser_c_quotedQuote_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_c_quotedQuote_closure.builtin$cls = "Parser_c_quotedQuote_closure";
  if (!"name" in Parser_c_quotedQuote_closure)
    Parser_c_quotedQuote_closure.name = "Parser_c_quotedQuote_closure";
  $desc = $collectedClasses.Parser_c_quotedQuote_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_quotedQuote_closure.prototype = $desc;
  function Parser_nb_singleChar_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_nb_singleChar_closure.builtin$cls = "Parser_nb_singleChar_closure";
  if (!"name" in Parser_nb_singleChar_closure)
    Parser_nb_singleChar_closure.name = "Parser_nb_singleChar_closure";
  $desc = $collectedClasses.Parser_nb_singleChar_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_singleChar_closure.prototype = $desc;
  function Parser_nb_singleChar__closure(this_1) {
    this.this_1 = this_1;
  }
  Parser_nb_singleChar__closure.builtin$cls = "Parser_nb_singleChar__closure";
  if (!"name" in Parser_nb_singleChar__closure)
    Parser_nb_singleChar__closure.name = "Parser_nb_singleChar__closure";
  $desc = $collectedClasses.Parser_nb_singleChar__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_singleChar__closure.prototype = $desc;
  function Parser_c_singleQuoted_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_c_singleQuoted_closure.builtin$cls = "Parser_c_singleQuoted_closure";
  if (!"name" in Parser_c_singleQuoted_closure)
    Parser_c_singleQuoted_closure.name = "Parser_c_singleQuoted_closure";
  $desc = $collectedClasses.Parser_c_singleQuoted_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_singleQuoted_closure.prototype = $desc;
  function Parser_c_singleQuoted__closure(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_c_singleQuoted__closure.builtin$cls = "Parser_c_singleQuoted__closure";
  if (!"name" in Parser_c_singleQuoted__closure)
    Parser_c_singleQuoted__closure.name = "Parser_c_singleQuoted__closure";
  $desc = $collectedClasses.Parser_c_singleQuoted__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_singleQuoted__closure.prototype = $desc;
  function Parser_nb_singleText_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_nb_singleText_closure.builtin$cls = "Parser_nb_singleText_closure";
  if (!"name" in Parser_nb_singleText_closure)
    Parser_nb_singleText_closure.name = "Parser_nb_singleText_closure";
  $desc = $collectedClasses.Parser_nb_singleText_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_singleText_closure.prototype = $desc;
  function Parser_nb_ns_singleInLine_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_nb_ns_singleInLine_closure.builtin$cls = "Parser_nb_ns_singleInLine_closure";
  if (!"name" in Parser_nb_ns_singleInLine_closure)
    Parser_nb_ns_singleInLine_closure.name = "Parser_nb_ns_singleInLine_closure";
  $desc = $collectedClasses.Parser_nb_ns_singleInLine_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_ns_singleInLine_closure.prototype = $desc;
  function Parser_nb_ns_singleInLine__closure(this_1) {
    this.this_1 = this_1;
  }
  Parser_nb_ns_singleInLine__closure.builtin$cls = "Parser_nb_ns_singleInLine__closure";
  if (!"name" in Parser_nb_ns_singleInLine__closure)
    Parser_nb_ns_singleInLine__closure.name = "Parser_nb_ns_singleInLine__closure";
  $desc = $collectedClasses.Parser_nb_ns_singleInLine__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_ns_singleInLine__closure.prototype = $desc;
  function Parser_nb_ns_singleInLine___closure(this_2) {
    this.this_2 = this_2;
  }
  Parser_nb_ns_singleInLine___closure.builtin$cls = "Parser_nb_ns_singleInLine___closure";
  if (!"name" in Parser_nb_ns_singleInLine___closure)
    Parser_nb_ns_singleInLine___closure.name = "Parser_nb_ns_singleInLine___closure";
  $desc = $collectedClasses.Parser_nb_ns_singleInLine___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_ns_singleInLine___closure.prototype = $desc;
  function Parser_s_singleNextLine_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_s_singleNextLine_closure.builtin$cls = "Parser_s_singleNextLine_closure";
  if (!"name" in Parser_s_singleNextLine_closure)
    Parser_s_singleNextLine_closure.name = "Parser_s_singleNextLine_closure";
  $desc = $collectedClasses.Parser_s_singleNextLine_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_singleNextLine_closure.prototype = $desc;
  function Parser_s_singleNextLine__closure(this_2, indent_3) {
    this.this_2 = this_2;
    this.indent_3 = indent_3;
  }
  Parser_s_singleNextLine__closure.builtin$cls = "Parser_s_singleNextLine__closure";
  if (!"name" in Parser_s_singleNextLine__closure)
    Parser_s_singleNextLine__closure.name = "Parser_s_singleNextLine__closure";
  $desc = $collectedClasses.Parser_s_singleNextLine__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_singleNextLine__closure.prototype = $desc;
  function Parser_s_singleNextLine__closure0(this_4) {
    this.this_4 = this_4;
  }
  Parser_s_singleNextLine__closure0.builtin$cls = "Parser_s_singleNextLine__closure0";
  if (!"name" in Parser_s_singleNextLine__closure0)
    Parser_s_singleNextLine__closure0.name = "Parser_s_singleNextLine__closure0";
  $desc = $collectedClasses.Parser_s_singleNextLine__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_singleNextLine__closure0.prototype = $desc;
  function Parser_s_singleNextLine___closure(this_5) {
    this.this_5 = this_5;
  }
  Parser_s_singleNextLine___closure.builtin$cls = "Parser_s_singleNextLine___closure";
  if (!"name" in Parser_s_singleNextLine___closure)
    Parser_s_singleNextLine___closure.name = "Parser_s_singleNextLine___closure";
  $desc = $collectedClasses.Parser_s_singleNextLine___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_singleNextLine___closure.prototype = $desc;
  function Parser_nb_singleMultiLine_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_nb_singleMultiLine_closure.builtin$cls = "Parser_nb_singleMultiLine_closure";
  if (!"name" in Parser_nb_singleMultiLine_closure)
    Parser_nb_singleMultiLine_closure.name = "Parser_nb_singleMultiLine_closure";
  $desc = $collectedClasses.Parser_nb_singleMultiLine_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_singleMultiLine_closure.prototype = $desc;
  function Parser_nb_singleMultiLine_closure0(this_2) {
    this.this_2 = this_2;
  }
  Parser_nb_singleMultiLine_closure0.builtin$cls = "Parser_nb_singleMultiLine_closure0";
  if (!"name" in Parser_nb_singleMultiLine_closure0)
    Parser_nb_singleMultiLine_closure0.name = "Parser_nb_singleMultiLine_closure0";
  $desc = $collectedClasses.Parser_nb_singleMultiLine_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_singleMultiLine_closure0.prototype = $desc;
  function Parser_nb_singleMultiLine__closure(this_3) {
    this.this_3 = this_3;
  }
  Parser_nb_singleMultiLine__closure.builtin$cls = "Parser_nb_singleMultiLine__closure";
  if (!"name" in Parser_nb_singleMultiLine__closure)
    Parser_nb_singleMultiLine__closure.name = "Parser_nb_singleMultiLine__closure";
  $desc = $collectedClasses.Parser_nb_singleMultiLine__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_singleMultiLine__closure.prototype = $desc;
  function Parser_ns_plain_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_ns_plain_closure.builtin$cls = "Parser_ns_plain_closure";
  if (!"name" in Parser_ns_plain_closure)
    Parser_ns_plain_closure.name = "Parser_ns_plain_closure";
  $desc = $collectedClasses.Parser_ns_plain_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_plain_closure.prototype = $desc;
  function Parser_ns_plain__closure(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_ns_plain__closure.builtin$cls = "Parser_ns_plain__closure";
  if (!"name" in Parser_ns_plain__closure)
    Parser_ns_plain__closure.name = "Parser_ns_plain__closure";
  $desc = $collectedClasses.Parser_ns_plain__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_plain__closure.prototype = $desc;
  function Parser_nb_ns_plainInLine_closure(this_0, ctx_1) {
    this.this_0 = this_0;
    this.ctx_1 = ctx_1;
  }
  Parser_nb_ns_plainInLine_closure.builtin$cls = "Parser_nb_ns_plainInLine_closure";
  if (!"name" in Parser_nb_ns_plainInLine_closure)
    Parser_nb_ns_plainInLine_closure.name = "Parser_nb_ns_plainInLine_closure";
  $desc = $collectedClasses.Parser_nb_ns_plainInLine_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_ns_plainInLine_closure.prototype = $desc;
  function Parser_nb_ns_plainInLine__closure(this_2, ctx_3) {
    this.this_2 = this_2;
    this.ctx_3 = ctx_3;
  }
  Parser_nb_ns_plainInLine__closure.builtin$cls = "Parser_nb_ns_plainInLine__closure";
  if (!"name" in Parser_nb_ns_plainInLine__closure)
    Parser_nb_ns_plainInLine__closure.name = "Parser_nb_ns_plainInLine__closure";
  $desc = $collectedClasses.Parser_nb_ns_plainInLine__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_ns_plainInLine__closure.prototype = $desc;
  function Parser_nb_ns_plainInLine___closure(this_4) {
    this.this_4 = this_4;
  }
  Parser_nb_ns_plainInLine___closure.builtin$cls = "Parser_nb_ns_plainInLine___closure";
  if (!"name" in Parser_nb_ns_plainInLine___closure)
    Parser_nb_ns_plainInLine___closure.name = "Parser_nb_ns_plainInLine___closure";
  $desc = $collectedClasses.Parser_nb_ns_plainInLine___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_nb_ns_plainInLine___closure.prototype = $desc;
  function Parser_s_ns_plainNextLine_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_s_ns_plainNextLine_closure.builtin$cls = "Parser_s_ns_plainNextLine_closure";
  if (!"name" in Parser_s_ns_plainNextLine_closure)
    Parser_s_ns_plainNextLine_closure.name = "Parser_s_ns_plainNextLine_closure";
  $desc = $collectedClasses.Parser_s_ns_plainNextLine_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_ns_plainNextLine_closure.prototype = $desc;
  function Parser_ns_plainMultiLine_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_ns_plainMultiLine_closure.builtin$cls = "Parser_ns_plainMultiLine_closure";
  if (!"name" in Parser_ns_plainMultiLine_closure)
    Parser_ns_plainMultiLine_closure.name = "Parser_ns_plainMultiLine_closure";
  $desc = $collectedClasses.Parser_ns_plainMultiLine_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_plainMultiLine_closure.prototype = $desc;
  function Parser_c_flowSequence_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_c_flowSequence_closure.builtin$cls = "Parser_c_flowSequence_closure";
  if (!"name" in Parser_c_flowSequence_closure)
    Parser_c_flowSequence_closure.name = "Parser_c_flowSequence_closure";
  $desc = $collectedClasses.Parser_c_flowSequence_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_flowSequence_closure.prototype = $desc;
  function Parser_c_flowSequence__closure(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_c_flowSequence__closure.builtin$cls = "Parser_c_flowSequence__closure";
  if (!"name" in Parser_c_flowSequence__closure)
    Parser_c_flowSequence__closure.name = "Parser_c_flowSequence__closure";
  $desc = $collectedClasses.Parser_c_flowSequence__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_flowSequence__closure.prototype = $desc;
  function Parser_c_flowSequence__closure0(this_6, indent_7, ctx_8) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
    this.ctx_8 = ctx_8;
  }
  Parser_c_flowSequence__closure0.builtin$cls = "Parser_c_flowSequence__closure0";
  if (!"name" in Parser_c_flowSequence__closure0)
    Parser_c_flowSequence__closure0.name = "Parser_c_flowSequence__closure0";
  $desc = $collectedClasses.Parser_c_flowSequence__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_flowSequence__closure0.prototype = $desc;
  function Parser_ns_s_flowSeqEntries_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_ns_s_flowSeqEntries_closure.builtin$cls = "Parser_ns_s_flowSeqEntries_closure";
  if (!"name" in Parser_ns_s_flowSeqEntries_closure)
    Parser_ns_s_flowSeqEntries_closure.name = "Parser_ns_s_flowSeqEntries_closure";
  $desc = $collectedClasses.Parser_ns_s_flowSeqEntries_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_s_flowSeqEntries_closure.prototype = $desc;
  function Parser_ns_s_flowSeqEntries_closure0(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_ns_s_flowSeqEntries_closure0.builtin$cls = "Parser_ns_s_flowSeqEntries_closure0";
  if (!"name" in Parser_ns_s_flowSeqEntries_closure0)
    Parser_ns_s_flowSeqEntries_closure0.name = "Parser_ns_s_flowSeqEntries_closure0";
  $desc = $collectedClasses.Parser_ns_s_flowSeqEntries_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_s_flowSeqEntries_closure0.prototype = $desc;
  function Parser_ns_s_flowSeqEntries_closure1(this_6, indent_7, ctx_8) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
    this.ctx_8 = ctx_8;
  }
  Parser_ns_s_flowSeqEntries_closure1.builtin$cls = "Parser_ns_s_flowSeqEntries_closure1";
  if (!"name" in Parser_ns_s_flowSeqEntries_closure1)
    Parser_ns_s_flowSeqEntries_closure1.name = "Parser_ns_s_flowSeqEntries_closure1";
  $desc = $collectedClasses.Parser_ns_s_flowSeqEntries_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_s_flowSeqEntries_closure1.prototype = $desc;
  function Parser_ns_flowSeqEntry_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_ns_flowSeqEntry_closure.builtin$cls = "Parser_ns_flowSeqEntry_closure";
  if (!"name" in Parser_ns_flowSeqEntry_closure)
    Parser_ns_flowSeqEntry_closure.name = "Parser_ns_flowSeqEntry_closure";
  $desc = $collectedClasses.Parser_ns_flowSeqEntry_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowSeqEntry_closure.prototype = $desc;
  function Parser_ns_flowSeqEntry_closure0(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_ns_flowSeqEntry_closure0.builtin$cls = "Parser_ns_flowSeqEntry_closure0";
  if (!"name" in Parser_ns_flowSeqEntry_closure0)
    Parser_ns_flowSeqEntry_closure0.name = "Parser_ns_flowSeqEntry_closure0";
  $desc = $collectedClasses.Parser_ns_flowSeqEntry_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowSeqEntry_closure0.prototype = $desc;
  function Parser_c_flowMapping_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_c_flowMapping_closure.builtin$cls = "Parser_c_flowMapping_closure";
  if (!"name" in Parser_c_flowMapping_closure)
    Parser_c_flowMapping_closure.name = "Parser_c_flowMapping_closure";
  $desc = $collectedClasses.Parser_c_flowMapping_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_flowMapping_closure.prototype = $desc;
  function Parser_c_flowMapping_closure0(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_c_flowMapping_closure0.builtin$cls = "Parser_c_flowMapping_closure0";
  if (!"name" in Parser_c_flowMapping_closure0)
    Parser_c_flowMapping_closure0.name = "Parser_c_flowMapping_closure0";
  $desc = $collectedClasses.Parser_c_flowMapping_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_flowMapping_closure0.prototype = $desc;
  function Parser_ns_s_flowMapEntries_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_ns_s_flowMapEntries_closure.builtin$cls = "Parser_ns_s_flowMapEntries_closure";
  if (!"name" in Parser_ns_s_flowMapEntries_closure)
    Parser_ns_s_flowMapEntries_closure.name = "Parser_ns_s_flowMapEntries_closure";
  $desc = $collectedClasses.Parser_ns_s_flowMapEntries_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_s_flowMapEntries_closure.prototype = $desc;
  function Parser_ns_s_flowMapEntries_closure0(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_ns_s_flowMapEntries_closure0.builtin$cls = "Parser_ns_s_flowMapEntries_closure0";
  if (!"name" in Parser_ns_s_flowMapEntries_closure0)
    Parser_ns_s_flowMapEntries_closure0.name = "Parser_ns_s_flowMapEntries_closure0";
  $desc = $collectedClasses.Parser_ns_s_flowMapEntries_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_s_flowMapEntries_closure0.prototype = $desc;
  function Parser_ns_flowMapEntry_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_ns_flowMapEntry_closure.builtin$cls = "Parser_ns_flowMapEntry_closure";
  if (!"name" in Parser_ns_flowMapEntry_closure)
    Parser_ns_flowMapEntry_closure.name = "Parser_ns_flowMapEntry_closure";
  $desc = $collectedClasses.Parser_ns_flowMapEntry_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowMapEntry_closure.prototype = $desc;
  function Parser_ns_flowMapEntry__closure(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_ns_flowMapEntry__closure.builtin$cls = "Parser_ns_flowMapEntry__closure";
  if (!"name" in Parser_ns_flowMapEntry__closure)
    Parser_ns_flowMapEntry__closure.name = "Parser_ns_flowMapEntry__closure";
  $desc = $collectedClasses.Parser_ns_flowMapEntry__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowMapEntry__closure.prototype = $desc;
  function Parser_ns_flowMapEntry_closure0(this_6, indent_7, ctx_8) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
    this.ctx_8 = ctx_8;
  }
  Parser_ns_flowMapEntry_closure0.builtin$cls = "Parser_ns_flowMapEntry_closure0";
  if (!"name" in Parser_ns_flowMapEntry_closure0)
    Parser_ns_flowMapEntry_closure0.name = "Parser_ns_flowMapEntry_closure0";
  $desc = $collectedClasses.Parser_ns_flowMapEntry_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowMapEntry_closure0.prototype = $desc;
  function Parser_ns_flowMapExplicitEntry_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_ns_flowMapExplicitEntry_closure.builtin$cls = "Parser_ns_flowMapExplicitEntry_closure";
  if (!"name" in Parser_ns_flowMapExplicitEntry_closure)
    Parser_ns_flowMapExplicitEntry_closure.name = "Parser_ns_flowMapExplicitEntry_closure";
  $desc = $collectedClasses.Parser_ns_flowMapExplicitEntry_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowMapExplicitEntry_closure.prototype = $desc;
  function Parser_ns_flowMapExplicitEntry_closure0(this_3) {
    this.this_3 = this_3;
  }
  Parser_ns_flowMapExplicitEntry_closure0.builtin$cls = "Parser_ns_flowMapExplicitEntry_closure0";
  if (!"name" in Parser_ns_flowMapExplicitEntry_closure0)
    Parser_ns_flowMapExplicitEntry_closure0.name = "Parser_ns_flowMapExplicitEntry_closure0";
  $desc = $collectedClasses.Parser_ns_flowMapExplicitEntry_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowMapExplicitEntry_closure0.prototype = $desc;
  function Parser_ns_flowMapImplicitEntry_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_ns_flowMapImplicitEntry_closure.builtin$cls = "Parser_ns_flowMapImplicitEntry_closure";
  if (!"name" in Parser_ns_flowMapImplicitEntry_closure)
    Parser_ns_flowMapImplicitEntry_closure.name = "Parser_ns_flowMapImplicitEntry_closure";
  $desc = $collectedClasses.Parser_ns_flowMapImplicitEntry_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowMapImplicitEntry_closure.prototype = $desc;
  function Parser_ns_flowMapImplicitEntry_closure0(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_ns_flowMapImplicitEntry_closure0.builtin$cls = "Parser_ns_flowMapImplicitEntry_closure0";
  if (!"name" in Parser_ns_flowMapImplicitEntry_closure0)
    Parser_ns_flowMapImplicitEntry_closure0.name = "Parser_ns_flowMapImplicitEntry_closure0";
  $desc = $collectedClasses.Parser_ns_flowMapImplicitEntry_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowMapImplicitEntry_closure0.prototype = $desc;
  function Parser_ns_flowMapImplicitEntry_closure1(this_6, indent_7, ctx_8) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
    this.ctx_8 = ctx_8;
  }
  Parser_ns_flowMapImplicitEntry_closure1.builtin$cls = "Parser_ns_flowMapImplicitEntry_closure1";
  if (!"name" in Parser_ns_flowMapImplicitEntry_closure1)
    Parser_ns_flowMapImplicitEntry_closure1.name = "Parser_ns_flowMapImplicitEntry_closure1";
  $desc = $collectedClasses.Parser_ns_flowMapImplicitEntry_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowMapImplicitEntry_closure1.prototype = $desc;
  function Parser_ns_flowMapYamlKeyEntry_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_ns_flowMapYamlKeyEntry_closure.builtin$cls = "Parser_ns_flowMapYamlKeyEntry_closure";
  if (!"name" in Parser_ns_flowMapYamlKeyEntry_closure)
    Parser_ns_flowMapYamlKeyEntry_closure.name = "Parser_ns_flowMapYamlKeyEntry_closure";
  $desc = $collectedClasses.Parser_ns_flowMapYamlKeyEntry_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowMapYamlKeyEntry_closure.prototype = $desc;
  function Parser_ns_flowMapYamlKeyEntry__closure(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_ns_flowMapYamlKeyEntry__closure.builtin$cls = "Parser_ns_flowMapYamlKeyEntry__closure";
  if (!"name" in Parser_ns_flowMapYamlKeyEntry__closure)
    Parser_ns_flowMapYamlKeyEntry__closure.name = "Parser_ns_flowMapYamlKeyEntry__closure";
  $desc = $collectedClasses.Parser_ns_flowMapYamlKeyEntry__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowMapYamlKeyEntry__closure.prototype = $desc;
  function Parser_ns_flowMapYamlKeyEntry___closure(this_6, indent_7, ctx_8) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
    this.ctx_8 = ctx_8;
  }
  Parser_ns_flowMapYamlKeyEntry___closure.builtin$cls = "Parser_ns_flowMapYamlKeyEntry___closure";
  if (!"name" in Parser_ns_flowMapYamlKeyEntry___closure)
    Parser_ns_flowMapYamlKeyEntry___closure.name = "Parser_ns_flowMapYamlKeyEntry___closure";
  $desc = $collectedClasses.Parser_ns_flowMapYamlKeyEntry___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowMapYamlKeyEntry___closure.prototype = $desc;
  function Parser_c_ns_flowMapSeparateValue_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_c_ns_flowMapSeparateValue_closure.builtin$cls = "Parser_c_ns_flowMapSeparateValue_closure";
  if (!"name" in Parser_c_ns_flowMapSeparateValue_closure)
    Parser_c_ns_flowMapSeparateValue_closure.name = "Parser_c_ns_flowMapSeparateValue_closure";
  $desc = $collectedClasses.Parser_c_ns_flowMapSeparateValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_ns_flowMapSeparateValue_closure.prototype = $desc;
  function Parser_c_ns_flowMapSeparateValue__closure(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_c_ns_flowMapSeparateValue__closure.builtin$cls = "Parser_c_ns_flowMapSeparateValue__closure";
  if (!"name" in Parser_c_ns_flowMapSeparateValue__closure)
    Parser_c_ns_flowMapSeparateValue__closure.name = "Parser_c_ns_flowMapSeparateValue__closure";
  $desc = $collectedClasses.Parser_c_ns_flowMapSeparateValue__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_ns_flowMapSeparateValue__closure.prototype = $desc;
  function Parser_c_ns_flowMapSeparateValue___closure(this_6, indent_7, ctx_8) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
    this.ctx_8 = ctx_8;
  }
  Parser_c_ns_flowMapSeparateValue___closure.builtin$cls = "Parser_c_ns_flowMapSeparateValue___closure";
  if (!"name" in Parser_c_ns_flowMapSeparateValue___closure)
    Parser_c_ns_flowMapSeparateValue___closure.name = "Parser_c_ns_flowMapSeparateValue___closure";
  $desc = $collectedClasses.Parser_c_ns_flowMapSeparateValue___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_ns_flowMapSeparateValue___closure.prototype = $desc;
  function Parser_c_ns_flowMapJsonKeyEntry_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_c_ns_flowMapJsonKeyEntry_closure.builtin$cls = "Parser_c_ns_flowMapJsonKeyEntry_closure";
  if (!"name" in Parser_c_ns_flowMapJsonKeyEntry_closure)
    Parser_c_ns_flowMapJsonKeyEntry_closure.name = "Parser_c_ns_flowMapJsonKeyEntry_closure";
  $desc = $collectedClasses.Parser_c_ns_flowMapJsonKeyEntry_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_ns_flowMapJsonKeyEntry_closure.prototype = $desc;
  function Parser_c_ns_flowMapJsonKeyEntry__closure(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_c_ns_flowMapJsonKeyEntry__closure.builtin$cls = "Parser_c_ns_flowMapJsonKeyEntry__closure";
  if (!"name" in Parser_c_ns_flowMapJsonKeyEntry__closure)
    Parser_c_ns_flowMapJsonKeyEntry__closure.name = "Parser_c_ns_flowMapJsonKeyEntry__closure";
  $desc = $collectedClasses.Parser_c_ns_flowMapJsonKeyEntry__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_ns_flowMapJsonKeyEntry__closure.prototype = $desc;
  function Parser_c_ns_flowMapJsonKeyEntry___closure(this_6, indent_7, ctx_8) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
    this.ctx_8 = ctx_8;
  }
  Parser_c_ns_flowMapJsonKeyEntry___closure.builtin$cls = "Parser_c_ns_flowMapJsonKeyEntry___closure";
  if (!"name" in Parser_c_ns_flowMapJsonKeyEntry___closure)
    Parser_c_ns_flowMapJsonKeyEntry___closure.name = "Parser_c_ns_flowMapJsonKeyEntry___closure";
  $desc = $collectedClasses.Parser_c_ns_flowMapJsonKeyEntry___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_ns_flowMapJsonKeyEntry___closure.prototype = $desc;
  function Parser_c_ns_flowMapAdjacentValue_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_c_ns_flowMapAdjacentValue_closure.builtin$cls = "Parser_c_ns_flowMapAdjacentValue_closure";
  if (!"name" in Parser_c_ns_flowMapAdjacentValue_closure)
    Parser_c_ns_flowMapAdjacentValue_closure.name = "Parser_c_ns_flowMapAdjacentValue_closure";
  $desc = $collectedClasses.Parser_c_ns_flowMapAdjacentValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_ns_flowMapAdjacentValue_closure.prototype = $desc;
  function Parser_c_ns_flowMapAdjacentValue__closure(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_c_ns_flowMapAdjacentValue__closure.builtin$cls = "Parser_c_ns_flowMapAdjacentValue__closure";
  if (!"name" in Parser_c_ns_flowMapAdjacentValue__closure)
    Parser_c_ns_flowMapAdjacentValue__closure.name = "Parser_c_ns_flowMapAdjacentValue__closure";
  $desc = $collectedClasses.Parser_c_ns_flowMapAdjacentValue__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_ns_flowMapAdjacentValue__closure.prototype = $desc;
  function Parser_c_ns_flowMapAdjacentValue___closure(this_6, indent_7, ctx_8) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
    this.ctx_8 = ctx_8;
  }
  Parser_c_ns_flowMapAdjacentValue___closure.builtin$cls = "Parser_c_ns_flowMapAdjacentValue___closure";
  if (!"name" in Parser_c_ns_flowMapAdjacentValue___closure)
    Parser_c_ns_flowMapAdjacentValue___closure.name = "Parser_c_ns_flowMapAdjacentValue___closure";
  $desc = $collectedClasses.Parser_c_ns_flowMapAdjacentValue___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_ns_flowMapAdjacentValue___closure.prototype = $desc;
  function Parser_ns_flowPair_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_ns_flowPair_closure.builtin$cls = "Parser_ns_flowPair_closure";
  if (!"name" in Parser_ns_flowPair_closure)
    Parser_ns_flowPair_closure.name = "Parser_ns_flowPair_closure";
  $desc = $collectedClasses.Parser_ns_flowPair_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowPair_closure.prototype = $desc;
  function Parser_ns_flowPair__closure(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_ns_flowPair__closure.builtin$cls = "Parser_ns_flowPair__closure";
  if (!"name" in Parser_ns_flowPair__closure)
    Parser_ns_flowPair__closure.name = "Parser_ns_flowPair__closure";
  $desc = $collectedClasses.Parser_ns_flowPair__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowPair__closure.prototype = $desc;
  function Parser_ns_flowPair_closure0(this_6, indent_7, ctx_8) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
    this.ctx_8 = ctx_8;
  }
  Parser_ns_flowPair_closure0.builtin$cls = "Parser_ns_flowPair_closure0";
  if (!"name" in Parser_ns_flowPair_closure0)
    Parser_ns_flowPair_closure0.name = "Parser_ns_flowPair_closure0";
  $desc = $collectedClasses.Parser_ns_flowPair_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowPair_closure0.prototype = $desc;
  function Parser_ns_flowPairEntry_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_ns_flowPairEntry_closure.builtin$cls = "Parser_ns_flowPairEntry_closure";
  if (!"name" in Parser_ns_flowPairEntry_closure)
    Parser_ns_flowPairEntry_closure.name = "Parser_ns_flowPairEntry_closure";
  $desc = $collectedClasses.Parser_ns_flowPairEntry_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowPairEntry_closure.prototype = $desc;
  function Parser_ns_flowPairEntry_closure0(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_ns_flowPairEntry_closure0.builtin$cls = "Parser_ns_flowPairEntry_closure0";
  if (!"name" in Parser_ns_flowPairEntry_closure0)
    Parser_ns_flowPairEntry_closure0.name = "Parser_ns_flowPairEntry_closure0";
  $desc = $collectedClasses.Parser_ns_flowPairEntry_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowPairEntry_closure0.prototype = $desc;
  function Parser_ns_flowPairEntry_closure1(this_6, indent_7, ctx_8) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
    this.ctx_8 = ctx_8;
  }
  Parser_ns_flowPairEntry_closure1.builtin$cls = "Parser_ns_flowPairEntry_closure1";
  if (!"name" in Parser_ns_flowPairEntry_closure1)
    Parser_ns_flowPairEntry_closure1.name = "Parser_ns_flowPairEntry_closure1";
  $desc = $collectedClasses.Parser_ns_flowPairEntry_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowPairEntry_closure1.prototype = $desc;
  function Parser_ns_flowPairYamlKeyEntry_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_ns_flowPairYamlKeyEntry_closure.builtin$cls = "Parser_ns_flowPairYamlKeyEntry_closure";
  if (!"name" in Parser_ns_flowPairYamlKeyEntry_closure)
    Parser_ns_flowPairYamlKeyEntry_closure.name = "Parser_ns_flowPairYamlKeyEntry_closure";
  $desc = $collectedClasses.Parser_ns_flowPairYamlKeyEntry_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowPairYamlKeyEntry_closure.prototype = $desc;
  function Parser_c_ns_flowPairJsonKeyEntry_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_c_ns_flowPairJsonKeyEntry_closure.builtin$cls = "Parser_c_ns_flowPairJsonKeyEntry_closure";
  if (!"name" in Parser_c_ns_flowPairJsonKeyEntry_closure)
    Parser_c_ns_flowPairJsonKeyEntry_closure.name = "Parser_c_ns_flowPairJsonKeyEntry_closure";
  $desc = $collectedClasses.Parser_c_ns_flowPairJsonKeyEntry_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_ns_flowPairJsonKeyEntry_closure.prototype = $desc;
  function Parser_ns_s_implicitYamlKey_closure(this_0, ctx_1) {
    this.this_0 = this_0;
    this.ctx_1 = ctx_1;
  }
  Parser_ns_s_implicitYamlKey_closure.builtin$cls = "Parser_ns_s_implicitYamlKey_closure";
  if (!"name" in Parser_ns_s_implicitYamlKey_closure)
    Parser_ns_s_implicitYamlKey_closure.name = "Parser_ns_s_implicitYamlKey_closure";
  $desc = $collectedClasses.Parser_ns_s_implicitYamlKey_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_s_implicitYamlKey_closure.prototype = $desc;
  function Parser_c_s_implicitJsonKey_closure(this_0, ctx_1) {
    this.this_0 = this_0;
    this.ctx_1 = ctx_1;
  }
  Parser_c_s_implicitJsonKey_closure.builtin$cls = "Parser_c_s_implicitJsonKey_closure";
  if (!"name" in Parser_c_s_implicitJsonKey_closure)
    Parser_c_s_implicitJsonKey_closure.name = "Parser_c_s_implicitJsonKey_closure";
  $desc = $collectedClasses.Parser_c_s_implicitJsonKey_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_s_implicitJsonKey_closure.prototype = $desc;
  function Parser_c_flowJsonContent_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_c_flowJsonContent_closure.builtin$cls = "Parser_c_flowJsonContent_closure";
  if (!"name" in Parser_c_flowJsonContent_closure)
    Parser_c_flowJsonContent_closure.name = "Parser_c_flowJsonContent_closure";
  $desc = $collectedClasses.Parser_c_flowJsonContent_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_flowJsonContent_closure.prototype = $desc;
  function Parser_c_flowJsonContent_closure0(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_c_flowJsonContent_closure0.builtin$cls = "Parser_c_flowJsonContent_closure0";
  if (!"name" in Parser_c_flowJsonContent_closure0)
    Parser_c_flowJsonContent_closure0.name = "Parser_c_flowJsonContent_closure0";
  $desc = $collectedClasses.Parser_c_flowJsonContent_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_flowJsonContent_closure0.prototype = $desc;
  function Parser_c_flowJsonContent_closure1(this_6, indent_7, ctx_8) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
    this.ctx_8 = ctx_8;
  }
  Parser_c_flowJsonContent_closure1.builtin$cls = "Parser_c_flowJsonContent_closure1";
  if (!"name" in Parser_c_flowJsonContent_closure1)
    Parser_c_flowJsonContent_closure1.name = "Parser_c_flowJsonContent_closure1";
  $desc = $collectedClasses.Parser_c_flowJsonContent_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_flowJsonContent_closure1.prototype = $desc;
  function Parser_c_flowJsonContent_closure2(this_9, indent_10, ctx_11) {
    this.this_9 = this_9;
    this.indent_10 = indent_10;
    this.ctx_11 = ctx_11;
  }
  Parser_c_flowJsonContent_closure2.builtin$cls = "Parser_c_flowJsonContent_closure2";
  if (!"name" in Parser_c_flowJsonContent_closure2)
    Parser_c_flowJsonContent_closure2.name = "Parser_c_flowJsonContent_closure2";
  $desc = $collectedClasses.Parser_c_flowJsonContent_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_flowJsonContent_closure2.prototype = $desc;
  function Parser_ns_flowContent_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_ns_flowContent_closure.builtin$cls = "Parser_ns_flowContent_closure";
  if (!"name" in Parser_ns_flowContent_closure)
    Parser_ns_flowContent_closure.name = "Parser_ns_flowContent_closure";
  $desc = $collectedClasses.Parser_ns_flowContent_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowContent_closure.prototype = $desc;
  function Parser_ns_flowContent_closure0(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_ns_flowContent_closure0.builtin$cls = "Parser_ns_flowContent_closure0";
  if (!"name" in Parser_ns_flowContent_closure0)
    Parser_ns_flowContent_closure0.name = "Parser_ns_flowContent_closure0";
  $desc = $collectedClasses.Parser_ns_flowContent_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowContent_closure0.prototype = $desc;
  function Parser_ns_flowYamlNode_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_ns_flowYamlNode_closure.builtin$cls = "Parser_ns_flowYamlNode_closure";
  if (!"name" in Parser_ns_flowYamlNode_closure)
    Parser_ns_flowYamlNode_closure.name = "Parser_ns_flowYamlNode_closure";
  $desc = $collectedClasses.Parser_ns_flowYamlNode_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowYamlNode_closure.prototype = $desc;
  function Parser_ns_flowYamlNode_closure0(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_ns_flowYamlNode_closure0.builtin$cls = "Parser_ns_flowYamlNode_closure0";
  if (!"name" in Parser_ns_flowYamlNode_closure0)
    Parser_ns_flowYamlNode_closure0.name = "Parser_ns_flowYamlNode_closure0";
  $desc = $collectedClasses.Parser_ns_flowYamlNode_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowYamlNode_closure0.prototype = $desc;
  function Parser_ns_flowYamlNode__closure(this_6, indent_7, ctx_8) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
    this.ctx_8 = ctx_8;
  }
  Parser_ns_flowYamlNode__closure.builtin$cls = "Parser_ns_flowYamlNode__closure";
  if (!"name" in Parser_ns_flowYamlNode__closure)
    Parser_ns_flowYamlNode__closure.name = "Parser_ns_flowYamlNode__closure";
  $desc = $collectedClasses.Parser_ns_flowYamlNode__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowYamlNode__closure.prototype = $desc;
  function Parser_ns_flowYamlNode___closure(this_9, indent_10, ctx_11) {
    this.this_9 = this_9;
    this.indent_10 = indent_10;
    this.ctx_11 = ctx_11;
  }
  Parser_ns_flowYamlNode___closure.builtin$cls = "Parser_ns_flowYamlNode___closure";
  if (!"name" in Parser_ns_flowYamlNode___closure)
    Parser_ns_flowYamlNode___closure.name = "Parser_ns_flowYamlNode___closure";
  $desc = $collectedClasses.Parser_ns_flowYamlNode___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowYamlNode___closure.prototype = $desc;
  function Parser_c_flowJsonNode_closure(this_1, indent_2, ctx_3) {
    this.this_1 = this_1;
    this.indent_2 = indent_2;
    this.ctx_3 = ctx_3;
  }
  Parser_c_flowJsonNode_closure.builtin$cls = "Parser_c_flowJsonNode_closure";
  if (!"name" in Parser_c_flowJsonNode_closure)
    Parser_c_flowJsonNode_closure.name = "Parser_c_flowJsonNode_closure";
  $desc = $collectedClasses.Parser_c_flowJsonNode_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_flowJsonNode_closure.prototype = $desc;
  function Parser_c_flowJsonNode__closure(box_0, this_4, indent_5, ctx_6) {
    this.box_0 = box_0;
    this.this_4 = this_4;
    this.indent_5 = indent_5;
    this.ctx_6 = ctx_6;
  }
  Parser_c_flowJsonNode__closure.builtin$cls = "Parser_c_flowJsonNode__closure";
  if (!"name" in Parser_c_flowJsonNode__closure)
    Parser_c_flowJsonNode__closure.name = "Parser_c_flowJsonNode__closure";
  $desc = $collectedClasses.Parser_c_flowJsonNode__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_flowJsonNode__closure.prototype = $desc;
  function Parser_c_flowJsonNode___closure(box_0, this_7, indent_8, ctx_9) {
    this.box_0 = box_0;
    this.this_7 = this_7;
    this.indent_8 = indent_8;
    this.ctx_9 = ctx_9;
  }
  Parser_c_flowJsonNode___closure.builtin$cls = "Parser_c_flowJsonNode___closure";
  if (!"name" in Parser_c_flowJsonNode___closure)
    Parser_c_flowJsonNode___closure.name = "Parser_c_flowJsonNode___closure";
  $desc = $collectedClasses.Parser_c_flowJsonNode___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_flowJsonNode___closure.prototype = $desc;
  function Parser_ns_flowNode_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_ns_flowNode_closure.builtin$cls = "Parser_ns_flowNode_closure";
  if (!"name" in Parser_ns_flowNode_closure)
    Parser_ns_flowNode_closure.name = "Parser_ns_flowNode_closure";
  $desc = $collectedClasses.Parser_ns_flowNode_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowNode_closure.prototype = $desc;
  function Parser_ns_flowNode_closure0(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_ns_flowNode_closure0.builtin$cls = "Parser_ns_flowNode_closure0";
  if (!"name" in Parser_ns_flowNode_closure0)
    Parser_ns_flowNode_closure0.name = "Parser_ns_flowNode_closure0";
  $desc = $collectedClasses.Parser_ns_flowNode_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowNode_closure0.prototype = $desc;
  function Parser_ns_flowNode__closure(this_6, indent_7, ctx_8) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
    this.ctx_8 = ctx_8;
  }
  Parser_ns_flowNode__closure.builtin$cls = "Parser_ns_flowNode__closure";
  if (!"name" in Parser_ns_flowNode__closure)
    Parser_ns_flowNode__closure.name = "Parser_ns_flowNode__closure";
  $desc = $collectedClasses.Parser_ns_flowNode__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowNode__closure.prototype = $desc;
  function Parser_ns_flowNode___closure(this_9, indent_10, ctx_11) {
    this.this_9 = this_9;
    this.indent_10 = indent_10;
    this.ctx_11 = ctx_11;
  }
  Parser_ns_flowNode___closure.builtin$cls = "Parser_ns_flowNode___closure";
  if (!"name" in Parser_ns_flowNode___closure)
    Parser_ns_flowNode___closure.name = "Parser_ns_flowNode___closure";
  $desc = $collectedClasses.Parser_ns_flowNode___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowNode___closure.prototype = $desc;
  function Parser_ns_flowNode____closure(this_12, indent_13, ctx_14) {
    this.this_12 = this_12;
    this.indent_13 = indent_13;
    this.ctx_14 = ctx_14;
  }
  Parser_ns_flowNode____closure.builtin$cls = "Parser_ns_flowNode____closure";
  if (!"name" in Parser_ns_flowNode____closure)
    Parser_ns_flowNode____closure.name = "Parser_ns_flowNode____closure";
  $desc = $collectedClasses.Parser_ns_flowNode____closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_flowNode____closure.prototype = $desc;
  function Parser_c_b_blockHeader_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_c_b_blockHeader_closure.builtin$cls = "Parser_c_b_blockHeader_closure";
  if (!"name" in Parser_c_b_blockHeader_closure)
    Parser_c_b_blockHeader_closure.name = "Parser_c_b_blockHeader_closure";
  $desc = $collectedClasses.Parser_c_b_blockHeader_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_b_blockHeader_closure.prototype = $desc;
  function Parser_l_stripEmpty_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_l_stripEmpty_closure.builtin$cls = "Parser_l_stripEmpty_closure";
  if (!"name" in Parser_l_stripEmpty_closure)
    Parser_l_stripEmpty_closure.name = "Parser_l_stripEmpty_closure";
  $desc = $collectedClasses.Parser_l_stripEmpty_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_stripEmpty_closure.prototype = $desc;
  function Parser_l_stripEmpty__closure(this_2, indent_3) {
    this.this_2 = this_2;
    this.indent_3 = indent_3;
  }
  Parser_l_stripEmpty__closure.builtin$cls = "Parser_l_stripEmpty__closure";
  if (!"name" in Parser_l_stripEmpty__closure)
    Parser_l_stripEmpty__closure.name = "Parser_l_stripEmpty__closure";
  $desc = $collectedClasses.Parser_l_stripEmpty__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_stripEmpty__closure.prototype = $desc;
  function Parser_l_stripEmpty___closure(this_4, indent_5) {
    this.this_4 = this_4;
    this.indent_5 = indent_5;
  }
  Parser_l_stripEmpty___closure.builtin$cls = "Parser_l_stripEmpty___closure";
  if (!"name" in Parser_l_stripEmpty___closure)
    Parser_l_stripEmpty___closure.name = "Parser_l_stripEmpty___closure";
  $desc = $collectedClasses.Parser_l_stripEmpty___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_stripEmpty___closure.prototype = $desc;
  function Parser_l_stripEmpty__closure0(this_6, indent_7) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
  }
  Parser_l_stripEmpty__closure0.builtin$cls = "Parser_l_stripEmpty__closure0";
  if (!"name" in Parser_l_stripEmpty__closure0)
    Parser_l_stripEmpty__closure0.name = "Parser_l_stripEmpty__closure0";
  $desc = $collectedClasses.Parser_l_stripEmpty__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_stripEmpty__closure0.prototype = $desc;
  function Parser_l_keepEmpty_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_l_keepEmpty_closure.builtin$cls = "Parser_l_keepEmpty_closure";
  if (!"name" in Parser_l_keepEmpty_closure)
    Parser_l_keepEmpty_closure.name = "Parser_l_keepEmpty_closure";
  $desc = $collectedClasses.Parser_l_keepEmpty_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_keepEmpty_closure.prototype = $desc;
  function Parser_l_keepEmpty__closure0(this_2, indent_3) {
    this.this_2 = this_2;
    this.indent_3 = indent_3;
  }
  Parser_l_keepEmpty__closure0.builtin$cls = "Parser_l_keepEmpty__closure0";
  if (!"name" in Parser_l_keepEmpty__closure0)
    Parser_l_keepEmpty__closure0.name = "Parser_l_keepEmpty__closure0";
  $desc = $collectedClasses.Parser_l_keepEmpty__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_keepEmpty__closure0.prototype = $desc;
  function Parser_l_keepEmpty_closure0(this_4, indent_5) {
    this.this_4 = this_4;
    this.indent_5 = indent_5;
  }
  Parser_l_keepEmpty_closure0.builtin$cls = "Parser_l_keepEmpty_closure0";
  if (!"name" in Parser_l_keepEmpty_closure0)
    Parser_l_keepEmpty_closure0.name = "Parser_l_keepEmpty_closure0";
  $desc = $collectedClasses.Parser_l_keepEmpty_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_keepEmpty_closure0.prototype = $desc;
  function Parser_l_keepEmpty__closure(this_6, indent_7) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
  }
  Parser_l_keepEmpty__closure.builtin$cls = "Parser_l_keepEmpty__closure";
  if (!"name" in Parser_l_keepEmpty__closure)
    Parser_l_keepEmpty__closure.name = "Parser_l_keepEmpty__closure";
  $desc = $collectedClasses.Parser_l_keepEmpty__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_keepEmpty__closure.prototype = $desc;
  function Parser_l_trailComments_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_l_trailComments_closure.builtin$cls = "Parser_l_trailComments_closure";
  if (!"name" in Parser_l_trailComments_closure)
    Parser_l_trailComments_closure.name = "Parser_l_trailComments_closure";
  $desc = $collectedClasses.Parser_l_trailComments_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_trailComments_closure.prototype = $desc;
  function Parser_c_l_literal_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_c_l_literal_closure.builtin$cls = "Parser_c_l_literal_closure";
  if (!"name" in Parser_c_l_literal_closure)
    Parser_c_l_literal_closure.name = "Parser_c_l_literal_closure";
  $desc = $collectedClasses.Parser_c_l_literal_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_l_literal_closure.prototype = $desc;
  function Parser_l_nb_literalText_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_l_nb_literalText_closure.builtin$cls = "Parser_l_nb_literalText_closure";
  if (!"name" in Parser_l_nb_literalText_closure)
    Parser_l_nb_literalText_closure.name = "Parser_l_nb_literalText_closure";
  $desc = $collectedClasses.Parser_l_nb_literalText_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_nb_literalText_closure.prototype = $desc;
  function Parser_l_nb_literalText__closure(this_2, indent_3) {
    this.this_2 = this_2;
    this.indent_3 = indent_3;
  }
  Parser_l_nb_literalText__closure.builtin$cls = "Parser_l_nb_literalText__closure";
  if (!"name" in Parser_l_nb_literalText__closure)
    Parser_l_nb_literalText__closure.name = "Parser_l_nb_literalText__closure";
  $desc = $collectedClasses.Parser_l_nb_literalText__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_nb_literalText__closure.prototype = $desc;
  function Parser_l_nb_literalText___closure(this_4, indent_5) {
    this.this_4 = this_4;
    this.indent_5 = indent_5;
  }
  Parser_l_nb_literalText___closure.builtin$cls = "Parser_l_nb_literalText___closure";
  if (!"name" in Parser_l_nb_literalText___closure)
    Parser_l_nb_literalText___closure.name = "Parser_l_nb_literalText___closure";
  $desc = $collectedClasses.Parser_l_nb_literalText___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_nb_literalText___closure.prototype = $desc;
  function Parser_l_nb_literalText__closure0(this_6, indent_7) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
  }
  Parser_l_nb_literalText__closure0.builtin$cls = "Parser_l_nb_literalText__closure0";
  if (!"name" in Parser_l_nb_literalText__closure0)
    Parser_l_nb_literalText__closure0.name = "Parser_l_nb_literalText__closure0";
  $desc = $collectedClasses.Parser_l_nb_literalText__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_nb_literalText__closure0.prototype = $desc;
  function Parser_l_nb_literalText__closure1(this_8) {
    this.this_8 = this_8;
  }
  Parser_l_nb_literalText__closure1.builtin$cls = "Parser_l_nb_literalText__closure1";
  if (!"name" in Parser_l_nb_literalText__closure1)
    Parser_l_nb_literalText__closure1.name = "Parser_l_nb_literalText__closure1";
  $desc = $collectedClasses.Parser_l_nb_literalText__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_nb_literalText__closure1.prototype = $desc;
  function Parser_b_nb_literalNext_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_b_nb_literalNext_closure.builtin$cls = "Parser_b_nb_literalNext_closure";
  if (!"name" in Parser_b_nb_literalNext_closure)
    Parser_b_nb_literalNext_closure.name = "Parser_b_nb_literalNext_closure";
  $desc = $collectedClasses.Parser_b_nb_literalNext_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_b_nb_literalNext_closure.prototype = $desc;
  function Parser_l_literalContent_closure(this_0, indent_1, chomping_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.chomping_2 = chomping_2;
  }
  Parser_l_literalContent_closure.builtin$cls = "Parser_l_literalContent_closure";
  if (!"name" in Parser_l_literalContent_closure)
    Parser_l_literalContent_closure.name = "Parser_l_literalContent_closure";
  $desc = $collectedClasses.Parser_l_literalContent_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_literalContent_closure.prototype = $desc;
  function Parser_l_literalContent__closure(this_3, indent_4, chomping_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.chomping_5 = chomping_5;
  }
  Parser_l_literalContent__closure.builtin$cls = "Parser_l_literalContent__closure";
  if (!"name" in Parser_l_literalContent__closure)
    Parser_l_literalContent__closure.name = "Parser_l_literalContent__closure";
  $desc = $collectedClasses.Parser_l_literalContent__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_literalContent__closure.prototype = $desc;
  function Parser_l_literalContent___closure(this_6, indent_7) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
  }
  Parser_l_literalContent___closure.builtin$cls = "Parser_l_literalContent___closure";
  if (!"name" in Parser_l_literalContent___closure)
    Parser_l_literalContent___closure.name = "Parser_l_literalContent___closure";
  $desc = $collectedClasses.Parser_l_literalContent___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_literalContent___closure.prototype = $desc;
  function Parser_c_l_folded_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_c_l_folded_closure.builtin$cls = "Parser_c_l_folded_closure";
  if (!"name" in Parser_c_l_folded_closure)
    Parser_c_l_folded_closure.name = "Parser_c_l_folded_closure";
  $desc = $collectedClasses.Parser_c_l_folded_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_l_folded_closure.prototype = $desc;
  function Parser_s_nb_foldedText_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_s_nb_foldedText_closure.builtin$cls = "Parser_s_nb_foldedText_closure";
  if (!"name" in Parser_s_nb_foldedText_closure)
    Parser_s_nb_foldedText_closure.name = "Parser_s_nb_foldedText_closure";
  $desc = $collectedClasses.Parser_s_nb_foldedText_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_nb_foldedText_closure.prototype = $desc;
  function Parser_s_nb_foldedText__closure(this_2, indent_3) {
    this.this_2 = this_2;
    this.indent_3 = indent_3;
  }
  Parser_s_nb_foldedText__closure.builtin$cls = "Parser_s_nb_foldedText__closure";
  if (!"name" in Parser_s_nb_foldedText__closure)
    Parser_s_nb_foldedText__closure.name = "Parser_s_nb_foldedText__closure";
  $desc = $collectedClasses.Parser_s_nb_foldedText__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_nb_foldedText__closure.prototype = $desc;
  function Parser_s_nb_foldedText__closure0(this_4) {
    this.this_4 = this_4;
  }
  Parser_s_nb_foldedText__closure0.builtin$cls = "Parser_s_nb_foldedText__closure0";
  if (!"name" in Parser_s_nb_foldedText__closure0)
    Parser_s_nb_foldedText__closure0.name = "Parser_s_nb_foldedText__closure0";
  $desc = $collectedClasses.Parser_s_nb_foldedText__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_nb_foldedText__closure0.prototype = $desc;
  function Parser_l_nb_foldedLines_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_l_nb_foldedLines_closure.builtin$cls = "Parser_l_nb_foldedLines_closure";
  if (!"name" in Parser_l_nb_foldedLines_closure)
    Parser_l_nb_foldedLines_closure.name = "Parser_l_nb_foldedLines_closure";
  $desc = $collectedClasses.Parser_l_nb_foldedLines_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_nb_foldedLines_closure.prototype = $desc;
  function Parser_l_nb_foldedLines__closure(this_2, indent_3) {
    this.this_2 = this_2;
    this.indent_3 = indent_3;
  }
  Parser_l_nb_foldedLines__closure.builtin$cls = "Parser_l_nb_foldedLines__closure";
  if (!"name" in Parser_l_nb_foldedLines__closure)
    Parser_l_nb_foldedLines__closure.name = "Parser_l_nb_foldedLines__closure";
  $desc = $collectedClasses.Parser_l_nb_foldedLines__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_nb_foldedLines__closure.prototype = $desc;
  function Parser_s_nb_spacedText_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_s_nb_spacedText_closure.builtin$cls = "Parser_s_nb_spacedText_closure";
  if (!"name" in Parser_s_nb_spacedText_closure)
    Parser_s_nb_spacedText_closure.name = "Parser_s_nb_spacedText_closure";
  $desc = $collectedClasses.Parser_s_nb_spacedText_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_nb_spacedText_closure.prototype = $desc;
  function Parser_s_nb_spacedText__closure(this_2, indent_3) {
    this.this_2 = this_2;
    this.indent_3 = indent_3;
  }
  Parser_s_nb_spacedText__closure.builtin$cls = "Parser_s_nb_spacedText__closure";
  if (!"name" in Parser_s_nb_spacedText__closure)
    Parser_s_nb_spacedText__closure.name = "Parser_s_nb_spacedText__closure";
  $desc = $collectedClasses.Parser_s_nb_spacedText__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_nb_spacedText__closure.prototype = $desc;
  function Parser_s_nb_spacedText__closure0(this_4) {
    this.this_4 = this_4;
  }
  Parser_s_nb_spacedText__closure0.builtin$cls = "Parser_s_nb_spacedText__closure0";
  if (!"name" in Parser_s_nb_spacedText__closure0)
    Parser_s_nb_spacedText__closure0.name = "Parser_s_nb_spacedText__closure0";
  $desc = $collectedClasses.Parser_s_nb_spacedText__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_nb_spacedText__closure0.prototype = $desc;
  function Parser_b_l_spaced_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_b_l_spaced_closure.builtin$cls = "Parser_b_l_spaced_closure";
  if (!"name" in Parser_b_l_spaced_closure)
    Parser_b_l_spaced_closure.name = "Parser_b_l_spaced_closure";
  $desc = $collectedClasses.Parser_b_l_spaced_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_b_l_spaced_closure.prototype = $desc;
  function Parser_b_l_spaced__closure(this_2, indent_3) {
    this.this_2 = this_2;
    this.indent_3 = indent_3;
  }
  Parser_b_l_spaced__closure.builtin$cls = "Parser_b_l_spaced__closure";
  if (!"name" in Parser_b_l_spaced__closure)
    Parser_b_l_spaced__closure.name = "Parser_b_l_spaced__closure";
  $desc = $collectedClasses.Parser_b_l_spaced__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_b_l_spaced__closure.prototype = $desc;
  function Parser_l_nb_spacedLines_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_l_nb_spacedLines_closure.builtin$cls = "Parser_l_nb_spacedLines_closure";
  if (!"name" in Parser_l_nb_spacedLines_closure)
    Parser_l_nb_spacedLines_closure.name = "Parser_l_nb_spacedLines_closure";
  $desc = $collectedClasses.Parser_l_nb_spacedLines_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_nb_spacedLines_closure.prototype = $desc;
  function Parser_l_nb_spacedLines__closure(this_2, indent_3) {
    this.this_2 = this_2;
    this.indent_3 = indent_3;
  }
  Parser_l_nb_spacedLines__closure.builtin$cls = "Parser_l_nb_spacedLines__closure";
  if (!"name" in Parser_l_nb_spacedLines__closure)
    Parser_l_nb_spacedLines__closure.name = "Parser_l_nb_spacedLines__closure";
  $desc = $collectedClasses.Parser_l_nb_spacedLines__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_nb_spacedLines__closure.prototype = $desc;
  function Parser_l_nb_sameLines_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_l_nb_sameLines_closure.builtin$cls = "Parser_l_nb_sameLines_closure";
  if (!"name" in Parser_l_nb_sameLines_closure)
    Parser_l_nb_sameLines_closure.name = "Parser_l_nb_sameLines_closure";
  $desc = $collectedClasses.Parser_l_nb_sameLines_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_nb_sameLines_closure.prototype = $desc;
  function Parser_l_nb_sameLines__closure(this_2, indent_3) {
    this.this_2 = this_2;
    this.indent_3 = indent_3;
  }
  Parser_l_nb_sameLines__closure.builtin$cls = "Parser_l_nb_sameLines__closure";
  if (!"name" in Parser_l_nb_sameLines__closure)
    Parser_l_nb_sameLines__closure.name = "Parser_l_nb_sameLines__closure";
  $desc = $collectedClasses.Parser_l_nb_sameLines__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_nb_sameLines__closure.prototype = $desc;
  function Parser_l_nb_sameLines___closure(this_4, indent_5) {
    this.this_4 = this_4;
    this.indent_5 = indent_5;
  }
  Parser_l_nb_sameLines___closure.builtin$cls = "Parser_l_nb_sameLines___closure";
  if (!"name" in Parser_l_nb_sameLines___closure)
    Parser_l_nb_sameLines___closure.name = "Parser_l_nb_sameLines___closure";
  $desc = $collectedClasses.Parser_l_nb_sameLines___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_nb_sameLines___closure.prototype = $desc;
  function Parser_l_nb_sameLines__closure0(this_6, indent_7) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
  }
  Parser_l_nb_sameLines__closure0.builtin$cls = "Parser_l_nb_sameLines__closure0";
  if (!"name" in Parser_l_nb_sameLines__closure0)
    Parser_l_nb_sameLines__closure0.name = "Parser_l_nb_sameLines__closure0";
  $desc = $collectedClasses.Parser_l_nb_sameLines__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_nb_sameLines__closure0.prototype = $desc;
  function Parser_l_nb_sameLines__closure1(this_8, indent_9) {
    this.this_8 = this_8;
    this.indent_9 = indent_9;
  }
  Parser_l_nb_sameLines__closure1.builtin$cls = "Parser_l_nb_sameLines__closure1";
  if (!"name" in Parser_l_nb_sameLines__closure1)
    Parser_l_nb_sameLines__closure1.name = "Parser_l_nb_sameLines__closure1";
  $desc = $collectedClasses.Parser_l_nb_sameLines__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_nb_sameLines__closure1.prototype = $desc;
  function Parser_l_nb_diffLines_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_l_nb_diffLines_closure.builtin$cls = "Parser_l_nb_diffLines_closure";
  if (!"name" in Parser_l_nb_diffLines_closure)
    Parser_l_nb_diffLines_closure.name = "Parser_l_nb_diffLines_closure";
  $desc = $collectedClasses.Parser_l_nb_diffLines_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_nb_diffLines_closure.prototype = $desc;
  function Parser_l_nb_diffLines__closure(this_2, indent_3) {
    this.this_2 = this_2;
    this.indent_3 = indent_3;
  }
  Parser_l_nb_diffLines__closure.builtin$cls = "Parser_l_nb_diffLines__closure";
  if (!"name" in Parser_l_nb_diffLines__closure)
    Parser_l_nb_diffLines__closure.name = "Parser_l_nb_diffLines__closure";
  $desc = $collectedClasses.Parser_l_nb_diffLines__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_nb_diffLines__closure.prototype = $desc;
  function Parser_l_foldedContent_closure(this_0, indent_1, chomping_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.chomping_2 = chomping_2;
  }
  Parser_l_foldedContent_closure.builtin$cls = "Parser_l_foldedContent_closure";
  if (!"name" in Parser_l_foldedContent_closure)
    Parser_l_foldedContent_closure.name = "Parser_l_foldedContent_closure";
  $desc = $collectedClasses.Parser_l_foldedContent_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_foldedContent_closure.prototype = $desc;
  function Parser_l_foldedContent__closure(this_3, indent_4, chomping_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.chomping_5 = chomping_5;
  }
  Parser_l_foldedContent__closure.builtin$cls = "Parser_l_foldedContent__closure";
  if (!"name" in Parser_l_foldedContent__closure)
    Parser_l_foldedContent__closure.name = "Parser_l_foldedContent__closure";
  $desc = $collectedClasses.Parser_l_foldedContent__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_foldedContent__closure.prototype = $desc;
  function Parser_l_blockSequence_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_l_blockSequence_closure.builtin$cls = "Parser_l_blockSequence_closure";
  if (!"name" in Parser_l_blockSequence_closure)
    Parser_l_blockSequence_closure.name = "Parser_l_blockSequence_closure";
  $desc = $collectedClasses.Parser_l_blockSequence_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_blockSequence_closure.prototype = $desc;
  function Parser_l_blockSequence__closure(this_2, indent_3, additionalIndent_4) {
    this.this_2 = this_2;
    this.indent_3 = indent_3;
    this.additionalIndent_4 = additionalIndent_4;
  }
  Parser_l_blockSequence__closure.builtin$cls = "Parser_l_blockSequence__closure";
  if (!"name" in Parser_l_blockSequence__closure)
    Parser_l_blockSequence__closure.name = "Parser_l_blockSequence__closure";
  $desc = $collectedClasses.Parser_l_blockSequence__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_blockSequence__closure.prototype = $desc;
  function Parser_l_blockSequence___closure(this_5, indent_6, additionalIndent_7) {
    this.this_5 = this_5;
    this.indent_6 = indent_6;
    this.additionalIndent_7 = additionalIndent_7;
  }
  Parser_l_blockSequence___closure.builtin$cls = "Parser_l_blockSequence___closure";
  if (!"name" in Parser_l_blockSequence___closure)
    Parser_l_blockSequence___closure.name = "Parser_l_blockSequence___closure";
  $desc = $collectedClasses.Parser_l_blockSequence___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_blockSequence___closure.prototype = $desc;
  function Parser_c_l_blockSeqEntry_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_c_l_blockSeqEntry_closure.builtin$cls = "Parser_c_l_blockSeqEntry_closure";
  if (!"name" in Parser_c_l_blockSeqEntry_closure)
    Parser_c_l_blockSeqEntry_closure.name = "Parser_c_l_blockSeqEntry_closure";
  $desc = $collectedClasses.Parser_c_l_blockSeqEntry_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_l_blockSeqEntry_closure.prototype = $desc;
  function Parser_s_l_blockIndented_closure(this_0, indent_1, additionalIndent_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.additionalIndent_2 = additionalIndent_2;
  }
  Parser_s_l_blockIndented_closure.builtin$cls = "Parser_s_l_blockIndented_closure";
  if (!"name" in Parser_s_l_blockIndented_closure)
    Parser_s_l_blockIndented_closure.name = "Parser_s_l_blockIndented_closure";
  $desc = $collectedClasses.Parser_s_l_blockIndented_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_l_blockIndented_closure.prototype = $desc;
  function Parser_s_l_blockIndented__closure(this_3, indent_4, additionalIndent_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.additionalIndent_5 = additionalIndent_5;
  }
  Parser_s_l_blockIndented__closure.builtin$cls = "Parser_s_l_blockIndented__closure";
  if (!"name" in Parser_s_l_blockIndented__closure)
    Parser_s_l_blockIndented__closure.name = "Parser_s_l_blockIndented__closure";
  $desc = $collectedClasses.Parser_s_l_blockIndented__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_l_blockIndented__closure.prototype = $desc;
  function Parser_s_l_blockIndented___closure(this_6, indent_7, additionalIndent_8) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
    this.additionalIndent_8 = additionalIndent_8;
  }
  Parser_s_l_blockIndented___closure.builtin$cls = "Parser_s_l_blockIndented___closure";
  if (!"name" in Parser_s_l_blockIndented___closure)
    Parser_s_l_blockIndented___closure.name = "Parser_s_l_blockIndented___closure";
  $desc = $collectedClasses.Parser_s_l_blockIndented___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_l_blockIndented___closure.prototype = $desc;
  function Parser_s_l_blockIndented___closure0(this_9, indent_10, additionalIndent_11) {
    this.this_9 = this_9;
    this.indent_10 = indent_10;
    this.additionalIndent_11 = additionalIndent_11;
  }
  Parser_s_l_blockIndented___closure0.builtin$cls = "Parser_s_l_blockIndented___closure0";
  if (!"name" in Parser_s_l_blockIndented___closure0)
    Parser_s_l_blockIndented___closure0.name = "Parser_s_l_blockIndented___closure0";
  $desc = $collectedClasses.Parser_s_l_blockIndented___closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_l_blockIndented___closure0.prototype = $desc;
  function Parser_s_l_blockIndented_closure0(this_12, indent_13, ctx_14) {
    this.this_12 = this_12;
    this.indent_13 = indent_13;
    this.ctx_14 = ctx_14;
  }
  Parser_s_l_blockIndented_closure0.builtin$cls = "Parser_s_l_blockIndented_closure0";
  if (!"name" in Parser_s_l_blockIndented_closure0)
    Parser_s_l_blockIndented_closure0.name = "Parser_s_l_blockIndented_closure0";
  $desc = $collectedClasses.Parser_s_l_blockIndented_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_l_blockIndented_closure0.prototype = $desc;
  function Parser_s_l_blockIndented_closure1(this_15) {
    this.this_15 = this_15;
  }
  Parser_s_l_blockIndented_closure1.builtin$cls = "Parser_s_l_blockIndented_closure1";
  if (!"name" in Parser_s_l_blockIndented_closure1)
    Parser_s_l_blockIndented_closure1.name = "Parser_s_l_blockIndented_closure1";
  $desc = $collectedClasses.Parser_s_l_blockIndented_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_l_blockIndented_closure1.prototype = $desc;
  function Parser_ns_l_compactSequence_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_ns_l_compactSequence_closure.builtin$cls = "Parser_ns_l_compactSequence_closure";
  if (!"name" in Parser_ns_l_compactSequence_closure)
    Parser_ns_l_compactSequence_closure.name = "Parser_ns_l_compactSequence_closure";
  $desc = $collectedClasses.Parser_ns_l_compactSequence_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_l_compactSequence_closure.prototype = $desc;
  function Parser_ns_l_compactSequence__closure(this_2, indent_3) {
    this.this_2 = this_2;
    this.indent_3 = indent_3;
  }
  Parser_ns_l_compactSequence__closure.builtin$cls = "Parser_ns_l_compactSequence__closure";
  if (!"name" in Parser_ns_l_compactSequence__closure)
    Parser_ns_l_compactSequence__closure.name = "Parser_ns_l_compactSequence__closure";
  $desc = $collectedClasses.Parser_ns_l_compactSequence__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_l_compactSequence__closure.prototype = $desc;
  function Parser_ns_l_compactSequence___closure(this_4, indent_5) {
    this.this_4 = this_4;
    this.indent_5 = indent_5;
  }
  Parser_ns_l_compactSequence___closure.builtin$cls = "Parser_ns_l_compactSequence___closure";
  if (!"name" in Parser_ns_l_compactSequence___closure)
    Parser_ns_l_compactSequence___closure.name = "Parser_ns_l_compactSequence___closure";
  $desc = $collectedClasses.Parser_ns_l_compactSequence___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_l_compactSequence___closure.prototype = $desc;
  function Parser_l_blockMapping_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_l_blockMapping_closure.builtin$cls = "Parser_l_blockMapping_closure";
  if (!"name" in Parser_l_blockMapping_closure)
    Parser_l_blockMapping_closure.name = "Parser_l_blockMapping_closure";
  $desc = $collectedClasses.Parser_l_blockMapping_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_blockMapping_closure.prototype = $desc;
  function Parser_l_blockMapping__closure(this_2, indent_3, additionalIndent_4) {
    this.this_2 = this_2;
    this.indent_3 = indent_3;
    this.additionalIndent_4 = additionalIndent_4;
  }
  Parser_l_blockMapping__closure.builtin$cls = "Parser_l_blockMapping__closure";
  if (!"name" in Parser_l_blockMapping__closure)
    Parser_l_blockMapping__closure.name = "Parser_l_blockMapping__closure";
  $desc = $collectedClasses.Parser_l_blockMapping__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_blockMapping__closure.prototype = $desc;
  function Parser_l_blockMapping___closure(this_5, indent_6, additionalIndent_7) {
    this.this_5 = this_5;
    this.indent_6 = indent_6;
    this.additionalIndent_7 = additionalIndent_7;
  }
  Parser_l_blockMapping___closure.builtin$cls = "Parser_l_blockMapping___closure";
  if (!"name" in Parser_l_blockMapping___closure)
    Parser_l_blockMapping___closure.name = "Parser_l_blockMapping___closure";
  $desc = $collectedClasses.Parser_l_blockMapping___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_blockMapping___closure.prototype = $desc;
  function Parser_ns_l_blockMapEntry_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_ns_l_blockMapEntry_closure.builtin$cls = "Parser_ns_l_blockMapEntry_closure";
  if (!"name" in Parser_ns_l_blockMapEntry_closure)
    Parser_ns_l_blockMapEntry_closure.name = "Parser_ns_l_blockMapEntry_closure";
  $desc = $collectedClasses.Parser_ns_l_blockMapEntry_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_l_blockMapEntry_closure.prototype = $desc;
  function Parser_ns_l_blockMapEntry_closure0(this_2, indent_3) {
    this.this_2 = this_2;
    this.indent_3 = indent_3;
  }
  Parser_ns_l_blockMapEntry_closure0.builtin$cls = "Parser_ns_l_blockMapEntry_closure0";
  if (!"name" in Parser_ns_l_blockMapEntry_closure0)
    Parser_ns_l_blockMapEntry_closure0.name = "Parser_ns_l_blockMapEntry_closure0";
  $desc = $collectedClasses.Parser_ns_l_blockMapEntry_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_l_blockMapEntry_closure0.prototype = $desc;
  function Parser_c_l_blockMapExplicitEntry_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_c_l_blockMapExplicitEntry_closure.builtin$cls = "Parser_c_l_blockMapExplicitEntry_closure";
  if (!"name" in Parser_c_l_blockMapExplicitEntry_closure)
    Parser_c_l_blockMapExplicitEntry_closure.name = "Parser_c_l_blockMapExplicitEntry_closure";
  $desc = $collectedClasses.Parser_c_l_blockMapExplicitEntry_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_l_blockMapExplicitEntry_closure.prototype = $desc;
  function Parser_c_l_blockMapExplicitKey_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_c_l_blockMapExplicitKey_closure.builtin$cls = "Parser_c_l_blockMapExplicitKey_closure";
  if (!"name" in Parser_c_l_blockMapExplicitKey_closure)
    Parser_c_l_blockMapExplicitKey_closure.name = "Parser_c_l_blockMapExplicitKey_closure";
  $desc = $collectedClasses.Parser_c_l_blockMapExplicitKey_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_l_blockMapExplicitKey_closure.prototype = $desc;
  function Parser_l_blockMapExplicitValue_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_l_blockMapExplicitValue_closure.builtin$cls = "Parser_l_blockMapExplicitValue_closure";
  if (!"name" in Parser_l_blockMapExplicitValue_closure)
    Parser_l_blockMapExplicitValue_closure.name = "Parser_l_blockMapExplicitValue_closure";
  $desc = $collectedClasses.Parser_l_blockMapExplicitValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_blockMapExplicitValue_closure.prototype = $desc;
  function Parser_ns_l_blockMapImplicitEntry_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_ns_l_blockMapImplicitEntry_closure.builtin$cls = "Parser_ns_l_blockMapImplicitEntry_closure";
  if (!"name" in Parser_ns_l_blockMapImplicitEntry_closure)
    Parser_ns_l_blockMapImplicitEntry_closure.name = "Parser_ns_l_blockMapImplicitEntry_closure";
  $desc = $collectedClasses.Parser_ns_l_blockMapImplicitEntry_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_l_blockMapImplicitEntry_closure.prototype = $desc;
  function Parser_ns_s_blockMapImplicitKey_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_ns_s_blockMapImplicitKey_closure.builtin$cls = "Parser_ns_s_blockMapImplicitKey_closure";
  if (!"name" in Parser_ns_s_blockMapImplicitKey_closure)
    Parser_ns_s_blockMapImplicitKey_closure.name = "Parser_ns_s_blockMapImplicitKey_closure";
  $desc = $collectedClasses.Parser_ns_s_blockMapImplicitKey_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_s_blockMapImplicitKey_closure.prototype = $desc;
  function Parser_ns_s_blockMapImplicitKey__closure(this_1) {
    this.this_1 = this_1;
  }
  Parser_ns_s_blockMapImplicitKey__closure.builtin$cls = "Parser_ns_s_blockMapImplicitKey__closure";
  if (!"name" in Parser_ns_s_blockMapImplicitKey__closure)
    Parser_ns_s_blockMapImplicitKey__closure.name = "Parser_ns_s_blockMapImplicitKey__closure";
  $desc = $collectedClasses.Parser_ns_s_blockMapImplicitKey__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_s_blockMapImplicitKey__closure.prototype = $desc;
  function Parser_ns_s_blockMapImplicitKey__closure0(this_2) {
    this.this_2 = this_2;
  }
  Parser_ns_s_blockMapImplicitKey__closure0.builtin$cls = "Parser_ns_s_blockMapImplicitKey__closure0";
  if (!"name" in Parser_ns_s_blockMapImplicitKey__closure0)
    Parser_ns_s_blockMapImplicitKey__closure0.name = "Parser_ns_s_blockMapImplicitKey__closure0";
  $desc = $collectedClasses.Parser_ns_s_blockMapImplicitKey__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_s_blockMapImplicitKey__closure0.prototype = $desc;
  function Parser_c_l_blockMapImplicitValue_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_c_l_blockMapImplicitValue_closure.builtin$cls = "Parser_c_l_blockMapImplicitValue_closure";
  if (!"name" in Parser_c_l_blockMapImplicitValue_closure)
    Parser_c_l_blockMapImplicitValue_closure.name = "Parser_c_l_blockMapImplicitValue_closure";
  $desc = $collectedClasses.Parser_c_l_blockMapImplicitValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_l_blockMapImplicitValue_closure.prototype = $desc;
  function Parser_c_l_blockMapImplicitValue__closure(this_2, indent_3) {
    this.this_2 = this_2;
    this.indent_3 = indent_3;
  }
  Parser_c_l_blockMapImplicitValue__closure.builtin$cls = "Parser_c_l_blockMapImplicitValue__closure";
  if (!"name" in Parser_c_l_blockMapImplicitValue__closure)
    Parser_c_l_blockMapImplicitValue__closure.name = "Parser_c_l_blockMapImplicitValue__closure";
  $desc = $collectedClasses.Parser_c_l_blockMapImplicitValue__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_l_blockMapImplicitValue__closure.prototype = $desc;
  function Parser_c_l_blockMapImplicitValue___closure(this_4, indent_5) {
    this.this_4 = this_4;
    this.indent_5 = indent_5;
  }
  Parser_c_l_blockMapImplicitValue___closure.builtin$cls = "Parser_c_l_blockMapImplicitValue___closure";
  if (!"name" in Parser_c_l_blockMapImplicitValue___closure)
    Parser_c_l_blockMapImplicitValue___closure.name = "Parser_c_l_blockMapImplicitValue___closure";
  $desc = $collectedClasses.Parser_c_l_blockMapImplicitValue___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_l_blockMapImplicitValue___closure.prototype = $desc;
  function Parser_c_l_blockMapImplicitValue___closure0(this_6) {
    this.this_6 = this_6;
  }
  Parser_c_l_blockMapImplicitValue___closure0.builtin$cls = "Parser_c_l_blockMapImplicitValue___closure0";
  if (!"name" in Parser_c_l_blockMapImplicitValue___closure0)
    Parser_c_l_blockMapImplicitValue___closure0.name = "Parser_c_l_blockMapImplicitValue___closure0";
  $desc = $collectedClasses.Parser_c_l_blockMapImplicitValue___closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_l_blockMapImplicitValue___closure0.prototype = $desc;
  function Parser_ns_l_compactMapping_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_ns_l_compactMapping_closure.builtin$cls = "Parser_ns_l_compactMapping_closure";
  if (!"name" in Parser_ns_l_compactMapping_closure)
    Parser_ns_l_compactMapping_closure.name = "Parser_ns_l_compactMapping_closure";
  $desc = $collectedClasses.Parser_ns_l_compactMapping_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_l_compactMapping_closure.prototype = $desc;
  function Parser_ns_l_compactMapping__closure(this_2, indent_3) {
    this.this_2 = this_2;
    this.indent_3 = indent_3;
  }
  Parser_ns_l_compactMapping__closure.builtin$cls = "Parser_ns_l_compactMapping__closure";
  if (!"name" in Parser_ns_l_compactMapping__closure)
    Parser_ns_l_compactMapping__closure.name = "Parser_ns_l_compactMapping__closure";
  $desc = $collectedClasses.Parser_ns_l_compactMapping__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_l_compactMapping__closure.prototype = $desc;
  function Parser_ns_l_compactMapping___closure(this_4, indent_5) {
    this.this_4 = this_4;
    this.indent_5 = indent_5;
  }
  Parser_ns_l_compactMapping___closure.builtin$cls = "Parser_ns_l_compactMapping___closure";
  if (!"name" in Parser_ns_l_compactMapping___closure)
    Parser_ns_l_compactMapping___closure.name = "Parser_ns_l_compactMapping___closure";
  $desc = $collectedClasses.Parser_ns_l_compactMapping___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_ns_l_compactMapping___closure.prototype = $desc;
  function Parser_s_l_blockNode_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_s_l_blockNode_closure.builtin$cls = "Parser_s_l_blockNode_closure";
  if (!"name" in Parser_s_l_blockNode_closure)
    Parser_s_l_blockNode_closure.name = "Parser_s_l_blockNode_closure";
  $desc = $collectedClasses.Parser_s_l_blockNode_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_l_blockNode_closure.prototype = $desc;
  function Parser_s_l_blockNode_closure0(this_3, indent_4) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
  }
  Parser_s_l_blockNode_closure0.builtin$cls = "Parser_s_l_blockNode_closure0";
  if (!"name" in Parser_s_l_blockNode_closure0)
    Parser_s_l_blockNode_closure0.name = "Parser_s_l_blockNode_closure0";
  $desc = $collectedClasses.Parser_s_l_blockNode_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_l_blockNode_closure0.prototype = $desc;
  function Parser_s_l_flowInBlock_closure(this_0, indent_1) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
  }
  Parser_s_l_flowInBlock_closure.builtin$cls = "Parser_s_l_flowInBlock_closure";
  if (!"name" in Parser_s_l_flowInBlock_closure)
    Parser_s_l_flowInBlock_closure.name = "Parser_s_l_flowInBlock_closure";
  $desc = $collectedClasses.Parser_s_l_flowInBlock_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_l_flowInBlock_closure.prototype = $desc;
  function Parser_s_l_blockInBlock_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_s_l_blockInBlock_closure.builtin$cls = "Parser_s_l_blockInBlock_closure";
  if (!"name" in Parser_s_l_blockInBlock_closure)
    Parser_s_l_blockInBlock_closure.name = "Parser_s_l_blockInBlock_closure";
  $desc = $collectedClasses.Parser_s_l_blockInBlock_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_l_blockInBlock_closure.prototype = $desc;
  function Parser_s_l_blockInBlock_closure0(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_s_l_blockInBlock_closure0.builtin$cls = "Parser_s_l_blockInBlock_closure0";
  if (!"name" in Parser_s_l_blockInBlock_closure0)
    Parser_s_l_blockInBlock_closure0.name = "Parser_s_l_blockInBlock_closure0";
  $desc = $collectedClasses.Parser_s_l_blockInBlock_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_l_blockInBlock_closure0.prototype = $desc;
  function Parser_s_l_blockScalar_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_s_l_blockScalar_closure.builtin$cls = "Parser_s_l_blockScalar_closure";
  if (!"name" in Parser_s_l_blockScalar_closure)
    Parser_s_l_blockScalar_closure.name = "Parser_s_l_blockScalar_closure";
  $desc = $collectedClasses.Parser_s_l_blockScalar_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_l_blockScalar_closure.prototype = $desc;
  function Parser_s_l_blockScalar__closure(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_s_l_blockScalar__closure.builtin$cls = "Parser_s_l_blockScalar__closure";
  if (!"name" in Parser_s_l_blockScalar__closure)
    Parser_s_l_blockScalar__closure.name = "Parser_s_l_blockScalar__closure";
  $desc = $collectedClasses.Parser_s_l_blockScalar__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_l_blockScalar__closure.prototype = $desc;
  function Parser_s_l_blockScalar__closure0(this_6, indent_7) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
  }
  Parser_s_l_blockScalar__closure0.builtin$cls = "Parser_s_l_blockScalar__closure0";
  if (!"name" in Parser_s_l_blockScalar__closure0)
    Parser_s_l_blockScalar__closure0.name = "Parser_s_l_blockScalar__closure0";
  $desc = $collectedClasses.Parser_s_l_blockScalar__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_l_blockScalar__closure0.prototype = $desc;
  function Parser_s_l_blockScalar__closure1(this_8, indent_9) {
    this.this_8 = this_8;
    this.indent_9 = indent_9;
  }
  Parser_s_l_blockScalar__closure1.builtin$cls = "Parser_s_l_blockScalar__closure1";
  if (!"name" in Parser_s_l_blockScalar__closure1)
    Parser_s_l_blockScalar__closure1.name = "Parser_s_l_blockScalar__closure1";
  $desc = $collectedClasses.Parser_s_l_blockScalar__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_l_blockScalar__closure1.prototype = $desc;
  function Parser_s_l_blockCollection_closure(this_0, indent_1, ctx_2) {
    this.this_0 = this_0;
    this.indent_1 = indent_1;
    this.ctx_2 = ctx_2;
  }
  Parser_s_l_blockCollection_closure.builtin$cls = "Parser_s_l_blockCollection_closure";
  if (!"name" in Parser_s_l_blockCollection_closure)
    Parser_s_l_blockCollection_closure.name = "Parser_s_l_blockCollection_closure";
  $desc = $collectedClasses.Parser_s_l_blockCollection_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_l_blockCollection_closure.prototype = $desc;
  function Parser_s_l_blockCollection__closure(this_3, indent_4, ctx_5) {
    this.this_3 = this_3;
    this.indent_4 = indent_4;
    this.ctx_5 = ctx_5;
  }
  Parser_s_l_blockCollection__closure.builtin$cls = "Parser_s_l_blockCollection__closure";
  if (!"name" in Parser_s_l_blockCollection__closure)
    Parser_s_l_blockCollection__closure.name = "Parser_s_l_blockCollection__closure";
  $desc = $collectedClasses.Parser_s_l_blockCollection__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_l_blockCollection__closure.prototype = $desc;
  function Parser_s_l_blockCollection__closure0(this_6, indent_7, ctx_8) {
    this.this_6 = this_6;
    this.indent_7 = indent_7;
    this.ctx_8 = ctx_8;
  }
  Parser_s_l_blockCollection__closure0.builtin$cls = "Parser_s_l_blockCollection__closure0";
  if (!"name" in Parser_s_l_blockCollection__closure0)
    Parser_s_l_blockCollection__closure0.name = "Parser_s_l_blockCollection__closure0";
  $desc = $collectedClasses.Parser_s_l_blockCollection__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_l_blockCollection__closure0.prototype = $desc;
  function Parser_s_l_blockCollection__closure1(this_9, indent_10) {
    this.this_9 = this_9;
    this.indent_10 = indent_10;
  }
  Parser_s_l_blockCollection__closure1.builtin$cls = "Parser_s_l_blockCollection__closure1";
  if (!"name" in Parser_s_l_blockCollection__closure1)
    Parser_s_l_blockCollection__closure1.name = "Parser_s_l_blockCollection__closure1";
  $desc = $collectedClasses.Parser_s_l_blockCollection__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_s_l_blockCollection__closure1.prototype = $desc;
  function Parser_l_documentSuffix_closure(this_0) {
    this.this_0 = this_0;
  }
  Parser_l_documentSuffix_closure.builtin$cls = "Parser_l_documentSuffix_closure";
  if (!"name" in Parser_l_documentSuffix_closure)
    Parser_l_documentSuffix_closure.name = "Parser_l_documentSuffix_closure";
  $desc = $collectedClasses.Parser_l_documentSuffix_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_documentSuffix_closure.prototype = $desc;
  function Parser_c_forbidden_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  Parser_c_forbidden_closure.builtin$cls = "Parser_c_forbidden_closure";
  if (!"name" in Parser_c_forbidden_closure)
    Parser_c_forbidden_closure.name = "Parser_c_forbidden_closure";
  $desc = $collectedClasses.Parser_c_forbidden_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_c_forbidden_closure.prototype = $desc;
  function Parser_l_yamlStream_closure(this_0, docs_1) {
    this.this_0 = this_0;
    this.docs_1 = docs_1;
  }
  Parser_l_yamlStream_closure.builtin$cls = "Parser_l_yamlStream_closure";
  if (!"name" in Parser_l_yamlStream_closure)
    Parser_l_yamlStream_closure.name = "Parser_l_yamlStream_closure";
  $desc = $collectedClasses.Parser_l_yamlStream_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser_l_yamlStream_closure.prototype = $desc;
  function SyntaxError(_line, _column, _msg) {
    this._line = _line;
    this._column = _column;
    this._msg = _msg;
  }
  SyntaxError.builtin$cls = "SyntaxError";
  if (!"name" in SyntaxError)
    SyntaxError.name = "SyntaxError";
  $desc = $collectedClasses.SyntaxError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SyntaxError.prototype = $desc;
  function _Pair(first, last) {
    this.first = first;
    this.last = last;
  }
  _Pair.builtin$cls = "_Pair";
  if (!"name" in _Pair)
    _Pair.name = "_Pair";
  $desc = $collectedClasses._Pair;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Pair.prototype = $desc;
  _Pair.prototype.get$first = function(receiver) {
    return this.first;
  };
  _Pair.prototype.get$last = function(receiver) {
    return this.last;
  };
  function _BlockHeader(additionalIndent, chomping) {
    this.additionalIndent = additionalIndent;
    this.chomping = chomping;
  }
  _BlockHeader.builtin$cls = "_BlockHeader";
  if (!"name" in _BlockHeader)
    _BlockHeader.name = "_BlockHeader";
  $desc = $collectedClasses._BlockHeader;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BlockHeader.prototype = $desc;
  _BlockHeader.prototype.get$additionalIndent = function() {
    return this.additionalIndent;
  };
  _BlockHeader.prototype.get$chomping = function() {
    return this.chomping;
  };
  function _Range(start, end) {
    this.start = start;
    this.end = end;
  }
  _Range.builtin$cls = "_Range";
  if (!"name" in _Range)
    _Range.name = "_Range";
  $desc = $collectedClasses._Range;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Range.prototype = $desc;
  function _RangeMap(_parser0$_contents) {
    this._parser0$_contents = _parser0$_contents;
  }
  _RangeMap.builtin$cls = "_RangeMap";
  if (!"name" in _RangeMap)
    _RangeMap.name = "_RangeMap";
  $desc = $collectedClasses._RangeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RangeMap.prototype = $desc;
  function _validateArgList_closure() {
  }
  _validateArgList_closure.builtin$cls = "_validateArgList_closure";
  if (!"name" in _validateArgList_closure)
    _validateArgList_closure.name = "_validateArgList_closure";
  $desc = $collectedClasses._validateArgList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _validateArgList_closure.prototype = $desc;
  function Builder(style, root) {
    this.style = style;
    this.root = root;
  }
  Builder.builtin$cls = "Builder";
  if (!"name" in Builder)
    Builder.name = "Builder";
  $desc = $collectedClasses.Builder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Builder.prototype = $desc;
  function Builder_join_closure() {
  }
  Builder_join_closure.builtin$cls = "Builder_join_closure";
  if (!"name" in Builder_join_closure)
    Builder_join_closure.name = "Builder_join_closure";
  $desc = $collectedClasses.Builder_join_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Builder_join_closure.prototype = $desc;
  function Builder_joinAll_closure() {
  }
  Builder_joinAll_closure.builtin$cls = "Builder_joinAll_closure";
  if (!"name" in Builder_joinAll_closure)
    Builder_joinAll_closure.name = "Builder_joinAll_closure";
  $desc = $collectedClasses.Builder_joinAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Builder_joinAll_closure.prototype = $desc;
  function Builder_split_closure() {
  }
  Builder_split_closure.builtin$cls = "Builder_split_closure";
  if (!"name" in Builder_split_closure)
    Builder_split_closure.name = "Builder_split_closure";
  $desc = $collectedClasses.Builder_split_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Builder_split_closure.prototype = $desc;
  function Style(relativeRootPattern) {
    this.relativeRootPattern = relativeRootPattern;
  }
  Style.builtin$cls = "Style";
  if (!"name" in Style)
    Style.name = "Style";
  $desc = $collectedClasses.Style;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Style.prototype = $desc;
  Style.prototype.get$relativeRootPattern = function() {
    return this.relativeRootPattern;
  };
  function _PosixStyle(name, separator, separatorPattern, needsSeparatorPattern, rootPattern, relativeRootPattern) {
    this.name = name;
    this.separator = separator;
    this.separatorPattern = separatorPattern;
    this.needsSeparatorPattern = needsSeparatorPattern;
    this.rootPattern = rootPattern;
    this.relativeRootPattern = relativeRootPattern;
  }
  _PosixStyle.builtin$cls = "_PosixStyle";
  if (!"name" in _PosixStyle)
    _PosixStyle.name = "_PosixStyle";
  $desc = $collectedClasses._PosixStyle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PosixStyle.prototype = $desc;
  _PosixStyle.prototype.get$name = function(receiver) {
    return this.name;
  };
  _PosixStyle.prototype.get$separator = function() {
    return this.separator;
  };
  _PosixStyle.prototype.get$separatorPattern = function() {
    return this.separatorPattern;
  };
  _PosixStyle.prototype.get$needsSeparatorPattern = function() {
    return this.needsSeparatorPattern;
  };
  _PosixStyle.prototype.get$rootPattern = function() {
    return this.rootPattern;
  };
  function _WindowsStyle(name, separator, separatorPattern, needsSeparatorPattern, rootPattern, relativeRootPattern) {
    this.name = name;
    this.separator = separator;
    this.separatorPattern = separatorPattern;
    this.needsSeparatorPattern = needsSeparatorPattern;
    this.rootPattern = rootPattern;
    this.relativeRootPattern = relativeRootPattern;
  }
  _WindowsStyle.builtin$cls = "_WindowsStyle";
  if (!"name" in _WindowsStyle)
    _WindowsStyle.name = "_WindowsStyle";
  $desc = $collectedClasses._WindowsStyle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WindowsStyle.prototype = $desc;
  _WindowsStyle.prototype.get$name = function(receiver) {
    return this.name;
  };
  _WindowsStyle.prototype.get$separator = function() {
    return this.separator;
  };
  _WindowsStyle.prototype.get$separatorPattern = function() {
    return this.separatorPattern;
  };
  _WindowsStyle.prototype.get$needsSeparatorPattern = function() {
    return this.needsSeparatorPattern;
  };
  _WindowsStyle.prototype.get$rootPattern = function() {
    return this.rootPattern;
  };
  function _UrlStyle(name, separator, separatorPattern, needsSeparatorPattern, rootPattern, relativeRootPattern, path$Style$relativeRootPattern) {
    this.name = name;
    this.separator = separator;
    this.separatorPattern = separatorPattern;
    this.needsSeparatorPattern = needsSeparatorPattern;
    this.rootPattern = rootPattern;
    this.relativeRootPattern = relativeRootPattern;
    this.path$Style$relativeRootPattern = path$Style$relativeRootPattern;
  }
  _UrlStyle.builtin$cls = "_UrlStyle";
  if (!"name" in _UrlStyle)
    _UrlStyle.name = "_UrlStyle";
  $desc = $collectedClasses._UrlStyle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _UrlStyle.prototype = $desc;
  _UrlStyle.prototype.get$name = function(receiver) {
    return this.name;
  };
  _UrlStyle.prototype.get$separator = function() {
    return this.separator;
  };
  _UrlStyle.prototype.get$separatorPattern = function() {
    return this.separatorPattern;
  };
  _UrlStyle.prototype.get$needsSeparatorPattern = function() {
    return this.needsSeparatorPattern;
  };
  _UrlStyle.prototype.get$rootPattern = function() {
    return this.rootPattern;
  };
  _UrlStyle.prototype.get$relativeRootPattern = function() {
    return this.relativeRootPattern;
  };
  function _ParsedPath(style, root, isRootRelative, parts, separators) {
    this.style = style;
    this.root = root;
    this.isRootRelative = isRootRelative;
    this.parts = parts;
    this.separators = separators;
  }
  _ParsedPath.builtin$cls = "_ParsedPath";
  if (!"name" in _ParsedPath)
    _ParsedPath.name = "_ParsedPath";
  $desc = $collectedClasses._ParsedPath;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ParsedPath.prototype = $desc;
  function _preventFlashOfUnstyledContent_closure() {
  }
  _preventFlashOfUnstyledContent_closure.builtin$cls = "_preventFlashOfUnstyledContent_closure";
  if (!"name" in _preventFlashOfUnstyledContent_closure)
    _preventFlashOfUnstyledContent_closure.name = "_preventFlashOfUnstyledContent_closure";
  $desc = $collectedClasses._preventFlashOfUnstyledContent_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _preventFlashOfUnstyledContent_closure.prototype = $desc;
  function PolymerDeclaration(_type, _supertype, _super, _polymer$_name, _polymer$_publish, _publishLC, _polymer$_observe, _instanceAttributes, _sheets, _styles, _eventDelegates, _templateDelegates) {
    this._type = _type;
    this._supertype = _supertype;
    this._super = _super;
    this._polymer$_name = _polymer$_name;
    this._polymer$_publish = _polymer$_publish;
    this._publishLC = _publishLC;
    this._polymer$_observe = _polymer$_observe;
    this._instanceAttributes = _instanceAttributes;
    this._sheets = _sheets;
    this._styles = _styles;
    this._eventDelegates = _eventDelegates;
    this._templateDelegates = _templateDelegates;
  }
  PolymerDeclaration.builtin$cls = "PolymerDeclaration";
  if (!"name" in PolymerDeclaration)
    PolymerDeclaration.name = "PolymerDeclaration";
  $desc = $collectedClasses.PolymerDeclaration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration.prototype = $desc;
  PolymerDeclaration.prototype.get$_polymer$_publish = function(receiver) {
    return receiver._polymer$_publish;
  };
  PolymerDeclaration.prototype.get$_publishLC = function(receiver) {
    return receiver._publishLC;
  };
  PolymerDeclaration.prototype.get$_polymer$_observe = function(receiver) {
    return receiver._polymer$_observe;
  };
  PolymerDeclaration.prototype.get$_instanceAttributes = function(receiver) {
    return receiver._instanceAttributes;
  };
  PolymerDeclaration.prototype.get$_eventDelegates = function(receiver) {
    return receiver._eventDelegates;
  };
  function PolymerDeclaration_waitingForExtendee_closure() {
  }
  PolymerDeclaration_waitingForExtendee_closure.builtin$cls = "PolymerDeclaration_waitingForExtendee_closure";
  if (!"name" in PolymerDeclaration_waitingForExtendee_closure)
    PolymerDeclaration_waitingForExtendee_closure.name = "PolymerDeclaration_waitingForExtendee_closure";
  $desc = $collectedClasses.PolymerDeclaration_waitingForExtendee_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration_waitingForExtendee_closure.prototype = $desc;
  function PolymerDeclaration_accumulateInstanceAttributes_closure(this_0) {
    this.this_0 = this_0;
  }
  PolymerDeclaration_accumulateInstanceAttributes_closure.builtin$cls = "PolymerDeclaration_accumulateInstanceAttributes_closure";
  if (!"name" in PolymerDeclaration_accumulateInstanceAttributes_closure)
    PolymerDeclaration_accumulateInstanceAttributes_closure.name = "PolymerDeclaration_accumulateInstanceAttributes_closure";
  $desc = $collectedClasses.PolymerDeclaration_accumulateInstanceAttributes_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration_accumulateInstanceAttributes_closure.prototype = $desc;
  function PolymerDeclaration_addAttributeDelegates_closure(delegates_0) {
    this.delegates_0 = delegates_0;
  }
  PolymerDeclaration_addAttributeDelegates_closure.builtin$cls = "PolymerDeclaration_addAttributeDelegates_closure";
  if (!"name" in PolymerDeclaration_addAttributeDelegates_closure)
    PolymerDeclaration_addAttributeDelegates_closure.name = "PolymerDeclaration_addAttributeDelegates_closure";
  $desc = $collectedClasses.PolymerDeclaration_addAttributeDelegates_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration_addAttributeDelegates_closure.prototype = $desc;
  function PolymerDeclaration_installLocalSheets_closure() {
  }
  PolymerDeclaration_installLocalSheets_closure.builtin$cls = "PolymerDeclaration_installLocalSheets_closure";
  if (!"name" in PolymerDeclaration_installLocalSheets_closure)
    PolymerDeclaration_installLocalSheets_closure.name = "PolymerDeclaration_installLocalSheets_closure";
  $desc = $collectedClasses.PolymerDeclaration_installLocalSheets_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration_installLocalSheets_closure.prototype = $desc;
  function PolymerDeclaration_cssTextForScope_matcher(selector_0) {
    this.selector_0 = selector_0;
  }
  PolymerDeclaration_cssTextForScope_matcher.builtin$cls = "PolymerDeclaration_cssTextForScope_matcher";
  if (!"name" in PolymerDeclaration_cssTextForScope_matcher)
    PolymerDeclaration_cssTextForScope_matcher.name = "PolymerDeclaration_cssTextForScope_matcher";
  $desc = $collectedClasses.PolymerDeclaration_cssTextForScope_matcher;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration_cssTextForScope_matcher.prototype = $desc;
  function PolymerDeclaration__lowerCaseMap_closure(map_0) {
    this.map_0 = map_0;
  }
  PolymerDeclaration__lowerCaseMap_closure.builtin$cls = "PolymerDeclaration__lowerCaseMap_closure";
  if (!"name" in PolymerDeclaration__lowerCaseMap_closure)
    PolymerDeclaration__lowerCaseMap_closure.name = "PolymerDeclaration__lowerCaseMap_closure";
  $desc = $collectedClasses.PolymerDeclaration__lowerCaseMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration__lowerCaseMap_closure.prototype = $desc;
  function closure20() {
  }
  closure20.builtin$cls = "closure20";
  if (!"name" in closure20)
    closure20.name = "closure20";
  $desc = $collectedClasses.closure20;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure20.prototype = $desc;
  function _closure7(map_0) {
    this.map_0 = map_0;
  }
  _closure7.builtin$cls = "_closure7";
  if (!"name" in _closure7)
    _closure7.name = "_closure7";
  $desc = $collectedClasses._closure7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _closure7.prototype = $desc;
  function PublishedProperty() {
  }
  PublishedProperty.builtin$cls = "PublishedProperty";
  if (!"name" in PublishedProperty)
    PublishedProperty.name = "PublishedProperty";
  $desc = $collectedClasses.PublishedProperty;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PublishedProperty.prototype = $desc;
  function Polymer($$) {
    this.$$ = $$;
  }
  Polymer.builtin$cls = "Polymer";
  if (!"name" in Polymer)
    Polymer.name = "Polymer";
  $desc = $collectedClasses.Polymer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer.prototype = $desc;
  Polymer.prototype.get$$$ = function(receiver) {
    return receiver.$$;
  };
  Polymer.prototype.get$$$.$reflectable = 1;
  function BoundClosure$i2(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$i2.builtin$cls = "BoundClosure$i2";
  $desc = $collectedClasses.BoundClosure$i2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$i2.prototype = $desc;
  function Polymer_copyInstanceAttributes_closure(this_0) {
    this.this_0 = this_0;
  }
  Polymer_copyInstanceAttributes_closure.builtin$cls = "Polymer_copyInstanceAttributes_closure";
  if (!"name" in Polymer_copyInstanceAttributes_closure)
    Polymer_copyInstanceAttributes_closure.name = "Polymer_copyInstanceAttributes_closure";
  $desc = $collectedClasses.Polymer_copyInstanceAttributes_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_copyInstanceAttributes_closure.prototype = $desc;
  function Polymer_copyInstanceAttributes__closure(value_1) {
    this.value_1 = value_1;
  }
  Polymer_copyInstanceAttributes__closure.builtin$cls = "Polymer_copyInstanceAttributes__closure";
  if (!"name" in Polymer_copyInstanceAttributes__closure)
    Polymer_copyInstanceAttributes__closure.name = "Polymer_copyInstanceAttributes__closure";
  $desc = $collectedClasses.Polymer_copyInstanceAttributes__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_copyInstanceAttributes__closure.prototype = $desc;
  function Polymer_cancelUnbindAll_closure() {
  }
  Polymer_cancelUnbindAll_closure.builtin$cls = "Polymer_cancelUnbindAll_closure";
  if (!"name" in Polymer_cancelUnbindAll_closure)
    Polymer_cancelUnbindAll_closure.name = "Polymer_cancelUnbindAll_closure";
  $desc = $collectedClasses.Polymer_cancelUnbindAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_cancelUnbindAll_closure.prototype = $desc;
  function Polymer__unbindNodeTree_closure() {
  }
  Polymer__unbindNodeTree_closure.builtin$cls = "Polymer__unbindNodeTree_closure";
  if (!"name" in Polymer__unbindNodeTree_closure)
    Polymer__unbindNodeTree_closure.name = "Polymer__unbindNodeTree_closure";
  $desc = $collectedClasses.Polymer__unbindNodeTree_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer__unbindNodeTree_closure.prototype = $desc;
  function Polymer_notifyPropertyChanges_closure(c_0) {
    this.c_0 = c_0;
  }
  Polymer_notifyPropertyChanges_closure.builtin$cls = "Polymer_notifyPropertyChanges_closure";
  if (!"name" in Polymer_notifyPropertyChanges_closure)
    Polymer_notifyPropertyChanges_closure.name = "Polymer_notifyPropertyChanges_closure";
  $desc = $collectedClasses.Polymer_notifyPropertyChanges_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_notifyPropertyChanges_closure.prototype = $desc;
  function Polymer_notifyPropertyChanges_closure0(this_1, changes_2, observe_3, publish_4) {
    this.this_1 = this_1;
    this.changes_2 = changes_2;
    this.observe_3 = observe_3;
    this.publish_4 = publish_4;
  }
  Polymer_notifyPropertyChanges_closure0.builtin$cls = "Polymer_notifyPropertyChanges_closure0";
  if (!"name" in Polymer_notifyPropertyChanges_closure0)
    Polymer_notifyPropertyChanges_closure0.name = "Polymer_notifyPropertyChanges_closure0";
  $desc = $collectedClasses.Polymer_notifyPropertyChanges_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_notifyPropertyChanges_closure0.prototype = $desc;
  function Polymer_observeArrayValue_closure(this_0, old_1, callbackName_2) {
    this.this_0 = this_0;
    this.old_1 = old_1;
    this.callbackName_2 = callbackName_2;
  }
  Polymer_observeArrayValue_closure.builtin$cls = "Polymer_observeArrayValue_closure";
  if (!"name" in Polymer_observeArrayValue_closure)
    Polymer_observeArrayValue_closure.name = "Polymer_observeArrayValue_closure";
  $desc = $collectedClasses.Polymer_observeArrayValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_observeArrayValue_closure.prototype = $desc;
  function Polymer_prepareBinding_closure(path_0, name_1) {
    this.path_0 = path_0;
    this.name_1 = name_1;
  }
  Polymer_prepareBinding_closure.builtin$cls = "Polymer_prepareBinding_closure";
  if (!"name" in Polymer_prepareBinding_closure)
    Polymer_prepareBinding_closure.name = "Polymer_prepareBinding_closure";
  $desc = $collectedClasses.Polymer_prepareBinding_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_prepareBinding_closure.prototype = $desc;
  function Polymer_prepareBinding__closure(path_2, model_3, node_4) {
    this.path_2 = path_2;
    this.model_3 = model_3;
    this.node_4 = node_4;
  }
  Polymer_prepareBinding__closure.builtin$cls = "Polymer_prepareBinding__closure";
  if (!"name" in Polymer_prepareBinding__closure)
    Polymer_prepareBinding__closure.name = "Polymer_prepareBinding__closure";
  $desc = $collectedClasses.Polymer_prepareBinding__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_prepareBinding__closure.prototype = $desc;
  function Polymer__invokeMethod_closure() {
  }
  Polymer__invokeMethod_closure.builtin$cls = "Polymer__invokeMethod_closure";
  if (!"name" in Polymer__invokeMethod_closure)
    Polymer__invokeMethod_closure.name = "Polymer__invokeMethod_closure";
  $desc = $collectedClasses.Polymer__invokeMethod_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer__invokeMethod_closure.prototype = $desc;
  function Polymer_unveilElements_closure() {
  }
  Polymer_unveilElements_closure.builtin$cls = "Polymer_unveilElements_closure";
  if (!"name" in Polymer_unveilElements_closure)
    Polymer_unveilElements_closure.name = "Polymer_unveilElements_closure";
  $desc = $collectedClasses.Polymer_unveilElements_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_unveilElements_closure.prototype = $desc;
  function Polymer_unveilElements__closure(nodes_0) {
    this.nodes_0 = nodes_0;
  }
  Polymer_unveilElements__closure.builtin$cls = "Polymer_unveilElements__closure";
  if (!"name" in Polymer_unveilElements__closure)
    Polymer_unveilElements__closure.name = "Polymer_unveilElements__closure";
  $desc = $collectedClasses.Polymer_unveilElements__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_unveilElements__closure.prototype = $desc;
  function _PolymerBinding(_polymer$_target, _property, _sub, _lastValue, _node_binding$_node, _model, _observer, _pathSub, property, path) {
    this._polymer$_target = _polymer$_target;
    this._property = _property;
    this._sub = _sub;
    this._lastValue = _lastValue;
    this._node_binding$_node = _node_binding$_node;
    this._model = _model;
    this._observer = _observer;
    this._pathSub = _pathSub;
    this.property = property;
    this.path = path;
  }
  _PolymerBinding.builtin$cls = "_PolymerBinding";
  if (!"name" in _PolymerBinding)
    _PolymerBinding.name = "_PolymerBinding";
  $desc = $collectedClasses._PolymerBinding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PolymerBinding.prototype = $desc;
  function PolymerElement(_changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  PolymerElement.builtin$cls = "PolymerElement";
  if (!"name" in PolymerElement)
    PolymerElement.name = "PolymerElement";
  $desc = $collectedClasses.PolymerElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerElement.prototype = $desc;
  function HtmlElement_Polymer($$) {
    this.$$ = $$;
  }
  HtmlElement_Polymer.builtin$cls = "HtmlElement_Polymer";
  if (!"name" in HtmlElement_Polymer)
    HtmlElement_Polymer.name = "HtmlElement_Polymer";
  $desc = $collectedClasses.HtmlElement_Polymer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement_Polymer.prototype = $desc;
  Polymer.prototype.get$$$ = function(receiver) {
    return receiver.$$;
  };
  Polymer.prototype.get$$$.$reflectable = 1;
  function HtmlElement_Polymer_ChangeNotifier() {
  }
  HtmlElement_Polymer_ChangeNotifier.builtin$cls = "HtmlElement_Polymer_ChangeNotifier";
  if (!"name" in HtmlElement_Polymer_ChangeNotifier)
    HtmlElement_Polymer_ChangeNotifier.name = "HtmlElement_Polymer_ChangeNotifier";
  $desc = $collectedClasses.HtmlElement_Polymer_ChangeNotifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement_Polymer_ChangeNotifier.prototype = $desc;
  function _PropertyValue(oldValue, newValue) {
    this.oldValue = oldValue;
    this.newValue = newValue;
  }
  _PropertyValue.builtin$cls = "_PropertyValue";
  if (!"name" in _PropertyValue)
    _PropertyValue.name = "_PropertyValue";
  $desc = $collectedClasses._PropertyValue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PropertyValue.prototype = $desc;
  _PropertyValue.prototype.get$oldValue = function(receiver) {
    return this.oldValue;
  };
  _PropertyValue.prototype.get$newValue = function(receiver) {
    return this.newValue;
  };
  _PropertyValue.prototype.set$newValue = function(receiver, v) {
    return this.newValue = v;
  };
  function _PolymerExpressionsWithEventDelegate(globals) {
    this.globals = globals;
  }
  _PolymerExpressionsWithEventDelegate.builtin$cls = "_PolymerExpressionsWithEventDelegate";
  if (!"name" in _PolymerExpressionsWithEventDelegate)
    _PolymerExpressionsWithEventDelegate.name = "_PolymerExpressionsWithEventDelegate";
  $desc = $collectedClasses._PolymerExpressionsWithEventDelegate;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PolymerExpressionsWithEventDelegate.prototype = $desc;
  function _Job(_callback, _timer) {
    this._callback = _callback;
    this._timer = _timer;
  }
  _Job.builtin$cls = "_Job";
  if (!"name" in _Job)
    _Job.name = "_Job";
  $desc = $collectedClasses._Job;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Job.prototype = $desc;
  function CustomTag(tagName) {
    this.tagName = tagName;
  }
  CustomTag.builtin$cls = "CustomTag";
  if (!"name" in CustomTag)
    CustomTag.name = "CustomTag";
  $desc = $collectedClasses.CustomTag;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CustomTag.prototype = $desc;
  CustomTag.prototype.get$tagName = function(receiver) {
    return this.tagName;
  };
  function _initPolymerOptimized_closure() {
  }
  _initPolymerOptimized_closure.builtin$cls = "_initPolymerOptimized_closure";
  if (!"name" in _initPolymerOptimized_closure)
    _initPolymerOptimized_closure.name = "_initPolymerOptimized_closure";
  $desc = $collectedClasses._initPolymerOptimized_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _initPolymerOptimized_closure.prototype = $desc;
  function _maybeInvoke_closure() {
  }
  _maybeInvoke_closure.builtin$cls = "_maybeInvoke_closure";
  if (!"name" in _maybeInvoke_closure)
    _maybeInvoke_closure.name = "_maybeInvoke_closure";
  $desc = $collectedClasses._maybeInvoke_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _maybeInvoke_closure.prototype = $desc;
  function _InitMethodAnnotation() {
  }
  _InitMethodAnnotation.builtin$cls = "_InitMethodAnnotation";
  if (!"name" in _InitMethodAnnotation)
    _InitMethodAnnotation.name = "_InitMethodAnnotation";
  $desc = $collectedClasses._InitMethodAnnotation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _InitMethodAnnotation.prototype = $desc;
  function closure1() {
  }
  closure1.builtin$cls = "closure1";
  if (!"name" in closure1)
    closure1.name = "closure1";
  $desc = $collectedClasses.closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure1.prototype = $desc;
  function _closure() {
  }
  _closure.builtin$cls = "_closure";
  if (!"name" in _closure)
    _closure.name = "_closure";
  $desc = $collectedClasses._closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _closure.prototype = $desc;
  function _closure0() {
  }
  _closure0.builtin$cls = "_closure0";
  if (!"name" in _closure0)
    _closure0.name = "_closure0";
  $desc = $collectedClasses._closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _closure0.prototype = $desc;
  function _closure1() {
  }
  _closure1.builtin$cls = "_closure1";
  if (!"name" in _closure1)
    _closure1.name = "_closure1";
  $desc = $collectedClasses._closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _closure1.prototype = $desc;
  function _closure2() {
  }
  _closure2.builtin$cls = "_closure2";
  if (!"name" in _closure2)
    _closure2.name = "_closure2";
  $desc = $collectedClasses._closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _closure2.prototype = $desc;
  function _closure3() {
  }
  _closure3.builtin$cls = "_closure3";
  if (!"name" in _closure3)
    _closure3.name = "_closure3";
  $desc = $collectedClasses._closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _closure3.prototype = $desc;
  function __closure0(def_0) {
    this.def_0 = def_0;
  }
  __closure0.builtin$cls = "__closure0";
  if (!"name" in __closure0)
    __closure0.name = "__closure0";
  $desc = $collectedClasses.__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  __closure0.prototype = $desc;
  function _closure4() {
  }
  _closure4.builtin$cls = "_closure4";
  if (!"name" in _closure4)
    _closure4.name = "_closure4";
  $desc = $collectedClasses._closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _closure4.prototype = $desc;
  function __closure(def_1) {
    this.def_1 = def_1;
  }
  __closure.builtin$cls = "__closure";
  if (!"name" in __closure)
    __closure.name = "__closure";
  $desc = $collectedClasses.__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  __closure.prototype = $desc;
  function closure21() {
  }
  closure21.builtin$cls = "closure21";
  if (!"name" in closure21)
    closure21.name = "closure21";
  $desc = $collectedClasses.closure21;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure21.prototype = $desc;
  function _classAttributeConverter_closure(v_0) {
    this.v_0 = v_0;
  }
  _classAttributeConverter_closure.builtin$cls = "_classAttributeConverter_closure";
  if (!"name" in _classAttributeConverter_closure)
    _classAttributeConverter_closure.name = "_classAttributeConverter_closure";
  $desc = $collectedClasses._classAttributeConverter_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _classAttributeConverter_closure.prototype = $desc;
  function _styleAttributeConverter_closure(v_0) {
    this.v_0 = v_0;
  }
  _styleAttributeConverter_closure.builtin$cls = "_styleAttributeConverter_closure";
  if (!"name" in _styleAttributeConverter_closure)
    _styleAttributeConverter_closure.name = "_styleAttributeConverter_closure";
  $desc = $collectedClasses._styleAttributeConverter_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _styleAttributeConverter_closure.prototype = $desc;
  function PolymerExpressions() {
  }
  PolymerExpressions.builtin$cls = "PolymerExpressions";
  if (!"name" in PolymerExpressions)
    PolymerExpressions.name = "PolymerExpressions";
  $desc = $collectedClasses.PolymerExpressions;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerExpressions.prototype = $desc;
  function BoundClosure$3(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$3.builtin$cls = "BoundClosure$3";
  $desc = $collectedClasses.BoundClosure$3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$3.prototype = $desc;
  function PolymerExpressions_prepareBinding_closure(this_0, name_1, expr_2) {
    this.this_0 = this_0;
    this.name_1 = name_1;
    this.expr_2 = expr_2;
  }
  PolymerExpressions_prepareBinding_closure.builtin$cls = "PolymerExpressions_prepareBinding_closure";
  if (!"name" in PolymerExpressions_prepareBinding_closure)
    PolymerExpressions_prepareBinding_closure.name = "PolymerExpressions_prepareBinding_closure";
  $desc = $collectedClasses.PolymerExpressions_prepareBinding_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerExpressions_prepareBinding_closure.prototype = $desc;
  function PolymerExpressions_prepareInstanceModel_closure(this_0) {
    this.this_0 = this_0;
  }
  PolymerExpressions_prepareInstanceModel_closure.builtin$cls = "PolymerExpressions_prepareInstanceModel_closure";
  if (!"name" in PolymerExpressions_prepareInstanceModel_closure)
    PolymerExpressions_prepareInstanceModel_closure.name = "PolymerExpressions_prepareInstanceModel_closure";
  $desc = $collectedClasses.PolymerExpressions_prepareInstanceModel_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerExpressions_prepareInstanceModel_closure.prototype = $desc;
  function _Binding(_scope, _polymer_expressions$_expr, _converter, _polymer_expressions$_value, _changes, _records) {
    this._scope = _scope;
    this._polymer_expressions$_expr = _polymer_expressions$_expr;
    this._converter = _converter;
    this._polymer_expressions$_value = _polymer_expressions$_value;
    this._changes = _changes;
    this._records = _records;
  }
  _Binding.builtin$cls = "_Binding";
  if (!"name" in _Binding)
    _Binding.name = "_Binding";
  $desc = $collectedClasses._Binding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Binding.prototype = $desc;
  function _Binding_closure(this_0) {
    this.this_0 = this_0;
  }
  _Binding_closure.builtin$cls = "_Binding_closure";
  if (!"name" in _Binding_closure)
    _Binding_closure.name = "_Binding_closure";
  $desc = $collectedClasses._Binding_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Binding_closure.prototype = $desc;
  function _Binding__setValue_closure(this_0, v_1) {
    this.this_0 = this_0;
    this.v_1 = v_1;
  }
  _Binding__setValue_closure.builtin$cls = "_Binding__setValue_closure";
  if (!"name" in _Binding__setValue_closure)
    _Binding__setValue_closure.name = "_Binding__setValue_closure";
  $desc = $collectedClasses._Binding__setValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Binding__setValue_closure.prototype = $desc;
  function StreamBinding(stream, _observable_box$_value, _changes, _records) {
    this.stream = stream;
    this._observable_box$_value = _observable_box$_value;
    this._changes = _changes;
    this._records = _records;
  }
  StreamBinding.builtin$cls = "StreamBinding";
  if (!"name" in StreamBinding)
    StreamBinding.name = "StreamBinding";
  $desc = $collectedClasses.StreamBinding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamBinding.prototype = $desc;
  function StreamBinding_closure(T_0, this_1) {
    this.T_0 = T_0;
    this.this_1 = this_1;
  }
  StreamBinding_closure.builtin$cls = "StreamBinding_closure";
  if (!"name" in StreamBinding_closure)
    StreamBinding_closure.name = "StreamBinding_closure";
  $desc = $collectedClasses.StreamBinding_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamBinding_closure.prototype = $desc;
  function closure4() {
  }
  closure4.builtin$cls = "closure4";
  if (!"name" in closure4)
    closure4.name = "closure4";
  $desc = $collectedClasses.closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure4.prototype = $desc;
  function closure5() {
  }
  closure5.builtin$cls = "closure5";
  if (!"name" in closure5)
    closure5.name = "closure5";
  $desc = $collectedClasses.closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure5.prototype = $desc;
  function closure6() {
  }
  closure6.builtin$cls = "closure6";
  if (!"name" in closure6)
    closure6.name = "closure6";
  $desc = $collectedClasses.closure6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure6.prototype = $desc;
  function closure7() {
  }
  closure7.builtin$cls = "closure7";
  if (!"name" in closure7)
    closure7.name = "closure7";
  $desc = $collectedClasses.closure7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure7.prototype = $desc;
  function closure8() {
  }
  closure8.builtin$cls = "closure8";
  if (!"name" in closure8)
    closure8.name = "closure8";
  $desc = $collectedClasses.closure8;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure8.prototype = $desc;
  function closure9() {
  }
  closure9.builtin$cls = "closure9";
  if (!"name" in closure9)
    closure9.name = "closure9";
  $desc = $collectedClasses.closure9;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure9.prototype = $desc;
  function closure10() {
  }
  closure10.builtin$cls = "closure10";
  if (!"name" in closure10)
    closure10.name = "closure10";
  $desc = $collectedClasses.closure10;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure10.prototype = $desc;
  function closure11() {
  }
  closure11.builtin$cls = "closure11";
  if (!"name" in closure11)
    closure11.name = "closure11";
  $desc = $collectedClasses.closure11;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure11.prototype = $desc;
  function closure12() {
  }
  closure12.builtin$cls = "closure12";
  if (!"name" in closure12)
    closure12.name = "closure12";
  $desc = $collectedClasses.closure12;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure12.prototype = $desc;
  function closure13() {
  }
  closure13.builtin$cls = "closure13";
  if (!"name" in closure13)
    closure13.name = "closure13";
  $desc = $collectedClasses.closure13;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure13.prototype = $desc;
  function closure14() {
  }
  closure14.builtin$cls = "closure14";
  if (!"name" in closure14)
    closure14.name = "closure14";
  $desc = $collectedClasses.closure14;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure14.prototype = $desc;
  function closure15() {
  }
  closure15.builtin$cls = "closure15";
  if (!"name" in closure15)
    closure15.name = "closure15";
  $desc = $collectedClasses.closure15;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure15.prototype = $desc;
  function closure16() {
  }
  closure16.builtin$cls = "closure16";
  if (!"name" in closure16)
    closure16.name = "closure16";
  $desc = $collectedClasses.closure16;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure16.prototype = $desc;
  function closure17() {
  }
  closure17.builtin$cls = "closure17";
  if (!"name" in closure17)
    closure17.name = "closure17";
  $desc = $collectedClasses.closure17;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure17.prototype = $desc;
  function closure18() {
  }
  closure18.builtin$cls = "closure18";
  if (!"name" in closure18)
    closure18.name = "closure18";
  $desc = $collectedClasses.closure18;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure18.prototype = $desc;
  function closure19() {
  }
  closure19.builtin$cls = "closure19";
  if (!"name" in closure19)
    closure19.name = "closure19";
  $desc = $collectedClasses.closure19;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure19.prototype = $desc;
  function assign_notAssignable(box_0) {
    this.box_0 = box_0;
  }
  assign_notAssignable.builtin$cls = "assign_notAssignable";
  if (!"name" in assign_notAssignable)
    assign_notAssignable.name = "assign_notAssignable";
  $desc = $collectedClasses.assign_notAssignable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  assign_notAssignable.prototype = $desc;
  function Scope(parent, model, _variables, __modelMirror) {
    this.parent = parent;
    this.model = model;
    this._variables = _variables;
    this.__modelMirror = __modelMirror;
  }
  Scope.builtin$cls = "Scope";
  if (!"name" in Scope)
    Scope.name = "Scope";
  $desc = $collectedClasses.Scope;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Scope.prototype = $desc;
  Scope.prototype.get$parent = function(receiver) {
    return this.parent;
  };
  function ExpressionObserver(_parent, _eval$_value) {
    this._parent = _parent;
    this._eval$_value = _eval$_value;
  }
  ExpressionObserver.builtin$cls = "ExpressionObserver";
  if (!"name" in ExpressionObserver)
    ExpressionObserver.name = "ExpressionObserver";
  $desc = $collectedClasses.ExpressionObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ExpressionObserver.prototype = $desc;
  ExpressionObserver.prototype.set$_parent = function(v) {
    return this._parent = v;
  };
  ExpressionObserver.prototype.get$_eval$_value = function() {
    return this._eval$_value;
  };
  function Updater(scope) {
    this.scope = scope;
  }
  Updater.builtin$cls = "Updater";
  if (!"name" in Updater)
    Updater.name = "Updater";
  $desc = $collectedClasses.Updater;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Updater.prototype = $desc;
  function ObserverBuilder(scope, parents) {
    this.scope = scope;
    this.parents = parents;
  }
  ObserverBuilder.builtin$cls = "ObserverBuilder";
  if (!"name" in ObserverBuilder)
    ObserverBuilder.name = "ObserverBuilder";
  $desc = $collectedClasses.ObserverBuilder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObserverBuilder.prototype = $desc;
  function ObserverBuilder_visitInvoke_closure(invoke_0) {
    this.invoke_0 = invoke_0;
  }
  ObserverBuilder_visitInvoke_closure.builtin$cls = "ObserverBuilder_visitInvoke_closure";
  if (!"name" in ObserverBuilder_visitInvoke_closure)
    ObserverBuilder_visitInvoke_closure.name = "ObserverBuilder_visitInvoke_closure";
  $desc = $collectedClasses.ObserverBuilder_visitInvoke_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObserverBuilder_visitInvoke_closure.prototype = $desc;
  function ObserverBuilder_visitMapLiteral_closure(map_0) {
    this.map_0 = map_0;
  }
  ObserverBuilder_visitMapLiteral_closure.builtin$cls = "ObserverBuilder_visitMapLiteral_closure";
  if (!"name" in ObserverBuilder_visitMapLiteral_closure)
    ObserverBuilder_visitMapLiteral_closure.name = "ObserverBuilder_visitMapLiteral_closure";
  $desc = $collectedClasses.ObserverBuilder_visitMapLiteral_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObserverBuilder_visitMapLiteral_closure.prototype = $desc;
  function EmptyObserver(_eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  EmptyObserver.builtin$cls = "EmptyObserver";
  if (!"name" in EmptyObserver)
    EmptyObserver.name = "EmptyObserver";
  $desc = $collectedClasses.EmptyObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmptyObserver.prototype = $desc;
  function LiteralObserver(_eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  LiteralObserver.builtin$cls = "LiteralObserver";
  if (!"name" in LiteralObserver)
    LiteralObserver.name = "LiteralObserver";
  $desc = $collectedClasses.LiteralObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LiteralObserver.prototype = $desc;
  function MapLiteralObserver(entries, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.entries = entries;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  MapLiteralObserver.builtin$cls = "MapLiteralObserver";
  if (!"name" in MapLiteralObserver)
    MapLiteralObserver.name = "MapLiteralObserver";
  $desc = $collectedClasses.MapLiteralObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLiteralObserver.prototype = $desc;
  MapLiteralObserver.prototype.get$entries = function(receiver) {
    return this.entries;
  };
  function MapLiteralObserver__updateSelf_closure() {
  }
  MapLiteralObserver__updateSelf_closure.builtin$cls = "MapLiteralObserver__updateSelf_closure";
  if (!"name" in MapLiteralObserver__updateSelf_closure)
    MapLiteralObserver__updateSelf_closure.name = "MapLiteralObserver__updateSelf_closure";
  $desc = $collectedClasses.MapLiteralObserver__updateSelf_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLiteralObserver__updateSelf_closure.prototype = $desc;
  function MapLiteralEntryObserver(key, entryValue, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.key = key;
    this.entryValue = entryValue;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  MapLiteralEntryObserver.builtin$cls = "MapLiteralEntryObserver";
  if (!"name" in MapLiteralEntryObserver)
    MapLiteralEntryObserver.name = "MapLiteralEntryObserver";
  $desc = $collectedClasses.MapLiteralEntryObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLiteralEntryObserver.prototype = $desc;
  MapLiteralEntryObserver.prototype.get$key = function(receiver) {
    return this.key;
  };
  MapLiteralEntryObserver.prototype.get$entryValue = function() {
    return this.entryValue;
  };
  function IdentifierObserver(_eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  IdentifierObserver.builtin$cls = "IdentifierObserver";
  if (!"name" in IdentifierObserver)
    IdentifierObserver.name = "IdentifierObserver";
  $desc = $collectedClasses.IdentifierObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IdentifierObserver.prototype = $desc;
  function IdentifierObserver__updateSelf_closure(this_0, scope_1, symbol_2) {
    this.this_0 = this_0;
    this.scope_1 = scope_1;
    this.symbol_2 = symbol_2;
  }
  IdentifierObserver__updateSelf_closure.builtin$cls = "IdentifierObserver__updateSelf_closure";
  if (!"name" in IdentifierObserver__updateSelf_closure)
    IdentifierObserver__updateSelf_closure.name = "IdentifierObserver__updateSelf_closure";
  $desc = $collectedClasses.IdentifierObserver__updateSelf_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IdentifierObserver__updateSelf_closure.prototype = $desc;
  function IdentifierObserver__updateSelf__closure(symbol_3) {
    this.symbol_3 = symbol_3;
  }
  IdentifierObserver__updateSelf__closure.builtin$cls = "IdentifierObserver__updateSelf__closure";
  if (!"name" in IdentifierObserver__updateSelf__closure)
    IdentifierObserver__updateSelf__closure.name = "IdentifierObserver__updateSelf__closure";
  $desc = $collectedClasses.IdentifierObserver__updateSelf__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IdentifierObserver__updateSelf__closure.prototype = $desc;
  function UnaryObserver(child, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.child = child;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  UnaryObserver.builtin$cls = "UnaryObserver";
  if (!"name" in UnaryObserver)
    UnaryObserver.name = "UnaryObserver";
  $desc = $collectedClasses.UnaryObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnaryObserver.prototype = $desc;
  UnaryObserver.prototype.get$child = function() {
    return this.child;
  };
  function BinaryObserver(left, right, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.left = left;
    this.right = right;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  BinaryObserver.builtin$cls = "BinaryObserver";
  if (!"name" in BinaryObserver)
    BinaryObserver.name = "BinaryObserver";
  $desc = $collectedClasses.BinaryObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BinaryObserver.prototype = $desc;
  BinaryObserver.prototype.get$left = function(receiver) {
    return this.left;
  };
  BinaryObserver.prototype.get$right = function(receiver) {
    return this.right;
  };
  function InvokeObserver(receiver, arguments, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.receiver = receiver;
    this.arguments = arguments;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  InvokeObserver.builtin$cls = "InvokeObserver";
  if (!"name" in InvokeObserver)
    InvokeObserver.name = "InvokeObserver";
  $desc = $collectedClasses.InvokeObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InvokeObserver.prototype = $desc;
  InvokeObserver.prototype.get$receiver = function() {
    return this.receiver;
  };
  InvokeObserver.prototype.get$arguments = function() {
    return this.arguments;
  };
  function InvokeObserver__updateSelf_closure() {
  }
  InvokeObserver__updateSelf_closure.builtin$cls = "InvokeObserver__updateSelf_closure";
  if (!"name" in InvokeObserver__updateSelf_closure)
    InvokeObserver__updateSelf_closure.name = "InvokeObserver__updateSelf_closure";
  $desc = $collectedClasses.InvokeObserver__updateSelf_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InvokeObserver__updateSelf_closure.prototype = $desc;
  function InvokeObserver__updateSelf_closure0(this_0, scope_1, key_2) {
    this.this_0 = this_0;
    this.scope_1 = scope_1;
    this.key_2 = key_2;
  }
  InvokeObserver__updateSelf_closure0.builtin$cls = "InvokeObserver__updateSelf_closure0";
  if (!"name" in InvokeObserver__updateSelf_closure0)
    InvokeObserver__updateSelf_closure0.name = "InvokeObserver__updateSelf_closure0";
  $desc = $collectedClasses.InvokeObserver__updateSelf_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InvokeObserver__updateSelf_closure0.prototype = $desc;
  function InvokeObserver__updateSelf__closure0(key_3) {
    this.key_3 = key_3;
  }
  InvokeObserver__updateSelf__closure0.builtin$cls = "InvokeObserver__updateSelf__closure0";
  if (!"name" in InvokeObserver__updateSelf__closure0)
    InvokeObserver__updateSelf__closure0.name = "InvokeObserver__updateSelf__closure0";
  $desc = $collectedClasses.InvokeObserver__updateSelf__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InvokeObserver__updateSelf__closure0.prototype = $desc;
  function InvokeObserver__updateSelf_closure1(this_4, scope_5, symbol_6) {
    this.this_4 = this_4;
    this.scope_5 = scope_5;
    this.symbol_6 = symbol_6;
  }
  InvokeObserver__updateSelf_closure1.builtin$cls = "InvokeObserver__updateSelf_closure1";
  if (!"name" in InvokeObserver__updateSelf_closure1)
    InvokeObserver__updateSelf_closure1.name = "InvokeObserver__updateSelf_closure1";
  $desc = $collectedClasses.InvokeObserver__updateSelf_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InvokeObserver__updateSelf_closure1.prototype = $desc;
  function InvokeObserver__updateSelf__closure(symbol_7) {
    this.symbol_7 = symbol_7;
  }
  InvokeObserver__updateSelf__closure.builtin$cls = "InvokeObserver__updateSelf__closure";
  if (!"name" in InvokeObserver__updateSelf__closure)
    InvokeObserver__updateSelf__closure.name = "InvokeObserver__updateSelf__closure";
  $desc = $collectedClasses.InvokeObserver__updateSelf__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InvokeObserver__updateSelf__closure.prototype = $desc;
  function InObserver(left, right, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.left = left;
    this.right = right;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  InObserver.builtin$cls = "InObserver";
  if (!"name" in InObserver)
    InObserver.name = "InObserver";
  $desc = $collectedClasses.InObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InObserver.prototype = $desc;
  InObserver.prototype.get$left = function(receiver) {
    return this.left;
  };
  InObserver.prototype.get$right = function(receiver) {
    return this.right;
  };
  function InObserver__updateSelf_closure(this_0, scope_1) {
    this.this_0 = this_0;
    this.scope_1 = scope_1;
  }
  InObserver__updateSelf_closure.builtin$cls = "InObserver__updateSelf_closure";
  if (!"name" in InObserver__updateSelf_closure)
    InObserver__updateSelf_closure.name = "InObserver__updateSelf_closure";
  $desc = $collectedClasses.InObserver__updateSelf_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InObserver__updateSelf_closure.prototype = $desc;
  function Comprehension(identifier, iterable) {
    this.identifier = identifier;
    this.iterable = iterable;
  }
  Comprehension.builtin$cls = "Comprehension";
  if (!"name" in Comprehension)
    Comprehension.name = "Comprehension";
  $desc = $collectedClasses.Comprehension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comprehension.prototype = $desc;
  function Method0(mirror, symbol) {
    this.mirror = mirror;
    this.symbol = symbol;
  }
  Method0.builtin$cls = "Method0";
  if (!"name" in Method0)
    Method0.name = "Method0";
  $desc = $collectedClasses.Method0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Method0.prototype = $desc;
  Method0.prototype.get$mirror = function(receiver) {
    return this.mirror;
  };
  function EvalException(message) {
    this.message = message;
  }
  EvalException.builtin$cls = "EvalException";
  if (!"name" in EvalException)
    EvalException.name = "EvalException";
  $desc = $collectedClasses.EvalException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EvalException.prototype = $desc;
  EvalException.prototype.get$message = function(receiver) {
    return this.message;
  };
  function AstFactory() {
  }
  AstFactory.builtin$cls = "AstFactory";
  if (!"name" in AstFactory)
    AstFactory.name = "AstFactory";
  $desc = $collectedClasses.AstFactory;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AstFactory.prototype = $desc;
  function Expression() {
  }
  Expression.builtin$cls = "Expression";
  if (!"name" in Expression)
    Expression.name = "Expression";
  $desc = $collectedClasses.Expression;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Expression.prototype = $desc;
  function EmptyExpression() {
  }
  EmptyExpression.builtin$cls = "EmptyExpression";
  if (!"name" in EmptyExpression)
    EmptyExpression.name = "EmptyExpression";
  $desc = $collectedClasses.EmptyExpression;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmptyExpression.prototype = $desc;
  function Literal(value) {
    this.value = value;
  }
  Literal.builtin$cls = "Literal";
  if (!"name" in Literal)
    Literal.name = "Literal";
  $desc = $collectedClasses.Literal;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Literal.prototype = $desc;
  Literal.prototype.get$value = function(receiver) {
    return this.value;
  };
  function MapLiteral(entries) {
    this.entries = entries;
  }
  MapLiteral.builtin$cls = "MapLiteral";
  if (!"name" in MapLiteral)
    MapLiteral.name = "MapLiteral";
  $desc = $collectedClasses.MapLiteral;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLiteral.prototype = $desc;
  MapLiteral.prototype.get$entries = function(receiver) {
    return this.entries;
  };
  function MapLiteralEntry(key, entryValue) {
    this.key = key;
    this.entryValue = entryValue;
  }
  MapLiteralEntry.builtin$cls = "MapLiteralEntry";
  if (!"name" in MapLiteralEntry)
    MapLiteralEntry.name = "MapLiteralEntry";
  $desc = $collectedClasses.MapLiteralEntry;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLiteralEntry.prototype = $desc;
  MapLiteralEntry.prototype.get$key = function(receiver) {
    return this.key;
  };
  MapLiteralEntry.prototype.get$entryValue = function() {
    return this.entryValue;
  };
  function ParenthesizedExpression(child) {
    this.child = child;
  }
  ParenthesizedExpression.builtin$cls = "ParenthesizedExpression";
  if (!"name" in ParenthesizedExpression)
    ParenthesizedExpression.name = "ParenthesizedExpression";
  $desc = $collectedClasses.ParenthesizedExpression;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParenthesizedExpression.prototype = $desc;
  function Identifier(value) {
    this.value = value;
  }
  Identifier.builtin$cls = "Identifier";
  if (!"name" in Identifier)
    Identifier.name = "Identifier";
  $desc = $collectedClasses.Identifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Identifier.prototype = $desc;
  Identifier.prototype.get$value = function(receiver) {
    return this.value;
  };
  function UnaryOperator(operator, child) {
    this.operator = operator;
    this.child = child;
  }
  UnaryOperator.builtin$cls = "UnaryOperator";
  if (!"name" in UnaryOperator)
    UnaryOperator.name = "UnaryOperator";
  $desc = $collectedClasses.UnaryOperator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnaryOperator.prototype = $desc;
  UnaryOperator.prototype.get$operator = function(receiver) {
    return this.operator;
  };
  UnaryOperator.prototype.get$child = function() {
    return this.child;
  };
  function BinaryOperator(operator, left, right) {
    this.operator = operator;
    this.left = left;
    this.right = right;
  }
  BinaryOperator.builtin$cls = "BinaryOperator";
  if (!"name" in BinaryOperator)
    BinaryOperator.name = "BinaryOperator";
  $desc = $collectedClasses.BinaryOperator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BinaryOperator.prototype = $desc;
  BinaryOperator.prototype.get$operator = function(receiver) {
    return this.operator;
  };
  BinaryOperator.prototype.get$left = function(receiver) {
    return this.left;
  };
  BinaryOperator.prototype.get$right = function(receiver) {
    return this.right;
  };
  function InExpression(left, right) {
    this.left = left;
    this.right = right;
  }
  InExpression.builtin$cls = "InExpression";
  if (!"name" in InExpression)
    InExpression.name = "InExpression";
  $desc = $collectedClasses.InExpression;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InExpression.prototype = $desc;
  InExpression.prototype.get$left = function(receiver) {
    return this.left;
  };
  InExpression.prototype.get$right = function(receiver) {
    return this.right;
  };
  function Invoke(receiver, method, arguments) {
    this.receiver = receiver;
    this.method = method;
    this.arguments = arguments;
  }
  Invoke.builtin$cls = "Invoke";
  if (!"name" in Invoke)
    Invoke.name = "Invoke";
  $desc = $collectedClasses.Invoke;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Invoke.prototype = $desc;
  Invoke.prototype.get$receiver = function() {
    return this.receiver;
  };
  Invoke.prototype.get$method = function(receiver) {
    return this.method;
  };
  Invoke.prototype.get$arguments = function() {
    return this.arguments;
  };
  function _hashList_closure() {
  }
  _hashList_closure.builtin$cls = "_hashList_closure";
  if (!"name" in _hashList_closure)
    _hashList_closure.name = "_hashList_closure";
  $desc = $collectedClasses._hashList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _hashList_closure.prototype = $desc;
  function Parser(_astFactory, _tokenizer, _tokens, _parser$_iterator, _token) {
    this._astFactory = _astFactory;
    this._tokenizer = _tokenizer;
    this._tokens = _tokens;
    this._parser$_iterator = _parser$_iterator;
    this._token = _token;
  }
  Parser.builtin$cls = "Parser";
  if (!"name" in Parser)
    Parser.name = "Parser";
  $desc = $collectedClasses.Parser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser.prototype = $desc;
  function IndexedValue(index, value) {
    this.index = index;
    this.value = value;
  }
  IndexedValue.builtin$cls = "IndexedValue";
  if (!"name" in IndexedValue)
    IndexedValue.name = "IndexedValue";
  $desc = $collectedClasses.IndexedValue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexedValue.prototype = $desc;
  IndexedValue.prototype.get$index = function(receiver) {
    return this.index;
  };
  IndexedValue.prototype.get$index.$reflectable = 1;
  IndexedValue.prototype.get$value = function(receiver) {
    return this.value;
  };
  IndexedValue.prototype.get$value.$reflectable = 1;
  function EnumerateIterable(_globals$_iterable) {
    this._globals$_iterable = _globals$_iterable;
  }
  EnumerateIterable.builtin$cls = "EnumerateIterable";
  if (!"name" in EnumerateIterable)
    EnumerateIterable.name = "EnumerateIterable";
  $desc = $collectedClasses.EnumerateIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EnumerateIterable.prototype = $desc;
  function EnumerateIterator(_globals$_iterator, _globals$_index, _globals$_current) {
    this._globals$_iterator = _globals$_iterator;
    this._globals$_index = _globals$_index;
    this._globals$_current = _globals$_current;
  }
  EnumerateIterator.builtin$cls = "EnumerateIterator";
  if (!"name" in EnumerateIterator)
    EnumerateIterator.name = "EnumerateIterator";
  $desc = $collectedClasses.EnumerateIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EnumerateIterator.prototype = $desc;
  function Token(kind, value, precedence) {
    this.kind = kind;
    this.value = value;
    this.precedence = precedence;
  }
  Token.builtin$cls = "Token";
  if (!"name" in Token)
    Token.name = "Token";
  $desc = $collectedClasses.Token;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Token.prototype = $desc;
  Token.prototype.get$kind = function(receiver) {
    return this.kind;
  };
  Token.prototype.get$value = function(receiver) {
    return this.value;
  };
  Token.prototype.get$precedence = function() {
    return this.precedence;
  };
  function Tokenizer(_tokenizer$_tokens, _sb, _tokenizer$_iterator, _tokenizer$_next) {
    this._tokenizer$_tokens = _tokenizer$_tokens;
    this._sb = _sb;
    this._tokenizer$_iterator = _tokenizer$_iterator;
    this._tokenizer$_next = _tokenizer$_next;
  }
  Tokenizer.builtin$cls = "Tokenizer";
  if (!"name" in Tokenizer)
    Tokenizer.name = "Tokenizer";
  $desc = $collectedClasses.Tokenizer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Tokenizer.prototype = $desc;
  function ParseException(message) {
    this.message = message;
  }
  ParseException.builtin$cls = "ParseException";
  if (!"name" in ParseException)
    ParseException.name = "ParseException";
  $desc = $collectedClasses.ParseException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParseException.prototype = $desc;
  ParseException.prototype.get$message = function(receiver) {
    return this.message;
  };
  function Visitor0() {
  }
  Visitor0.builtin$cls = "Visitor0";
  if (!"name" in Visitor0)
    Visitor0.name = "Visitor0";
  $desc = $collectedClasses.Visitor0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Visitor0.prototype = $desc;
  function RecursiveVisitor() {
  }
  RecursiveVisitor.builtin$cls = "RecursiveVisitor";
  if (!"name" in RecursiveVisitor)
    RecursiveVisitor.name = "RecursiveVisitor";
  $desc = $collectedClasses.RecursiveVisitor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RecursiveVisitor.prototype = $desc;
  function Result(_results$_item, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._results$_item = _results$_item;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  Result.builtin$cls = "Result";
  if (!"name" in Result)
    Result.name = "Result";
  $desc = $collectedClasses.Result;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Result.prototype = $desc;
  Result.prototype.get$_results$_item = function(receiver) {
    return receiver._results$_item;
  };
  Result.prototype.get$_results$_item.$reflectable = 1;
  Result.prototype.set$_results$_item = function(receiver, v) {
    return receiver._results$_item = v;
  };
  Result.prototype.set$_results$_item.$reflectable = 1;
  function AnchorElement_Polymer($$) {
    this.$$ = $$;
  }
  AnchorElement_Polymer.builtin$cls = "AnchorElement_Polymer";
  if (!"name" in AnchorElement_Polymer)
    AnchorElement_Polymer.name = "AnchorElement_Polymer";
  $desc = $collectedClasses.AnchorElement_Polymer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnchorElement_Polymer.prototype = $desc;
  Polymer.prototype.get$$$ = function(receiver) {
    return receiver.$$;
  };
  Polymer.prototype.get$$$.$reflectable = 1;
  function AnchorElement_Polymer_ChangeNotifier() {
  }
  AnchorElement_Polymer_ChangeNotifier.builtin$cls = "AnchorElement_Polymer_ChangeNotifier";
  if (!"name" in AnchorElement_Polymer_ChangeNotifier)
    AnchorElement_Polymer_ChangeNotifier.name = "AnchorElement_Polymer_ChangeNotifier";
  $desc = $collectedClasses.AnchorElement_Polymer_ChangeNotifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnchorElement_Polymer_ChangeNotifier.prototype = $desc;
  function Search(results, _search$__$isFocused, _searchQuery, currentIndex, _changes, _records, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this.results = results;
    this._search$__$isFocused = _search$__$isFocused;
    this._searchQuery = _searchQuery;
    this.currentIndex = currentIndex;
    this._changes = _changes;
    this._records = _records;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  Search.builtin$cls = "Search";
  if (!"name" in Search)
    Search.name = "Search";
  $desc = $collectedClasses.Search;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Search.prototype = $desc;
  Search.prototype.get$results = function(receiver) {
    return receiver.results;
  };
  Search.prototype.get$results.$reflectable = 1;
  Search.prototype.set$results = function(receiver, v) {
    return receiver.results = v;
  };
  Search.prototype.set$results.$reflectable = 1;
  Search.prototype.get$_search$__$isFocused = function(receiver) {
    return receiver._search$__$isFocused;
  };
  Search.prototype.get$_search$__$isFocused.$reflectable = 1;
  Search.prototype.set$_search$__$isFocused = function(receiver, v) {
    return receiver._search$__$isFocused = v;
  };
  Search.prototype.set$_search$__$isFocused.$reflectable = 1;
  Search.prototype.get$_searchQuery = function(receiver) {
    return receiver._searchQuery;
  };
  Search.prototype.get$_searchQuery.$reflectable = 1;
  Search.prototype.set$_searchQuery = function(receiver, v) {
    return receiver._searchQuery = v;
  };
  Search.prototype.set$_searchQuery.$reflectable = 1;
  Search.prototype.get$currentIndex = function(receiver) {
    return receiver.currentIndex;
  };
  Search.prototype.get$currentIndex.$reflectable = 1;
  Search.prototype.set$currentIndex = function(receiver, v) {
    return receiver.currentIndex = v;
  };
  Search.prototype.set$currentIndex.$reflectable = 1;
  function DartdocElement_ChangeNotifier0() {
  }
  DartdocElement_ChangeNotifier0.builtin$cls = "DartdocElement_ChangeNotifier0";
  if (!"name" in DartdocElement_ChangeNotifier0)
    DartdocElement_ChangeNotifier0.name = "DartdocElement_ChangeNotifier0";
  $desc = $collectedClasses.DartdocElement_ChangeNotifier0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DartdocElement_ChangeNotifier0.prototype = $desc;
  function SearchResult(element, type, score, position) {
    this.element = element;
    this.type = type;
    this.score = score;
    this.position = position;
  }
  SearchResult.builtin$cls = "SearchResult";
  if (!"name" in SearchResult)
    SearchResult.name = "SearchResult";
  $desc = $collectedClasses.SearchResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SearchResult.prototype = $desc;
  SearchResult.prototype.get$element = function() {
    return this.element;
  };
  SearchResult.prototype.get$element.$reflectable = 1;
  SearchResult.prototype.set$element = function(v) {
    return this.element = v;
  };
  SearchResult.prototype.set$element.$reflectable = 1;
  SearchResult.prototype.get$type = function(receiver) {
    return this.type;
  };
  SearchResult.prototype.get$type.$reflectable = 1;
  SearchResult.prototype.set$type = function(receiver, v) {
    return this.type = v;
  };
  SearchResult.prototype.set$type.$reflectable = 1;
  SearchResult.prototype.get$score = function() {
    return this.score;
  };
  SearchResult.prototype.get$score.$reflectable = 1;
  SearchResult.prototype.set$score = function(v) {
    return this.score = v;
  };
  SearchResult.prototype.set$score.$reflectable = 1;
  SearchResult.prototype.get$position = function(receiver) {
    return this.position;
  };
  SearchResult.prototype.get$position.$reflectable = 1;
  SearchResult.prototype.set$position = function(receiver, v) {
    return this.position = v;
  };
  SearchResult.prototype.set$position.$reflectable = 1;
  function lookupSearchResults_closure() {
  }
  lookupSearchResults_closure.builtin$cls = "lookupSearchResults_closure";
  if (!"name" in lookupSearchResults_closure)
    lookupSearchResults_closure.name = "lookupSearchResults_closure";
  $desc = $collectedClasses.lookupSearchResults_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  lookupSearchResults_closure.prototype = $desc;
  function lookupSearchResults_closure0(lower_1) {
    this.lower_1 = lower_1;
  }
  lookupSearchResults_closure0.builtin$cls = "lookupSearchResults_closure0";
  if (!"name" in lookupSearchResults_closure0)
    lookupSearchResults_closure0.name = "lookupSearchResults_closure0";
  $desc = $collectedClasses.lookupSearchResults_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  lookupSearchResults_closure0.prototype = $desc;
  function lookupSearchResults_closure1(box_0) {
    this.box_0 = box_0;
  }
  lookupSearchResults_closure1.builtin$cls = "lookupSearchResults_closure1";
  if (!"name" in lookupSearchResults_closure1)
    lookupSearchResults_closure1.name = "lookupSearchResults_closure1";
  $desc = $collectedClasses.lookupSearchResults_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  lookupSearchResults_closure1.prototype = $desc;
  function lookupSearchResults_closure2(box_0, type_2, location_3, qualifiedNameParts_4) {
    this.box_0 = box_0;
    this.type_2 = type_2;
    this.location_3 = location_3;
    this.qualifiedNameParts_4 = qualifiedNameParts_4;
  }
  lookupSearchResults_closure2.builtin$cls = "lookupSearchResults_closure2";
  if (!"name" in lookupSearchResults_closure2)
    lookupSearchResults_closure2.name = "lookupSearchResults_closure2";
  $desc = $collectedClasses.lookupSearchResults_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  lookupSearchResults_closure2.prototype = $desc;
  function _ElementExtension(_node, _bindings, _templateInstance) {
    this._node = _node;
    this._bindings = _bindings;
    this._templateInstance = _templateInstance;
  }
  _ElementExtension.builtin$cls = "_ElementExtension";
  if (!"name" in _ElementExtension)
    _ElementExtension.name = "_ElementExtension";
  $desc = $collectedClasses._ElementExtension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementExtension.prototype = $desc;
  function _AttributeBinding(conditional, _node_binding$_node, _model, _observer, _pathSub, property, path) {
    this.conditional = conditional;
    this._node_binding$_node = _node_binding$_node;
    this._model = _model;
    this._observer = _observer;
    this._pathSub = _pathSub;
    this.property = property;
    this.path = path;
  }
  _AttributeBinding.builtin$cls = "_AttributeBinding";
  if (!"name" in _AttributeBinding)
    _AttributeBinding.name = "_AttributeBinding";
  $desc = $collectedClasses._AttributeBinding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AttributeBinding.prototype = $desc;
  function _OptionValueBinding(_eventSub, _node_binding$_node, _model, _observer, _pathSub, property, path) {
    this._eventSub = _eventSub;
    this._node_binding$_node = _node_binding$_node;
    this._model = _model;
    this._observer = _observer;
    this._pathSub = _pathSub;
    this.property = property;
    this.path = path;
  }
  _OptionValueBinding.builtin$cls = "_OptionValueBinding";
  if (!"name" in _OptionValueBinding)
    _OptionValueBinding.name = "_OptionValueBinding";
  $desc = $collectedClasses._OptionValueBinding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _OptionValueBinding.prototype = $desc;
  function _InputBinding() {
  }
  _InputBinding.builtin$cls = "_InputBinding";
  if (!"name" in _InputBinding)
    _InputBinding.name = "_InputBinding";
  $desc = $collectedClasses._InputBinding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _InputBinding.prototype = $desc;
  function closure3() {
  }
  closure3.builtin$cls = "closure3";
  if (!"name" in closure3)
    closure3.name = "closure3";
  $desc = $collectedClasses.closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure3.prototype = $desc;
  function _closure5(fired_0) {
    this.fired_0 = fired_0;
  }
  _closure5.builtin$cls = "_closure5";
  if (!"name" in _closure5)
    _closure5.name = "_closure5";
  $desc = $collectedClasses._closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _closure5.prototype = $desc;
  function _closure6(fired_1) {
    this.fired_1 = fired_1;
  }
  _closure6.builtin$cls = "_closure6";
  if (!"name" in _closure6)
    _closure6.name = "_closure6";
  $desc = $collectedClasses._closure6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _closure6.prototype = $desc;
  function _ValueBinding(_eventSub, _node_binding$_node, _model, _observer, _pathSub, property, path) {
    this._eventSub = _eventSub;
    this._node_binding$_node = _node_binding$_node;
    this._model = _model;
    this._observer = _observer;
    this._pathSub = _pathSub;
    this.property = property;
    this.path = path;
  }
  _ValueBinding.builtin$cls = "_ValueBinding";
  if (!"name" in _ValueBinding)
    _ValueBinding.name = "_ValueBinding";
  $desc = $collectedClasses._ValueBinding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ValueBinding.prototype = $desc;
  function _CheckedBinding(_eventSub, _node_binding$_node, _model, _observer, _pathSub, property, path) {
    this._eventSub = _eventSub;
    this._node_binding$_node = _node_binding$_node;
    this._model = _model;
    this._observer = _observer;
    this._pathSub = _pathSub;
    this.property = property;
    this.path = path;
  }
  _CheckedBinding.builtin$cls = "_CheckedBinding";
  if (!"name" in _CheckedBinding)
    _CheckedBinding.name = "_CheckedBinding";
  $desc = $collectedClasses._CheckedBinding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CheckedBinding.prototype = $desc;
  function _CheckedBinding__getAssociatedRadioButtons_closure(element_0) {
    this.element_0 = element_0;
  }
  _CheckedBinding__getAssociatedRadioButtons_closure.builtin$cls = "_CheckedBinding__getAssociatedRadioButtons_closure";
  if (!"name" in _CheckedBinding__getAssociatedRadioButtons_closure)
    _CheckedBinding__getAssociatedRadioButtons_closure.name = "_CheckedBinding__getAssociatedRadioButtons_closure";
  $desc = $collectedClasses._CheckedBinding__getAssociatedRadioButtons_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CheckedBinding__getAssociatedRadioButtons_closure.prototype = $desc;
  function _CheckedBinding__getAssociatedRadioButtons_closure0(element_1) {
    this.element_1 = element_1;
  }
  _CheckedBinding__getAssociatedRadioButtons_closure0.builtin$cls = "_CheckedBinding__getAssociatedRadioButtons_closure0";
  if (!"name" in _CheckedBinding__getAssociatedRadioButtons_closure0)
    _CheckedBinding__getAssociatedRadioButtons_closure0.name = "_CheckedBinding__getAssociatedRadioButtons_closure0";
  $desc = $collectedClasses._CheckedBinding__getAssociatedRadioButtons_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CheckedBinding__getAssociatedRadioButtons_closure0.prototype = $desc;
  function _SelectBinding(_eventSub, _node_binding$_node, _model, _observer, _pathSub, property, path) {
    this._eventSub = _eventSub;
    this._node_binding$_node = _node_binding$_node;
    this._model = _model;
    this._observer = _observer;
    this._pathSub = _pathSub;
    this.property = property;
    this.path = path;
  }
  _SelectBinding.builtin$cls = "_SelectBinding";
  if (!"name" in _SelectBinding)
    _SelectBinding.name = "_SelectBinding";
  $desc = $collectedClasses._SelectBinding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SelectBinding.prototype = $desc;
  function _SelectBinding_valueChanged_delaySetSelectedIndex(box_0, this_1, newValue_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.newValue_2 = newValue_2;
  }
  _SelectBinding_valueChanged_delaySetSelectedIndex.builtin$cls = "_SelectBinding_valueChanged_delaySetSelectedIndex";
  if (!"name" in _SelectBinding_valueChanged_delaySetSelectedIndex)
    _SelectBinding_valueChanged_delaySetSelectedIndex.name = "_SelectBinding_valueChanged_delaySetSelectedIndex";
  $desc = $collectedClasses._SelectBinding_valueChanged_delaySetSelectedIndex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SelectBinding_valueChanged_delaySetSelectedIndex.prototype = $desc;
  function _SelectBinding__toInt_closure() {
  }
  _SelectBinding__toInt_closure.builtin$cls = "_SelectBinding__toInt_closure";
  if (!"name" in _SelectBinding__toInt_closure)
    _SelectBinding__toInt_closure.name = "_SelectBinding__toInt_closure";
  $desc = $collectedClasses._SelectBinding__toInt_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SelectBinding__toInt_closure.prototype = $desc;
  function _InputElementExtension(_node, _bindings, _templateInstance) {
    this._node = _node;
    this._bindings = _bindings;
    this._templateInstance = _templateInstance;
  }
  _InputElementExtension.builtin$cls = "_InputElementExtension";
  if (!"name" in _InputElementExtension)
    _InputElementExtension.name = "_InputElementExtension";
  $desc = $collectedClasses._InputElementExtension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _InputElementExtension.prototype = $desc;
  function _InstanceBindingMap(bindings, children, templateRef, hasSubTemplate) {
    this.bindings = bindings;
    this.children = children;
    this.templateRef = templateRef;
    this.hasSubTemplate = hasSubTemplate;
  }
  _InstanceBindingMap.builtin$cls = "_InstanceBindingMap";
  if (!"name" in _InstanceBindingMap)
    _InstanceBindingMap.name = "_InstanceBindingMap";
  $desc = $collectedClasses._InstanceBindingMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _InstanceBindingMap.prototype = $desc;
  _InstanceBindingMap.prototype.get$bindings = function(receiver) {
    return this.bindings;
  };
  _InstanceBindingMap.prototype.get$children = function(receiver) {
    return this.children;
  };
  _InstanceBindingMap.prototype.get$templateRef = function() {
    return this.templateRef;
  };
  function NodeBindExtension(_node, _bindings, _templateInstance) {
    this._node = _node;
    this._bindings = _bindings;
    this._templateInstance = _templateInstance;
  }
  NodeBindExtension.builtin$cls = "NodeBindExtension";
  if (!"name" in NodeBindExtension)
    NodeBindExtension.name = "NodeBindExtension";
  $desc = $collectedClasses.NodeBindExtension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeBindExtension.prototype = $desc;
  NodeBindExtension.prototype.get$_node = function() {
    return this._node;
  };
  NodeBindExtension.prototype.set$_templateInstance = function(v) {
    return this._templateInstance = v;
  };
  function TemplateInstance(firstNode, lastNode, model) {
    this.firstNode = firstNode;
    this.lastNode = lastNode;
    this.model = model;
  }
  TemplateInstance.builtin$cls = "TemplateInstance";
  if (!"name" in TemplateInstance)
    TemplateInstance.name = "TemplateInstance";
  $desc = $collectedClasses.TemplateInstance;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateInstance.prototype = $desc;
  function _SelectElementExtension(_node, _bindings, _templateInstance) {
    this._node = _node;
    this._bindings = _bindings;
    this._templateInstance = _templateInstance;
  }
  _SelectElementExtension.builtin$cls = "_SelectElementExtension";
  if (!"name" in _SelectElementExtension)
    _SelectElementExtension.name = "_SelectElementExtension";
  $desc = $collectedClasses._SelectElementExtension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SelectElementExtension.prototype = $desc;
  function TemplateBindExtension(_template_binding$_model, _bindingDelegate, _template_binding$_iterator, _template_binding$_scheduled, _templateInstanceRef, _content, _templateIsDecorated, _bindingMap, _node, _bindings, _templateInstance) {
    this._template_binding$_model = _template_binding$_model;
    this._bindingDelegate = _bindingDelegate;
    this._template_binding$_iterator = _template_binding$_iterator;
    this._template_binding$_scheduled = _template_binding$_scheduled;
    this._templateInstanceRef = _templateInstanceRef;
    this._content = _content;
    this._templateIsDecorated = _templateIsDecorated;
    this._bindingMap = _bindingMap;
    this._node = _node;
    this._bindings = _bindings;
    this._templateInstance = _templateInstance;
  }
  TemplateBindExtension.builtin$cls = "TemplateBindExtension";
  if (!"name" in TemplateBindExtension)
    TemplateBindExtension.name = "TemplateBindExtension";
  $desc = $collectedClasses.TemplateBindExtension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateBindExtension.prototype = $desc;
  TemplateBindExtension.prototype.set$_bindingDelegate = function(v) {
    return this._bindingDelegate = v;
  };
  TemplateBindExtension.prototype.get$_template_binding$_iterator = function() {
    return this._template_binding$_iterator;
  };
  TemplateBindExtension.prototype.set$_templateInstanceRef = function(v) {
    return this._templateInstanceRef = v;
  };
  TemplateBindExtension.prototype.set$_content = function(v) {
    return this._content = v;
  };
  TemplateBindExtension.prototype.set$_templateIsDecorated = function(v) {
    return this._templateIsDecorated = v;
  };
  TemplateBindExtension.prototype.get$_bindingMap = function() {
    return this._bindingMap;
  };
  TemplateBindExtension.prototype.set$_bindingMap = function(v) {
    return this._bindingMap = v;
  };
  function TemplateBindExtension_bootstrap__bootstrap() {
  }
  TemplateBindExtension_bootstrap__bootstrap.builtin$cls = "TemplateBindExtension_bootstrap__bootstrap";
  if (!"name" in TemplateBindExtension_bootstrap__bootstrap)
    TemplateBindExtension_bootstrap__bootstrap.name = "TemplateBindExtension_bootstrap__bootstrap";
  $desc = $collectedClasses.TemplateBindExtension_bootstrap__bootstrap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateBindExtension_bootstrap__bootstrap.prototype = $desc;
  function closure2() {
  }
  closure2.builtin$cls = "closure2";
  if (!"name" in closure2)
    closure2.name = "closure2";
  $desc = $collectedClasses.closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure2.prototype = $desc;
  function _TemplateBinding(_ext, _template_binding$_model, property, path) {
    this._ext = _ext;
    this._template_binding$_model = _template_binding$_model;
    this.property = property;
    this.path = path;
  }
  _TemplateBinding.builtin$cls = "_TemplateBinding";
  if (!"name" in _TemplateBinding)
    _TemplateBinding.name = "_TemplateBinding";
  $desc = $collectedClasses._TemplateBinding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplateBinding.prototype = $desc;
  _TemplateBinding.prototype.get$path = function(receiver) {
    return this.path;
  };
  function _parseAttributeBindings_closure(box_0, element_1, delegate_2, isTemplateNode_3) {
    this.box_0 = box_0;
    this.element_1 = element_1;
    this.delegate_2 = delegate_2;
    this.isTemplateNode_3 = isTemplateNode_3;
  }
  _parseAttributeBindings_closure.builtin$cls = "_parseAttributeBindings_closure";
  if (!"name" in _parseAttributeBindings_closure)
    _parseAttributeBindings_closure.name = "_parseAttributeBindings_closure";
  $desc = $collectedClasses._parseAttributeBindings_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _parseAttributeBindings_closure.prototype = $desc;
  function _MustacheTokens(tokens, _combinator) {
    this.tokens = tokens;
    this._combinator = _combinator;
  }
  _MustacheTokens.builtin$cls = "_MustacheTokens";
  if (!"name" in _MustacheTokens)
    _MustacheTokens.name = "_MustacheTokens";
  $desc = $collectedClasses._MustacheTokens;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MustacheTokens.prototype = $desc;
  _MustacheTokens.prototype.get$tokens = function() {
    return this.tokens;
  };
  function _TemplateIterator(_templateExt, terminators, iteratedValue, closed, depsChanging, hasRepeat, hasBind, hasIf, repeatModel, bindModel, ifModel, repeatPath, bindPath, ifPath, _valueSub, _listSub, _initPrepareFunctions, _instanceModelFn, _instancePositionChangedFn) {
    this._templateExt = _templateExt;
    this.terminators = terminators;
    this.iteratedValue = iteratedValue;
    this.closed = closed;
    this.depsChanging = depsChanging;
    this.hasRepeat = hasRepeat;
    this.hasBind = hasBind;
    this.hasIf = hasIf;
    this.repeatModel = repeatModel;
    this.bindModel = bindModel;
    this.ifModel = ifModel;
    this.repeatPath = repeatPath;
    this.bindPath = bindPath;
    this.ifPath = ifPath;
    this._valueSub = _valueSub;
    this._listSub = _listSub;
    this._initPrepareFunctions = _initPrepareFunctions;
    this._instanceModelFn = _instanceModelFn;
    this._instancePositionChangedFn = _instancePositionChangedFn;
  }
  _TemplateIterator.builtin$cls = "_TemplateIterator";
  if (!"name" in _TemplateIterator)
    _TemplateIterator.name = "_TemplateIterator";
  $desc = $collectedClasses._TemplateIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplateIterator.prototype = $desc;
  function _TemplateIterator_resolve_closure() {
  }
  _TemplateIterator_resolve_closure.builtin$cls = "_TemplateIterator_resolve_closure";
  if (!"name" in _TemplateIterator_resolve_closure)
    _TemplateIterator_resolve_closure.name = "_TemplateIterator_resolve_closure";
  $desc = $collectedClasses._TemplateIterator_resolve_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplateIterator_resolve_closure.prototype = $desc;
  function _TemplateIterator_resolve_valueFn(isRepeat_0) {
    this.isRepeat_0 = isRepeat_0;
  }
  _TemplateIterator_resolve_valueFn.builtin$cls = "_TemplateIterator_resolve_valueFn";
  if (!"name" in _TemplateIterator_resolve_valueFn)
    _TemplateIterator_resolve_valueFn.name = "_TemplateIterator_resolve_valueFn";
  $desc = $collectedClasses._TemplateIterator_resolve_valueFn;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplateIterator_resolve_valueFn.prototype = $desc;
  function _TemplateIterator_resolve_closure0(this_1) {
    this.this_1 = this_1;
  }
  _TemplateIterator_resolve_closure0.builtin$cls = "_TemplateIterator_resolve_closure0";
  if (!"name" in _TemplateIterator_resolve_closure0)
    _TemplateIterator_resolve_closure0.name = "_TemplateIterator_resolve_closure0";
  $desc = $collectedClasses._TemplateIterator_resolve_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplateIterator_resolve_closure0.prototype = $desc;
  function _BoundNodes(nodes, bound) {
    this.nodes = nodes;
    this.bound = bound;
  }
  _BoundNodes.builtin$cls = "_BoundNodes";
  if (!"name" in _BoundNodes)
    _BoundNodes.name = "_BoundNodes";
  $desc = $collectedClasses._BoundNodes;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BoundNodes.prototype = $desc;
  _BoundNodes.prototype.get$nodes = function(receiver) {
    return this.nodes;
  };
  _BoundNodes.prototype.get$bound = function(receiver) {
    return this.bound;
  };
  function _TextExtension(_node, _bindings, _templateInstance) {
    this._node = _node;
    this._bindings = _bindings;
    this._templateInstance = _templateInstance;
  }
  _TextExtension.builtin$cls = "_TextExtension";
  if (!"name" in _TextExtension)
    _TextExtension.name = "_TextExtension";
  $desc = $collectedClasses._TextExtension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TextExtension.prototype = $desc;
  function _TextBinding(_node_binding$_node, _model, _observer, _pathSub, property, path) {
    this._node_binding$_node = _node_binding$_node;
    this._model = _model;
    this._observer = _observer;
    this._pathSub = _pathSub;
    this.property = property;
    this.path = path;
  }
  _TextBinding.builtin$cls = "_TextBinding";
  if (!"name" in _TextBinding)
    _TextBinding.name = "_TextBinding";
  $desc = $collectedClasses._TextBinding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TextBinding.prototype = $desc;
  function _TextAreaElementExtension(_node, _bindings, _templateInstance) {
    this._node = _node;
    this._bindings = _bindings;
    this._templateInstance = _templateInstance;
  }
  _TextAreaElementExtension.builtin$cls = "_TextAreaElementExtension";
  if (!"name" in _TextAreaElementExtension)
    _TextAreaElementExtension.name = "_TextAreaElementExtension";
  $desc = $collectedClasses._TextAreaElementExtension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TextAreaElementExtension.prototype = $desc;
  function BindingDelegate() {
  }
  BindingDelegate.builtin$cls = "BindingDelegate";
  if (!"name" in BindingDelegate)
    BindingDelegate.name = "BindingDelegate";
  $desc = $collectedClasses.BindingDelegate;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BindingDelegate.prototype = $desc;
  function NodeBinding(_node_binding$_node, path) {
    this._node_binding$_node = _node_binding$_node;
    this.path = path;
  }
  NodeBinding.builtin$cls = "NodeBinding";
  if (!"name" in NodeBinding)
    NodeBinding.name = "NodeBinding";
  $desc = $collectedClasses.NodeBinding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeBinding.prototype = $desc;
  NodeBinding.prototype.get$_node_binding$_node = function() {
    return this._node_binding$_node;
  };
  NodeBinding.prototype.get$path = function(receiver) {
    return this.path;
  };
  function NodeBinding_closure(this_0) {
    this.this_0 = this_0;
  }
  NodeBinding_closure.builtin$cls = "NodeBinding_closure";
  if (!"name" in NodeBinding_closure)
    NodeBinding_closure.name = "NodeBinding_closure";
  $desc = $collectedClasses.NodeBinding_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeBinding_closure.prototype = $desc;
  function TypedefElement(_item, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._item = _item;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  TypedefElement.builtin$cls = "TypedefElement";
  if (!"name" in TypedefElement)
    TypedefElement.name = "TypedefElement";
  $desc = $collectedClasses.TypedefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedefElement.prototype = $desc;
  function TypedefElement_name_closure(this_0) {
    this.this_0 = this_0;
  }
  TypedefElement_name_closure.builtin$cls = "TypedefElement_name_closure";
  if (!"name" in TypedefElement_name_closure)
    TypedefElement_name_closure.name = "TypedefElement_name_closure";
  $desc = $collectedClasses.TypedefElement_name_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedefElement_name_closure.prototype = $desc;
  function TypedefElement_location_closure(this_0) {
    this.this_0 = this_0;
  }
  TypedefElement_location_closure.builtin$cls = "TypedefElement_location_closure";
  if (!"name" in TypedefElement_location_closure)
    TypedefElement_location_closure.name = "TypedefElement_location_closure";
  $desc = $collectedClasses.TypedefElement_location_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedefElement_location_closure.prototype = $desc;
  function TypedefElement_simpleType_closure(this_0) {
    this.this_0 = this_0;
  }
  TypedefElement_simpleType_closure.builtin$cls = "TypedefElement_simpleType_closure";
  if (!"name" in TypedefElement_simpleType_closure)
    TypedefElement_simpleType_closure.name = "TypedefElement_simpleType_closure";
  $desc = $collectedClasses.TypedefElement_simpleType_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedefElement_simpleType_closure.prototype = $desc;
  function TypedefElement_parameters_closure(this_0) {
    this.this_0 = this_0;
  }
  TypedefElement_parameters_closure.builtin$cls = "TypedefElement_parameters_closure";
  if (!"name" in TypedefElement_parameters_closure)
    TypedefElement_parameters_closure.name = "TypedefElement_parameters_closure";
  $desc = $collectedClasses.TypedefElement_parameters_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedefElement_parameters_closure.prototype = $desc;
  function TypedefElement_required_closure() {
  }
  TypedefElement_required_closure.builtin$cls = "TypedefElement_required_closure";
  if (!"name" in TypedefElement_required_closure)
    TypedefElement_required_closure.name = "TypedefElement_required_closure";
  $desc = $collectedClasses.TypedefElement_required_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedefElement_required_closure.prototype = $desc;
  function TypedefElement_optional_closure() {
  }
  TypedefElement_optional_closure.builtin$cls = "TypedefElement_optional_closure";
  if (!"name" in TypedefElement_optional_closure)
    TypedefElement_optional_closure.name = "TypedefElement_optional_closure";
  $desc = $collectedClasses.TypedefElement_optional_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedefElement_optional_closure.prototype = $desc;
  function TypedefElement_annotations_closure(this_0) {
    this.this_0 = this_0;
  }
  TypedefElement_annotations_closure.builtin$cls = "TypedefElement_annotations_closure";
  if (!"name" in TypedefElement_annotations_closure)
    TypedefElement_annotations_closure.name = "TypedefElement_annotations_closure";
  $desc = $collectedClasses.TypedefElement_annotations_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedefElement_annotations_closure.prototype = $desc;
  function UnmodifiableMapView0(_unmodifiable_collection$_source) {
    this._unmodifiable_collection$_source = _unmodifiable_collection$_source;
  }
  UnmodifiableMapView0.builtin$cls = "UnmodifiableMapView0";
  if (!"name" in UnmodifiableMapView0)
    UnmodifiableMapView0.name = "UnmodifiableMapView0";
  $desc = $collectedClasses.UnmodifiableMapView0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableMapView0.prototype = $desc;
  function hashCodeFor_closure(obj_0) {
    this.obj_0 = obj_0;
  }
  hashCodeFor_closure.builtin$cls = "hashCodeFor_closure";
  if (!"name" in hashCodeFor_closure)
    hashCodeFor_closure.name = "hashCodeFor_closure";
  $desc = $collectedClasses.hashCodeFor_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  hashCodeFor_closure.prototype = $desc;
  function VariableElement(_member$__$inheritedFrom, _member$__$commentFrom, _changes, _records, _item, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._member$__$inheritedFrom = _member$__$inheritedFrom;
    this._member$__$commentFrom = _member$__$commentFrom;
    this._changes = _changes;
    this._records = _records;
    this._item = _item;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  VariableElement.builtin$cls = "VariableElement";
  if (!"name" in VariableElement)
    VariableElement.name = "VariableElement";
  $desc = $collectedClasses.VariableElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VariableElement.prototype = $desc;
  function VariableHeading(_item, _cachedMirror, _pathname, _changes, _records, _declaration, _observers, _unbound, _unbindAllJob, _propertyObserver, syntax, _shadowRoots, $$) {
    this._item = _item;
    this._cachedMirror = _cachedMirror;
    this._pathname = _pathname;
    this._changes = _changes;
    this._records = _records;
    this._declaration = _declaration;
    this._observers = _observers;
    this._unbound = _unbound;
    this._unbindAllJob = _unbindAllJob;
    this._propertyObserver = _propertyObserver;
    this.syntax = syntax;
    this._shadowRoots = _shadowRoots;
    this.$$ = $$;
  }
  VariableHeading.builtin$cls = "VariableHeading";
  if (!"name" in VariableHeading)
    VariableHeading.name = "VariableHeading";
  $desc = $collectedClasses.VariableHeading;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VariableHeading.prototype = $desc;
  function Visitor() {
  }
  Visitor.builtin$cls = "Visitor";
  if (!"name" in Visitor)
    Visitor.name = "Visitor";
  $desc = $collectedClasses.Visitor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Visitor.prototype = $desc;
  function Visitor_visitSequence_closure(this_0) {
    this.this_0 = this_0;
  }
  Visitor_visitSequence_closure.builtin$cls = "Visitor_visitSequence_closure";
  if (!"name" in Visitor_visitSequence_closure)
    Visitor_visitSequence_closure.name = "Visitor_visitSequence_closure";
  $desc = $collectedClasses.Visitor_visitSequence_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Visitor_visitSequence_closure.prototype = $desc;
  function loadYamlStream_closure() {
  }
  loadYamlStream_closure.builtin$cls = "loadYamlStream_closure";
  if (!"name" in loadYamlStream_closure)
    loadYamlStream_closure.name = "loadYamlStream_closure";
  $desc = $collectedClasses.loadYamlStream_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  loadYamlStream_closure.prototype = $desc;
  function YamlException(_msg) {
    this._msg = _msg;
  }
  YamlException.builtin$cls = "YamlException";
  if (!"name" in YamlException)
    YamlException.name = "YamlException";
  $desc = $collectedClasses.YamlException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  YamlException.prototype = $desc;
  function YamlMap(_yaml_map$_map) {
    this._yaml_map$_map = _yaml_map$_map;
  }
  YamlMap.builtin$cls = "YamlMap";
  if (!"name" in YamlMap)
    YamlMap.name = "YamlMap";
  $desc = $collectedClasses.YamlMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  YamlMap.prototype = $desc;
  function YamlMap_addAll_closure(this_0) {
    this.this_0 = this_0;
  }
  YamlMap_addAll_closure.builtin$cls = "YamlMap_addAll_closure";
  if (!"name" in YamlMap_addAll_closure)
    YamlMap_addAll_closure.name = "YamlMap_addAll_closure";
  $desc = $collectedClasses.YamlMap_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  YamlMap_addAll_closure.prototype = $desc;
  function YamlMap_forEach_closure(this_0, f_1) {
    this.this_0 = this_0;
    this.f_1 = f_1;
  }
  YamlMap_forEach_closure.builtin$cls = "YamlMap_forEach_closure";
  if (!"name" in YamlMap_forEach_closure)
    YamlMap_forEach_closure.name = "YamlMap_forEach_closure";
  $desc = $collectedClasses.YamlMap_forEach_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  YamlMap_forEach_closure.prototype = $desc;
  function _WrappedHashKey(value) {
    this.value = value;
  }
  _WrappedHashKey.builtin$cls = "_WrappedHashKey";
  if (!"name" in _WrappedHashKey)
    _WrappedHashKey.name = "_WrappedHashKey";
  $desc = $collectedClasses._WrappedHashKey;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WrappedHashKey.prototype = $desc;
  _WrappedHashKey.prototype.get$value = function(receiver) {
    return this.value;
  };
  function Closure$2(call$2, $name) {
    this.call$2 = call$2;
    this.$name = $name;
  }
  Closure$2.builtin$cls = "Closure$2";
  $desc = $collectedClasses.Closure$2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$2.prototype = $desc;
  function Closure$1(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  }
  Closure$1.builtin$cls = "Closure$1";
  $desc = $collectedClasses.Closure$1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$1.prototype = $desc;
  function Closure$0(call$0, $name) {
    this.call$0 = call$0;
    this.$name = $name;
  }
  Closure$0.builtin$cls = "Closure$0";
  $desc = $collectedClasses.Closure$0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$0.prototype = $desc;
  function Closure$7(call$7, $name) {
    this.call$7 = call$7;
    this.$name = $name;
  }
  Closure$7.builtin$cls = "Closure$7";
  $desc = $collectedClasses.Closure$7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$7.prototype = $desc;
  function Closure$21(call$2, $name) {
    this.call$2 = call$2;
    this.$name = $name;
  }
  Closure$21.builtin$cls = "Closure$21";
  $desc = $collectedClasses.Closure$21;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$21.prototype = $desc;
  function Closure$5(call$5, $name) {
    this.call$5 = call$5;
    this.$name = $name;
  }
  Closure$5.builtin$cls = "Closure$5";
  $desc = $collectedClasses.Closure$5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$5.prototype = $desc;
  function Closure$4(call$4, $name) {
    this.call$4 = call$4;
    this.$name = $name;
  }
  Closure$4.builtin$cls = "Closure$4";
  $desc = $collectedClasses.Closure$4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$4.prototype = $desc;
  function Closure$6(call$6, $name) {
    this.call$6 = call$6;
    this.$name = $name;
  }
  Closure$6.builtin$cls = "Closure$6";
  $desc = $collectedClasses.Closure$6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$6.prototype = $desc;
  function Closure$3(call$3$onError$radix, $name) {
    this.call$3$onError$radix = call$3$onError$radix;
    this.$name = $name;
  }
  Closure$3.builtin$cls = "Closure$3";
  $desc = $collectedClasses.Closure$3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$3.prototype = $desc;
  return [HtmlElement, _EntryArray, AnchorElement, AnimationEvent, AreaElement, AudioElement, AutocompleteErrorEvent, BRElement, BaseElement, BeforeLoadEvent, BeforeUnloadEvent, Blob, BodyElement, ButtonElement, CDataSection, CanvasElement, CharacterData, CloseEvent, Comment, CompositionEvent, ContentElement, CssFontFaceLoadEvent, CssStyleDeclaration, BoundClosure$i1, CustomEvent, DListElement, DataListElement, DetailsElement, DeviceMotionEvent, DeviceOrientationEvent, DialogElement, DivElement, Document, DocumentFragment, DocumentType, DomError, DomException, DomImplementation, Element, EmbedElement, ErrorEvent, Event, EventTarget, FieldSetElement, File, FileError, FocusEvent, FormElement, HRElement, HashChangeEvent, HeadElement, HeadingElement, History, HtmlCollection, HtmlDocument, HtmlFormControlsCollection, HtmlHtmlElement, HtmlOptionsCollection, HttpRequest, HttpRequestEventTarget, IFrameElement, ImageData, ImageElement, InputElement, KeyboardEvent, KeygenElement, LIElement, LabelElement, LegendElement, LinkElement, Location, MapElement, MediaElement, MediaError, MediaKeyError, MediaKeyEvent, MediaKeyMessageEvent, MediaKeyNeededEvent, MediaStream, MediaStreamEvent, MediaStreamTrackEvent, MenuElement, MessageEvent, MetaElement, MeterElement, MidiConnectionEvent, MidiInput, MidiMessageEvent, MidiOutput, MidiPort, ModElement, MouseEvent, Navigator, NavigatorUserMediaError, Node, NodeList, OListElement, ObjectElement, OptGroupElement, OptionElement, OutputElement, OverflowEvent, PageTransitionEvent, ParagraphElement, ParamElement, PopStateEvent, PositionError, PreElement, ProcessingInstruction, ProgressElement, ProgressEvent, QuoteElement, Range, ResourceProgressEvent, RtcDataChannelEvent, RtcDtmfToneChangeEvent, RtcIceCandidateEvent, ScriptElement, SecurityPolicyViolationEvent, SelectElement, ShadowElement, ShadowRoot, SourceElement, SpanElement, SpeechInputEvent, SpeechInputResult, SpeechRecognitionAlternative, SpeechRecognitionError, SpeechRecognitionEvent, SpeechRecognitionResult, SpeechSynthesisEvent, StorageEvent, StyleElement, TableCaptionElement, TableCellElement, TableColElement, TableElement, TableRowElement, TableSectionElement, TemplateElement, Text, TextAreaElement, TextEvent, TitleElement, TouchEvent, TrackElement, TrackEvent, TransitionEvent, UIEvent, UListElement, UnknownElement, VideoElement, WheelEvent, Window, _Attr, _Entity, _HTMLAppletElement, _HTMLBaseFontElement, _HTMLDirectoryElement, _HTMLFontElement, _HTMLFrameElement, _HTMLFrameSetElement, _HTMLMarqueeElement, _MutationEvent, _NamedNodeMap, _Notation, _SpeechInputResultList, _SpeechRecognitionResultList, _XMLHttpRequestProgressEvent, KeyRange, VersionChangeEvent, AElement, AltGlyphElement, AnimateElement, AnimateMotionElement, AnimateTransformElement, AnimatedEnumeration, AnimatedLength, AnimatedLengthList, AnimatedNumber, AnimatedNumberList, AnimatedString, AnimationElement, CircleElement, ClipPathElement, DefsElement, DescElement, EllipseElement, FEBlendElement, FEColorMatrixElement, FEComponentTransferElement, FECompositeElement, FEConvolveMatrixElement, FEDiffuseLightingElement, FEDisplacementMapElement, FEDistantLightElement, FEFloodElement, FEFuncAElement, FEFuncBElement, FEFuncGElement, FEFuncRElement, FEGaussianBlurElement, FEImageElement, FEMergeElement, FEMergeNodeElement, FEMorphologyElement, FEOffsetElement, FEPointLightElement, FESpecularLightingElement, FESpotLightElement, FETileElement, FETurbulenceElement, FilterElement, ForeignObjectElement, GElement, GraphicsElement, ImageElement0, LineElement, LinearGradientElement, MarkerElement, MaskElement, MetadataElement, PathElement, PatternElement, PolygonElement, PolylineElement, RadialGradientElement, RectElement, ScriptElement0, SetElement, StopElement, StyleElement0, SvgDocument, SvgElement, SvgSvgElement, SwitchElement, SymbolElement, TSpanElement, TextContentElement, TextElement, TextPathElement, TextPositioningElement, TitleElement0, UseElement, ViewElement, ZoomEvent, _GradientElement, _SVGAltGlyphDefElement, _SVGAltGlyphItemElement, _SVGAnimateColorElement, _SVGComponentTransferFunctionElement, _SVGCursorElement, _SVGFEDropShadowElement, _SVGFontElement, _SVGFontFaceElement, _SVGFontFaceFormatElement, _SVGFontFaceNameElement, _SVGFontFaceSrcElement, _SVGFontFaceUriElement, _SVGGlyphElement, _SVGGlyphRefElement, _SVGHKernElement, _SVGMPathElement, _SVGMissingGlyphElement, _SVGVKernElement, AudioProcessingEvent, OfflineAudioCompletionEvent, ContextEvent, SqlError, TypedData, ByteData, Float32List, Float64List, Int16List, Int32List, Int8List, Uint16List, Uint32List, Uint8ClampedList, Uint8List, JS_CONST, Interceptor, JSBool, JSNull, JavaScriptObject, PlainJavaScriptObject, UnknownJavaScriptObject, JSArray, JSMutableArray, JSFixedArray, JSExtendableArray, JSNumber, JSInt, JSDouble, JSString, _CodeUnits, startRootIsolate_closure, startRootIsolate_closure0, _Manager, _IsolateContext, _EventLoop, _EventLoop__runHelper_next, _IsolateEvent, _MainManagerStub, IsolateNatives__processWorkerMessage_closure, _BaseSendPort, _NativeJsSendPort, _NativeJsSendPort_send_closure, _NativeJsSendPort_send__closure, _WorkerSendPort, _WorkerSendPort_send_closure, ReceivePortImpl, BoundClosure$i0, _waitForPendingPorts_closure, _PendingSendPortFinder, _JsSerializer, _JsCopier, _JsDeserializer, _JsVisitedMap, _MessageTraverserVisitedMap, _MessageTraverser, BoundClosure$1, _Copier, _Copier_visitMap_closure, _Serializer, _Deserializer, TimerImpl, TimerImpl_internalCallback, TimerImpl_internalCallback0, ConstantMap, ConstantStringMap, ConstantStringMap_containsValue_closure, ConstantStringMap_forEach_closure, ConstantStringMap_values_closure, _ConstantMapKeyIterable, JSInvocationMirror, CachedInvocation, CachedNoSuchMethodInvocation, Primitives_applyFunction_closure, Primitives_applyFunction_closure0, Primitives_applyFunction_closure1, TypeErrorDecoder, NullError, JsNoSuchMethodError, UnknownJsTypeError, unwrapException_saveStackTrace, _StackTrace, invokeClosure_closure, invokeClosure_closure0, invokeClosure_closure1, invokeClosure_closure2, invokeClosure_closure3, Closure, BoundClosure, Creates, Returns, JSName, CastErrorImplementation, RuntimeError, TypeImpl, TypeVariable, initHooks_closure, initHooks_closure0, initHooks_closure1, JSSyntaxRegExp, _MatchImplementation, _AllMatchesIterable, _AllMatchesIterator, StringMatch, AnnotationElement, AnnotationElement_annotations_closure, CategoryElement, CategoryElement$created_closure, CategoryElement$created_closure0, CategoryElement_addChildren_closure, CategoryElement_category_closure, CategoryElement_categoryMethods_closure, CategoryElement_categoryVariables_closure, CategoryElement_categoryEverythingElse_closure, Container, Category, Category_memberNamed_closure, Category$forClasses_closure, Category$forVariables_closure, Category$forVariables_closure0, Category$forVariables_closure1, Category$forFunctions_closure, Category$forTypedefs_closure, Category_addInheritedItem_closure, Item, _sort_closure, _sort__closure, Home, Home_closure, Home__closure1, Home_closure0, Home__closure, Home__closure0, Home_makeMainLibrarySpecial_closure, Home_makeMainLibrarySpecial_closure0, Home_memberNamed_closure, LazyItem, LazyItem_load_closure, Library, Library_addToHierarchy_closure, Library_addToHierarchy__closure, Class, Class_addToHierarchy_closure, Class_addToHierarchy__closure, Class_loadValues_closure, Class_loadValues_closure0, Class_loadValues_closure1, Class__addVariable_closure, Class__addMethod_closure, AnnotationGroup, AnnotationGroup_closure, Annotation, Parameterized, Parameterized_getParameters_closure, Typedef, Method, Parameter, Variable, NestedType, NestedType_closure, LinkableType, ClassElement, ClassElement$created_closure, ClassElement_makeLinks_closure, Composer, Constructor, Constructor_visitMapping_closure, closure, ListIterable, SubListIterable, ListIterator, MappedIterable, EfficientLengthMappedIterable, MappedIterator, MappedListIterable, WhereIterable, WhereIterator, ExpandIterable, ExpandIterator, TakeIterable, EfficientLengthTakeIterable, TakeIterator, TakeWhileIterable, TakeWhileIterator, SkipIterable, EfficientLengthSkipIterable, SkipIterator, EmptyIterator, FixedLengthListMixin, UnmodifiableListMixin, UnmodifiableListBase, ReversedListIterable, Symbol0, JsMirrorSystem, JsMirrorSystem_computeLibrariesByName_closure, JsMirror, JsIsolateMirror, JsIsolateMirror_rootLibrary_closure, JsDeclarationMirror, JsTypeVariableMirror, JsTypeMirror, JsLibraryMirror, JsDeclarationMirror_JsObjectMirror, JsLibraryMirror_members_addToResult, JsLibraryMirror_declarations_addToResult, filterMembers_closure, JsMixinApplication, JsTypeMirror_JsObjectMirror, JsObjectMirror, JsInstanceMirror, JsInstanceMirror_invoke_closure, JsInstanceMirror_invoke_closure0, JsTypeBoundClassMirror, JsTypeBoundClassMirror_typeArguments_addTypeArgument, JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure, JsTypeBoundClassMirror_typeArguments_closure, JsTypeBoundClassMirror_declarations_closure, JsClassMirror, JsTypeMirror_JsObjectMirror0, JsClassMirror_declarations_addToResult, JsClassMirror_declarations_closure, JsClassMirror__getSuperinterfacesWithOwner_lookupType, JsVariableMirror, JsClosureMirror, JsMethodMirror, JsParameterMirror, JsTypedefMirror, JsFunctionTypeMirror, typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable, extractMetadata_closure, UnmodifiableMapView, UnimplementedNoSuchMethodError, computeReflectiveNames_closure, _AsyncError, _BroadcastStream, _BroadcastSubscription, BoundClosure$0, _BroadcastStreamController, BoundClosure$2, _SyncBroadcastStreamController, _SyncBroadcastStreamController__sendData_closure, _SyncBroadcastStreamController__sendError_closure, _SyncBroadcastStreamController__sendDone_closure, _AsyncBroadcastStreamController, Future, Future_wait_handleError, Future_wait_closure, _Completer, _AsyncCompleter, _Future, _Future__addListener_closure, _Future__chainFutures_closure, _Future__chainFutures_closure0, _Future__asyncComplete_closure, _Future__asyncCompleteError_closure, _Future__propagateToListeners_closure, _Future__propagateToListeners_closure0, _Future__propagateToListeners__closure, _Future__propagateToListeners__closure0, Stream, Stream_join_closure, Stream_join_closure1, Stream_join_closure0, Stream_contains_closure, Stream_contains__closure, Stream_contains__closure0, Stream_contains_closure0, Stream_forEach_closure, Stream_forEach__closure, Stream_forEach__closure0, Stream_forEach_closure0, Stream_any_closure, Stream_any__closure, Stream_any__closure0, Stream_any_closure0, Stream_length_closure, Stream_length_closure0, Stream_isEmpty_closure, Stream_isEmpty_closure0, Stream_toList_closure, Stream_toList_closure0, Stream_first_closure, Stream_first_closure0, Stream_last_closure, Stream_last_closure0, Stream_firstWhere_closure, Stream_firstWhere__closure, Stream_firstWhere__closure0, Stream_firstWhere_closure0, Stream_elementAt_closure, Stream_elementAt_closure0, StreamSubscription, _StreamController, _StreamController__subscribe_closure, _StreamController__recordCancel_complete, _SyncStreamControllerDispatch, _AsyncStreamControllerDispatch, _AsyncStreamController, _StreamController__AsyncStreamControllerDispatch, _SyncStreamController, _StreamController__SyncStreamControllerDispatch, _ControllerStream, _ControllerSubscription, _EventSink, _BufferingStreamSubscription, _BufferingStreamSubscription__sendError_sendError, _BufferingStreamSubscription__sendDone_sendDone, _StreamImpl, _DelayedEvent, _DelayedData, _DelayedError, _DelayedDone, _PendingEvents, _PendingEvents_schedule_closure, _StreamImplEvents, _cancelAndError_closure, _cancelAndErrorClosure_closure, _cancelAndValue_closure, _ForwardingStream, _ForwardingStreamSubscription, BoundClosure$20, _WhereStream, _MapStream, _TakeStream, _SkipStream, Timer, ZoneSpecification, _ZoneSpecification, ZoneDelegate, Zone, _ZoneDelegate, _BaseZone, _BaseZone_bindCallback_closure, _BaseZone_bindCallback_closure0, _BaseZone_bindUnaryCallback_closure, _BaseZone_bindUnaryCallback_closure0, _CustomizedZone, _rootHandleUncaughtError_closure, _rootHandleUncaughtError__closure, _rootFork_closure, _RootZoneSpecification, _RootZone, _HashMap, _HashMap_values_closure, _HashMap_containsValue_closure, _HashMap_addAll_closure, _CustomHashMap, _CustomHashMap_closure, HashMapKeyIterable, HashMapKeyIterator, _LinkedHashMap, _LinkedHashMap_values_closure, _LinkedHashMap_containsValue_closure, _LinkedHashMap_addAll_closure, _LinkedIdentityHashMap, _LinkedCustomHashMap, _LinkedCustomHashMap_closure, LinkedHashMapCell, LinkedHashMapKeyIterable, LinkedHashMapKeyIterator, _HashSet, _IdentityHashSet, HashSetIterator, _LinkedHashSet, LinkedHashSetCell, LinkedHashSetIterator, UnmodifiableListView, _HashSetBase, IterableBase, ListBase, ListMixin, Maps_mapToString_closure, ListQueue, _ListQueueIterator, _convertJsonToDart_closure, _convertJsonToDart_walk, Codec, Converter, Encoding, JsonCodec, JsonDecoder, Utf8Codec, Utf8Encoder, _Utf8Encoder, Utf8Decoder, _Utf8Decoder, Function__toMangledNames_closure, NoSuchMethodError_toString_closure, Deprecated, bool, Comparable, DateTime, DateTime_parse_parseIntOrZero, DateTime_parse_parseDoubleOrZero, DateTime_toString_fourDigits, DateTime_toString_threeDigits, DateTime_toString_twoDigits, Duration, Duration_toString_sixDigits, Duration_toString_twoDigits, Error, NullThrownError, ArgumentError, RangeError, NoSuchMethodError, UnsupportedError, UnimplementedError, StateError, ConcurrentModificationError, StackOverflowError, CyclicInitializationError, _ExceptionImplementation, FormatException, IntegerDivisionByZeroException, Expando, Function, Iterable, Iterator, Map, Null, Object, Match, StackTrace, Stopwatch, RuneIterator, StringBuffer, Symbol, Type, Uri, Uri__makeScheme_isSchemeLowerCharacter, Uri__makeScheme_isSchemeCharacter, Uri__makePath_closure, Uri__makeQuery_closure, Uri__normalize_isNormalizedHexDigit, Uri__normalize_isLowerCaseHexDigit, Uri__normalize_isUnreserved, Uri__normalize_normalizeHexDigit, Uri__normalize_decodeHexDigitPair, Uri__normalize_fillResult, Uri_hashCode_combine, Uri_parseIPv4Address_error, Uri_parseIPv4Address_closure, Uri_parseIPv6Address_error, Uri_parseIPv6Address_parseHex, Uri_parseIPv6Address_closure, Uri__uriEncode_byteToHex, Console, Interceptor_CssStyleDeclarationBase, CssStyleDeclarationBase, _ChildrenElementList, _FrozenElementList, _FrozenElementList$_wrap_closure, _FrozenElementList_classes_closure, Element_Element$html_closure, ScrollAlignment, Entry, Events, ElementEvents, Interceptor_ListMixin, Interceptor_ListMixin_ImmutableListMixin, HttpRequest_getString_closure, HttpRequest_request_closure0, HttpRequest_request_closure, _ChildNodeListLazy, Interceptor_ListMixin0, Interceptor_ListMixin_ImmutableListMixin0, Interceptor_ListMixin1, Interceptor_ListMixin_ImmutableListMixin1, Interceptor_ListMixin2, Interceptor_ListMixin_ImmutableListMixin2, Interceptor_ListMixin3, Interceptor_ListMixin_ImmutableListMixin3, _AttributeMap, _ElementAttributeMap, _DataAttributeMap, _DataAttributeMap_containsValue_closure, _DataAttributeMap_forEach_closure, _DataAttributeMap_keys_closure, _DataAttributeMap_values_closure, _MultiElementCssClassSet, _MultiElementCssClassSet_closure, _MultiElementCssClassSet_readClasses_closure, _MultiElementCssClassSet_modify_closure, _MultiElementCssClassSet_remove_closure, _MultiElementCssClassSet__modifyWithReturnValue_closure, _ElementCssClassSet, EventStreamProvider, _EventStream, _ElementEventStreamImpl, _ElementEventStreamImpl_matches_closure, _ElementEventStreamImpl_matches_closure0, _ElementListEventStreamImpl, _ElementListEventStreamImpl_matches_closure, _ElementListEventStreamImpl_matches_closure0, _EventStreamSubscription, _StreamPool, _StreamPool_add_closure, _CustomEventStreamProvider, _Html5NodeValidator, ImmutableListMixin, NodeValidatorBuilder, NodeValidatorBuilder_allowCustomElement_closure, NodeValidatorBuilder_allowCustomElement_closure0, NodeValidatorBuilder_allowTagExtension_closure, NodeValidatorBuilder_allowTagExtension_closure0, NodeValidatorBuilder_allowsElement_closure, NodeValidatorBuilder_allowsAttribute_closure, _SimpleNodeValidator, _CustomElementNodeValidator, _TemplatingNodeValidator, _TemplatingNodeValidator_closure, _SvgNodeValidator, FixedSizeListIterator, _callConstructor_closure, _DOMWindowCrossFrame, _LocationCrossFrame, _LocationWrapper, NodeValidator, _SameOriginUriPolicy, _ValidatingTreeSanitizer, _ValidatingTreeSanitizer_sanitizeTree_walk, _AttributeClassSet, ReceivePort, JsObject, JsFunction, JsArray, JsObject_ListMixin, _convertToJS_closure, _convertToJS_closure0, _wrapToDart_closure, _wrapToDart_closure0, _wrapToDart_closure1, Point, Mirror, DeclarationMirror, InstanceMirror, LibraryMirror, TypeMirror, ClassMirror, TypeVariableMirror, MethodMirror, VariableMirror, ParameterMirror, MirrorsUsed, TypedData_ListMixin, TypedData_ListMixin_FixedLengthListMixin, TypedData_ListMixin0, TypedData_ListMixin_FixedLengthListMixin0, TypedData_ListMixin1, TypedData_ListMixin_FixedLengthListMixin1, TypedData_ListMixin2, TypedData_ListMixin_FixedLengthListMixin2, TypedData_ListMixin3, TypedData_ListMixin_FixedLengthListMixin3, TypedData_ListMixin4, TypedData_ListMixin_FixedLengthListMixin4, TypedData_ListMixin5, TypedData_ListMixin_FixedLengthListMixin5, TypedData_ListMixin6, TypedData_ListMixin_FixedLengthListMixin6, TypedData_ListMixin7, TypedData_ListMixin_FixedLengthListMixin7, Int64List, Uint64List, Viewer, Viewer_libraries_closure, Viewer$__closure, Viewer$__closure0, Viewer__scrollScreen_closure, Viewer__scrollScreen_closure0, Viewer_queryEverywhere_closure, Viewer__loadAndUpdatePage_closure, Viewer__loadAndUpdatePage_closure0, Viewer_getItem_closure, Viewer_getItem_closure0, Viewer_getMember_closure, _init_closure, _init_closure0, _init__closure, concat_closure, HomeElement, HomeElement$created_closure, convertNativeToDart_AcceptStructuredClone_findSlot, convertNativeToDart_AcceptStructuredClone_readSlot, convertNativeToDart_AcceptStructuredClone_writeSlot, convertNativeToDart_AcceptStructuredClone_walk, CssClassSetImpl, CssClassSetImpl_add_closure, CssClassSetImpl_addAll_closure, CssClassSetImpl_clear_closure, FilteredElementList, FilteredElementList__filtered_closure, FilteredElementList_removeRange_closure, IndexElement, IndexElement_enteredView_closure, IndexElement_enteredView_closure0, IndexElement_enteredView_closure1, IndexElement_crumbs_closure, IndexElement_crumbs_closure0, IndexElement_buildIdentifier_closure, IndexElement_buildIdentifier_closure0, ItemElement, LibraryElement, LibraryPanel, LibraryPanel$created_closure, DocsLocation, DocsLocation__extractPieces__check, DocsLocation_componentNames_closure, DocsLocation_itemFromList_closure, Logger, Logger_Logger_closure, Level, LogRecord, SameProtocolUriPolicy, DartdocElement, DartdocElement_notifyObservables_closure, DartdocElement_notifyObservables_closure0, DartdocElement_concat_closure, DartdocElement_observableValues_closure, MemberElement, MemberElement_item_closure, MemberElement_createInner_closure, InheritedElement, MemberElement_ChangeNotifier, MethodElement, SupportedBrowser, Experimental, DomName, DocsEditable, Unstable, DartdocMethod, MethodPanel, MinimapElementClass, MinimapElementClass$created_closure, MinimapElementClass_shouldShowConstructors_closure, MinimapElementClass_shouldShowFunctions_closure, MinimapElementClass_shouldShowVariables_closure, MinimapElementClass_shouldShowStaticFunctions_closure, MinimapElementClass_shouldShowStaticVariables_closure, MinimapElementClass_shouldShowOperators_closure, MinimapElement, MinimapElement$created_closure, MinimapElement_items_closure, MinimapElement_itemsToShow_closure, MinimapElementLibrary, Tag, Node0, SequenceNode, SequenceNode_toString_closure, AliasNode, ScalarNode, ScalarNode_canonicalContent_closure, MappingNode, MappingNode_toString_closure, ChangeNotifier, ChangeRecord, PropertyChangeRecord, CompoundPathObserver, CompoundPathObserver__resolve_closure, dirtyCheckZoneSpec_enqueueDirtyCheck, dirtyCheckZoneSpec_enqueueDirtyCheck_closure, dirtyCheckZoneSpec_wrapCallback, dirtyCheckZoneSpec_wrapCallback_closure, dirtyCheckZoneSpec_wrapUnaryCallback, dirtyCheckZoneSpec_wrapUnaryCallback_closure, ListChangeRecord, ObservableProperty, Reflectable, Observable, Observable_deliverChanges_closure, ObservableBox, MapChangeRecord, ObservableMap, ObservableMap_addAll_closure, ObservableMap_clear_closure, PathObserver, PathObserver_closure, PathObserver_bindSync_closure, PathObserver__observeIndex_closure0, PathObserver__observeIndex_closure, closure0, PageElement, DartdocElement_ChangeNotifier, PageElement_enteredView_closure, PageElement_enteredView_closure0, ParameterElement, ParameterElement_parameters_closure, ParameterElement_required_closure, ParameterElement_optional_closure, ParameterElement_addParameters_closure, ParameterElement_addParameters__closure, Parser0, Parser_consumeChar_closure, Parser_nAtOnce_closure, Parser_nAtOnce__closure, Parser_rawString_closure, Parser_captureAs_closure, Parser_map_closure, Parser_annotateError_closure, Parser_blockScalarAdditionalIndentation_closure, Parser_blockScalarAdditionalIndentation__closure, Parser_blockScalarAdditionalIndentation___closure, Parser_c_indicator_closure, Parser_b_break_closure, Parser_b_asLineFeed_closure, Parser_b_nonContent_closure, Parser_c_escape_closure, Parser_ns_escNull_closure, Parser_ns_escBell_closure, Parser_ns_escBackspace_closure, Parser_ns_escHorizontalTab_closure, Parser_ns_escHorizontalTab__closure, Parser_ns_escLineFeed_closure, Parser_ns_escVerticalTab_closure, Parser_ns_escFormFeed_closure, Parser_ns_escCarriageReturn_closure, Parser_ns_escEscape_closure, Parser_ns_escNextLine_closure, Parser_ns_escNonBreakingSpace_closure, Parser_ns_escLineSeparator_closure, Parser_ns_escParagraphSeparator_closure, Parser_ns_escNBit_closure, Parser_ns_escNBit_closure0, Parser_ns_escNBit__closure, Parser_ns_escNBit_closure1, Parser_c_ns_escChar_closure, Parser_c_ns_escChar__closure, Parser_s_indent_closure, Parser_s_indent_closure0, Parser_s_indent__closure, Parser_s_indentLessThan_closure, Parser_s_separateInLine_closure, Parser_s_separateInLine__closure, Parser_s_separateInLine___closure, Parser_s_linePrefix_closure, Parser_s_flowLinePrefix_closure, Parser_l_empty_closure, Parser_l_empty__closure, Parser_l_empty__closure0, Parser_b_asSpace_closure, Parser_b_l_trimmed_closure, Parser_b_l_trimmed__closure, Parser_b_l_trimmed___closure, Parser_b_l_folded_closure, Parser_s_flowFolded_closure, Parser_c_nb_commentText_closure, Parser_l_comment_closure, Parser_s_separateLines_closure, Parser_c_ns_properties_closure, Parser_c_ns_properties_closure0, Parser_ns_anchorName_closure, Parser_ns_anchorName__closure, Parser_nb_doubleChar_closure, Parser_nb_doubleChar__closure, Parser_c_doubleQuoted_closure, Parser_c_doubleQuoted__closure, Parser_nb_doubleText_closure, Parser_s_doubleEscaped_closure, Parser_s_doubleEscaped__closure, Parser_s_doubleEscaped__closure0, Parser_s_doubleEscaped__closure1, Parser_s_doubleEscaped___closure, Parser_s_doubleBreak_closure, Parser_s_doubleBreak_closure0, Parser_nb_ns_doubleInLine_closure, Parser_nb_ns_doubleInLine__closure, Parser_nb_ns_doubleInLine___closure, Parser_s_doubleNextLine_closure, Parser_s_doubleNextLine__closure, Parser_s_doubleNextLine__closure0, Parser_s_doubleNextLine___closure, Parser_nb_doubleMultiLine_closure, Parser_nb_doubleMultiLine_closure0, Parser_nb_doubleMultiLine__closure, Parser_c_quotedQuote_closure, Parser_nb_singleChar_closure, Parser_nb_singleChar__closure, Parser_c_singleQuoted_closure, Parser_c_singleQuoted__closure, Parser_nb_singleText_closure, Parser_nb_ns_singleInLine_closure, Parser_nb_ns_singleInLine__closure, Parser_nb_ns_singleInLine___closure, Parser_s_singleNextLine_closure, Parser_s_singleNextLine__closure, Parser_s_singleNextLine__closure0, Parser_s_singleNextLine___closure, Parser_nb_singleMultiLine_closure, Parser_nb_singleMultiLine_closure0, Parser_nb_singleMultiLine__closure, Parser_ns_plain_closure, Parser_ns_plain__closure, Parser_nb_ns_plainInLine_closure, Parser_nb_ns_plainInLine__closure, Parser_nb_ns_plainInLine___closure, Parser_s_ns_plainNextLine_closure, Parser_ns_plainMultiLine_closure, Parser_c_flowSequence_closure, Parser_c_flowSequence__closure, Parser_c_flowSequence__closure0, Parser_ns_s_flowSeqEntries_closure, Parser_ns_s_flowSeqEntries_closure0, Parser_ns_s_flowSeqEntries_closure1, Parser_ns_flowSeqEntry_closure, Parser_ns_flowSeqEntry_closure0, Parser_c_flowMapping_closure, Parser_c_flowMapping_closure0, Parser_ns_s_flowMapEntries_closure, Parser_ns_s_flowMapEntries_closure0, Parser_ns_flowMapEntry_closure, Parser_ns_flowMapEntry__closure, Parser_ns_flowMapEntry_closure0, Parser_ns_flowMapExplicitEntry_closure, Parser_ns_flowMapExplicitEntry_closure0, Parser_ns_flowMapImplicitEntry_closure, Parser_ns_flowMapImplicitEntry_closure0, Parser_ns_flowMapImplicitEntry_closure1, Parser_ns_flowMapYamlKeyEntry_closure, Parser_ns_flowMapYamlKeyEntry__closure, Parser_ns_flowMapYamlKeyEntry___closure, Parser_c_ns_flowMapSeparateValue_closure, Parser_c_ns_flowMapSeparateValue__closure, Parser_c_ns_flowMapSeparateValue___closure, Parser_c_ns_flowMapJsonKeyEntry_closure, Parser_c_ns_flowMapJsonKeyEntry__closure, Parser_c_ns_flowMapJsonKeyEntry___closure, Parser_c_ns_flowMapAdjacentValue_closure, Parser_c_ns_flowMapAdjacentValue__closure, Parser_c_ns_flowMapAdjacentValue___closure, Parser_ns_flowPair_closure, Parser_ns_flowPair__closure, Parser_ns_flowPair_closure0, Parser_ns_flowPairEntry_closure, Parser_ns_flowPairEntry_closure0, Parser_ns_flowPairEntry_closure1, Parser_ns_flowPairYamlKeyEntry_closure, Parser_c_ns_flowPairJsonKeyEntry_closure, Parser_ns_s_implicitYamlKey_closure, Parser_c_s_implicitJsonKey_closure, Parser_c_flowJsonContent_closure, Parser_c_flowJsonContent_closure0, Parser_c_flowJsonContent_closure1, Parser_c_flowJsonContent_closure2, Parser_ns_flowContent_closure, Parser_ns_flowContent_closure0, Parser_ns_flowYamlNode_closure, Parser_ns_flowYamlNode_closure0, Parser_ns_flowYamlNode__closure, Parser_ns_flowYamlNode___closure, Parser_c_flowJsonNode_closure, Parser_c_flowJsonNode__closure, Parser_c_flowJsonNode___closure, Parser_ns_flowNode_closure, Parser_ns_flowNode_closure0, Parser_ns_flowNode__closure, Parser_ns_flowNode___closure, Parser_ns_flowNode____closure, Parser_c_b_blockHeader_closure, Parser_l_stripEmpty_closure, Parser_l_stripEmpty__closure, Parser_l_stripEmpty___closure, Parser_l_stripEmpty__closure0, Parser_l_keepEmpty_closure, Parser_l_keepEmpty__closure0, Parser_l_keepEmpty_closure0, Parser_l_keepEmpty__closure, Parser_l_trailComments_closure, Parser_c_l_literal_closure, Parser_l_nb_literalText_closure, Parser_l_nb_literalText__closure, Parser_l_nb_literalText___closure, Parser_l_nb_literalText__closure0, Parser_l_nb_literalText__closure1, Parser_b_nb_literalNext_closure, Parser_l_literalContent_closure, Parser_l_literalContent__closure, Parser_l_literalContent___closure, Parser_c_l_folded_closure, Parser_s_nb_foldedText_closure, Parser_s_nb_foldedText__closure, Parser_s_nb_foldedText__closure0, Parser_l_nb_foldedLines_closure, Parser_l_nb_foldedLines__closure, Parser_s_nb_spacedText_closure, Parser_s_nb_spacedText__closure, Parser_s_nb_spacedText__closure0, Parser_b_l_spaced_closure, Parser_b_l_spaced__closure, Parser_l_nb_spacedLines_closure, Parser_l_nb_spacedLines__closure, Parser_l_nb_sameLines_closure, Parser_l_nb_sameLines__closure, Parser_l_nb_sameLines___closure, Parser_l_nb_sameLines__closure0, Parser_l_nb_sameLines__closure1, Parser_l_nb_diffLines_closure, Parser_l_nb_diffLines__closure, Parser_l_foldedContent_closure, Parser_l_foldedContent__closure, Parser_l_blockSequence_closure, Parser_l_blockSequence__closure, Parser_l_blockSequence___closure, Parser_c_l_blockSeqEntry_closure, Parser_s_l_blockIndented_closure, Parser_s_l_blockIndented__closure, Parser_s_l_blockIndented___closure, Parser_s_l_blockIndented___closure0, Parser_s_l_blockIndented_closure0, Parser_s_l_blockIndented_closure1, Parser_ns_l_compactSequence_closure, Parser_ns_l_compactSequence__closure, Parser_ns_l_compactSequence___closure, Parser_l_blockMapping_closure, Parser_l_blockMapping__closure, Parser_l_blockMapping___closure, Parser_ns_l_blockMapEntry_closure, Parser_ns_l_blockMapEntry_closure0, Parser_c_l_blockMapExplicitEntry_closure, Parser_c_l_blockMapExplicitKey_closure, Parser_l_blockMapExplicitValue_closure, Parser_ns_l_blockMapImplicitEntry_closure, Parser_ns_s_blockMapImplicitKey_closure, Parser_ns_s_blockMapImplicitKey__closure, Parser_ns_s_blockMapImplicitKey__closure0, Parser_c_l_blockMapImplicitValue_closure, Parser_c_l_blockMapImplicitValue__closure, Parser_c_l_blockMapImplicitValue___closure, Parser_c_l_blockMapImplicitValue___closure0, Parser_ns_l_compactMapping_closure, Parser_ns_l_compactMapping__closure, Parser_ns_l_compactMapping___closure, Parser_s_l_blockNode_closure, Parser_s_l_blockNode_closure0, Parser_s_l_flowInBlock_closure, Parser_s_l_blockInBlock_closure, Parser_s_l_blockInBlock_closure0, Parser_s_l_blockScalar_closure, Parser_s_l_blockScalar__closure, Parser_s_l_blockScalar__closure0, Parser_s_l_blockScalar__closure1, Parser_s_l_blockCollection_closure, Parser_s_l_blockCollection__closure, Parser_s_l_blockCollection__closure0, Parser_s_l_blockCollection__closure1, Parser_l_documentSuffix_closure, Parser_c_forbidden_closure, Parser_l_yamlStream_closure, SyntaxError, _Pair, _BlockHeader, _Range, _RangeMap, _validateArgList_closure, Builder, Builder_join_closure, Builder_joinAll_closure, Builder_split_closure, Style, _PosixStyle, _WindowsStyle, _UrlStyle, _ParsedPath, _preventFlashOfUnstyledContent_closure, PolymerDeclaration, PolymerDeclaration_waitingForExtendee_closure, PolymerDeclaration_accumulateInstanceAttributes_closure, PolymerDeclaration_addAttributeDelegates_closure, PolymerDeclaration_installLocalSheets_closure, PolymerDeclaration_cssTextForScope_matcher, PolymerDeclaration__lowerCaseMap_closure, closure20, _closure7, PublishedProperty, Polymer, BoundClosure$i2, Polymer_copyInstanceAttributes_closure, Polymer_copyInstanceAttributes__closure, Polymer_cancelUnbindAll_closure, Polymer__unbindNodeTree_closure, Polymer_notifyPropertyChanges_closure, Polymer_notifyPropertyChanges_closure0, Polymer_observeArrayValue_closure, Polymer_prepareBinding_closure, Polymer_prepareBinding__closure, Polymer__invokeMethod_closure, Polymer_unveilElements_closure, Polymer_unveilElements__closure, _PolymerBinding, PolymerElement, HtmlElement_Polymer, HtmlElement_Polymer_ChangeNotifier, _PropertyValue, _PolymerExpressionsWithEventDelegate, _Job, CustomTag, _initPolymerOptimized_closure, _maybeInvoke_closure, _InitMethodAnnotation, closure1, _closure, _closure0, _closure1, _closure2, _closure3, __closure0, _closure4, __closure, closure21, _classAttributeConverter_closure, _styleAttributeConverter_closure, PolymerExpressions, BoundClosure$3, PolymerExpressions_prepareBinding_closure, PolymerExpressions_prepareInstanceModel_closure, _Binding, _Binding_closure, _Binding__setValue_closure, StreamBinding, StreamBinding_closure, closure4, closure5, closure6, closure7, closure8, closure9, closure10, closure11, closure12, closure13, closure14, closure15, closure16, closure17, closure18, closure19, assign_notAssignable, Scope, ExpressionObserver, Updater, ObserverBuilder, ObserverBuilder_visitInvoke_closure, ObserverBuilder_visitMapLiteral_closure, EmptyObserver, LiteralObserver, MapLiteralObserver, MapLiteralObserver__updateSelf_closure, MapLiteralEntryObserver, IdentifierObserver, IdentifierObserver__updateSelf_closure, IdentifierObserver__updateSelf__closure, UnaryObserver, BinaryObserver, InvokeObserver, InvokeObserver__updateSelf_closure, InvokeObserver__updateSelf_closure0, InvokeObserver__updateSelf__closure0, InvokeObserver__updateSelf_closure1, InvokeObserver__updateSelf__closure, InObserver, InObserver__updateSelf_closure, Comprehension, Method0, EvalException, AstFactory, Expression, EmptyExpression, Literal, MapLiteral, MapLiteralEntry, ParenthesizedExpression, Identifier, UnaryOperator, BinaryOperator, InExpression, Invoke, _hashList_closure, Parser, IndexedValue, EnumerateIterable, EnumerateIterator, Token, Tokenizer, ParseException, Visitor0, RecursiveVisitor, Result, AnchorElement_Polymer, AnchorElement_Polymer_ChangeNotifier, Search, DartdocElement_ChangeNotifier0, SearchResult, lookupSearchResults_closure, lookupSearchResults_closure0, lookupSearchResults_closure1, lookupSearchResults_closure2, _ElementExtension, _AttributeBinding, _OptionValueBinding, _InputBinding, closure3, _closure5, _closure6, _ValueBinding, _CheckedBinding, _CheckedBinding__getAssociatedRadioButtons_closure, _CheckedBinding__getAssociatedRadioButtons_closure0, _SelectBinding, _SelectBinding_valueChanged_delaySetSelectedIndex, _SelectBinding__toInt_closure, _InputElementExtension, _InstanceBindingMap, NodeBindExtension, TemplateInstance, _SelectElementExtension, TemplateBindExtension, TemplateBindExtension_bootstrap__bootstrap, closure2, _TemplateBinding, _parseAttributeBindings_closure, _MustacheTokens, _TemplateIterator, _TemplateIterator_resolve_closure, _TemplateIterator_resolve_valueFn, _TemplateIterator_resolve_closure0, _BoundNodes, _TextExtension, _TextBinding, _TextAreaElementExtension, BindingDelegate, NodeBinding, NodeBinding_closure, TypedefElement, TypedefElement_name_closure, TypedefElement_location_closure, TypedefElement_simpleType_closure, TypedefElement_parameters_closure, TypedefElement_required_closure, TypedefElement_optional_closure, TypedefElement_annotations_closure, UnmodifiableMapView0, hashCodeFor_closure, VariableElement, VariableHeading, Visitor, Visitor_visitSequence_closure, loadYamlStream_closure, YamlException, YamlMap, YamlMap_addAll_closure, YamlMap_forEach_closure, _WrappedHashKey, Closure$2, Closure$1, Closure$0, Closure$7, Closure$21, Closure$5, Closure$4, Closure$6, Closure$3];
}
