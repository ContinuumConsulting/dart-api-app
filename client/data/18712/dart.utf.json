{"dependencies":[{"id":"dart.core","name":"dart:core","children":[{"id":"Object","name":"Object","children":[{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"==1()","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"kind":"method","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","line":"29"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","comment":"\nReturns a string representation of this object.\n","line":"48"},{"id":"noSuchMethod1()","name":"noSuchMethod","children":[{"ref":{"name":"InvocationMirror","refId":"dart.core/InvocationMirror"},"id":"invocation","name":"invocation","kind":"param"}],"kind":"method","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [InvocationMirror].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","line":"60"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"hashCode","name":"hashCode","kind":"property","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"43"},{"ref":{"name":"Type","refId":"dart.core/Type"},"id":"runtimeType","name":"runtimeType","kind":"property","comment":"\nA representation of the runtime type of the object.\n","line":"65"},{"id":"Object0()","name":"Object","kind":"constructor","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"sdk/lib/core/object.dart","kind":"class","comment":"\nEverything in Dart is an [Object].\n","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Iterator","name":"Iterator","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"moveNext0()","name":"moveNext","kind":"method","comment":"\nMoves to the next element. Returns true if [current] contains the next\nelement. Returns false, if no element was left.\n\nIt is safe to invoke [moveNext] even when the iterator is already\npositioned after the last element. In this case [moveNext] has no effect.\n","line":"35"},{"ref":{"name":"E","refId":"dart.core/Iterator/E"},"id":"current","name":"current","kind":"property","comment":"\nReturns the current element.\n\nReturn [:null:] if the iterator has not yet been moved to the first\nelement, or if the iterator has been moved after the last element of the\n[Iterable].\n","line":"44"},{"id":"E","name":"E","kind":"typeparam"}],"uri":"sdk/lib/core/iterator.dart","kind":"class","comment":"\nThe [Iterator] class provides methods to iterate over an object. It\nis transparently used by the for-in construct to test for the end\nof the iteration, and to get the elements.\n\nIf the object iterated over is changed during the iteration, the\nbehavior is unspecified.\n\nThe [Iterator] is initially positioned before the first element. Before\naccessing the first element the iterator must thus be advanced ([moveNext])\nto point to the first element. If there is no element left, then [moveNext]\nreturns false.\n\nA typical usage of an [Iterator] looks as follows:\n\n    var it = obj.iterator;\n    while (it.moveNext()) {\n      use(it.current);\n    }\n","line":"27"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Iterable","name":"Iterable","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"id":"map1()","name":"map","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"51"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns a lazy [Iterable] where each element [:e:] of [this] is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","line":"51"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"where1()","name":"where","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"63"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [f].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","line":"63"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"id":"expand1()","name":"expand","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"75"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nExpand each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable will run through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and will call [f] for each element\nof this every time it's iterated.\n","line":"75"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"contains1()","name":"contains","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","kind":"param"}],"kind":"method","comment":"\nCheck whether the collection contains an element equal to [element].\n","line":"81"},{"returnType":{"name":"void","refId":"void"},"id":"forEach1()","name":"forEach","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"returnType":{"name":"void","refId":"void"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"91"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nApplies the function [f] to each element of this collection.\n","line":"91"},{"id":"reduce2()","name":"reduce","children":[{"id":"initialValue","name":"initialValue","kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"combine","name":"combine","children":[{"id":"Function","name":"Function","children":[{"id":"previousValue","name":"previousValue","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"106"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"106"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param","line":"106"}],"kind":"method","comment":"\nReduce a collection to a single value by iteratively combining each element\nof the collection with an existing value using the provided function.\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of a collection:\n\n  collection.reduce(0, (prev, element) => prev + element);\n","line":"105"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"every1()","name":"every","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"116"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns true if every elements of this collection satisify the\npredicate [f]. Returns false otherwise.\n","line":"116"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"join1()","name":"join","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"separator","name":"separator","kind":"param"}],"kind":"method","comment":"\nConvert each element to a [String] and concatenate the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","line":"130"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"any1()","name":"any","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"152"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns true if one element of this collection satisfies the\npredicate [f]. Returns false otherwise.\n","line":"152"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"toList0()","name":"toList","kind":"method","line":"159"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"toSet0()","name":"toSet","kind":"method","line":"160"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"min1()","name":"min","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"id":"compare","name":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"a","name":"a","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"188"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"b","name":"b","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"188"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nFind the least element in the iterable.\n\nReturns null if the iterable is empty.\nOtherwise returns an element [:x:] of this [Iterable] so that\n[:x:] is not greater than [:y:] (that is, [:compare(x, y) <= 0:]) for all\nother elements [:y:] in the iterable.\n\nThe [compare] function must be a proper [Comparator<T>]. If a function is\nnot provided, [compare] defaults to [Comparable.compare].\n","line":"188"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"max1()","name":"max","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"id":"compare","name":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"a","name":"a","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"211"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"b","name":"b","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"211"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nFind the largest element in the iterable.\n\nReturns null if the iterable is empty.\nOtherwise returns an element [:x:] of this [Iterable] so that\n[:x:] is not smaller than [:y:] (that is, [:compare(x, y) >= 0:]) for all\nother elements [:y:] in the iterable.\n\nThe [compare] function must be a proper [Comparator<T>]. If a function is\nnot provided, [compare] defaults to [Comparable.compare].\n","line":"211"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"take1()","name":"take","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"n","name":"n","kind":"param"}],"kind":"method","comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if [this]\ncontains fewer than [n] elements.\n","line":"234"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"takeWhile1()","name":"takeWhile","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"test","name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"value","name":"value","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"247"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns an [Iterable] that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] will start iterating over the elements of [this].\nWhen the iterator encounters an element [:e:] that does not satisfy [test],\nit discards [:e:] and moves into the finished state. That is, it will not\nask or provide any more elements.\n","line":"247"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"skip1()","name":"skip","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"n","name":"n","kind":"param"}],"kind":"method","comment":"\nReturns an [Iterable] that skips the first [n] elements.\n\nIf [this] has fewer than [n] elements, then the resulting [Iterable] will\nbe empty.\n","line":"257"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"skipWhile1()","name":"skipWhile","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"test","name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"value","name":"value","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"270"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns an [Iterable] that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] will iterate over all elements of [this].\nAs long as the iterator's elements do not satisfy [test] they are\ndiscarded. Once an element satisfies the [test] the iterator stops testing\nand uses every element unconditionally.\n","line":"270"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"firstMatching2()","name":"firstMatching","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"test","name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"value","name":"value","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"325"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isNamed":true,"isOptional":true,"id":"orElse","name":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"Function","name":"Function","uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns the first element that satisfies the given predicate [f].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","line":"325"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"lastMatching2()","name":"lastMatching","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"test","name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"value","name":"value","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"341"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isNamed":true,"isOptional":true,"id":"orElse","name":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"Function","name":"Function","uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns the last element that satisfies the given predicate [f].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is [:null:], a [StateError] is\nthrown.\n","line":"341"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"singleMatching1()","name":"singleMatching","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"test","name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"value","name":"value","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"360"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns the single element that satisfies [f]. If no or more than one\nelement match then a [StateError] is thrown.\n","line":"360"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"elementAt1()","name":"elementAt","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"index","name":"index","kind":"param"}],"kind":"method","comment":"\nReturns the [index]th element.\n\nIf [this] [Iterable] has fewer than [index] elements throws a\n[RangeError].\n\nNote: if [this] does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in [this].\n","line":"387"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"iterator","name":"iterator","kind":"property","comment":"\nReturns an [Iterator] that iterates over this [Iterable] object.\n","line":"39"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"property","comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","line":"168"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isEmpty","name":"isEmpty","kind":"property","comment":"\nReturns true if there is no element in this collection.\n","line":"226"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"first","name":"first","kind":"property","comment":"\nReturns the first element.\n\nIf [this] is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","line":"280"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"last","name":"last","kind":"property","comment":"\nReturns the last element.\n\nIf [this] is empty throws a [StateError].\n","line":"293"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"single","name":"single","kind":"property","comment":"\nReturns the single element in [this].\n\nIf [this] is empty or has more than one element throws a [StateError].\n","line":"310"},{"id":"Iterable0()","name":"Iterable","kind":"constructor","line":"20"},{"id":"Iterable.generate2()","name":"Iterable.generate","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"count","name":"count","kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"generator","name":"generator","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"Function","name":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"index","name":"index","uri":"sdk/lib/core/iterable.dart","kind":"param","line":"32"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"constructor","comment":"\nCreate an [Iterable] that generates its elements dynamically.\n\nThe [Iterators] created by the [Iterable] will count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an [Iterable], [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","line":"32"},{"id":"E","name":"E","kind":"typeparam"}],"uri":"sdk/lib/core/iterable.dart","kind":"class","comment":"\nThe [Iterable] interface allows to get an [Iterator] out of an\n[Iterable] object.\n\nThis interface is used by the for-in construct to iterate over an\n[Iterable] object.\nThe for-in construct takes an [Iterable] object at the right-hand\nside, and calls its [iterator] method to get an [Iterator] on it.\n\nA user-defined class that implements the [Iterable] interface can\nbe used as the right-hand side of a for-in construct.\n","line":"19"}],"uri":"sdk/lib/core/core.dart","kind":"library","line":"5"}],"id":"dart.utf","name":"dart:utf","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"_validCodepoint1()","name":"_validCodepoint","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"codepoint","name":"codepoint","kind":"param"}],"uri":"sdk/lib/utf/utf32.dart","kind":"method","isPrivate":true,"line":"334"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"hasUtf32leBom3()","name":"hasUtf32leBom","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"utf32EncodedBytes","name":"utf32EncodedBytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param"}],"uri":"sdk/lib/utf/utf32.dart","kind":"method","comment":"\nIdentifies whether a List of bytes starts (based on offset) with a\nlittle-endian byte-order marker (BOM).\n","line":"170"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"hasUtf32beBom3()","name":"hasUtf32beBom","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"utf32EncodedBytes","name":"utf32EncodedBytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param"}],"uri":"sdk/lib/utf/utf32.dart","kind":"method","comment":"\nIdentifies whether a List of bytes starts (based on offset) with a\nbig-endian byte-order marker (BOM).\n","line":"158"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"hasUtf32Bom3()","name":"hasUtf32Bom","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"utf32EncodedBytes","name":"utf32EncodedBytes","kind":"param","line":"149"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param","line":"149"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"149"}],"uri":"sdk/lib/utf/utf32.dart","kind":"method","comment":"\nIdentifies whether a List of bytes starts (based on offset) with a\nbyte-order marker (BOM).\n","line":"148"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"encodeUtf32le2()","name":"encodeUtf32le","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"str","name":"str","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"writeBOM","name":"writeBOM","kind":"param"}],"uri":"sdk/lib/utf/utf32.dart","kind":"method","comment":"\nProduce a list of UTF-32LE encoded bytes. By default, this method produces\nUTF-32BE bytes with no BOM.\n","line":"124"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"encodeUtf32be2()","name":"encodeUtf32be","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"str","name":"str","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"writeBOM","name":"writeBOM","kind":"param"}],"uri":"sdk/lib/utf/utf32.dart","kind":"method","comment":"\nProduce a list of UTF-32BE encoded bytes. By default, this method produces\nUTF-32BE bytes with no BOM.\n","line":"100"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"encodeUtf321()","name":"encodeUtf32","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"str","name":"str","kind":"param"}],"uri":"sdk/lib/utf/utf32.dart","kind":"method","comment":"\nProduce a list of UTF-32 encoded bytes. This method prefixes the resulting\nbytes with a big-endian byte-order-marker.\n","line":"93"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"decodeUtf32le5()","name":"decodeUtf32le","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"param","line":"84"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param","line":"84"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"84"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"id":"stripBom","name":"stripBom","kind":"param","line":"84"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"85"}],"uri":"sdk/lib/utf/utf32.dart","kind":"method","comment":"\nProduce a String from a sequence of UTF-32LE encoded bytes. The parameters\nallow an offset into a list of bytes (as int), limiting the length of the\nvalues be decoded and the ability of override the default Unicode\nreplacement character. Set the replacementCharacter to null to throw an\nArgumentError rather than replace the bad value.\n","line":"83"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"decodeUtf32be5()","name":"decodeUtf32be","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"param","line":"71"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param","line":"71"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"71"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"id":"stripBom","name":"stripBom","kind":"param","line":"71"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"72"}],"uri":"sdk/lib/utf/utf32.dart","kind":"method","comment":"\nProduce a String from a sequence of UTF-32BE encoded bytes. The parameters\nallow an offset into a list of bytes (as int), limiting the length of the\nvalues be decoded and the ability of override the default Unicode\nreplacement character. Set the replacementCharacter to null to throw an\nArgumentError rather than replace the bad value.\n","line":"70"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"decodeUtf324()","name":"decodeUtf32","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"59"}],"uri":"sdk/lib/utf/utf32.dart","kind":"method","comment":"\nProduce a String from a sequence of UTF-32 encoded bytes. The parameters\nallow an offset into a list of bytes (as int), limiting the length of the\nvalues be decoded and the ability of override the default Unicode\nreplacement character. Set the replacementCharacter to null to throw an\nArgumentError rather than replace the bad value.\n","line":"58"},{"returnType":{"name":"IterableUtf32Decoder","refId":"dart.utf/IterableUtf32Decoder"},"id":"decodeUtf32leAsIterable5()","name":"decodeUtf32leAsIterable","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param","line":"44"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"44"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"id":"stripBom","name":"stripBom","kind":"param","line":"44"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"45"}],"uri":"sdk/lib/utf/utf32.dart","kind":"method","comment":"\nDecodes the UTF-32LE bytes as an iterable. Thus, the consumer can only convert\nas much of the input as needed. This method strips a leading BOM by default,\nbut can be overridden by setting the optional parameter [stripBom] to false.\nSet the replacementCharacter to null to throw an ArgumentError\nrather than replace the bad value.\n","line":"43"},{"returnType":{"name":"IterableUtf32Decoder","refId":"dart.utf/IterableUtf32Decoder"},"id":"decodeUtf32beAsIterable5()","name":"decodeUtf32beAsIterable","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param","line":"29"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"29"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"id":"stripBom","name":"stripBom","kind":"param","line":"29"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"30"}],"uri":"sdk/lib/utf/utf32.dart","kind":"method","comment":"\nDecodes the UTF-32BE bytes as an iterable. Thus, the consumer can only convert\nas much of the input as needed. This method strips a leading BOM by default,\nbut can be overridden by setting the optional parameter [stripBom] to false.\nSet the replacementCharacter to null to throw an ArgumentError\nrather than replace the bad value.\n","line":"28"},{"returnType":{"name":"IterableUtf32Decoder","refId":"dart.utf/IterableUtf32Decoder"},"id":"decodeUtf32AsIterable4()","name":"decodeUtf32AsIterable","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"16"}],"uri":"sdk/lib/utf/utf32.dart","kind":"method","comment":"\nDecodes the UTF-32 bytes as an iterable. Thus, the consumer can only convert\nas much of the input as needed. Determines the byte order from the BOM,\nor uses big-endian as a default. This method always strips a leading BOM.\nSet the replacementCharacter to null to throw an ArgumentError\nrather than replace the bad value.\n","line":"14"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"_stringToUtf16CodeUnits1()","name":"_stringToUtf16CodeUnits","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"str","name":"str","kind":"param"}],"uri":"sdk/lib/utf/utf16.dart","kind":"method","isPrivate":true,"line":"180"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"hasUtf16leBom3()","name":"hasUtf16leBom","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"utf16EncodedBytes","name":"utf16EncodedBytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param"}],"uri":"sdk/lib/utf/utf16.dart","kind":"method","comment":"\nIdentifies whether a List of bytes starts (based on offset) with a\nlittle-endian byte-order marker (BOM).\n","line":"173"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"hasUtf16beBom3()","name":"hasUtf16beBom","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"utf16EncodedBytes","name":"utf16EncodedBytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param"}],"uri":"sdk/lib/utf/utf16.dart","kind":"method","comment":"\nIdentifies whether a List of bytes starts (based on offset) with a\nbig-endian byte-order marker (BOM).\n","line":"162"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"hasUtf16Bom3()","name":"hasUtf16Bom","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"utf32EncodedBytes","name":"utf32EncodedBytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param"}],"uri":"sdk/lib/utf/utf16.dart","kind":"method","comment":"\nIdentifies whether a List of bytes starts (based on offset) with a\nbyte-order marker (BOM).\n","line":"153"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"encodeUtf16le2()","name":"encodeUtf16le","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"str","name":"str","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"writeBOM","name":"writeBOM","kind":"param"}],"uri":"sdk/lib/utf/utf16.dart","kind":"method","comment":"\nProduce a list of UTF-16LE encoded bytes. By default, this method produces\nUTF-16LE bytes with no BOM.\n","line":"133"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"encodeUtf16be2()","name":"encodeUtf16be","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"str","name":"str","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"id":"writeBOM","name":"writeBOM","kind":"param"}],"uri":"sdk/lib/utf/utf16.dart","kind":"method","comment":"\nProduce a list of UTF-16BE encoded bytes. By default, this method produces\nUTF-16BE bytes with no BOM.\n","line":"113"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"encodeUtf161()","name":"encodeUtf16","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"str","name":"str","kind":"param"}],"uri":"sdk/lib/utf/utf16.dart","kind":"method","comment":"\nProduce a list of UTF-16 encoded bytes. This method prefixes the resulting\nbytes with a big-endian byte-order-marker.\n","line":"106"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"decodeUtf16le5()","name":"decodeUtf16le","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"id":"stripBom","name":"stripBom","kind":"param","line":"94"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"95"}],"uri":"sdk/lib/utf/utf16.dart","kind":"method","comment":"\nProduce a String from a sequence of UTF-16LE encoded bytes. This method\nstrips a leading BOM by default, but can be overridden by setting the\noptional parameter [stripBom] to false. Set the [replacementCodepoint] to\nnull to throw an ArgumentError rather than replace the bad value.\nThe default value for the [replacementCodepoint] is U+FFFD.\n","line":"93"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"decodeUtf16be5()","name":"decodeUtf16be","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"id":"stripBom","name":"stripBom","kind":"param","line":"78"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"79"}],"uri":"sdk/lib/utf/utf16.dart","kind":"method","comment":"\nProduce a String from a sequence of UTF-16BE encoded bytes. This method\nstrips a leading BOM by default, but can be overridden by setting the\noptional parameter [stripBom] to false. Set the [replacementCodepoint] to\nnull to throw an ArgumentError rather than replace the bad value.\nThe default value for the [replacementCodepoint] is U+FFFD.\n","line":"77"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"decodeUtf164()","name":"decodeUtf16","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"62"}],"uri":"sdk/lib/utf/utf16.dart","kind":"method","comment":"\nProduce a String from a sequence of UTF-16 encoded bytes. This method always\nstrips a leading BOM. Set the [replacementCodepoint] to null to throw  an\nArgumentError rather than replace the bad value. The default\nvalue for the [replacementCodepoint] is U+FFFD.\n","line":"61"},{"returnType":{"name":"IterableUtf16Decoder","refId":"dart.utf/IterableUtf16Decoder"},"id":"decodeUtf16leAsIterable5()","name":"decodeUtf16leAsIterable","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"48"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"id":"stripBom","name":"stripBom","kind":"param","line":"48"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"48"}],"uri":"sdk/lib/utf/utf16.dart","kind":"method","comment":"\nDecodes the UTF-16LE bytes as an iterable. Thus, the consumer can only\nconvert as much of the input as needed. This method strips a leading BOM by\ndefault, but can be overridden by setting the optional parameter [stripBom]\nto false. Set the [replacementCodepoint] to null to throw an\nArgumentError rather than replace the bad value. The default\nvalue for the [replacementCodepoint] is U+FFFD.\n","line":"47"},{"returnType":{"name":"IterableUtf16Decoder","refId":"dart.utf/IterableUtf16Decoder"},"id":"decodeUtf16beAsIterable5()","name":"decodeUtf16beAsIterable","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"32"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"id":"stripBom","name":"stripBom","kind":"param","line":"32"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"32"}],"uri":"sdk/lib/utf/utf16.dart","kind":"method","comment":"\nDecodes the UTF-16BE bytes as an iterable. Thus, the consumer can only\nconvert as much of the input as needed. This method strips a leading BOM by\ndefault, but can be overridden by setting the optional parameter [stripBom]\nto false. Set the [replacementCodepoint] to null to throw an\nArgumentError rather than replace the bad value. The default\nvalue for the [replacementCodepoint] is U+FFFD.\n","line":"31"},{"returnType":{"name":"IterableUtf16Decoder","refId":"dart.utf/IterableUtf16Decoder"},"id":"decodeUtf16AsIterable4()","name":"decodeUtf16AsIterable","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"16"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"16"}],"uri":"sdk/lib/utf/utf16.dart","kind":"method","comment":"\nDecodes the UTF-16 bytes as an iterable. Thus, the consumer can only convert\nas much of the input as needed. Determines the byte order from the BOM,\nor uses big-endian as a default. This method always strips a leading BOM.\nSet the [replacementCodepoint] to null to throw an ArgumentError\nrather than replace the bad value. The default value for\n[replacementCodepoint] is U+FFFD.\n","line":"15"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"utf8ToCodepoints4()","name":"utf8ToCodepoints","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"utf8EncodedBytes","name":"utf8EncodedBytes","kind":"param","line":"121"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param","line":"121"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"121"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"122"}],"uri":"sdk/lib/utf/utf8.dart","kind":"method","line":"120"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"codepointsToUtf83()","name":"codepointsToUtf8","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"codepoints","name":"codepoints","kind":"param","line":"71"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param","line":"71"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"71"}],"uri":"sdk/lib/utf/utf8.dart","kind":"method","comment":"\nEncode code points as UTF-8 code units.\n","line":"70"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"_addToEncoding4()","name":"_addToEncoding","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"offset","name":"offset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"bytes","name":"bytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"value","name":"value","kind":"param"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"buffer","name":"buffer","kind":"param"}],"uri":"sdk/lib/utf/utf8.dart","kind":"method","isPrivate":true,"line":"57"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"encodeUtf81()","name":"encodeUtf8","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"str","name":"str","kind":"param"}],"uri":"sdk/lib/utf/utf8.dart","kind":"method","comment":"\nProduce a sequence of UTF-8 encoded bytes from the provided string.\n","line":"54"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"decodeUtf84()","name":"decodeUtf8","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"45"}],"uri":"sdk/lib/utf/utf8.dart","kind":"method","comment":"\nProduce a String from a List of UTF-8 encoded bytes. The parameters\ncan set an offset into a list of bytes (as int), limit the length of the\nvalues to be decoded, and override the default Unicode replacement character.\nSet the replacementCharacter to null to throw an ArgumentError\nrather than replace the bad value.\n","line":"44"},{"returnType":{"name":"IterableUtf8Decoder","refId":"dart.utf/IterableUtf8Decoder"},"id":"decodeUtf8AsIterable4()","name":"decodeUtf8AsIterable","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"32"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"33"}],"uri":"sdk/lib/utf/utf8.dart","kind":"method","comment":"\nDecodes the UTF-8 bytes as an iterable. Thus, the consumer can only convert\nas much of the input as needed. Set the replacementCharacter to null to\nthrow an ArgumentError rather than replace the bad value.\n","line":"31"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"_utf16CodeUnitsToCodepoints4()","name":"_utf16CodeUnitsToCodepoints","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"utf16CodeUnits","name":"utf16CodeUnits","kind":"param","line":"93"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param","line":"93"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"93"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"94"}],"uri":"sdk/lib/utf/utf_core.dart","kind":"method","comment":"\nDecodes the utf16 codeunits to codepoints.\n","isPrivate":true,"line":"92"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"_codepointsToUtf16CodeUnits4()","name":"_codepointsToUtf16CodeUnits","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"codepoints","name":"codepoints","kind":"param","line":"48"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param","line":"49"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"50"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"51"}],"uri":"sdk/lib/utf/utf_core.dart","kind":"method","comment":"\nEncode code points as UTF16 code units.\n","isPrivate":true,"line":"47"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"codepointsToString1()","name":"codepointsToString","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"codepoints","name":"codepoints","kind":"param"}],"uri":"sdk/lib/utf/utf_core.dart","kind":"method","comment":"\nGenerate a string from the provided Unicode codepoints.\n","line":"20"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"stringToCodepoints1()","name":"stringToCodepoints","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"str","name":"str","kind":"param"}],"uri":"sdk/lib/utf/utf_core.dart","kind":"method","comment":"\nProvide a list of Unicode codepoints for a given string.\n","line":"11"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_UTF8_SUBSEQUENT_BYTE_BASE","name":"_UTF8_SUBSEQUENT_BYTE_BASE","uri":"sdk/lib/utf/utf8.dart","kind":"variable","isPrivate":true,"line":"24"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_UTF8_FIRST_BYTE_BOUND_EXCL","name":"_UTF8_FIRST_BYTE_BOUND_EXCL","uri":"sdk/lib/utf/utf8.dart","kind":"variable","isPrivate":true,"line":"23"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_UTF8_FIRST_BYTE_OF_FOUR_MASK","name":"_UTF8_FIRST_BYTE_OF_FOUR_MASK","uri":"sdk/lib/utf/utf8.dart","kind":"variable","isPrivate":true,"line":"21"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_UTF8_FIRST_BYTE_OF_THREE_MASK","name":"_UTF8_FIRST_BYTE_OF_THREE_MASK","uri":"sdk/lib/utf/utf8.dart","kind":"variable","isPrivate":true,"line":"20"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_UTF8_FIRST_BYTE_OF_TWO_MASK","name":"_UTF8_FIRST_BYTE_OF_TWO_MASK","uri":"sdk/lib/utf/utf8.dart","kind":"variable","isPrivate":true,"line":"19"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_UTF8_FIRST_BYTE_OF_SIX_BASE","name":"_UTF8_FIRST_BYTE_OF_SIX_BASE","uri":"sdk/lib/utf/utf8.dart","kind":"variable","isPrivate":true,"line":"17"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_UTF8_FIRST_BYTE_OF_FIVE_BASE","name":"_UTF8_FIRST_BYTE_OF_FIVE_BASE","uri":"sdk/lib/utf/utf8.dart","kind":"variable","isPrivate":true,"line":"16"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_UTF8_FIRST_BYTE_OF_FOUR_BASE","name":"_UTF8_FIRST_BYTE_OF_FOUR_BASE","uri":"sdk/lib/utf/utf8.dart","kind":"variable","isPrivate":true,"line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_UTF8_FIRST_BYTE_OF_THREE_BASE","name":"_UTF8_FIRST_BYTE_OF_THREE_BASE","uri":"sdk/lib/utf/utf8.dart","kind":"variable","isPrivate":true,"line":"14"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_UTF8_FIRST_BYTE_OF_TWO_BASE","name":"_UTF8_FIRST_BYTE_OF_TWO_BASE","uri":"sdk/lib/utf/utf8.dart","kind":"variable","isPrivate":true,"line":"13"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_UTF8_LO_SIX_BIT_MASK","name":"_UTF8_LO_SIX_BIT_MASK","uri":"sdk/lib/utf/utf8.dart","kind":"variable","isPrivate":true,"line":"11"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_UTF8_THREE_BYTE_MAX","name":"_UTF8_THREE_BYTE_MAX","uri":"sdk/lib/utf/utf8.dart","kind":"variable","isPrivate":true,"line":"9"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_UTF8_TWO_BYTE_MAX","name":"_UTF8_TWO_BYTE_MAX","uri":"sdk/lib/utf/utf8.dart","kind":"variable","isPrivate":true,"line":"8"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_UTF8_ONE_BYTE_MAX","name":"_UTF8_ONE_BYTE_MAX","uri":"sdk/lib/utf/utf8.dart","kind":"variable","isPrivate":true,"line":"7"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"UNICODE_UTF16_LO_MASK","name":"UNICODE_UTF16_LO_MASK","uri":"sdk/lib/utf/utf_core.dart","kind":"variable","line":"42"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"UNICODE_UTF16_HI_MASK","name":"UNICODE_UTF16_HI_MASK","uri":"sdk/lib/utf/utf_core.dart","kind":"variable","line":"41"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"UNICODE_UTF16_SURROGATE_UNIT_1_BASE","name":"UNICODE_UTF16_SURROGATE_UNIT_1_BASE","uri":"sdk/lib/utf/utf_core.dart","kind":"variable","line":"40"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"UNICODE_UTF16_SURROGATE_UNIT_0_BASE","name":"UNICODE_UTF16_SURROGATE_UNIT_0_BASE","uri":"sdk/lib/utf/utf_core.dart","kind":"variable","line":"39"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"UNICODE_UTF16_OFFSET","name":"UNICODE_UTF16_OFFSET","uri":"sdk/lib/utf/utf_core.dart","kind":"variable","line":"38"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"UNICODE_UTF16_RESERVED_HI","name":"UNICODE_UTF16_RESERVED_HI","uri":"sdk/lib/utf/utf_core.dart","kind":"variable","line":"37"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"UNICODE_UTF16_RESERVED_LO","name":"UNICODE_UTF16_RESERVED_LO","uri":"sdk/lib/utf/utf_core.dart","kind":"variable","line":"36"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"UNICODE_PLANE_ONE_MAX","name":"UNICODE_PLANE_ONE_MAX","uri":"sdk/lib/utf/utf_core.dart","kind":"variable","line":"35"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"UNICODE_VALID_RANGE_MAX","name":"UNICODE_VALID_RANGE_MAX","uri":"sdk/lib/utf/utf_core.dart","kind":"variable","line":"34"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"UNICODE_BYTE_ONE_MASK","name":"UNICODE_BYTE_ONE_MASK","uri":"sdk/lib/utf/utf_core.dart","kind":"variable","line":"33"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"UNICODE_BYTE_ZERO_MASK","name":"UNICODE_BYTE_ZERO_MASK","uri":"sdk/lib/utf/utf_core.dart","kind":"variable","line":"32"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"UNICODE_UTF_BOM_HI","name":"UNICODE_UTF_BOM_HI","uri":"sdk/lib/utf/utf_core.dart","kind":"variable","line":"30"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"UNICODE_UTF_BOM_LO","name":"UNICODE_UTF_BOM_LO","uri":"sdk/lib/utf/utf_core.dart","kind":"variable","line":"29"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"UNICODE_BOM","name":"UNICODE_BOM","uri":"sdk/lib/utf/utf_core.dart","kind":"variable","line":"28"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","name":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","uri":"sdk/lib/utf/utf_core.dart","kind":"variable","line":"27"},{"superclass":{"name":"Utf32BytesDecoder","refId":"dart.utf/Utf32BytesDecoder"},"id":"Utf32leBytesDecoder","name":"Utf32leBytesDecoder","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"id":"decode0()","name":"decode","kind":"method","line":"321"},{"id":"Utf32leBytesDecoder5()","name":"Utf32leBytesDecoder","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"utf32EncodedBytes","name":"utf32EncodedBytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"311"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"id":"stripBom","name":"stripBom","kind":"param","line":"311"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"312"}],"kind":"constructor","line":"310"}],"uri":"sdk/lib/utf/utf32.dart","kind":"class","comment":"\nConvert UTF-32BE encoded bytes to codepoints by grouping 4 bytes\nto produce the unicode codepoint.\n","line":"309"},{"superclass":{"name":"Utf32BytesDecoder","refId":"dart.utf/Utf32BytesDecoder"},"id":"Utf32beBytesDecoder","name":"Utf32beBytesDecoder","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"id":"decode0()","name":"decode","kind":"method","line":"292"},{"id":"Utf32beBytesDecoder5()","name":"Utf32beBytesDecoder","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"utf32EncodedBytes","name":"utf32EncodedBytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"282"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"id":"stripBom","name":"stripBom","kind":"param","line":"282"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"283"}],"kind":"constructor","line":"281"}],"uri":"sdk/lib/utf/utf32.dart","kind":"class","comment":"\nConvert UTF-32BE encoded bytes to codepoints by grouping 4 bytes\nto produce the unicode codepoint.\n","line":"280"},{"interfaces":[{"name":"_ListRangeIterator","refId":"dart.utf/_ListRangeIterator"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Utf32BytesDecoder","name":"Utf32BytesDecoder","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"decodeRest0()","name":"decodeRest","kind":"method","line":"224"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"moveNext0()","name":"moveNext","kind":"method","line":"235"},{"returnType":{"name":"void","refId":"void"},"id":"backup1()","name":"backup","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"id":"by","name":"by","kind":"param"}],"kind":"method","line":"263"},{"returnType":{"name":"void","refId":"void"},"id":"skip1()","name":"skip","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"id":"count","name":"count","kind":"param"}],"kind":"method","line":"269"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"decode0()","name":"decode","kind":"method","line":"273"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"current","name":"current","kind":"property","line":"233"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"position","name":"position","kind":"property","line":"261"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"remaining","name":"remaining","kind":"property","line":"267"},{"isFinal":true,"ref":{"name":"_ListRangeIterator","refId":"dart.utf/_ListRangeIterator"},"id":"utf32EncodedBytesIterator","name":"utf32EncodedBytesIterator","kind":"variable","line":"199"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"replacementCodepoint","name":"replacementCodepoint","kind":"variable","line":"200"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_current","name":"_current","kind":"variable","isPrivate":true,"line":"201"},{"id":"Utf32BytesDecoder._fromListRangeIterator2()","name":"Utf32BytesDecoder._fromListRangeIterator","children":[{"initializedField":{"name":"utf32EncodedBytesIterator","refId":"dart.utf/Utf32BytesDecoder/utf32EncodedBytesIterator"},"ref":{"name":"_ListRangeIterator","refId":"dart.utf/_ListRangeIterator"},"id":"utf32EncodedBytesIterator","name":"utf32EncodedBytesIterator","kind":"param","line":"204"},{"initializedField":{"name":"replacementCodepoint","refId":"dart.utf/Utf32BytesDecoder/replacementCodepoint"},"ref":{"name":"int","refId":"dart.core/int"},"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"204"}],"kind":"constructor","isPrivate":true,"line":"203"},{"id":"Utf32BytesDecoder4()","name":"Utf32BytesDecoder","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"utf32EncodedBytes","name":"utf32EncodedBytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param","line":"207"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"207"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"208"}],"kind":"constructor","line":"206"}],"uri":"sdk/lib/utf/utf32.dart","kind":"class","comment":"\nAbstrace parent class converts encoded bytes to codepoints.\n","line":"198"},{"superclass":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"IterableUtf32Decoder","name":"IterableUtf32Decoder","children":[{"ref":{"name":"Utf32BytesDecoder","refId":"dart.utf/Utf32BytesDecoder"},"id":"iterator","name":"iterator","kind":"property","line":"192"},{"isFinal":true,"ref":{"name":"Utf32BytesDecoderProvider","refId":"dart.utf/Utf32BytesDecoderProvider"},"id":"codeunitsProvider","name":"codeunitsProvider","kind":"variable","line":"188"},{"id":"IterableUtf32Decoder._1()","name":"IterableUtf32Decoder._","children":[{"initializedField":{"name":"codeunitsProvider","refId":"dart.utf/IterableUtf32Decoder/codeunitsProvider"},"ref":{"name":"Utf32BytesDecoderProvider","refId":"dart.utf/Utf32BytesDecoderProvider"},"id":"codeunitsProvider","name":"codeunitsProvider","kind":"param"}],"kind":"constructor","isPrivate":true,"line":"190"}],"uri":"sdk/lib/utf/utf32.dart","kind":"class","comment":"\nReturn type of [decodeUtf32AsIterable] and variants. The Iterable type\nprovides an iterator on demand and the iterator will only translate bytes\nas requested by the user of the iterator. (Note: results are not cached.)\n","line":"187"},{"returnType":{"name":"Utf32BytesDecoder","refId":"dart.utf/Utf32BytesDecoder"},"id":"Utf32BytesDecoderProvider","name":"Utf32BytesDecoderProvider","uri":"sdk/lib/utf/utf32.dart","kind":"typedef","line":"178"},{"superclass":{"name":"Utf16BytesToCodeUnitsDecoder","refId":"dart.utf/Utf16BytesToCodeUnitsDecoder"},"id":"Utf16leBytesToCodeUnitsDecoder","name":"Utf16leBytesToCodeUnitsDecoder","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"id":"decode0()","name":"decode","kind":"method","line":"330"},{"id":"Utf16leBytesToCodeUnitsDecoder5()","name":"Utf16leBytesToCodeUnitsDecoder","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"utf16EncodedBytes","name":"utf16EncodedBytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param","line":"320"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"320"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"id":"stripBom","name":"stripBom","kind":"param","line":"320"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"321"}],"kind":"constructor","line":"319"}],"uri":"sdk/lib/utf/utf16.dart","kind":"class","comment":"\nConvert UTF-16LE encoded bytes to utf16 code units by grouping 1-2 bytes\nto produce the code unit (0-(2^16)-1).\n","line":"318"},{"superclass":{"name":"Utf16BytesToCodeUnitsDecoder","refId":"dart.utf/Utf16BytesToCodeUnitsDecoder"},"id":"Utf16beBytesToCodeUnitsDecoder","name":"Utf16beBytesToCodeUnitsDecoder","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"id":"decode0()","name":"decode","kind":"method","line":"305"},{"id":"Utf16beBytesToCodeUnitsDecoder5()","name":"Utf16beBytesToCodeUnitsDecoder","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"utf16EncodedBytes","name":"utf16EncodedBytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param","line":"295"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"295"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"id":"stripBom","name":"stripBom","kind":"param","line":"295"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"296"}],"kind":"constructor","line":"294"}],"uri":"sdk/lib/utf/utf16.dart","kind":"class","comment":"\nConvert UTF-16BE encoded bytes to utf16 code units by grouping 1-2 bytes\nto produce the code unit (0-(2^16)-1).\n","line":"293"},{"interfaces":[{"name":"_ListRangeIterator","refId":"dart.utf/_ListRangeIterator"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Utf16BytesToCodeUnitsDecoder","name":"Utf16BytesToCodeUnitsDecoder","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"decodeRest0()","name":"decodeRest","kind":"method","comment":"\nProvides a fast way to decode the rest of the source bytes in a single\ncall. This method trades memory for improved speed in that it potentially\nover-allocates the List containing results.\n","line":"240"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"moveNext0()","name":"moveNext","kind":"method","line":"257"},{"returnType":{"name":"void","refId":"void"},"id":"backup1()","name":"backup","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"id":"by","name":"by","kind":"param"}],"kind":"method","line":"276"},{"returnType":{"name":"void","refId":"void"},"id":"skip1()","name":"skip","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"id":"count","name":"count","kind":"param"}],"kind":"method","line":"282"},{"returnType":{"name":"int","refId":"dart.core/int"},"id":"decode0()","name":"decode","kind":"method","line":"286"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"current","name":"current","kind":"property","line":"255"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"position","name":"position","kind":"property","line":"274"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"remaining","name":"remaining","kind":"property","line":"280"},{"isFinal":true,"ref":{"name":"_ListRangeIterator","refId":"dart.utf/_ListRangeIterator"},"id":"utf16EncodedBytesIterator","name":"utf16EncodedBytesIterator","kind":"variable","line":"210"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"replacementCodepoint","name":"replacementCodepoint","kind":"variable","line":"211"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_current","name":"_current","kind":"variable","isPrivate":true,"line":"212"},{"id":"Utf16BytesToCodeUnitsDecoder._fromListRangeIterator2()","name":"Utf16BytesToCodeUnitsDecoder._fromListRangeIterator","children":[{"initializedField":{"name":"utf16EncodedBytesIterator","refId":"dart.utf/Utf16BytesToCodeUnitsDecoder/utf16EncodedBytesIterator"},"ref":{"name":"_ListRangeIterator","refId":"dart.utf/_ListRangeIterator"},"id":"utf16EncodedBytesIterator","name":"utf16EncodedBytesIterator","kind":"param","line":"215"},{"initializedField":{"name":"replacementCodepoint","refId":"dart.utf/Utf16BytesToCodeUnitsDecoder/replacementCodepoint"},"ref":{"name":"int","refId":"dart.core/int"},"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"215"}],"kind":"constructor","isPrivate":true,"line":"214"},{"id":"Utf16BytesToCodeUnitsDecoder4()","name":"Utf16BytesToCodeUnitsDecoder","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"utf16EncodedBytes","name":"utf16EncodedBytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param","line":"218"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param","line":"218"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"219"}],"kind":"constructor","line":"217"}],"uri":"sdk/lib/utf/utf16.dart","kind":"class","comment":"\nConvert UTF-16 encoded bytes to UTF-16 code units by grouping 1-2 bytes\nto produce the code unit (0-(2^16)-1). Relies on BOM to determine\nendian-ness, and defaults to BE.\n","line":"209"},{"superclass":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"IterableUtf16Decoder","name":"IterableUtf16Decoder","children":[{"ref":{"name":"Utf16CodeUnitDecoder","refId":"dart.utf/Utf16CodeUnitDecoder"},"id":"iterator","name":"iterator","kind":"property","line":"199"},{"isFinal":true,"ref":{"name":"_CodeUnitsProvider","refId":"dart.utf/_CodeUnitsProvider"},"id":"codeunitsProvider","name":"codeunitsProvider","kind":"variable","line":"194"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"replacementCodepoint","name":"replacementCodepoint","kind":"variable","line":"195"},{"id":"IterableUtf16Decoder._2()","name":"IterableUtf16Decoder._","children":[{"initializedField":{"name":"codeunitsProvider","refId":"dart.utf/IterableUtf16Decoder/codeunitsProvider"},"ref":{"name":"_CodeUnitsProvider","refId":"dart.utf/_CodeUnitsProvider"},"id":"codeunitsProvider","name":"codeunitsProvider","kind":"param"},{"initializedField":{"name":"replacementCodepoint","refId":"dart.utf/IterableUtf16Decoder/replacementCodepoint"},"ref":{"name":"int","refId":"dart.core/int"},"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param"}],"kind":"constructor","isPrivate":true,"line":"197"}],"uri":"sdk/lib/utf/utf16.dart","kind":"class","comment":"\nReturn type of [decodeUtf16AsIterable] and variants. The Iterable type\nprovides an iterator on demand and the iterator will only translate bytes\nas requested by the user of the iterator. (Note: results are not cached.)\n","line":"193"},{"returnType":{"name":"_ListRangeIterator","refId":"dart.utf/_ListRangeIterator"},"id":"_CodeUnitsProvider","name":"_CodeUnitsProvider","uri":"sdk/lib/utf/utf16.dart","kind":"typedef","isPrivate":true,"line":"184"},{"interfaces":[{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Utf8Decoder","name":"Utf8Decoder","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"decodeRest0()","name":"decodeRest","kind":"method","comment":"Decode the remaininder of the characters in this decoder\ninto a [List<int>].\n","line":"175"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"moveNext0()","name":"moveNext","kind":"method","line":"192"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"current","name":"current","kind":"property","line":"190"},{"isFinal":true,"ref":{"name":"_ListRangeIterator","refId":"dart.utf/_ListRangeIterator"},"id":"utf8EncodedBytesIterator","name":"utf8EncodedBytesIterator","kind":"variable","line":"156"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"replacementCodepoint","name":"replacementCodepoint","kind":"variable","line":"157"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_current","name":"_current","kind":"variable","isPrivate":true,"line":"158"},{"id":"Utf8Decoder4()","name":"Utf8Decoder","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"utf8EncodedBytes","name":"utf8EncodedBytes","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param"},{"initializedField":{"name":"replacementCodepoint","refId":"dart.utf/Utf8Decoder/replacementCodepoint"},"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"161"}],"kind":"constructor","line":"160"},{"id":"Utf8Decoder._fromListRangeIterator2()","name":"Utf8Decoder._fromListRangeIterator","children":[{"ref":{"name":"_ListRange","refId":"dart.utf/_ListRange"},"id":"source","name":"source","kind":"param"},{"initializedField":{"name":"replacementCodepoint","refId":"dart.utf/Utf8Decoder/replacementCodepoint"},"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"168"}],"kind":"constructor","isPrivate":true,"line":"167"}],"uri":"sdk/lib/utf/utf8.dart","kind":"class","comment":"\nProvides an iterator of Unicode codepoints from UTF-8 encoded bytes. The\nparameters can set an offset into a list of bytes (as int), limit the length\nof the values to be decoded, and override the default Unicode replacement\ncharacter. Set the replacementCharacter to null to throw an\nArgumentError rather than replace the bad value. The return value\nfrom this method can be used as an Iterable (e.g. in a for-loop).\n","line":"155"},{"superclass":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"IterableUtf8Decoder","name":"IterableUtf8Decoder","children":[{"ref":{"name":"Utf8Decoder","refId":"dart.utf/Utf8Decoder"},"id":"iterator","name":"iterator","kind":"property","line":"143"},{"isFinal":true,"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"variable","line":"135"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"offset","name":"offset","kind":"variable","line":"136"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"variable","line":"137"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"replacementCodepoint","name":"replacementCodepoint","kind":"variable","line":"138"},{"id":"IterableUtf8Decoder4()","name":"IterableUtf8Decoder","children":[{"initializedField":{"name":"bytes","refId":"dart.utf/IterableUtf8Decoder/bytes"},"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"bytes","name":"bytes","kind":"param"},{"initializedField":{"name":"offset","refId":"dart.utf/IterableUtf8Decoder/offset"},"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"initializedField":{"name":"length","refId":"dart.utf/IterableUtf8Decoder/length"},"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"null","isOptional":true,"id":"length","name":"length","kind":"param"},{"initializedField":{"name":"replacementCodepoint","refId":"dart.utf/IterableUtf8Decoder/replacementCodepoint"},"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"141"}],"kind":"constructor","line":"140"}],"uri":"sdk/lib/utf/utf8.dart","kind":"class","comment":"\nReturn type of [decodeUtf8AsIterable] and variants. The Iterable type\nprovides an iterator on demand and the iterator will only translate bytes\nas requested by the user of the iterator. (Note: results are not cached.)\n","line":"134"},{"interfaces":[{"name":"_ListRangeIterator","refId":"dart.utf/_ListRangeIterator"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"_ListRangeIteratorImpl","name":"_ListRangeIteratorImpl","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"moveNext0()","name":"moveNext","kind":"method","line":"243"},{"returnType":{"name":"void","refId":"void"},"id":"backup1()","name":"backup","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"id":"by","name":"by","kind":"param"}],"kind":"method","line":"247"},{"returnType":{"name":"void","refId":"void"},"id":"skip1()","name":"skip","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"id":"count","name":"count","kind":"param"}],"kind":"method","line":"253"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"current","name":"current","kind":"property","line":"241"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"position","name":"position","kind":"property","line":"245"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"remaining","name":"remaining","kind":"property","line":"251"},{"isFinal":true,"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"_source","name":"_source","kind":"variable","isPrivate":true,"line":"234"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_offset","name":"_offset","kind":"variable","isPrivate":true,"line":"235"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"_end","name":"_end","kind":"variable","isPrivate":true,"line":"236"},{"id":"_ListRangeIteratorImpl3()","name":"_ListRangeIteratorImpl","children":[{"initializedField":{"name":"_source","refId":"dart.utf/_ListRangeIteratorImpl/_source"},"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"_source","name":"_source","kind":"param","isPrivate":true},{"ref":{"name":"int","refId":"dart.core/int"},"id":"offset","name":"offset","kind":"param"},{"initializedField":{"name":"_end","refId":"dart.utf/_ListRangeIteratorImpl/_end"},"ref":{"name":"int","refId":"dart.core/int"},"id":"_end","name":"_end","kind":"param","isPrivate":true}],"kind":"constructor","line":"238"}],"uri":"sdk/lib/utf/utf_core.dart","kind":"class","isPrivate":true,"line":"233"},{"interfaces":[{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"_ListRangeIterator","name":"_ListRangeIterator","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"moveNext0()","name":"moveNext","kind":"method","line":"225"},{"returnType":{"name":"void","refId":"void"},"id":"backup1()","name":"backup","children":[{"isOptional":true,"id":"by","name":"by","kind":"param"}],"kind":"method","line":"228"},{"returnType":{"name":"void","refId":"void"},"id":"skip1()","name":"skip","children":[{"isOptional":true,"id":"count","name":"count","kind":"param"}],"kind":"method","line":"230"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"current","name":"current","kind":"property","line":"226"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"position","name":"position","kind":"property","line":"227"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"remaining","name":"remaining","kind":"property","line":"229"}],"uri":"sdk/lib/utf/utf_core.dart","kind":"class","comment":"\nThe _ListRangeIterator provides more capabilities than a standard iterator,\nincluding the ability to get the current position, count remaining items,\nand move forward/backward within the iterator.\n","isPrivate":true,"line":"224"},{"superclass":{"name":"Iterable","refId":"dart.core/Iterable"},"id":"_ListRange","name":"_ListRange","children":[{"ref":{"name":"_ListRangeIterator","refId":"dart.utf/_ListRangeIterator"},"id":"iterator","name":"iterator","kind":"property","line":"213"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"property","line":"216"},{"isFinal":true,"ref":{"name":"List","refId":"dart.core/List"},"id":"_source","name":"_source","kind":"variable","isPrivate":true,"line":"194"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"_offset","name":"_offset","kind":"variable","isPrivate":true,"line":"195"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"_length","name":"_length","kind":"variable","isPrivate":true,"line":"196"},{"id":"_ListRange3()","name":"_ListRange","children":[{"id":"source","name":"source","kind":"param"},{"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"isOptional":true,"id":"length","name":"length","kind":"param"}],"kind":"constructor","line":"198"}],"uri":"sdk/lib/utf/utf_core.dart","kind":"class","comment":"\n_ListRange in an internal type used to create a lightweight Interable on a\nrange within a source list. DO NOT MODIFY the underlying list while\niterating over it. The results of doing so are undefined.\n","isPrivate":true,"line":"193"},{"interfaces":[{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Utf16CodeUnitDecoder","name":"Utf16CodeUnitDecoder","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"moveNext0()","name":"moveNext","kind":"method","line":"138"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"iterator","name":"iterator","kind":"property","line":"134"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"current","name":"current","kind":"property","line":"136"},{"isFinal":true,"ref":{"name":"_ListRangeIterator","refId":"dart.utf/_ListRangeIterator"},"id":"utf16CodeUnitIterator","name":"utf16CodeUnitIterator","kind":"variable","line":"120"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"replacementCodepoint","name":"replacementCodepoint","kind":"variable","line":"121"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"_current","name":"_current","kind":"variable","isPrivate":true,"line":"122"},{"id":"Utf16CodeUnitDecoder4()","name":"Utf16CodeUnitDecoder","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"id":"utf16CodeUnits","name":"utf16CodeUnits","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"id":"offset","name":"offset","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"id":"length","name":"length","kind":"param"},{"initializedField":{"name":"replacementCodepoint","refId":"dart.utf/Utf16CodeUnitDecoder/replacementCodepoint"},"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","isOptional":true,"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"125"}],"kind":"constructor","line":"124"},{"id":"Utf16CodeUnitDecoder.fromListRangeIterator2()","name":"Utf16CodeUnitDecoder.fromListRangeIterator","children":[{"initializedField":{"name":"utf16CodeUnitIterator","refId":"dart.utf/Utf16CodeUnitDecoder/utf16CodeUnitIterator"},"ref":{"name":"_ListRangeIterator","refId":"dart.utf/_ListRangeIterator"},"id":"utf16CodeUnitIterator","name":"utf16CodeUnitIterator","kind":"param","line":"131"},{"initializedField":{"name":"replacementCodepoint","refId":"dart.utf/Utf16CodeUnitDecoder/replacementCodepoint"},"ref":{"name":"int","refId":"dart.core/int"},"id":"replacementCodepoint","name":"replacementCodepoint","kind":"param","line":"132"}],"kind":"constructor","line":"130"}],"uri":"sdk/lib/utf/utf_core.dart","kind":"class","comment":"\nAn Iterator<int> of codepoints built on an Iterator of UTF-16 code units.\nThe parameters can override the default Unicode replacement character. Set\nthe replacementCharacter to null to throw an ArgumentError\nrather than replace the bad value.\n","line":"119"}],"uri":"sdk/lib/utf/utf.dart","kind":"library","line":"5"}